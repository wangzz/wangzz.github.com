{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/root.txt","path":"root.txt","modified":1,"renderable":0},{"_id":"source/images/1E66BCE6-EB83-42E8-AA5A-F0E66CD04A65.png","path":"images/1E66BCE6-EB83-42E8-AA5A-F0E66CD04A65.png","modified":1,"renderable":0},{"_id":"source/images/TEAChart-screen-short.gif","path":"images/TEAChart-screen-short.gif","modified":1,"renderable":0},{"_id":"source/images/bird_32_gray.png","path":"images/bird_32_gray.png","modified":1,"renderable":0},{"_id":"source/images/bird_32_gray_fail.png","path":"images/bird_32_gray_fail.png","modified":1,"renderable":0},{"_id":"source/images/cheddar-ios-screen-short.jpeg","path":"images/cheddar-ios-screen-short.jpeg","modified":1,"renderable":0},{"_id":"source/images/D04878A8-B17E-4B76-A8FD-E4938C293B84.png","path":"images/D04878A8-B17E-4B76-A8FD-E4938C293B84.png","modified":1,"renderable":0},{"_id":"source/images/code_bg.png","path":"images/code_bg.png","modified":1,"renderable":0},{"_id":"source/images/dotted-border.png","path":"images/dotted-border.png","modified":1,"renderable":0},{"_id":"source/images/email.png","path":"images/email.png","modified":1,"renderable":0},{"_id":"source/images/noise.png","path":"images/noise.png","modified":1,"renderable":0},{"_id":"source/images/line-tile.png","path":"images/line-tile.png","modified":1,"renderable":0},{"_id":"source/images/rss.png","path":"images/rss.png","modified":1,"renderable":0},{"_id":"source/images/search.png","path":"images/search.png","modified":1,"renderable":0},{"_id":"source/images/top.png","path":"images/top.png","modified":1,"renderable":0},{"_id":"source/images/weixinpay.jpg","path":"images/weixinpay.jpg","modified":1,"renderable":0},{"_id":"source/images/article1/app_american_english.png","path":"images/article1/app_american_english.png","modified":1,"renderable":0},{"_id":"source/images/article1/app_rssread.jpeg","path":"images/article1/app_rssread.jpeg","modified":1,"renderable":0},{"_id":"source/images/article1/SphereView.png","path":"images/article1/SphereView.png","modified":1,"renderable":0},{"_id":"source/images/article1/framework_Vurig-Calendar.png","path":"images/article1/framework_Vurig-Calendar.png","modified":1,"renderable":0},{"_id":"source/images/article1/styles.png","path":"images/article1/styles.png","modified":1,"renderable":0},{"_id":"source/images/article1/view_BCMeshTransformView.jpg","path":"images/article1/view_BCMeshTransformView.jpg","modified":1,"renderable":0},{"_id":"source/images/article1/view_clprogresshud.gif","path":"images/article1/view_clprogresshud.gif","modified":1,"renderable":0},{"_id":"source/images/article4/header.png","path":"images/article4/header.png","modified":1,"renderable":0},{"_id":"source/images/article4/products.png","path":"images/article4/products.png","modified":1,"renderable":0},{"_id":"source/images/article4/public_header.png","path":"images/article4/public_header.png","modified":1,"renderable":0},{"_id":"source/images/article5/app_extensions_container_restrictions.png","path":"images/article5/app_extensions_container_restrictions.png","modified":1,"renderable":0},{"_id":"source/images/article5/app_extensions_lifecycle.png","path":"images/article5/app_extensions_lifecycle.png","modified":1,"renderable":0},{"_id":"source/images/article5/app_group.png","path":"images/article5/app_group.png","modified":1,"renderable":0},{"_id":"source/images/article5/detailed_communication.png","path":"images/article5/detailed_communication.png","modified":1,"renderable":0},{"_id":"source/images/article6/coordinate-system.jpg","path":"images/article6/coordinate-system.jpg","modified":1,"renderable":0},{"_id":"source/images/article6/matrix1.png","path":"images/article6/matrix1.png","modified":1,"renderable":0},{"_id":"source/images/article6/matrix2.png","path":"images/article6/matrix2.png","modified":1,"renderable":0},{"_id":"source/images/article6/matrix3.png","path":"images/article6/matrix3.png","modified":1,"renderable":0},{"_id":"source/images/article6/matrix4.png","path":"images/article6/matrix4.png","modified":1,"renderable":0},{"_id":"source/images/article6/matrix5.png","path":"images/article6/matrix5.png","modified":1,"renderable":0},{"_id":"source/images/article7/PPI.jpg","path":"images/article7/PPI.jpg","modified":1,"renderable":0},{"_id":"source/images/article7/LaunchFile.png","path":"images/article7/LaunchFile.png","modified":1,"renderable":0},{"_id":"source/images/article7/iPhone_display.png","path":"images/article7/iPhone_display.png","modified":1,"renderable":0},{"_id":"source/images/article8/assign_not_weak.png","path":"images/article8/assign_not_weak.png","modified":1,"renderable":0},{"_id":"source/images/article8/assign_weak.png","path":"images/article8/assign_weak.png","modified":1,"renderable":0},{"_id":"source/images/article8/autorelease_error.png","path":"images/article8/autorelease_error.png","modified":1,"renderable":0},{"_id":"source/images/article8/autoreleasepool.png","path":"images/article8/autoreleasepool.png","modified":1,"renderable":0},{"_id":"source/images/article8/block_capturing_self.png","path":"images/article8/block_capturing_self.png","modified":1,"renderable":0},{"_id":"source/images/article8/block_implicitly_retains.png","path":"images/article8/block_implicitly_retains.png","modified":1,"renderable":0},{"_id":"source/images/article8/init_return_type.png","path":"images/article8/init_return_type.png","modified":1,"renderable":0},{"_id":"source/images/article8/init_methods.png","path":"images/article8/init_methods.png","modified":1,"renderable":0},{"_id":"source/images/article8/literal_is_redundant_fix.png","path":"images/article8/literal_is_redundant_fix.png","modified":1,"renderable":0},{"_id":"source/images/article8/marco_arc.png","path":"images/article8/marco_arc.png","modified":1,"renderable":0},{"_id":"source/images/article8/property_follows.png","path":"images/article8/property_follows.png","modified":1,"renderable":0},{"_id":"source/images/article8/property_follows_fix.png","path":"images/article8/property_follows_fix.png","modified":1,"renderable":0},{"_id":"source/images/article8/readonly_error.png","path":"images/article8/readonly_error.png","modified":1,"renderable":0},{"_id":"source/images/article8/release_error.png","path":"images/article8/release_error.png","modified":1,"renderable":0},{"_id":"source/images/article8/retain_cycle.png","path":"images/article8/retain_cycle.png","modified":1,"renderable":0},{"_id":"source/images/article8/retain_cycle_fix.png","path":"images/article8/retain_cycle_fix.png","modified":1,"renderable":0},{"_id":"source/images/article8/retain_strong.png","path":"images/article8/retain_strong.png","modified":1,"renderable":0},{"_id":"source/images/article8/use_arc.png","path":"images/article8/use_arc.png","modified":1,"renderable":0},{"_id":"source/images/article8/weak_property_unpredictably.png","path":"images/article8/weak_property_unpredictably.png","modified":1,"renderable":0},{"_id":"source/images/location/1.jpeg","path":"images/location/1.jpeg","modified":1,"renderable":0},{"_id":"source/images/article8/weak_property_unpredictably_fix.png","path":"images/article8/weak_property_unpredictably_fix.png","modified":1,"renderable":0},{"_id":"source/images/location/3.jpeg","path":"images/location/3.jpeg","modified":1,"renderable":0},{"_id":"source/images/location/5.jpeg","path":"images/location/5.jpeg","modified":1,"renderable":0},{"_id":"source/images/location/6.jpeg","path":"images/location/6.jpeg","modified":1,"renderable":0},{"_id":"source/images/ED4CED7F-41A1-4A2C-9681-79D73342B4B0.png","path":"images/ED4CED7F-41A1-4A2C-9681-79D73342B4B0.png","modified":1,"renderable":0},{"_id":"source/images/article1/app_hack_news.png","path":"images/article1/app_hack_news.png","modified":1,"renderable":0},{"_id":"source/images/article1/framework_JSQMessagesViewController.png","path":"images/article1/framework_JSQMessagesViewController.png","modified":1,"renderable":0},{"_id":"source/images/article1/plugin_image_named.gif","path":"images/article1/plugin_image_named.gif","modified":1,"renderable":0},{"_id":"source/images/article1/view_THContactPicker.gif","path":"images/article1/view_THContactPicker.gif","modified":1,"renderable":0},{"_id":"source/images/article3/default_location.png","path":"images/article3/default_location.png","modified":1,"renderable":0},{"_id":"source/images/article4/aggregate.png","path":"images/article4/aggregate.png","modified":1,"renderable":0},{"_id":"source/images/article4/cocoa_touch_framework.png","path":"images/article4/cocoa_touch_framework.png","modified":1,"renderable":0},{"_id":"source/images/article1/view_parallax_scrollview.gif","path":"images/article1/view_parallax_scrollview.gif","modified":1,"renderable":0},{"_id":"source/images/article4/commonlib_setting.png","path":"images/article4/commonlib_setting.png","modified":1,"renderable":0},{"_id":"source/images/article4/framework_demo_setting.png","path":"images/article4/framework_demo_setting.png","modified":1,"renderable":0},{"_id":"source/images/article4/run_search_path.png","path":"images/article4/run_search_path.png","modified":1,"renderable":0},{"_id":"source/images/article5/wwdc_banner_promo.jpg","path":"images/article5/wwdc_banner_promo.jpg","modified":1,"renderable":0},{"_id":"source/images/article7/iphone5-6.jpg","path":"images/article7/iphone5-6.jpg","modified":1,"renderable":0},{"_id":"source/images/article8/block_implicitly_retains_fix1.png","path":"images/article8/block_implicitly_retains_fix1.png","modified":1,"renderable":0},{"_id":"source/images/article8/block_implicitly_retains_fix2.png","path":"images/article8/block_implicitly_retains_fix2.png","modified":1,"renderable":0},{"_id":"source/images/article8/block_weak.png","path":"images/article8/block_weak.png","modified":1,"renderable":0},{"_id":"source/images/article8/cast_pointer_objective-c.png","path":"images/article8/cast_pointer_objective-c.png","modified":1,"renderable":0},{"_id":"source/images/article8/check.png","path":"images/article8/check.png","modified":1,"renderable":0},{"_id":"source/images/article8/literal_is_redundant.png","path":"images/article8/literal_is_redundant.png","modified":1,"renderable":0},{"_id":"source/images/article8/delete_dealloc.png","path":"images/article8/delete_dealloc.png","modified":1,"renderable":0},{"_id":"source/images/location/2.jpeg","path":"images/location/2.jpeg","modified":1,"renderable":0},{"_id":"source/images/location/10.png","path":"images/location/10.png","modified":1,"renderable":0},{"_id":"source/images/location/4.jpeg","path":"images/location/4.jpeg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"source/images/article1/plugin_cocoapods_menu.png","path":"images/article1/plugin_cocoapods_menu.png","modified":1,"renderable":0},{"_id":"source/images/article1/framework_iOSPlot.png","path":"images/article1/framework_iOSPlot.png","modified":1,"renderable":0},{"_id":"source/images/article1/plugin_xtodo.png","path":"images/article1/plugin_xtodo.png","modified":1,"renderable":0},{"_id":"source/images/article1/view_RTLabel.png","path":"images/article1/view_RTLabel.png","modified":1,"renderable":0},{"_id":"source/images/article8/retain_dealloc.png","path":"images/article8/retain_dealloc.png","modified":1,"renderable":0},{"_id":"source/images/article2/meituan_db_info.png","path":"images/article2/meituan_db_info.png","modified":1,"renderable":0},{"_id":"source/images/article1/framework_IMQuickSearch.gif","path":"images/article1/framework_IMQuickSearch.gif","modified":1,"renderable":0},{"_id":"source/images/article1/plugin_codepilot.png","path":"images/article1/plugin_codepilot.png","modified":1,"renderable":0},{"_id":"source/images/article1/tool_framework.png","path":"images/article1/tool_framework.png","modified":1,"renderable":0},{"_id":"source/images/article1/tool_xtrace.png","path":"images/article1/tool_xtrace.png","modified":1,"renderable":0},{"_id":"source/images/article8/review.png","path":"images/article8/review.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"source/images/article1/cocoapods_menu.png","path":"images/article1/cocoapods_menu.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"source/images/article1/view_PaperFold-for-iOS.png","path":"images/article1/view_PaperFold-for-iOS.png","modified":1,"renderable":0},{"_id":"source/images/article5/extension_debug.png","path":"images/article5/extension_debug.png","modified":1,"renderable":0},{"_id":"source/images/article8/notice.png","path":"images/article8/notice.png","modified":1,"renderable":0},{"_id":"source/images/article8/error.png","path":"images/article8/error.png","modified":1,"renderable":0},{"_id":"source/images/article1/plugin_alcatraz.png","path":"images/article1/plugin_alcatraz.png","modified":1,"renderable":0},{"_id":"source/images/article1/tool_rnconnecter.png","path":"images/article1/tool_rnconnecter.png","modified":1,"renderable":0},{"_id":"source/images/336C83D8-ADEB-49A2-93D6-815A74509434.png","path":"images/336C83D8-ADEB-49A2-93D6-815A74509434.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"source/images/location/7.jpeg","path":"images/location/7.jpeg","modified":1,"renderable":0},{"_id":"source/images/article8/refactor.png","path":"images/article8/refactor.png","modified":1,"renderable":0},{"_id":"source/images/article1/plugin_vvdocumenter.gif","path":"images/article1/plugin_vvdocumenter.gif","modified":1,"renderable":0},{"_id":"source/images/article1/view_remenu.gif","path":"images/article1/view_remenu.gif","modified":1,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"source/images/article1/RESideMenu.gif","path":"images/article1/RESideMenu.gif","modified":1,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"source/images/article1/xcode_plugin_align.gif","path":"images/article1/xcode_plugin_align.gif","modified":1,"renderable":0},{"_id":"source/images/article1/plugin_align.gif","path":"images/article1/plugin_align.gif","modified":1,"renderable":0},{"_id":"source/images/article1/view_DKCircleButton.gif","path":"images/article1/view_DKCircleButton.gif","modified":1,"renderable":0},{"_id":"source/images/article1/view_TwitterCover.gif","path":"images/article1/view_TwitterCover.gif","modified":1,"renderable":0},{"_id":"source/images/article1/tool_xctool.gif","path":"images/article1/tool_xctool.gif","modified":1,"renderable":0},{"_id":"source/images/location/9.png","path":"images/location/9.png","modified":1,"renderable":0},{"_id":"source/images/location/8.jpeg","path":"images/location/8.jpeg","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1569217882000},{"_id":"source/CNAME","hash":"ea9e301af040a3ccae18dc737732ca8e66e9bf9b","modified":1486376750000},{"_id":"themes/next/.all-contributorsrc","hash":"eddf04b4cc9241f5935f41173ee156e4a1ceba22","modified":1569240039000},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1569240039000},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1569240039000},{"_id":"source/root.txt","hash":"c5c6d816d0764e464b95fa9094b875c37d8dd8da","modified":1486376750000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1569240039000},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1569240039000},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1569240039000},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1569240039000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1569240039000},{"_id":"themes/next/README.md","hash":"e0fcd99c0a6db47fe5739df32d6ab39c44c65196","modified":1569240039000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1569240039000},{"_id":"themes/next/gulpfile.js","hash":"94e80ca87826b90744618b00d08bc7e5eefbaef4","modified":1569240039000},{"_id":"themes/next/package.json","hash":"f8355f5b093d7b00c330ef3b6ddd982fd81333de","modified":1569240039000},{"_id":"themes/next/_config.yml","hash":"1a15fe0326cfdabee3c0e963574fce2ab2f53df0","modified":1569240713000},{"_id":"source/_posts/2014-04-02-ru-he-pei-zhi-rang-ni-de-octopressbo-ke-zai-duo-tai-macshang-tong-shi-shi-yong.markdown","hash":"9e54993b56f288d88f9aeda88bb954111f2ccc20","modified":1569244000000},{"_id":"source/_posts/2014-04-25-githubyou-xiu-xiang-mu-ios.markdown","hash":"5bf0bc16c8afcd80fd8d9fd0fc1d647cef754097","modified":1569243767000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1569216731000},{"_id":"source/_posts/2014-04-28-custom-your-octopress-blog.markdown","hash":"31b451ac4164517c2a36d9231b0610e181235cde","modified":1569243631000},{"_id":"source/_posts/2014-03-31-kai-shi-xie-blogla.markdown","hash":"94bdca44949576262c2f6927dc4c50b072b443bb","modified":1486376750000},{"_id":"source/_posts/2014-05-08-xcodeshe-zhi-xiang-zhi-architectureshe-valid-architectures.markdown","hash":"30b65fc76b34ac4d821cde762bdf1532071278df","modified":1569243714000},{"_id":"source/_posts/2014-05-19-jia-mi-ni-de-sqlite.markdown","hash":"4de6208c73177c4fe912f3a4d816c43646912123","modified":1569243682000},{"_id":"source/_posts/2014-05-25-iosmo-ni-qi-custom-locationbei-zhong-zhi-jie-jue-fang-an.markdown","hash":"686e88b364e195b88c96dc3ea4787f1227943288","modified":1569243656000},{"_id":"source/_posts/2014-06-04-iosjin-cheng-jian-tong-xin-zhi-cfmessageport.markdown","hash":"f1be86fc0925f2e743af18e48d1d6a7e13cda92c","modified":1569243579000},{"_id":"source/_posts/2014-06-12-wwdc2014zhi-iosshi-yong-dong-tai-ku.markdown","hash":"2e70c3f65f158096a19d37a2f9f454addd079c62","modified":1569243057000},{"_id":"source/_posts/2014-06-23-wwdc2014zhi-app-extensionsxue-xi-bi-ji.markdown","hash":"02538b9c59a3ac718bd8672a105bef2f95a1bddb","modified":1569243530000},{"_id":"source/_posts/2014-09-28-iphoneping-mu-zhi-shi-dian-jie-xi.markdown","hash":"77b63088c371273508af79b2fd344f8d9c408a13","modified":1569243368000},{"_id":"source/_posts/2014-08-08-ping-mu-xuan-zhuan-xue-xi-bi-ji.markdown","hash":"b1c8d6e9dc2e5cccd54695eaa4312b6c5e7696a5","modified":1569243435000},{"_id":"source/_posts/2015-07-27-ru-he-shou-dong-jie-xi-crashlog.markdown","hash":"4710a8ec25422e169e756a92f30bce80ad91a744","modified":1569420747000},{"_id":"source/_posts/2014-10-13-shou-dong-nei-cun-guan-li-zhuan-arcxiang-mu-shi-zhan.markdown","hash":"314f2edbf5d209329d45475568369b0083a71898","modified":1569243039000},{"_id":"source/_posts/2014-10-16-ios-code-signing-xue-xi-bi-ji.markdown","hash":"ccdc7b36ec8e07f6521b8dca7eef9d09b0f4547e","modified":1569243035000},{"_id":"source/_posts/2015-05-06-chi-ping-xuan-ran-xue-xi-bi-ji.markdown","hash":"2583686644fff15c4a510fbfb81c62acef153213","modified":1569243028000},{"_id":"source/_posts/2015-08-10-ru-he-shou-dong-jie-xi-crashlogzhi-yuan-li-pian.markdown","hash":"42b8c4cd1d9f187ae5111a7632de7508c4385395","modified":1569243012000},{"_id":"source/_posts/2016-03-23-cocoapods-xiang-jie-zhi-geng-xin-pian.markdown","hash":"7b7862186701016a32732770d4a1a4e87cd5e4d1","modified":1569243020000},{"_id":"source/_posts/2017-02-06-wei-shi-yao-objective-c-dui-xiang-cun-chu-zai-dui-shang-er-bu-shi-zhan-shang.markdown","hash":"493d2b7c4ffc93d439039b7466e584748e6134e8","modified":1486377485000},{"_id":"source/_posts/2017-02-13-iosnei-cun-tan-mi.markdown","hash":"33c8b7e5efd2fa351b0e707277062435d00cc54c","modified":1486975197000},{"_id":"source/_posts/博客从-Octopress-迁移到-Hexo-经验总结.md","hash":"e6bac23a1f5cf5be4b52d494283426a66e8a2f4d","modified":1569416449000},{"_id":"source/_posts/2018-11-15-try-catch-yuan-li-pou-xi.markdown","hash":"5b0199b32d6d691b8e0b1ff6aaef6d2bb335d5ee","modified":1568640194000},{"_id":"source/_posts/2018-11-18-bian-chang-can-shu-xue-xi-bi-ji.markdown","hash":"6b23f93143854502dfda8e48086a3d675949f7d9","modified":1568640194000},{"_id":"source/_posts/2019-09-18-ios-ding-wei-quan-xian-na-xie-shi.markdown","hash":"19812812d0b3579e08c306ec52f740735ee2780d","modified":1569217605000},{"_id":"source/images/1E66BCE6-EB83-42E8-AA5A-F0E66CD04A65.png","hash":"8bfa78663984e6d17eb47a06986443067185b514","modified":1486376750000},{"_id":"source/images/TEAChart-screen-short.gif","hash":"1b1b4aef522171fe6d9fe57c4b723becc3054060","modified":1486376750000},{"_id":"source/images/bird_32_gray.png","hash":"55345ff7370047a6b825dd235c9ce201545a0952","modified":1486376750000},{"_id":"source/images/bird_32_gray_fail.png","hash":"0c30b159e4cbb7e8a1ad826be537fc4bd79b0a8f","modified":1486376750000},{"_id":"source/images/cheddar-ios-screen-short.jpeg","hash":"fbfb5dfcbf7dec1c7648a79ca7e17c0cec6bf7af","modified":1486376750000},{"_id":"source/images/D04878A8-B17E-4B76-A8FD-E4938C293B84.png","hash":"abce114f9bbac5f763337b62e2bc6c35fb585401","modified":1486376750000},{"_id":"source/images/code_bg.png","hash":"c34acd76f73ef68d62c031856bd627ffac9378f3","modified":1486376750000},{"_id":"source/images/dotted-border.png","hash":"347784b401d0d38acf5e3b6d06a90346a16a8e8c","modified":1486376750000},{"_id":"source/images/email.png","hash":"2a5d251567fabcad68fa596ebaf1508296524930","modified":1486376750000},{"_id":"source/images/noise.png","hash":"a839ae391fbbb0a1a2b22f8aba1d8ae2a702ef34","modified":1486376750000},{"_id":"source/images/line-tile.png","hash":"a86a5d70fb0024dd295b85ea9058b43c1c5f25d3","modified":1486376750000},{"_id":"source/images/rss.png","hash":"d61fc1ccc66f081002b15532f66e054147d5f2fb","modified":1486376750000},{"_id":"source/images/search.png","hash":"3c0178651f38bff462d4feb927e4f4df87b0f9d0","modified":1486376750000},{"_id":"source/images/top.png","hash":"d57baf406fcbb520eff6e3d2563546e35d5f97b9","modified":1486376750000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"fb80bb52a76dc9100d9524456f73c7a263c85437","modified":1569240039000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1569240039000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"c1df2b2bd1541518407f1fab509bcd200fc9b11b","modified":1569240039000},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1569240039000},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1569240039000},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1569240039000},{"_id":"source/images/weixinpay.jpg","hash":"f9d5940afcdab058e88236570dafbe433a4bc319","modified":1568640194000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"b09c85aa449f46bc025317ed196ec33a877f7c23","modified":1569240039000},{"_id":"themes/next/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1569240039000},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1569240039000},{"_id":"themes/next/.github/stale.yml","hash":"41bf97ee86b8940a0b2e754499ec77fd2b44b717","modified":1569240039000},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1569240039000},{"_id":"themes/next/.github/release-drafter.yml","hash":"f8a0ee0ad08e1493475dbb67b2957cd6afcafac0","modified":1569240039000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1569240039000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"20f8a3d7db6e797a5a3ed8c84837315cb8e09e5b","modified":1569240039000},{"_id":"themes/next/docs/AUTHORS.md","hash":"42119925459b70360567f12dd29f6112d9897e37","modified":1569240039000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"a85ae0f3a9655eea9acd3f6209b72eb002f2058d","modified":1569240039000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"5385246ab4756e3e26ec9fe1f6a6759812177cc4","modified":1569240039000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"1fb2c852fad03b73882069f1ec0659db2e1f2da0","modified":1569240039000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1569240039000},{"_id":"themes/next/docs/MATH.md","hash":"aa90364b1ac069b4f8cfdb48b4879311856224e6","modified":1569240039000},{"_id":"themes/next/languages/en.yml","hash":"d7341b9156df181b233eab15c7827922dd97d2ad","modified":1569416449000},{"_id":"themes/next/languages/de.yml","hash":"3d8920676d89494d7d1c74d4238680151ea6d9df","modified":1569240039000},{"_id":"themes/next/languages/es.yml","hash":"7dc1d7d5ea1078ee3b9bc8e0e8d0f15f52a7a4aa","modified":1569240039000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"a07ca23c38f6e4dddd4b74016b30e88cd3796f75","modified":1569240039000},{"_id":"themes/next/languages/fa.yml","hash":"269b5cb70774485d7dbbcf98eec72c9e84e135b2","modified":1569240039000},{"_id":"themes/next/languages/hu.yml","hash":"e4a5f43fb45acd992def3de3b600aa4df4c95ed7","modified":1569240039000},{"_id":"themes/next/languages/fr.yml","hash":"dfdcfa536c40d06125dff373d042c50e08fcafd8","modified":1569240039000},{"_id":"themes/next/languages/id.yml","hash":"5665dece8435964a27b5061d7283f339f84721f0","modified":1569240039000},{"_id":"themes/next/languages/it.yml","hash":"311597c620059dbb99474f19b2110a4485ecf70b","modified":1569240039000},{"_id":"themes/next/languages/ja.yml","hash":"4f929842b3d6aaed709ea99da679d3910ee184e5","modified":1569240039000},{"_id":"themes/next/languages/ko.yml","hash":"5f5194dd0f5a3c8484e7668bce6fbe23340e531a","modified":1569240039000},{"_id":"themes/next/languages/nl.yml","hash":"561c77ca68e9d51a5ce8c89d3361fdb033c96bba","modified":1569240039000},{"_id":"themes/next/languages/pt.yml","hash":"af9d9b581dca45ab9789ca41d3492883a911e383","modified":1569240039000},{"_id":"themes/next/languages/pt-BR.yml","hash":"13b579911e44a8b213e1860f9a50c341be1bf95e","modified":1569240039000},{"_id":"themes/next/languages/ru.yml","hash":"b485c57dd7b447406dafd0dcfdfc9356266708c9","modified":1569240039000},{"_id":"themes/next/languages/tr.yml","hash":"39caf8a3677fd6dfbd523e73f8482a509e87b603","modified":1569240039000},{"_id":"themes/next/languages/uk.yml","hash":"4cbdbb0ed09487c9b435be21ac35f62182f53283","modified":1569240039000},{"_id":"themes/next/languages/vi.yml","hash":"3c6bb816ee7278afcddac06998c9ebe47ee19aef","modified":1569240039000},{"_id":"themes/next/languages/zh-CN.yml","hash":"e92e1e07a89c9fab27f445f9ec0fa35049fef38c","modified":1569240039000},{"_id":"themes/next/languages/zh-TW.yml","hash":"ae2aa1c6ec1a5a01a3a3bde17bcc3a82f9a35fa7","modified":1569240039000},{"_id":"themes/next/languages/zh-HK.yml","hash":"93d10d6e448c519004b09b11fba980b5036c93af","modified":1569240039000},{"_id":"themes/next/layout/_layout.swig","hash":"fe827c1a57e4af456a796a104a967f61778cc767","modified":1569240039000},{"_id":"themes/next/layout/archive.swig","hash":"72b4e0786668bc61c11eafa12da5d75272b93b61","modified":1569240039000},{"_id":"themes/next/layout/category.swig","hash":"38433a9de15f019267c9130e243e14343fb9bc3d","modified":1569240039000},{"_id":"themes/next/layout/index.swig","hash":"20e776e8863f662c154bb765aaa0a1a22bf78126","modified":1569240039000},{"_id":"themes/next/languages/default.yml","hash":"d7341b9156df181b233eab15c7827922dd97d2ad","modified":1569416449000},{"_id":"themes/next/layout/page.swig","hash":"27c0b961fff9c1afc3671c5678cc9bca76cb51d1","modified":1569240039000},{"_id":"themes/next/layout/post.swig","hash":"0c3b34a6832b8e33574edc17095344f9e0bea74f","modified":1569240039000},{"_id":"themes/next/layout/tag.swig","hash":"153fb65e710a9643634aea4813431e92c11d09fe","modified":1569240039000},{"_id":"source/images/article1/app_american_english.png","hash":"50b0930f197534e97aead5419134ecc81ea58817","modified":1486376750000},{"_id":"source/images/article1/app_rssread.jpeg","hash":"e53740936028fd3776666ceaf87fadc0afeffb0b","modified":1486376750000},{"_id":"source/images/article1/SphereView.png","hash":"fc6b725a83529b5219c1ee9bfb4aa871935b7144","modified":1486376750000},{"_id":"source/images/article1/framework_Vurig-Calendar.png","hash":"32422a5b31c5a7fee0e467c854619c0b6c0485f7","modified":1486376750000},{"_id":"source/images/article1/styles.png","hash":"437d096c24f96a2f7c38641359614a09a3b49bd5","modified":1486376750000},{"_id":"source/images/article1/view_BCMeshTransformView.jpg","hash":"c7f897f8797cefe64e93a316d3f13d96afdd4bd5","modified":1486376750000},{"_id":"source/images/article1/view_clprogresshud.gif","hash":"6bfeebc005382664db5ae65123f7a7f703c3db4c","modified":1486376750000},{"_id":"source/images/article4/header.png","hash":"1f84751c03311421903c50870d51c2e3e8d1db39","modified":1486376750000},{"_id":"source/images/article4/products.png","hash":"53683224faec45c320c1fa7a9beb98aef3f45b0b","modified":1486376750000},{"_id":"source/images/article4/public_header.png","hash":"35e5520f172b2cf4f490ad4f0128626a458b1a43","modified":1486376750000},{"_id":"source/images/article5/app_extensions_container_restrictions.png","hash":"d19dd8c3545ffbce9a3bdf8adf30068a2b76bc06","modified":1486376750000},{"_id":"source/images/article5/app_extensions_lifecycle.png","hash":"7f2eab0aaa9de0f775491558decb73f7b65fb5eb","modified":1486376750000},{"_id":"source/images/article5/app_group.png","hash":"63c207af8b7edbe450deb3c413cf25baa69169c0","modified":1486376750000},{"_id":"source/images/article5/detailed_communication.png","hash":"da83d92d2a6dfd8a5ec99706b7ab928673c2ca20","modified":1486376750000},{"_id":"source/images/article6/coordinate-system.jpg","hash":"96d6d0b482fb661c4c6ccd89a4ab16254ed1f143","modified":1486376750000},{"_id":"source/images/article6/matrix1.png","hash":"a3b3988c3da5e040a3281e16d785e22717f888e4","modified":1486376750000},{"_id":"source/images/article6/matrix2.png","hash":"2008c01ba068965884cfeef7207860f944d2efef","modified":1486376750000},{"_id":"source/images/article6/matrix3.png","hash":"ca1fff913083618b59745de2ee65ff3b8236da8f","modified":1486376750000},{"_id":"source/images/article6/matrix4.png","hash":"db10a423a13d9492dd7ef10ccd037240c5af8294","modified":1486376750000},{"_id":"source/images/article6/matrix5.png","hash":"85050a2d50fb0163df39720dac18a209b89b2c78","modified":1486376750000},{"_id":"source/images/article7/PPI.jpg","hash":"eff4b8ba7bea2927297fe7f4cb818225ddea6197","modified":1486376750000},{"_id":"source/images/article7/LaunchFile.png","hash":"dad041428adf6ed3b3af1ca76a79bcbc64453210","modified":1486376750000},{"_id":"source/images/article7/iPhone_display.png","hash":"504cc33fb1d4e4b5f99356e2af0663220b8ea4c4","modified":1486376750000},{"_id":"source/images/article8/assign_not_weak.png","hash":"52299365f3bb928a825b285dceb0f3a5a295e99f","modified":1486376750000},{"_id":"source/images/article8/assign_weak.png","hash":"fc502b7ba61605e5a1eb0c0fe4f4eb6fb800afe1","modified":1486376750000},{"_id":"source/images/article8/autorelease_error.png","hash":"d257c376a841dbca6b903235301a1c264d935a24","modified":1486376750000},{"_id":"source/images/article8/autoreleasepool.png","hash":"62affeeb7d0a1c4b94cd0d25143e90e0e4c90b78","modified":1486376750000},{"_id":"source/images/article8/block_capturing_self.png","hash":"d7da72126aa4b86b1244b28197287c6b62af9295","modified":1486376750000},{"_id":"source/images/article8/block_implicitly_retains.png","hash":"9bf76afd7ef824a25cca738fbea51c90be267141","modified":1486376750000},{"_id":"source/images/article8/init_return_type.png","hash":"ac05b1b9ce6fdbbe94e491a4c56507a0df68c486","modified":1486376750000},{"_id":"source/images/article8/init_methods.png","hash":"ac05b1b9ce6fdbbe94e491a4c56507a0df68c486","modified":1486376750000},{"_id":"source/images/article8/literal_is_redundant_fix.png","hash":"db43e713f473851346c8d0fb97057658c794a8a3","modified":1486376750000},{"_id":"source/images/article8/marco_arc.png","hash":"f8c82f5bec2ec580ad83e0ff6422dfc33747debb","modified":1486376750000},{"_id":"source/images/article8/property_follows.png","hash":"43157ca0caa660586325d1350a873233d59eccba","modified":1486376750000},{"_id":"source/images/article8/property_follows_fix.png","hash":"69777b955591b2b23b6d75187a2d127c72e12bc0","modified":1486376750000},{"_id":"source/images/article8/readonly_error.png","hash":"9898e92b72f8da4c72ea7f91e45ba581d836ddf0","modified":1486376750000},{"_id":"source/images/article8/release_error.png","hash":"8dd42d200749a8064177318a0c1e6f5e9a4c7b81","modified":1486376750000},{"_id":"source/images/article8/retain_cycle.png","hash":"847c9044a1cd7f9b7ea9246b1eb00d79be1621c9","modified":1486376750000},{"_id":"source/images/article8/retain_cycle_fix.png","hash":"598b158a51bfa1e51eaec98d14a57e8c83846de0","modified":1486376750000},{"_id":"source/images/article8/retain_strong.png","hash":"cd4902a69188f329fa5f5a8bf28cec228ea126d7","modified":1486376750000},{"_id":"source/images/article8/use_arc.png","hash":"c0e5771db52caa9a525d3bcb703d81a3aa65efd7","modified":1486376750000},{"_id":"source/images/article8/weak_property_unpredictably.png","hash":"6e511830247d50439af47c58667d4a77226706b1","modified":1486376750000},{"_id":"source/images/location/1.jpeg","hash":"09006a6e2ef9c1fdc5d9fb8c3b7861ca1b4d8163","modified":1568605173000},{"_id":"source/images/article8/weak_property_unpredictably_fix.png","hash":"9d7888b95157a384b2d540a5a9266b4a86e739bb","modified":1486376750000},{"_id":"source/images/location/3.jpeg","hash":"3f0269efc84b58ccec813a984c5559a1dd3c9a89","modified":1568605173000},{"_id":"source/images/location/5.jpeg","hash":"5e808ce8ff3f0463bbb5cb4926508e6192d7b7d6","modified":1568605173000},{"_id":"source/images/location/6.jpeg","hash":"6fc7da3cd28ff26e045ddf5700a4af16d872a7be","modified":1568605173000},{"_id":"source/images/ED4CED7F-41A1-4A2C-9681-79D73342B4B0.png","hash":"99b7e46eaff89feb32c6a5e4e44553d8f88d9554","modified":1486376750000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"a8ebd4e6a54f376f851208e710e015448d7be9e0","modified":1569240039000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"a7be47294d8d5e04c00bbb6649bc2e1e8f953a55","modified":1569240039000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"8cd942b0e891bfc99521f884249aebf995dfbcd0","modified":1569240039000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"4478f8a445c8dc2c550ca9c507787004fe2daa01","modified":1569240039000},{"_id":"source/images/article1/264374.html","hash":"12f5a0798e0799fd8cfc7643ebeda01342d3b85f","modified":1486376750000},{"_id":"source/images/article1/app_hack_news.png","hash":"c51dd8d5858c3158fa6a5547828d4dfe1bf8abc3","modified":1486376750000},{"_id":"source/images/article1/framework_JSQMessagesViewController.png","hash":"973ca631aa52fcd7b3c47b0211f60684640088e0","modified":1486376750000},{"_id":"source/images/article1/plugin_image_named.gif","hash":"d3a9ad0ad63fff2ddb4637b34f3b29800ba15f4e","modified":1486376750000},{"_id":"source/images/article1/view_THContactPicker.gif","hash":"67c97ccf1ca62bbbe098aea545bb1f8144e067be","modified":1486376750000},{"_id":"source/images/article3/default_location.png","hash":"a88a9db8da8ff5229340a057b7c2db2dec51fa60","modified":1486376750000},{"_id":"source/images/article4/aggregate.png","hash":"74eb2b7a8cc8d6c51ff829625b4e54f975692417","modified":1486376750000},{"_id":"source/images/article4/cocoa_touch_framework.png","hash":"fc3401a3854718a5537f1a7b828c66f3dfad1fb5","modified":1486376750000},{"_id":"source/images/article1/view_parallax_scrollview.gif","hash":"1c04af9a7c306771c25c112a3866ad289a5ea376","modified":1486376750000},{"_id":"source/images/article4/commonlib_setting.png","hash":"3d90f9e69df4bbbd1b232d22976b2a8e8940cb8e","modified":1486376750000},{"_id":"source/images/article4/framework_demo_setting.png","hash":"963742b92e6e9289cfd083d45134626cba50d46c","modified":1486376750000},{"_id":"source/images/article4/run_search_path.png","hash":"a04f72a9a01582f33d3e9512d575c8fae42f3f3e","modified":1486376750000},{"_id":"source/images/article5/wwdc_banner_promo.jpg","hash":"665f3f7ad84d726673a85223895ec973ca50fdf7","modified":1486376750000},{"_id":"source/images/article7/iphone5-6.jpg","hash":"ff1d6f82155a33ee166216ae0c124682133279cb","modified":1486376750000},{"_id":"source/images/article8/block_implicitly_retains_fix1.png","hash":"e23270e53c4473af22c29189823e6af4f13f850f","modified":1486376750000},{"_id":"source/images/article8/block_implicitly_retains_fix2.png","hash":"e23270e53c4473af22c29189823e6af4f13f850f","modified":1486376750000},{"_id":"source/images/article8/block_weak.png","hash":"d2c1cb65a153a50317a9a56dfc7cab7b45ce7a37","modified":1486376750000},{"_id":"source/images/article8/cast_pointer_objective-c.png","hash":"c380fcf49534f9904f847207acabe918860ef5cc","modified":1486376750000},{"_id":"source/images/article8/check.png","hash":"a2bc101d27c4ef9e1d2d632ba28f782021f7325e","modified":1486376750000},{"_id":"source/images/article8/literal_is_redundant.png","hash":"ab7d254ec5d5702e80291cb4041ab449d2378c7e","modified":1486376750000},{"_id":"source/images/article8/delete_dealloc.png","hash":"4117182c46a9f42ca0cdcf8b66fe4c21c1c2aa14","modified":1486376750000},{"_id":"source/images/location/2.jpeg","hash":"a86018b417a01315d40af97f6039c930a539476e","modified":1568605173000},{"_id":"source/images/location/10.png","hash":"f24f2559899e9cdb66795268d23b8608082c96cc","modified":1568640212000},{"_id":"source/images/location/4.jpeg","hash":"2e0c4d18c0c6a64b480b88bb0784888c419078a2","modified":1568605173000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"67d04e3e29a2675d1a9f87d1ae6ea0769e963ff1","modified":1569240039000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1569240039000},{"_id":"themes/next/docs/ru/README.md","hash":"3ceab62de4db29e2257dd5a187c7f8731a207f84","modified":1569240039000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1569240039000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"5ad2c2d0a11443a03b3fd912925bc0dcfbcda88c","modified":1569240039000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"0dfb458370a0ffbbe37c00f53c15e3aa3e79b125","modified":1569240039000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"39e0f42d933818c45858dadaa1f713505945fb20","modified":1569240039000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"c46f3f7496fc422207cc5954e10a2bc972b650aa","modified":1569240039000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"c13546dd70a99a7d2d409cddf5d59f2f4d4d44a4","modified":1569240039000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8ceaad956a1afedf179b2e0b98a67adee9afec08","modified":1569240039000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"a658a72589738e11aefaa3a714b188ffd5aac822","modified":1569240039000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"0981aaf68145a05b02cd10c95d38cbaf97622944","modified":1569240039000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"4ee0607ddcfb2fe0e5868aced6d5814d1ada4405","modified":1569240039000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"1bb927e0560d3d3c95369da461911cced5bd537b","modified":1569240039000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"75e8840082deb1f813e11e65e85422605c2c5ad2","modified":1569416449000},{"_id":"themes/next/layout/_macro/post.swig","hash":"20ef46756b2a8026cc85e7830e5414fe749d1391","modified":1569240039000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"ccef7a8cd704575cf7bfe63c0492fe43592b1a6d","modified":1569240039000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"e0f59221b6010bd3e05d34fac915556f51b8a458","modified":1569240039000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"769a983fe2f77908bfc8590ff37a0d8958b47598","modified":1569240039000},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"4b0c972c44bfa7ab07604280563deb9cc3974657","modified":1569240039000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"58f12810a730ba8e3129c9b0d1a7cce42ac6f2d2","modified":1569240039000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1569240039000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"e08feac6f8904d7f2006e350514a2f07eb9fff44","modified":1569240039000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"105004ddcc7fe9f4fd7ad1007b628ba8c08c1e27","modified":1569240039000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"eee4d26b5c0bb7872a21346151c38612a9b76d0b","modified":1569240039000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"d3448044776dd23abd42b09ef0f26827f95efdf5","modified":1569240039000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1569240039000},{"_id":"themes/next/layout/_third-party/facebook-sdk.swig","hash":"3cf1a1a83ceddef4033a2964150f81b979ced6ff","modified":1569240039000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"32e4fe8dd8b3c40a17314569d1a14bde55251074","modified":1569240039000},{"_id":"themes/next/scripts/events/index.js","hash":"a25690d8b03779f7e318108c8eace9baf6d4283a","modified":1569240039000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"896a581feb9432e58a325ad04d66d6310a12374e","modified":1569240039000},{"_id":"themes/next/scripts/helpers/font.js","hash":"53169e2d04f0c21e68beb07c212be0a6c2a9aaea","modified":1569240039000},{"_id":"themes/next/scripts/helpers/next-inject.js","hash":"33eb6f38de575b973fed237032c34d878594fdc1","modified":1569240039000},{"_id":"themes/next/scripts/helpers/next-js.js","hash":"b28a8ed6d033946acbb5b91f6d8b884857410dd9","modified":1569240039000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1569240039000},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"d512f44195f68b0ff93f3c82afff9161cdf1b7d6","modified":1569240039000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"834599d2b83f06e90f8cf618cddc106fe900ba5c","modified":1569240039000},{"_id":"themes/next/scripts/filters/excerpt.js","hash":"827c3733fa14b018dd1f07e41686c207880e823a","modified":1569240039000},{"_id":"themes/next/scripts/filters/exturl.js","hash":"9c32675f64121ffbe454189b8e418b408f79d9c2","modified":1569240039000},{"_id":"themes/next/scripts/filters/lazyload.js","hash":"51672320fff6b39f56fe6a2881c611afe4e79b8e","modified":1569240039000},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1569240039000},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1569240039000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1569240039000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"8fc05f22b88553bc1d96e0c925799cd97920fc6a","modified":1569240039000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1569240039000},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"60f880c1e11a7df1aee4f2e01d65451fecc0372c","modified":1569240039000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1569240039000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1569240039000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1569240039000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1569240039000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1569240039000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1569240039000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"65f94b115c42d33e6a90b1f8e62075c6d4ac60c1","modified":1569240039000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1569240039000},{"_id":"themes/next/layout/_third-party/vkontakte-api.swig","hash":"e0d012bdbae5545d90143030116114c34219bd37","modified":1569240039000},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1569240039000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1569240039000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1569240039000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1569240039000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1569240039000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1569240039000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1569240039000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1569240039000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1569240039000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1569240039000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1569240039000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1569240039000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1569240039000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1569240039000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1569240039000},{"_id":"themes/next/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1569240039000},{"_id":"themes/next/source/js/bookmark.js","hash":"60cab6771a57c268da331920edd6d7fcd2713d42","modified":1569240039000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1569240039000},{"_id":"themes/next/source/js/local-search.js","hash":"0579159bf994e3726b3ba063e5905f79465fdfb1","modified":1569240039000},{"_id":"themes/next/source/js/next-boot.js","hash":"d1892ad3ca2741534ebaac0476902e05031ab255","modified":1569240039000},{"_id":"themes/next/source/js/motion.js","hash":"d52807a73efc34b1189c096477f348d05debf861","modified":1569240039000},{"_id":"themes/next/source/js/utils.js","hash":"33a76cda8ecad2bea9db13e1f77c6e22fd6452fe","modified":1569240039000},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1569240039000},{"_id":"source/images/article1/plugin_cocoapods_menu.png","hash":"7423d9ce29130d2f86a473472a44da6f2c344563","modified":1486376750000},{"_id":"source/images/article1/framework_iOSPlot.png","hash":"c1eba141a60e1390a89b260193e70eaf67515b83","modified":1486376750000},{"_id":"source/images/article1/plugin_xtodo.png","hash":"94585ebf085fc02f4b69e0f917356d17e7de06f1","modified":1486376750000},{"_id":"source/images/article1/view_RTLabel.png","hash":"8b550457d5e94a1d48eb8c9e3b3e37e5f6dee0f9","modified":1486376750000},{"_id":"source/images/article8/retain_dealloc.png","hash":"02e14d22dbe441b6b942f2f42df3dcdc8da96bd2","modified":1486376750000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1569240039000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1569240039000},{"_id":"source/images/article2/meituan_db_info.png","hash":"f881c3052b7701451bbb4257db70009d0a3bc2e4","modified":1486376750000},{"_id":"source/images/article1/framework_IMQuickSearch.gif","hash":"3dfceee2227427f9c3973c6cd789d2e9142774af","modified":1486376750000},{"_id":"source/images/article1/plugin_codepilot.png","hash":"3e5d52c2ff7e580410106e661598871dd59f3c70","modified":1486376750000},{"_id":"source/images/article1/tool_framework.png","hash":"be01b7069840b4ed698019c86917edf6c6c10206","modified":1486376750000},{"_id":"source/images/article1/tool_xtrace.png","hash":"1d78272fd0458a890ea7bc6157917f3b5e51c051","modified":1486376750000},{"_id":"source/images/article8/review.png","hash":"02e14d22dbe441b6b942f2f42df3dcdc8da96bd2","modified":1486376750000},{"_id":"themes/next/layout/_partials/analytics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1569240039000},{"_id":"themes/next/layout/_partials/analytics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1569240039000},{"_id":"themes/next/layout/_partials/analytics/index.swig","hash":"ac6a3995c1330d2d73300b2427006509d0f8dba5","modified":1569240039000},{"_id":"themes/next/layout/_partials/analytics/firestore.swig","hash":"67e63c25d509f02a6057ee9724f1b6efd647f72f","modified":1569240039000},{"_id":"themes/next/layout/_partials/analytics/lean-analytics.swig","hash":"fb7729b69ef443db1f3f2755506ee998cfe4b973","modified":1569240039000},{"_id":"themes/next/layout/_partials/analytics/tencent-analytics.swig","hash":"493a1ef6c8f475d4dd3156a6ab37690dc75695ea","modified":1569240039000},{"_id":"themes/next/layout/_partials/analytics/tencent-mta.swig","hash":"198813a3f382bda4278fe3759bf0f18a5769bb33","modified":1569240039000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"0edd29b972aceecccb65b3e63d79c01f6639d0c5","modified":1569240039000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"6236a874b93ac1be56fc21df8534a7ae8acffcfc","modified":1569240039000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"e0767e09a632264f189570e95ccf70fb1dad9110","modified":1569240039000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"226ca201e73111b130730736d808ffddcdc8ee51","modified":1569240039000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"9718d372887f4b0ee952da42d10b2f736d0fc6de","modified":1569240039000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"20c8e67d29dfbcd1c72739b00e91f86ef46d7769","modified":1569240039000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"02a4706ce7ed6f6d2f660948a74e9e8cd6dfa1fd","modified":1569240039000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"b68ccb90e2ee42bd98c93fc030a29d38689dd55c","modified":1569240039000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"b654d63d2ed221a8b642223e220392e5172d8f4d","modified":1569240039000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1569240039000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"d3c25d70f0fd76121e4cacb9f8af4ccbe2a3c74d","modified":1569240039000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f05225f7d0ada3853c425899b515056b96ca49bf","modified":1569240039000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"90a0869c6cc351d92fc97bf42fdc6e1bfa6bc513","modified":1569240039000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1569240039000},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"2edfaf1579ea58e15cb5583fb7962dfee9af2257","modified":1569240039000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1569240039000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1569240039000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"4e71b26d91ab750791f3be6035a946eb96ca7b34","modified":1569240039000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"9e44c795565837ba318fd739e42713de365673fd","modified":1569240039000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1569240039000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1569240039000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1569240039000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1569240039000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1569240039000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"9f73476ebcf5cd3b7f55525b3f35dc7e9f01e154","modified":1569240039000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"7fd0459d2f1cfe1254f2c2b8087dc094c8cb0e84","modified":1569240039000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"42aa3022f7739a552c7a55de316d8c0994b2fdc1","modified":1569240039000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"20fcbed44aede1b908bd17d7a0279b03639068b1","modified":1569240039000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1569240039000},{"_id":"themes/next/layout/_third-party/chat/index.swig","hash":"5ab4a8b4306c837d2f8c211a9d7fdaed76fa254d","modified":1569240039000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"86092b31761948486ecb379eb7445f66a158769d","modified":1569240039000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"1130b8bd60f3b84397974486e6586d7f0afaf836","modified":1569240039000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"261c4f1ab42f692279a310943b807ed34516df7c","modified":1569240039000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1569240039000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ab937195168a0e8a911bf5730307f680e6d521e9","modified":1569240039000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f95bc4d7ffaddc3c0df0ef3eeeaac58ff83f560","modified":1569240039000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"bc23c9eb9c06b0b377695f44373c14c5cde1d0e3","modified":1569240039000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"df8413cba22deffca94cf4edd6d9f8d35d2bb58f","modified":1569240039000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"dff6835d0b03ecc2db6919ca27cfb7b63949e6a8","modified":1569240039000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"b9d7a99534e9c2608765b958eae3b5c50f5e4889","modified":1569240039000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"ad7a22ee0f183481c7843ecd881b9f9e8e037e31","modified":1569240039000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1569240039000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1569240039000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"b2fd17688f0433571b37704bc8df798e175e7811","modified":1569240039000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"b710d896fccd34657a70244645470e476a4e069f","modified":1569240039000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1569240039000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"2a5f7c7e507bb354ec05a881bc9a1f4f2f28197c","modified":1569240039000},{"_id":"themes/next/layout/_third-party/tags/index.swig","hash":"83d0a8f71878c6b96a04ba08567b9064de6cce83","modified":1569240039000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"3ac62f5510f22e9d970089bb01f96ba2134ae161","modified":1569240039000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1569240039000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1569240039000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"178c4618b29a1e06221285146071e72e24c40499","modified":1569240039000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"ccfac51bde0063ab7ef88182f8cbc98c210e78c9","modified":1569240039000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1569240039000},{"_id":"themes/next/scripts/filters/comment/facebook-comments-plugin.js","hash":"e3c74b24f3818f2504fd0c7a954adaa6681bb969","modified":1569240039000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"3c4bdc2a682f9889a532e1cb856bc5caeb4208e1","modified":1569240039000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"e34d38aee93558b2c68a7fa6203c2e4806405d62","modified":1569240039000},{"_id":"themes/next/scripts/filters/comment/vkontakte.js","hash":"031337c2e2157628a15a5f4d96fa6e3fcf2733fe","modified":1569240039000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"7597800b6ce2f545baea797d95d1b8c7cf624299","modified":1569240039000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"a54308f934c33b12f6bf28e4ce90e517f38cab57","modified":1569240039000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1569240039000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1569240039000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"d9a2eff154fafff547b3aca7321eee94b450c00a","modified":1569240039000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"14e4bd0bd702c7a7f83bf7d529fade2d0634c2f1","modified":1569240039000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"1e99dfbe7736acfee59d6f54dbd6b33ddfe2fe8a","modified":1569240039000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"59384f63e608b272e4c8679009bbe5e6594fd1b1","modified":1569240039000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"db52bce619bb848189e83b7bfabd1b2a06fd5578","modified":1569240039000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"639b65a486154cf1f70c31f3fff440ce022255c0","modified":1569240039000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"be8471d4a84b773014b46a3650887ab55116ea68","modified":1569240039000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"1e47ffdda23f7f645a2a883a90e2e9d9ddbf9a46","modified":1569240039000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1569240039000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1569240039000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1569240039000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1569240039000},{"_id":"source/images/article1/cocoapods_menu.png","hash":"7423d9ce29130d2f86a473472a44da6f2c344563","modified":1486376750000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1569240039000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1569240039000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1569240039000},{"_id":"source/images/article1/view_PaperFold-for-iOS.png","hash":"05184d23cfca0ef5171339cf409d7b57ca161e27","modified":1486376750000},{"_id":"source/images/article5/extension_debug.png","hash":"d096c975e74bd90cf4d6bbe924169f4c5fe375fe","modified":1486376750000},{"_id":"source/images/article8/notice.png","hash":"c5a31b9319c1e6694dfae61841d44c2f575894e0","modified":1486376750000},{"_id":"source/images/article8/error.png","hash":"8ba6b82583ee1fb9eaf0c53ea36f27e2f3f36f5c","modified":1486376750000},{"_id":"source/images/article1/plugin_alcatraz.png","hash":"d29cef87ce35b038fd91e3351f4e745e2a6420c8","modified":1486376750000},{"_id":"source/images/article1/tool_rnconnecter.png","hash":"4516b825534cf4085fed94f1f7605521d4f0e6da","modified":1486376750000},{"_id":"source/images/336C83D8-ADEB-49A2-93D6-815A74509434.png","hash":"f1d0c4729af4b612055b42ef6abf2e75f5ef9bb0","modified":1486376750000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"23af61f239f9f9ddccb6352ea1af4b24c11d6db3","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"cda066b495a4b6b10c7bc88b2a9b82722156b66b","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"e0db0d9205cd47c48edba81c7397e09ed24783fa","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"060aeb5cff414014f7cdbb61e0ec7855cb0d4b32","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"6c61a120d61dec145c8db3a244cae0e724f6f3ef","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"8e9deaf1e0a27d5bf5f0401bf04f5637df12b6c4","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"0dd11537a4b9a4d2faf3ad5cdae0f0f770a99ccf","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"202ee1f1f8e64d8292df16f40ee176ff4e5d7e71","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"674c32b6e9df4b2294df07c3966bf6555e0fb5ad","modified":1569240039000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"0c60cf489cd083d3a1e3502a240a761b656241c2","modified":1569240039000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"cb25eed35117be256ea7a573fec2cdfb66901dbb","modified":1569240039000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"c4a5c52e30444602237530f379c1707ec864fa9a","modified":1569240039000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"4f7140cc0db08b47a25c4c7aad71047d433051a1","modified":1569240039000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"19a20393d266b21ee44ff07d6fa1e9ebbc39a5d9","modified":1569240039000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"4ddbc8b2dba6fad900c5eca793a31f18ba850f5a","modified":1569240039000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"c42802ecca44d4ea435c26700070a65375edfd7c","modified":1569240039000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"71d75fa309cf5b96d876da536f57c047e57afcff","modified":1569240039000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"87d19a45db10689aae9a09736efd1eb896a35b3d","modified":1569240039000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"3462ffd270f3e218e0a8362262466e79d731f975","modified":1569240039000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"73fe940abb0787a19f505fb614aafe73c8a24f08","modified":1569240039000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"dc2a3217f9b50cf42c4262c9e486281203eaef83","modified":1569240039000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"e859283440617f18f1ad298f7f1218aafa9b39d5","modified":1569240039000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1569240039000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2ab9e0499f241d1b91e2f7722072d23c95104e1f","modified":1569240039000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"ac523812bebb13cde268dc3cde65d0b7c6862e30","modified":1569240039000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44ac3dff65c1bd3fe47feeed8e58aa00c9f2fb7b","modified":1569240039000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"3bcb47b9b9ea671e0a3cba6a821045d3434734cb","modified":1569240039000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"10b4794ba62726fc052c74d786d962ed79d0780b","modified":1569240039000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"54c5e23ec3dcbbc77848ededba76e861cf0f4719","modified":1569240039000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1569240039000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"b22583b7340c2686a46aefeeed086540b08324a3","modified":1569240039000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"eeab294e14abbae231107e1a327e907b25323136","modified":1569240039000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"41b1d10a530913908e026fd991216e234766d148","modified":1569240039000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1569240039000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1569240039000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1569240039000},{"_id":"source/images/location/7.jpeg","hash":"25ad72328a605290c51d036eb41be8b587d7ec1f","modified":1568640212000},{"_id":"source/images/article8/refactor.png","hash":"2aff809b52209e2a17d118e267f046b109429455","modified":1486376750000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"57c03777732a313422b6f6785f330fb9eacf0bf5","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/highlight/copy-code.styl","hash":"2124abd41b69ff152f4bb39e78d8fbce96a45c65","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4efe9174369bfe2125bd167feac18a07271635d6","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"a67dc85f6d158dac20e951ab55988ff7e9e1739b","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"386fce803e5240c2d6860ae53f38ae3aa2e8b680","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"1bfa07d40ceb03b0b69a5752478ca555723f7a15","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"139c17e7d4aa3e1112340a26a270efe58c279f8e","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"4718d17fc4ee30802925890771a032d966133a31","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"dada73ae88f01fab2ab4d2c83eddfc558de2110a","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2ef546b4cfa5038ebb050c592c5135bbeb51af41","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"41ccae779f918e6f9f5f625789a7360f1362454c","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"d055f8420583c7a009818dcdfaada592308bd628","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"db44ef2b99fc33d003010f38e64caad930c08ad0","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"f3108a247549fbdf11071d023add3f1b34ad2b23","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"782cf8847c9aca96f9194fcf1d910509e4073ce6","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"17c3f58fb84453603621d6a718fcc821c8d6bced","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"02e5a998748a67fa885fb06fae242bcf3f2786fb","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"db718eee14347f30ccabaa33bf6f9fbdea8b9462","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"ac2105c5a7f581b1c0f2b59f2c0c3e87a7c28383","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"3abf46c513e92f3f36c14d90f032983b94f36488","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"602a3c3d2785965b23412b5c219dfe74b5fb0844","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"caa9a78993d549117cdc8fa7a76c473a5e7f0f67","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"c60afb603d58cad3ad13e1a16c66832538510063","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2e2a09dddd2a394a635bcefb6207b6cddcb784c7","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"541d6257023915a7caca7540f12cdf283ce025f3","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"469d5e4e188f484abff24eddd5640fa4d4d77ed1","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"5da763d541540586ccd13868a36e3da55549eb22","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"e77986ca3b914348b5c3c6b34c94b49ad53e4b9c","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"0527bc64708a9446dc7bbb2c7e39ab3a61251c26","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"514999bde116ef5cd5f7aedea80059b12a87a1ea","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"78d309e22206a4addda3c393282518dae02250ed","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"a1eed8fe7f97885a9234502a197abf2e90ba22b6","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"754f70161b7e810f582cc4755d177859dcbcfced","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"85b8606763f4177d2f9a11c1909a21ab1ae2011c","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"38ce7d692b8bc6fde02e3271dfd50ad37e107e4e","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"4525465f40f82bd66e5f34e986440c75a9e2d2b2","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"919cc9aaf60b03c2bf00aca3748127f38a2026cf","modified":1569240039000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"8b6481a0ac60007cf3defa3c9d85a6e412c91d6e","modified":1569240039000},{"_id":"source/images/article1/plugin_vvdocumenter.gif","hash":"dfeca8e7acfebf776bea503ccf9f06a250637f3a","modified":1486376750000},{"_id":"source/images/article1/view_remenu.gif","hash":"6e0aaf76876cfdc29375470bea67583a6755bc76","modified":1486376750000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1569240039000},{"_id":"source/images/article1/RESideMenu.gif","hash":"16a22782a110124586befb0719db7b521d00bf16","modified":1486376750000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1569240039000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1569240039000},{"_id":"source/images/article1/xcode_plugin_align.gif","hash":"bfcb63dc0131a750e36e07c0b7634f5bded4948b","modified":1486376750000},{"_id":"source/images/article1/plugin_align.gif","hash":"bfcb63dc0131a750e36e07c0b7634f5bded4948b","modified":1486376750000},{"_id":"source/images/article1/view_DKCircleButton.gif","hash":"83f42cf9798fb91ac1b765d2f3d4d2edb5b79c1c","modified":1486376750000},{"_id":"source/images/article1/view_TwitterCover.gif","hash":"e8aaf897766f5e3c4c51f599e387e5efe06dbd1a","modified":1486376750000},{"_id":"source/images/article1/tool_xctool.gif","hash":"b7ccdcc898daff17ca61542535fae0521fff65fe","modified":1486376750000},{"_id":"source/images/location/9.png","hash":"ce21abeb809bd55299fb5207d193de64562c2812","modified":1568640212000},{"_id":"source/images/location/8.jpeg","hash":"fa5d43437691614b85d4fda2669267a783bb909c","modified":1568640212000},{"_id":"public/2014/03/31/2014-03-31-kai-shi-xie-blogla/index.html","hash":"faedd6245a354906a799e94834700ec7666eb2c4","modified":1569420759618},{"_id":"public/categories/Octopress/index.html","hash":"c8292399fe793e64359125351adb4a9383548482","modified":1569420759618},{"_id":"public/categories/opensource/index.html","hash":"fcaba9edff9f1fa32abc4cae991894eb83589a41","modified":1569420759619},{"_id":"public/categories/Xcode/index.html","hash":"469715817c37b3b982d325d10bde8682e0af2de8","modified":1569420759619},{"_id":"public/categories/Database/index.html","hash":"af861f381fac5f71c31a4c328c567656b653869a","modified":1569420759619},{"_id":"public/categories/iOS/index.html","hash":"375caa7bd552cbd5e260e30c226df3d8c20f834a","modified":1569420759619},{"_id":"public/categories/iOS/page/2/index.html","hash":"3eef10333bb84ff50983dc23f53a36bddbaacd24","modified":1569420759619},{"_id":"public/categories/XcodeSettings/index.html","hash":"cc0caac4cfbd53681eb32edaeee82501b7bdc1e5","modified":1569420759619},{"_id":"public/categories/WWDC2014/index.html","hash":"b286aeed21a5a25d9490c27dd62fa01b71e00674","modified":1569420759619},{"_id":"public/categories/C语言/index.html","hash":"b231512e23285e2fc86e3265c309401cd5a5111f","modified":1569420759619},{"_id":"public/archives/index.html","hash":"d7a15b03c809d718b135d0f902e559bc5320f510","modified":1569420759619},{"_id":"public/archives/page/2/index.html","hash":"fc4314112b451c3617245ac9198e8eaada708b02","modified":1569420759619},{"_id":"public/archives/page/3/index.html","hash":"f1b00894461637b71dc5b9df16394eb62db9cf76","modified":1569420759620},{"_id":"public/archives/2014/index.html","hash":"a211ca09744743c320866e585379db0e209efb84","modified":1569420759620},{"_id":"public/archives/2014/page/2/index.html","hash":"61680fbc82c55cc706e089dc6fcf62d232ac1b49","modified":1569420759620},{"_id":"public/archives/2014/03/index.html","hash":"5b3616c6bf5419c13aa0eca83e7adc1741803f45","modified":1569420759620},{"_id":"public/archives/2014/04/index.html","hash":"3c8799527b46f71148e460dacd0fbce344c53b4b","modified":1569420759620},{"_id":"public/archives/2014/05/index.html","hash":"5cb03fa7a1ffba3283f30cb8569b293ce8c79a51","modified":1569420759620},{"_id":"public/archives/2014/06/index.html","hash":"c9e2acb51246e0152e9892f742aede74d972e649","modified":1569420759620},{"_id":"public/archives/2014/08/index.html","hash":"b0155a897ab48e751ee3011b0ac01886887bf3b6","modified":1569420759620},{"_id":"public/archives/2014/09/index.html","hash":"551dd44f22c9daf0251c992b62fdf1bdf39a7dcd","modified":1569420759620},{"_id":"public/archives/2014/10/index.html","hash":"fd910576af7264fc534544b9bf3a5120a913a7b7","modified":1569420759620},{"_id":"public/archives/2015/index.html","hash":"6d259262dd07269f651f4f61732fc88d985587fa","modified":1569420759620},{"_id":"public/archives/2015/05/index.html","hash":"b321b8c41618cf33f4418671d8cf671705f9698f","modified":1569420759621},{"_id":"public/archives/2015/07/index.html","hash":"6a8e684459398a3bf5415c372d31d709abf4bb8e","modified":1569420759621},{"_id":"public/archives/2015/08/index.html","hash":"01754fdb6112dced6b41894f7d64871d688524bd","modified":1569420759621},{"_id":"public/archives/2016/index.html","hash":"e880e944aadba7f02b5c0e91b42961e3106bc31a","modified":1569420759621},{"_id":"public/archives/2016/03/index.html","hash":"848ec72071222889dc8b3874090ee118c69a093e","modified":1569420759621},{"_id":"public/archives/2017/index.html","hash":"cff498dc829cdbc2c1bb8d10c44696f32d6877ff","modified":1569420759621},{"_id":"public/archives/2017/02/index.html","hash":"b995f8466ea2716892aa12e75327bb9e83c5a5af","modified":1569420759621},{"_id":"public/archives/2018/index.html","hash":"4d17d5af1def59a89a1fd9cd7f6cd18c395469ba","modified":1569420759621},{"_id":"public/archives/2018/11/index.html","hash":"fc4a380c2ad6c15723f003ea043844db64f48d58","modified":1569420759621},{"_id":"public/archives/2019/index.html","hash":"0d05664cbdeddc1e8e7a93999fe8bc5fa206c2aa","modified":1569420759621},{"_id":"public/archives/2019/09/index.html","hash":"f3b4d8f11e3eb6da2df0bb1f5db4fc7504b6dacd","modified":1569420759621},{"_id":"public/tags/octopress/index.html","hash":"a09a0f5cd7c5f42e4d794b6b83f438cdcc9880ea","modified":1569420759621},{"_id":"public/tags/博客/index.html","hash":"b5e6a75da4186ef05bf2d1b33187421420fad596","modified":1569420759621},{"_id":"public/tags/博客自定义/index.html","hash":"e469e1f3be3c4d8cfca14936ab2b197038da0c5d","modified":1569420759621},{"_id":"public/tags/seo/index.html","hash":"72a5cc0c872932683e493d332416703b4d2b9ad7","modified":1569420759621},{"_id":"public/tags/github/index.html","hash":"965c76f00ffed4a43c22e63461e4aeaf28f68423","modified":1569420759621},{"_id":"public/tags/开源/index.html","hash":"5eeaba7ae50f9884b0d4341b640dc0159b718836","modified":1569420759621},{"_id":"public/tags/iOS/index.html","hash":"353973003dff654a6127478526630565affe3f6f","modified":1569420759621},{"_id":"public/tags/iOS/page/2/index.html","hash":"5aca898792ce8b72507f4a9ec6e30e196aa28109","modified":1569420759621},{"_id":"public/tags/Architectures/index.html","hash":"61d438711c0875327198602118db9234aaef2ef3","modified":1569420759621},{"_id":"public/tags/Valid-Architectures/index.html","hash":"d2b11dbb6501858d71364c2f97acfd65e9c28d10","modified":1569420759621},{"_id":"public/tags/Xcode/index.html","hash":"aad0c8e0a811c17c86a531183bbf86bf094dcd45","modified":1569420759621},{"_id":"public/tags/SQLite/index.html","hash":"3c8fd4d21ce3294eeafffce59615c6b79eddca96","modified":1569420759621},{"_id":"public/tags/sqlcipher/index.html","hash":"a7052daf0d1a0b505cc1b95592f48d936e239cbc","modified":1569420759621},{"_id":"public/tags/进程通信/index.html","hash":"28b53a8700063f2d5ba3a9753c9ce7f0b51cd2b1","modified":1569420759621},{"_id":"public/tags/CFMessagePort/index.html","hash":"edc4cb6e750874ae0b8db6aa78b5d756c23e8d44","modified":1569420759622},{"_id":"public/tags/XcodeSettings/index.html","hash":"ecfbfb53c5930f3e7c00876d1c79b9b0ffda3a95","modified":1569420759622},{"_id":"public/tags/iOS-simulato/index.html","hash":"3806c8a3dedf18b0b0648abbfe219c19a269ee9c","modified":1569420759622},{"_id":"public/tags/custom-location/index.html","hash":"c9437f848b49f1c847e910214280574684601872","modified":1569420759622},{"_id":"public/tags/WWDC2014/index.html","hash":"2876827717a82ed02a94883a0733522c6a5f4986","modified":1569420759622},{"_id":"public/tags/framework/index.html","hash":"57642c7215bd4f80a9ed0cdc5e3106780ae3a181","modified":1569420759622},{"_id":"public/tags/动态库/index.html","hash":"73b040f21bc2a07e024e41753a118d7704da1706","modified":1569420759622},{"_id":"public/tags/iPhone/index.html","hash":"a730ac2909278d65879ce73568ebfb8f9190783a","modified":1569420759622},{"_id":"public/tags/iPhone6/index.html","hash":"d942dba43ef2d968b2ad5feace6069e995bb3e40","modified":1569420759622},{"_id":"public/tags/屏幕/index.html","hash":"7151e22c0e6e900304f00f01963d805ae894010b","modified":1569420759622},{"_id":"public/tags/App-Extensions/index.html","hash":"0d5bdc4e2eb784fd9e49ff9ecca027a97d76bc20","modified":1569420759622},{"_id":"public/tags/device-orientation/index.html","hash":"2eaff624eeaa6cc84a8ee039f662519f3b59414b","modified":1569420759622},{"_id":"public/tags/interface-orientation/index.html","hash":"eaa458d0e7143a25abce7c2d94a254fe215917b4","modified":1569420759622},{"_id":"public/tags/屏幕旋转/index.html","hash":"b851335335aba42a18ec1c2447486069cd2a0cfa","modified":1569420759622},{"_id":"public/tags/CrashLog/index.html","hash":"fe3b20bf282e0dc5d642acb0c0be6238d4e4b6ed","modified":1569420759622},{"_id":"public/tags/ARC/index.html","hash":"dca14fa966cf65d92724603d067723279d193e7a","modified":1569420759622},{"_id":"public/tags/MRC/index.html","hash":"11f84eca2c447acd1ae6775932c393d1733d394f","modified":1569420759622},{"_id":"public/tags/手动内存管理/index.html","hash":"a638ad03b10f80105f328f51af60ac71226ecdf7","modified":1569420759622},{"_id":"public/tags/代码签名/index.html","hash":"a836b5ff7f8c8021acc6d6c29ed77cef8bc03831","modified":1569420759622},{"_id":"public/tags/Code-Signing/index.html","hash":"5fefd4f2cbdfb7921fe452621cd6f9096f12a4f7","modified":1569420759622},{"_id":"public/tags/离屏渲染/index.html","hash":"e26998abef7beeb62eefc94e123a58da95502605","modified":1569420759622},{"_id":"public/tags/Objective-C/index.html","hash":"913c965f168b8e553d16c3f43d8dcdef284494da","modified":1569420759622},{"_id":"public/tags/栈对象/index.html","hash":"55a8695369529824da5c43654fd2720258e003e6","modified":1569420759622},{"_id":"public/tags/堆对象/index.html","hash":"9f73b218ace91bb240520548d048141620a3da37","modified":1569420759622},{"_id":"public/tags/CocoaPods/index.html","hash":"fb91db3806ebd91b66013289c3a284c25ea9a360","modified":1569420759622},{"_id":"public/tags/Cocoa/index.html","hash":"1346ce49b3c14e1305fa43f5f14ea49d96399ea1","modified":1569420759623},{"_id":"public/tags/Trunk/index.html","hash":"5afe9a25dec5c8786832915632a2f257345d3a03","modified":1569420759623},{"_id":"public/tags/私有仓库/index.html","hash":"1786d8928c0f6c3fa067187e061fcf8e75001acc","modified":1569420759623},{"_id":"public/tags/Clean-Page/index.html","hash":"378770645a2d15c8dfceeb1ab2cf4b40c1603309","modified":1569420759623},{"_id":"public/tags/Dirty-Page/index.html","hash":"598a4481f1e2781291789eacefd76d60d118889f","modified":1569420759623},{"_id":"public/tags/虚拟内存/index.html","hash":"679690fdfc3c6f433d959309718b00cf11d3e092","modified":1569420759623},{"_id":"public/tags/Octopress/index.html","hash":"4196701d575c349cd1aa0303f7852072d94f4f9d","modified":1569420759623},{"_id":"public/tags/hexo/index.html","hash":"2f7493f7df8f9dd7ed9e2233681118b4fd9e1656","modified":1569420759624},{"_id":"public/tags/setjmp/index.html","hash":"f7372b1b6cef7c900c149ed1afd38f3224e3cb4f","modified":1569420759624},{"_id":"public/tags/longjmp/index.html","hash":"d4db9d78c19acd5975974683e40106cce80776aa","modified":1569420759624},{"_id":"public/tags/异常处理/index.html","hash":"16b7c487dbbf5cd39f12e8ef5747004639f98759","modified":1569420759624},{"_id":"public/tags/try/index.html","hash":"30b529081b5bdfa4e693960a0633245fac5f1a5b","modified":1569420759624},{"_id":"public/tags/catch/index.html","hash":"804152964c4a10e28cb3da4007690fc6e8a6c33b","modified":1569420759624},{"_id":"public/tags/C语言/index.html","hash":"a1a8657aa7d72241b9157a758718aad52b0935bc","modified":1569420759624},{"_id":"public/tags/va-list/index.html","hash":"525b5f7a6b0ca6763d36fad9c5bbadd1d60ba86e","modified":1569420759624},{"_id":"public/tags/va-arg/index.html","hash":"39d11303accd57f19a5be808e8d19c6b8dc3f4dc","modified":1569420759624},{"_id":"public/tags/va-end/index.html","hash":"9639a957e9cf37f3abd7a022f97b7a8bc597ad26","modified":1569420759624},{"_id":"public/tags/变长参数/index.html","hash":"461c0fa58494af40d5b89991166de0d707f6e452","modified":1569420759624},{"_id":"public/tags/printf/index.html","hash":"7aaef3368b5283649cad18f2ba10da3d3b00588f","modified":1569420759624},{"_id":"public/tags/CoreLocation/index.html","hash":"97b624b4efbfb69c37a8c2f28ca058cabd546298","modified":1569420759625},{"_id":"public/tags/定位/index.html","hash":"3da53af3fc53d255a5ec53112e680f80cfdcebad","modified":1569420759625},{"_id":"public/images/article1/264374.html","hash":"b69398f74f4c3579a2936bf9f389a84e5dbdc5b8","modified":1569420759625},{"_id":"public/2019/09/24/博客从-Octopress-迁移到-Hexo-经验总结/index.html","hash":"da7b9c025f2cf0e85fe9653a6b73360d9a5373c2","modified":1569420759625},{"_id":"public/2019/09/18/2019-09-18-ios-ding-wei-quan-xian-na-xie-shi/index.html","hash":"4234e5d28a6f7ecfc0894c1c04134ca9614502cf","modified":1569420759625},{"_id":"public/2018/11/18/2018-11-18-bian-chang-can-shu-xue-xi-bi-ji/index.html","hash":"9ed6019a09bdcb26c274b6866501fadfbd6166b0","modified":1569420759625},{"_id":"public/2018/11/15/2018-11-15-try-catch-yuan-li-pou-xi/index.html","hash":"a046a15893bb19a129762dc2ca4ed349911f55e0","modified":1569420759625},{"_id":"public/2017/02/13/2017-02-13-iosnei-cun-tan-mi/index.html","hash":"035cb0d9b6910eaebd9f49a75e97ab0bd15cab79","modified":1569420759625},{"_id":"public/2017/02/06/2017-02-06-wei-shi-yao-objective-c-dui-xiang-cun-chu-zai-dui-shang-er-bu-shi-zhan-shang/index.html","hash":"b975344386cf8cdead474b520ef2e284cca9b5e6","modified":1569420759625},{"_id":"public/2016/03/23/2016-03-23-cocoapods-xiang-jie-zhi-geng-xin-pian/index.html","hash":"d66162114942fe9a844e0cd9d75961c6000d753e","modified":1569420759625},{"_id":"public/2015/08/10/2015-08-10-ru-he-shou-dong-jie-xi-crashlogzhi-yuan-li-pian/index.html","hash":"8d05c8f77fff3c671fc98765f4396f6a5099135a","modified":1569420759625},{"_id":"public/2015/07/27/2015-07-27-ru-he-shou-dong-jie-xi-crashlog/index.html","hash":"db7a36d8a26234bd8d46f16c3329a36a44fd899a","modified":1569420759625},{"_id":"public/2015/05/06/2015-05-06-chi-ping-xuan-ran-xue-xi-bi-ji/index.html","hash":"af8768ef5664ca8a7006b2bb91da14acfc548c1b","modified":1569420759625},{"_id":"public/2014/10/16/2014-10-16-ios-code-signing-xue-xi-bi-ji/index.html","hash":"1f63c3a6d83a1be5153dbb6a95619eb6011e8f2a","modified":1569420759625},{"_id":"public/2014/10/13/2014-10-13-shou-dong-nei-cun-guan-li-zhuan-arcxiang-mu-shi-zhan/index.html","hash":"89658131d52c9d8dc3bd2c1a36bd42f36b4a6da7","modified":1569420759625},{"_id":"public/2014/09/28/2014-09-28-iphoneping-mu-zhi-shi-dian-jie-xi/index.html","hash":"f5c45d8f6d6b1c6dcef36ea4e586c981a98ff221","modified":1569420759625},{"_id":"public/2014/08/08/2014-08-08-ping-mu-xuan-zhuan-xue-xi-bi-ji/index.html","hash":"5f47f2bf2a3a9f559583a5e63f1f5d771310cca6","modified":1569420759625},{"_id":"public/2014/06/23/2014-06-23-wwdc2014zhi-app-extensionsxue-xi-bi-ji/index.html","hash":"3f086bddb396effa5e752519235abb45f8ea9f0c","modified":1569420759625},{"_id":"public/2014/06/12/2014-06-12-wwdc2014zhi-iosshi-yong-dong-tai-ku/index.html","hash":"e50558265690b49f8e820acbb935fb107a819cd7","modified":1569420759626},{"_id":"public/2014/06/04/2014-06-04-iosjin-cheng-jian-tong-xin-zhi-cfmessageport/index.html","hash":"195a6c9826baa3670ac759be4eb654933f3d6fe9","modified":1569420759626},{"_id":"public/2014/05/25/2014-05-25-iosmo-ni-qi-custom-locationbei-zhong-zhi-jie-jue-fang-an/index.html","hash":"4d153f8e1954582cafd06d72eacd04e9909dedc4","modified":1569420759626},{"_id":"public/2014/05/19/2014-05-19-jia-mi-ni-de-sqlite/index.html","hash":"89badb843eb112051f6143a03f5b914787cbdec4","modified":1569420759626},{"_id":"public/2014/05/09/2014-05-08-xcodeshe-zhi-xiang-zhi-architectureshe-valid-architectures/index.html","hash":"699c66f70edd6e1655ed320c0a6bdc7a93f3dabb","modified":1569420759626},{"_id":"public/2014/04/28/2014-04-28-custom-your-octopress-blog/index.html","hash":"58e2df1595c57b82bbbb0c419ef4c2f61cadfa34","modified":1569420759626},{"_id":"public/2014/04/25/2014-04-25-githubyou-xiu-xiang-mu-ios/index.html","hash":"d13c51ae9545c3b25256aa6d6c19efb0bae9e277","modified":1569420759626},{"_id":"public/2014/04/02/2014-04-02-ru-he-pei-zhi-rang-ni-de-octopressbo-ke-zai-duo-tai-macshang-tong-shi-shi-yong/index.html","hash":"6c0e49fa925482d48ca7db3eb72676026c513ac6","modified":1569420759626},{"_id":"public/index.html","hash":"e27597a5421782beba1a1f829abef771f78cb238","modified":1569420759626},{"_id":"public/page/2/index.html","hash":"e9aa407af3e325a2594d88fb08fdb524675dd7c7","modified":1569420759626},{"_id":"public/page/3/index.html","hash":"653543b2049e96aea8c8206e717035da4d8258e1","modified":1569420759626},{"_id":"public/CNAME","hash":"ea9e301af040a3ccae18dc737732ca8e66e9bf9b","modified":1569420759638},{"_id":"public/root.txt","hash":"c5c6d816d0764e464b95fa9094b875c37d8dd8da","modified":1569420759639},{"_id":"public/images/1E66BCE6-EB83-42E8-AA5A-F0E66CD04A65.png","hash":"8bfa78663984e6d17eb47a06986443067185b514","modified":1569420759640},{"_id":"public/images/TEAChart-screen-short.gif","hash":"1b1b4aef522171fe6d9fe57c4b723becc3054060","modified":1569420759640},{"_id":"public/images/bird_32_gray.png","hash":"55345ff7370047a6b825dd235c9ce201545a0952","modified":1569420759640},{"_id":"public/images/bird_32_gray_fail.png","hash":"0c30b159e4cbb7e8a1ad826be537fc4bd79b0a8f","modified":1569420759640},{"_id":"public/images/D04878A8-B17E-4B76-A8FD-E4938C293B84.png","hash":"abce114f9bbac5f763337b62e2bc6c35fb585401","modified":1569420759640},{"_id":"public/images/cheddar-ios-screen-short.jpeg","hash":"fbfb5dfcbf7dec1c7648a79ca7e17c0cec6bf7af","modified":1569420759640},{"_id":"public/images/code_bg.png","hash":"c34acd76f73ef68d62c031856bd627ffac9378f3","modified":1569420759640},{"_id":"public/images/dotted-border.png","hash":"347784b401d0d38acf5e3b6d06a90346a16a8e8c","modified":1569420759640},{"_id":"public/images/email.png","hash":"2a5d251567fabcad68fa596ebaf1508296524930","modified":1569420759640},{"_id":"public/images/noise.png","hash":"a839ae391fbbb0a1a2b22f8aba1d8ae2a702ef34","modified":1569420759640},{"_id":"public/images/line-tile.png","hash":"a86a5d70fb0024dd295b85ea9058b43c1c5f25d3","modified":1569420759640},{"_id":"public/images/rss.png","hash":"d61fc1ccc66f081002b15532f66e054147d5f2fb","modified":1569420759640},{"_id":"public/images/search.png","hash":"3c0178651f38bff462d4feb927e4f4df87b0f9d0","modified":1569420759640},{"_id":"public/images/top.png","hash":"d57baf406fcbb520eff6e3d2563546e35d5f97b9","modified":1569420759640},{"_id":"public/images/weixinpay.jpg","hash":"f9d5940afcdab058e88236570dafbe433a4bc319","modified":1569420759640},{"_id":"public/images/article1/app_american_english.png","hash":"50b0930f197534e97aead5419134ecc81ea58817","modified":1569420759640},{"_id":"public/images/article1/app_rssread.jpeg","hash":"e53740936028fd3776666ceaf87fadc0afeffb0b","modified":1569420759640},{"_id":"public/images/article1/SphereView.png","hash":"fc6b725a83529b5219c1ee9bfb4aa871935b7144","modified":1569420759640},{"_id":"public/images/article1/framework_Vurig-Calendar.png","hash":"32422a5b31c5a7fee0e467c854619c0b6c0485f7","modified":1569420759640},{"_id":"public/images/article1/styles.png","hash":"437d096c24f96a2f7c38641359614a09a3b49bd5","modified":1569420759640},{"_id":"public/images/article1/view_clprogresshud.gif","hash":"6bfeebc005382664db5ae65123f7a7f703c3db4c","modified":1569420759640},{"_id":"public/images/article1/view_BCMeshTransformView.jpg","hash":"c7f897f8797cefe64e93a316d3f13d96afdd4bd5","modified":1569420759640},{"_id":"public/images/article4/header.png","hash":"1f84751c03311421903c50870d51c2e3e8d1db39","modified":1569420759640},{"_id":"public/images/article4/products.png","hash":"53683224faec45c320c1fa7a9beb98aef3f45b0b","modified":1569420759640},{"_id":"public/images/article4/public_header.png","hash":"35e5520f172b2cf4f490ad4f0128626a458b1a43","modified":1569420759640},{"_id":"public/images/article5/app_extensions_container_restrictions.png","hash":"d19dd8c3545ffbce9a3bdf8adf30068a2b76bc06","modified":1569420759640},{"_id":"public/images/article5/app_extensions_lifecycle.png","hash":"7f2eab0aaa9de0f775491558decb73f7b65fb5eb","modified":1569420759640},{"_id":"public/images/article5/detailed_communication.png","hash":"da83d92d2a6dfd8a5ec99706b7ab928673c2ca20","modified":1569420759641},{"_id":"public/images/article5/app_group.png","hash":"63c207af8b7edbe450deb3c413cf25baa69169c0","modified":1569420759641},{"_id":"public/images/article6/coordinate-system.jpg","hash":"96d6d0b482fb661c4c6ccd89a4ab16254ed1f143","modified":1569420759641},{"_id":"public/images/article6/matrix1.png","hash":"a3b3988c3da5e040a3281e16d785e22717f888e4","modified":1569420759641},{"_id":"public/images/article6/matrix2.png","hash":"2008c01ba068965884cfeef7207860f944d2efef","modified":1569420759641},{"_id":"public/images/article6/matrix3.png","hash":"ca1fff913083618b59745de2ee65ff3b8236da8f","modified":1569420759641},{"_id":"public/images/article6/matrix4.png","hash":"db10a423a13d9492dd7ef10ccd037240c5af8294","modified":1569420759641},{"_id":"public/images/article6/matrix5.png","hash":"85050a2d50fb0163df39720dac18a209b89b2c78","modified":1569420759641},{"_id":"public/images/article7/PPI.jpg","hash":"eff4b8ba7bea2927297fe7f4cb818225ddea6197","modified":1569420759641},{"_id":"public/images/article7/LaunchFile.png","hash":"dad041428adf6ed3b3af1ca76a79bcbc64453210","modified":1569420759641},{"_id":"public/images/article7/iPhone_display.png","hash":"504cc33fb1d4e4b5f99356e2af0663220b8ea4c4","modified":1569420759641},{"_id":"public/images/article8/assign_not_weak.png","hash":"52299365f3bb928a825b285dceb0f3a5a295e99f","modified":1569420759641},{"_id":"public/images/article8/assign_weak.png","hash":"fc502b7ba61605e5a1eb0c0fe4f4eb6fb800afe1","modified":1569420759641},{"_id":"public/images/article8/autorelease_error.png","hash":"d257c376a841dbca6b903235301a1c264d935a24","modified":1569420759641},{"_id":"public/images/article8/block_capturing_self.png","hash":"d7da72126aa4b86b1244b28197287c6b62af9295","modified":1569420759641},{"_id":"public/images/article8/autoreleasepool.png","hash":"62affeeb7d0a1c4b94cd0d25143e90e0e4c90b78","modified":1569420759641},{"_id":"public/images/article8/block_implicitly_retains.png","hash":"9bf76afd7ef824a25cca738fbea51c90be267141","modified":1569420759641},{"_id":"public/images/article8/init_return_type.png","hash":"ac05b1b9ce6fdbbe94e491a4c56507a0df68c486","modified":1569420759641},{"_id":"public/images/article8/init_methods.png","hash":"ac05b1b9ce6fdbbe94e491a4c56507a0df68c486","modified":1569420759641},{"_id":"public/images/article8/literal_is_redundant_fix.png","hash":"db43e713f473851346c8d0fb97057658c794a8a3","modified":1569420759641},{"_id":"public/images/article8/marco_arc.png","hash":"f8c82f5bec2ec580ad83e0ff6422dfc33747debb","modified":1569420759641},{"_id":"public/images/article8/property_follows.png","hash":"43157ca0caa660586325d1350a873233d59eccba","modified":1569420759641},{"_id":"public/images/article8/property_follows_fix.png","hash":"69777b955591b2b23b6d75187a2d127c72e12bc0","modified":1569420759641},{"_id":"public/images/article8/readonly_error.png","hash":"9898e92b72f8da4c72ea7f91e45ba581d836ddf0","modified":1569420759641},{"_id":"public/images/article8/release_error.png","hash":"8dd42d200749a8064177318a0c1e6f5e9a4c7b81","modified":1569420759641},{"_id":"public/images/article8/retain_cycle.png","hash":"847c9044a1cd7f9b7ea9246b1eb00d79be1621c9","modified":1569420759641},{"_id":"public/images/article8/retain_cycle_fix.png","hash":"598b158a51bfa1e51eaec98d14a57e8c83846de0","modified":1569420759641},{"_id":"public/images/article8/retain_strong.png","hash":"cd4902a69188f329fa5f5a8bf28cec228ea126d7","modified":1569420759642},{"_id":"public/images/article8/use_arc.png","hash":"c0e5771db52caa9a525d3bcb703d81a3aa65efd7","modified":1569420759642},{"_id":"public/images/article8/weak_property_unpredictably.png","hash":"6e511830247d50439af47c58667d4a77226706b1","modified":1569420759642},{"_id":"public/images/location/1.jpeg","hash":"09006a6e2ef9c1fdc5d9fb8c3b7861ca1b4d8163","modified":1569420759642},{"_id":"public/images/article8/weak_property_unpredictably_fix.png","hash":"9d7888b95157a384b2d540a5a9266b4a86e739bb","modified":1569420759642},{"_id":"public/images/location/3.jpeg","hash":"3f0269efc84b58ccec813a984c5559a1dd3c9a89","modified":1569420759642},{"_id":"public/images/location/5.jpeg","hash":"5e808ce8ff3f0463bbb5cb4926508e6192d7b7d6","modified":1569420759642},{"_id":"public/images/location/6.jpeg","hash":"6fc7da3cd28ff26e045ddf5700a4af16d872a7be","modified":1569420759642},{"_id":"public/images/location/2.jpeg","hash":"a86018b417a01315d40af97f6039c930a539476e","modified":1569420759642},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1569420759642},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1569420759642},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1569420759642},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1569420759642},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1569420759642},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1569420759642},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1569420759642},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1569420759642},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1569420759642},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1569420759642},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1569420759642},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1569420759642},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1569420759642},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1569420759642},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1569420759642},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1569420759642},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1569420759643},{"_id":"public/images/article1/app_hack_news.png","hash":"c51dd8d5858c3158fa6a5547828d4dfe1bf8abc3","modified":1569420760226},{"_id":"public/images/article1/framework_JSQMessagesViewController.png","hash":"973ca631aa52fcd7b3c47b0211f60684640088e0","modified":1569420760226},{"_id":"public/images/article1/plugin_image_named.gif","hash":"d3a9ad0ad63fff2ddb4637b34f3b29800ba15f4e","modified":1569420760227},{"_id":"public/images/article1/view_THContactPicker.gif","hash":"67c97ccf1ca62bbbe098aea545bb1f8144e067be","modified":1569420760227},{"_id":"public/images/article3/default_location.png","hash":"a88a9db8da8ff5229340a057b7c2db2dec51fa60","modified":1569420760227},{"_id":"public/images/article4/aggregate.png","hash":"74eb2b7a8cc8d6c51ff829625b4e54f975692417","modified":1569420760228},{"_id":"public/images/article4/cocoa_touch_framework.png","hash":"fc3401a3854718a5537f1a7b828c66f3dfad1fb5","modified":1569420760228},{"_id":"public/images/article1/view_parallax_scrollview.gif","hash":"1c04af9a7c306771c25c112a3866ad289a5ea376","modified":1569420760228},{"_id":"public/images/article4/commonlib_setting.png","hash":"3d90f9e69df4bbbd1b232d22976b2a8e8940cb8e","modified":1569420760228},{"_id":"public/images/article4/framework_demo_setting.png","hash":"963742b92e6e9289cfd083d45134626cba50d46c","modified":1569420760228},{"_id":"public/images/article4/run_search_path.png","hash":"a04f72a9a01582f33d3e9512d575c8fae42f3f3e","modified":1569420760228},{"_id":"public/images/article5/wwdc_banner_promo.jpg","hash":"665f3f7ad84d726673a85223895ec973ca50fdf7","modified":1569420760228},{"_id":"public/images/article7/iphone5-6.jpg","hash":"ff1d6f82155a33ee166216ae0c124682133279cb","modified":1569420760228},{"_id":"public/images/article8/block_implicitly_retains_fix1.png","hash":"e23270e53c4473af22c29189823e6af4f13f850f","modified":1569420760228},{"_id":"public/images/article8/block_implicitly_retains_fix2.png","hash":"e23270e53c4473af22c29189823e6af4f13f850f","modified":1569420760228},{"_id":"public/images/article8/block_weak.png","hash":"d2c1cb65a153a50317a9a56dfc7cab7b45ce7a37","modified":1569420760228},{"_id":"public/images/article8/cast_pointer_objective-c.png","hash":"c380fcf49534f9904f847207acabe918860ef5cc","modified":1569420760229},{"_id":"public/images/article8/check.png","hash":"a2bc101d27c4ef9e1d2d632ba28f782021f7325e","modified":1569420760229},{"_id":"public/images/article8/literal_is_redundant.png","hash":"ab7d254ec5d5702e80291cb4041ab449d2378c7e","modified":1569420760229},{"_id":"public/images/article8/delete_dealloc.png","hash":"4117182c46a9f42ca0cdcf8b66fe4c21c1c2aa14","modified":1569420760229},{"_id":"public/images/location/10.png","hash":"f24f2559899e9cdb66795268d23b8608082c96cc","modified":1569420760229},{"_id":"public/images/location/4.jpeg","hash":"2e0c4d18c0c6a64b480b88bb0784888c419078a2","modified":1569420760229},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1569420760229},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1569420760229},{"_id":"public/js/bookmark.js","hash":"60cab6771a57c268da331920edd6d7fcd2713d42","modified":1569420760236},{"_id":"public/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1569420760236},{"_id":"public/js/local-search.js","hash":"0579159bf994e3726b3ba063e5905f79465fdfb1","modified":1569420760236},{"_id":"public/js/next-boot.js","hash":"d1892ad3ca2741534ebaac0476902e05031ab255","modified":1569420760236},{"_id":"public/js/utils.js","hash":"33a76cda8ecad2bea9db13e1f77c6e22fd6452fe","modified":1569420760236},{"_id":"public/js/motion.js","hash":"d52807a73efc34b1189c096477f348d05debf861","modified":1569420760236},{"_id":"public/js/schemes/muse.js","hash":"be8471d4a84b773014b46a3650887ab55116ea68","modified":1569420760236},{"_id":"public/js/schemes/pisces.js","hash":"1e47ffdda23f7f645a2a883a90e2e9d9ddbf9a46","modified":1569420760236},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1569420760236},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1569420760236},{"_id":"public/css/main.css","hash":"d44e16fe0c174183b39b046666f9879095dddfc7","modified":1569420760236},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1569420760236},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1569420760236},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1569420760236},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1569420760236},{"_id":"public/images/ED4CED7F-41A1-4A2C-9681-79D73342B4B0.png","hash":"99b7e46eaff89feb32c6a5e4e44553d8f88d9554","modified":1569420760236},{"_id":"public/images/article1/plugin_cocoapods_menu.png","hash":"7423d9ce29130d2f86a473472a44da6f2c344563","modified":1569420760236},{"_id":"public/images/article1/framework_iOSPlot.png","hash":"c1eba141a60e1390a89b260193e70eaf67515b83","modified":1569420760236},{"_id":"public/images/article8/retain_dealloc.png","hash":"02e14d22dbe441b6b942f2f42df3dcdc8da96bd2","modified":1569420760237},{"_id":"public/images/article1/plugin_xtodo.png","hash":"94585ebf085fc02f4b69e0f917356d17e7de06f1","modified":1569420760237},{"_id":"public/images/article2/meituan_db_info.png","hash":"f881c3052b7701451bbb4257db70009d0a3bc2e4","modified":1569420760237},{"_id":"public/images/article1/framework_IMQuickSearch.gif","hash":"3dfceee2227427f9c3973c6cd789d2e9142774af","modified":1569420760237},{"_id":"public/images/article1/view_RTLabel.png","hash":"8b550457d5e94a1d48eb8c9e3b3e37e5f6dee0f9","modified":1569420760237},{"_id":"public/images/article8/review.png","hash":"02e14d22dbe441b6b942f2f42df3dcdc8da96bd2","modified":1569420760237},{"_id":"public/images/article1/cocoapods_menu.png","hash":"7423d9ce29130d2f86a473472a44da6f2c344563","modified":1569420760237},{"_id":"public/images/article1/view_PaperFold-for-iOS.png","hash":"05184d23cfca0ef5171339cf409d7b57ca161e27","modified":1569420760237},{"_id":"public/images/article5/extension_debug.png","hash":"d096c975e74bd90cf4d6bbe924169f4c5fe375fe","modified":1569420760237},{"_id":"public/images/article8/notice.png","hash":"c5a31b9319c1e6694dfae61841d44c2f575894e0","modified":1569420760237},{"_id":"public/images/article8/error.png","hash":"8ba6b82583ee1fb9eaf0c53ea36f27e2f3f36f5c","modified":1569420760237},{"_id":"public/images/article1/plugin_codepilot.png","hash":"3e5d52c2ff7e580410106e661598871dd59f3c70","modified":1569420760245},{"_id":"public/images/article1/tool_framework.png","hash":"be01b7069840b4ed698019c86917edf6c6c10206","modified":1569420760245},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1569420760245},{"_id":"public/images/article1/tool_xtrace.png","hash":"1d78272fd0458a890ea7bc6157917f3b5e51c051","modified":1569420760251},{"_id":"public/images/article1/tool_rnconnecter.png","hash":"4516b825534cf4085fed94f1f7605521d4f0e6da","modified":1569420760251},{"_id":"public/images/location/7.jpeg","hash":"25ad72328a605290c51d036eb41be8b587d7ec1f","modified":1569420760259},{"_id":"public/images/article1/plugin_alcatraz.png","hash":"d29cef87ce35b038fd91e3351f4e745e2a6420c8","modified":1569420760405},{"_id":"public/images/336C83D8-ADEB-49A2-93D6-815A74509434.png","hash":"f1d0c4729af4b612055b42ef6abf2e75f5ef9bb0","modified":1569420760464},{"_id":"public/images/article8/refactor.png","hash":"2aff809b52209e2a17d118e267f046b109429455","modified":1569420760471},{"_id":"public/images/article1/plugin_vvdocumenter.gif","hash":"dfeca8e7acfebf776bea503ccf9f06a250637f3a","modified":1569420760471},{"_id":"public/images/article1/RESideMenu.gif","hash":"16a22782a110124586befb0719db7b521d00bf16","modified":1569420760472},{"_id":"public/images/article1/view_remenu.gif","hash":"6e0aaf76876cfdc29375470bea67583a6755bc76","modified":1569420760487},{"_id":"public/images/article1/xcode_plugin_align.gif","hash":"bfcb63dc0131a750e36e07c0b7634f5bded4948b","modified":1569420760495},{"_id":"public/images/article1/view_DKCircleButton.gif","hash":"83f42cf9798fb91ac1b765d2f3d4d2edb5b79c1c","modified":1569420760496},{"_id":"public/images/article1/plugin_align.gif","hash":"bfcb63dc0131a750e36e07c0b7634f5bded4948b","modified":1569420760497},{"_id":"public/images/article1/view_TwitterCover.gif","hash":"e8aaf897766f5e3c4c51f599e387e5efe06dbd1a","modified":1569420760498},{"_id":"public/images/location/8.jpeg","hash":"fa5d43437691614b85d4fda2669267a783bb909c","modified":1569420760501},{"_id":"public/images/location/9.png","hash":"ce21abeb809bd55299fb5207d193de64562c2812","modified":1569420760502},{"_id":"public/images/article1/tool_xctool.gif","hash":"b7ccdcc898daff17ca61542535fae0521fff65fe","modified":1569420760507}],"Category":[{"name":"Octopress","_id":"ck0zclic60002qhtfqq210bdv"},{"name":"opensource","_id":"ck0zclicd0009qhtf31y8inrm"},{"name":"Xcode","_id":"ck0zclice000fqhtfncpwmlzr"},{"name":"Database","_id":"ck0zclid80015qhtfdqf9gbna"},{"name":"iOS","_id":"ck0zclidb001aqhtfds6a2jj3"},{"name":"XcodeSettings","_id":"ck0zclidd001fqhtfxeoq7p2o"},{"name":"WWDC2014","_id":"ck0zclidg001mqhtf95g96udo"},{"name":"C语言","_id":"ck0zclidq002iqhtf1ke62sh9"}],"Data":[],"Page":[{"_content":"            <!DOCTYPE HTML>\n<html>\n<head>\n  \n    <meta charset=\"utf-8\"/>\n    <title>给你们-张宇,给你们在线试听,MP3免费下载,给你们歌词下载_百度音乐-听到极致</title>\n    \n    <meta content=\"张宇, 给你们 ,音乐,歌曲,在线,试听,MP3,下载,歌词,免费\" name=\"keywords\"/>\n    <meta content=\"张宇单曲给你们,给你们在线试听,给你们歌词,给你们在线试听,MP3免费下载\"          name=\"description\"/>\n    \n    <meta name=\"baidu-tc-verification\" content=\"5532f353892ad86095cb538ab988fb55\"/>\n    \n    <meta name=\"google-site-verification\" content=\"-michJB8aokthZhSsY3KIyd7TW9tQ2jSXI_87qveZpo\"/>\n    \n    <meta name=\"msvalidate.01\" content=\"B96798BECBFD1C248180D6DA843E27ED\"/>\n    \n    <meta property=\"wb:webmaster\" content=\"95125c09ba4c1de4\"/>\n    <!--STATUS OK-->\n              <link rel=\"shortcut icon\" href=\"/static/images/favicon.ico\"/>\n          \n    <script type=\"text/javascript\">\n      var ting = ting || {};\n          </script>\n    <script type=\"text/javascript\" _xbuilder=\"true\">var ting=ting||{};var httpSuccess=function(t){try{return!t.status&&location.protocol===\"file:\"||t.status>=200&&t.status<300||t.status===304||t.status===1223||t.status===0}catch(e){}return false};var parseJSON=function(t){if(typeof t!==\"string\"||!t){return null}var e=/^(\\s|\\u00A0)+|(\\s|\\u00A0)+$/g,a=t.replace(e,\"\");if(/^[\\],:{}\\s]*$/.test(a.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])/g,\"@\").replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g,\"]\").replace(/(?:^|:|,)(?:\\s*\\[)+/g,\"\"))){return window.JSON&&window.JSON.parse?window.JSON.parse(a):new Function(\"return \"+a)()}else{throw\"Invalid JSON: \"+a}};var httpData=function(t,e){var a=t.responseText;if(typeof a===\"string\"){if(e===\"json\"){a=parseJSON(a)}}return a};function getUserBar(t,e){var a=false;var n=window.XMLHttpRequest&&(window.location.protocol!=\"file\"||window.ActiveXObject)?function(){return new window.XMLHttpRequest}:function(){try{return new window.ActiveXObject(\"Microsoft.XMLHTTP\")}catch(t){}};var r=n();if(!r){return}e+=\"?_t=\"+(new Date).getTime();r.open(\"get\",e,true);r.setRequestHeader(\"Accept\",\"application/json, text/javascript, */*\");r.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");var s=r.onreadystatechange=function(){var e=false;if(!r||r.readyState===0){a=true;if(r){r.onreadystatechange={}}}else if(!a&&r&&r.readyState===4){a=true;r.onreadystatechange={};e=!httpSuccess(r)?\"error\":\"success\";var n;if(e===\"success\"){try{data=httpData(r,\"json\")}catch(s){e=\"parsererror\";n=s}}if(e===\"success\"){t.innerHTML=data.data.html;if(!!window.$){new Function(data.data.js).call(data.data.html)}else{ting.userBarInit=new Function(data.data.js)}}else{}r=null}};try{r.send(null)}catch(c){}}try{document.execCommand(\"BackgroundImageCache\",false,true)}catch(e){}var isKr=/\\/king/.test(location.pathname);</script>\n\n    \n      <link rel=\"stylesheet\" type=\"text/css\" href=\"//mu5.bdstatic.com/static/c/bxNeP1Oq.css\"/>\n    \n    \n<link rel=\"stylesheet\" type=\"text/css\" href=\"//mu7.bdstatic.com/static/c/vp2oM67Z.css\" />\n   \n \t<script type=\"text/javascript\" src=\"http://m.baidu.com/static/as/res2exe/js/res2exe_1.0.4.min.js\"></script>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"//mu6.bdstatic.com/static/c/f7UC42zu.css\" />\n\t<link rel=\"stylesheet\" href=\"http://music.baidu.com/cms/huodong/pepsi/pepsi_ad.css\">\n    <!--[if IE 6]>\n    <link rel=\"stylesheet\" id=\"bd_app_dl\" type=\"text/css\" href=\"http://m.baidu.com/static/as/res2exe/external/apk2exe-img.css?v=0703\" />\n    <![endif]-->\n\n  \n</head>\n<body \nclass=\"sns body-song-page\"\n>\n\n  \n              <div class=\"music-head \"  monkey=\"music-head\">\n  <div class=\"lg\"> <a id=\"bm-logo\" href=\"/\" ></a> </div>\n  <div class=\"search-wrap\">\n    <div class=\"lk\"> <a href=\"http://news.baidu.com/\"  onmouseover=\"s(this)\">新闻</a><a    href=\"http://www.baidu.com/\" onmouseover=\"s(this)\">网页</a><a    href=\"http://tieba.baidu.com/\" onmouseover=\"s(this)\">贴吧</a><a    href=\"http://zhidao.baidu.com/\" onmouseover=\"s(this)\">知道</a><span>音乐</span><a    href=\"http://image.baidu.com/\" onmouseover=\"s(this)\">图片</a><a   href=\"http://v.baidu.com/\" onmouseover=\"s(this)\" >视频</a><a   href=\"http://map.baidu.com/\" onmouseover=\"s(this)\" >地图</a><a   href=\"http://baike.baidu.com/\" onmouseover=\"s(this)\" >百科</a><a   href=\"http://wenku.baidu.com/\" onmouseover=\"s(this)\" >文库</a></div>\n    <form id=\"search_form\" name=\"f1\" action=\"/search\">\n      <div class=\"search\">\n        <span class=\"s_ipt_wr\">\n            <input\n                type=\"text\"\n                name=\"key\"\n                value=\"\"\n                 data-value=\"\"\n                data-default=\"请输入歌名、歌词、歌手或专辑\"\n                id=\"ww\"\n                class=\"kw s_ipt s_ipt_def\"\n                size=\"42\"\n                maxlength=\"100\"\n                autocomplete=\"off\"\n            />\n        </span><span class=\"s_btn_wr\"><input type=\"submit\" value=\"百度一下\" class=\"s_btn\" onmousedown=\"this.className='s_btn s_btn_h'\" onmouseout=\"this.className='s_btn'\"></span><span class=\"s_tools\"></span>\n      </div>\n      <div id=\"loading-pic\"></div>\n      <div class=\"sug-result\"></div>\n    </form>\n\n  </div>\n\n  <form style=\"width:0;height:0;\" name=\"vform\" id=\"vform\"  action=\"http://v.baidu.com/v\">\n    <input type=\"hidden\" name=\"ct\" value=\"301989888\">\n    <input type=\"hidden\" name=\"rn\" value=\"20\">\n    <input type=\"hidden\" name=\"pn\" value=\"0\">\n    <input type=\"hidden\" name=\"db\" value=\"0\">\n    <input type=\"hidden\" name=\"s\" value=\"3\">\n    <input type=\"hidden\" name=\"word\" value=\"\">\n  </form>\n\n  \n\n\n  \n                <div class=\"head-ad async-module\" id=\"adm-head-right\">\n            \n        </div>\n        \n</div>\n<div class=\"nav nav-singer singer-\" monkey=\"nav\">\n    <div class=\"nav-wrapper singer\">\n        <div class=\"nav-border\"></div>\n        <div class=\"nav-content\">\n            <ul class=\"main-nav\">\n                <li class=\"nav-lib first nav-current\">\n                    <a href=\"/\" data-log=\"nav-music-lib\"><span class=\"text\">音乐库</span></a>\n                    <div class=\"arrow\"></div>\n                </li>\n                <li class=\"nav-y\">\n                    <a href=\"http://y.baidu.com?pst=musicnav\" target=\"_blank\" data-log=\"nav-musicer\"><span class=\"text\">百度音乐人</span></a>\n                </li>\n                <li class=\"nav-kr \">\n                    <a href=\"/king?pst=musicnav\" data-log=\"nav-korean\" target=\"_blank\"><span class=\"text\">King榜</span></a>\n                    <i class=\"icon-new\" style=\"left:76px;\"></i>\n                                    </li>\n                <li class=\"nav-piao last\">\n                    <a href=\"//piao.baidu.com?pst=shouyedaohang\" target=\"_blank\" title=\"百度票务，买低价放心票！\" data-log=\"nav-piao\"><span class=\"text\">票务</span></a>\n                </li>\n            </ul>\n            <ul class=\"extra-nav\">\n                <li>\n                    <i class=\"power-icon-min index-icon-vip-active icon-nav-vip\"></i>\n                    <a href=\"/vip?pst=banner\" target=\"_blank\" data-log=\"nav-vip\">VIP</a>\n                </li>\n                <li class=\"line\"></li>\n                <li><a href=\"/app/android?pst=banner\" target=\"_blank\" data-log=\"mobileapp\">手机版</a></li>\n                <li class=\"line\"></li>\n                <li><a href=\"http://qianqian.baidu.com\" target=\"_blank\" data-log=\"ttplayer\">电脑版</a></li>\n                <li class=\"line\"></li>\n                <li><a href=\"http://fm.baidu.com\" target=\"_blank\" data-log=\"nav-fm\">百度随心听</a></li>\n                <li><a href=\"http://play.baidu.com\" id=\"myMbox\" target=\"_blank\" class=\"nav-musicmbox\" data-log=\"mymbox\">我的音乐盒</a></li>\n            </ul>\n            <i class=\"bg\"></i>\n        </div>\n    </div>\n    <div class=\"sub-nav-wrapper\">\n        <div class=\"sub-nav-item nav-current\">\n            <ul class=\"clearfix sub-nav-content\" id=\"sub_lib\" data-parent=\"nav-lib\">\n                            <li class=\"link first \"><a href=\"/\" data-log=\"nav-home\">首页</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link \"><a href=\"/top\" data-log=\"nav-top\">榜单</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link actived\"><a href=\"/artist\" data-log=\"nav-singer\">歌手</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link \"><a href=\"/tag\" data-log=\"nav-music-cate\">分类</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link \"><a href=\"/mv\" data-log=\"nav-mv\">MV</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link \"><a href=\"/songlist\" data-log=\"nav-songlist\">歌单</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link \"><a href=\"/lossless\" data-log=\"nav-lossless\">无损专区</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link \"><a href=\"/xiuchang\" data-log=\"nav-show\">美女秀场</a></li>\n             \n           </ul>\n                    </div>\n        \n    </div>\n</div><div id=\"userbar\" class=\"userbar\" alog-alias=\"userbar\"></div>\n\n\n            \n  <script type=\"text/javascript\">function s(t){if(document.f1.key.value.length>0){var e={news:{url:\"http://news.baidu.com/\",word:\"ns?tn=news&cl=2&rn=20&ct=1&ie=utf-8&word=\"},www:{url:\"http://www.baidu.com/\",word:\"s?cl=3&wd=\"},tieba:{url:\"http://tieba.baidu.com/\",word:\"f?ie=utf-8&kw=\"},zhidao:{url:\"http://zhidao.baidu.com/\",word:\"search?pn=0&rn=10&lm=0&word=\"},image:{url:\"http://image.baidu.com/\",word:\"i?ct=201326592&cl=2&nc=1&lm=-1&st=-1&tn=baiduimage&istype=2&fm=&pv=&z=0&ie=utf-8&word=\"},v:{url:\"http://v.baidu.com/\",word:\"v?ct=301989888&s=25&ie=utf-8&word=\"},map:{url:\"http://map.baidu.com/\",word:\"?newmap=1&ie=utf-8&s=s%26wd%3D\"},baike:{url:\"http://baike.baidu.com/\",word:\"search/word?enc=utf8&word=\"},wenku:{url:\"http://wenku.baidu.com/\",word:\"search?ie=utf-8&word=\"}};var r=t.href,i=/^http:\\/\\/([^.]+)\\./,a=r.match(i)[1],d=t.href.split(\"?\"),n=document.getElementById(\"ww\");var o=encodeURIComponent(n.value);if(n.value==n.getAttribute(\"data-default\")){t.href=e[a].url}else{t.href=e[a].url+e[a].word+o}}}var ting=ting||{};function initUserBar(){require([\"ting/userbar/init\"])}if(!window.attachEvent){window.addEventListener(\"load\",initUserBar,false)}else{window.attachEvent(\"onload\",initUserBar)}ting.refreshUserBar=initUserBar;</script>\n\n        \n  \n  <div class=\"music-main\" alog-alias=\"music-main-alog\">\n    <div class=\"music-main-body\">\n      <div class=\"music-body clearfix\">\n        \n\t\n\n\n\n\n\t\n\t\n\t\t\t\t\t\t\n\t\n\t\t\t\t\t\t\t\t\t\t\t \n\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n   \n\t    \t<script type=\"text/javascript\" src=\"http://cbjs.baidu.com/js/m.js\"></script>\n\t\t<script type=\"text/javascript\">\n\t\t\t// var artisttype = $(\".path-list .path-list-item\").find(\"a\")[1].innerHTML;\n\t\t\tBAIDU_CLB_addOrientation(\"artistid\", \"1210\");\n\t\t\tBAIDU_CLB_addOrientation(\"artisttype\", \"华语男歌手\");\n\t\t\tBAIDU_CLB_addOrientation(\"songid\", \"264374\");\n\t\t\tBAIDU_CLB_fillSlot(\"554933\");\n\t\t</script>\n\n\n<div class=\"path_navigator clearfix clicklog-path-navigator\">\n\t\n\t\n\n\t\n\n\t\t<ul class=\"path-list clearfix\">\n\t\t\t<li  class=\"path-list-item\" >\n\t\t\t\t\t\t\t<a href=\"/artist\">\t\t\t\t歌手</a>\t\t\t\t\t</li>\n\t\t\t\t<li  class=\"path-list-item\" >\n\t\t\t\t\t\t\t<a href=\"/artist/cn/male\">\t\t\t\t华语男歌手</a>\t\t\t\t\t</li>\n\t\t\t\t<li  class=\"path-list-item\" >\n\t\t\t\t\t\t\t<a href=\"/artist/1210\">\t\t\t\t张宇</a>\t\t\t\t\t</li>\n\t\t\t\t<li >\n\t\t\t\t\t\t\t\t\t\t\t给你们\t\t\t\t\t</li>\n\t</ul>\t\n</div>\n  \n\n\n\n    \n        <div class=\"main-body\">\n\n            \n<div class=\"main-body-cont\">\n<div class=\"mod-song-info\" >\n\t<h1 class=\"music-seo\">\n\t\t张宇歌曲给你们,给你们在线试听,给你们歌词下载,给你们在线试听,MP3免费下载。百度音乐为你提供<strong>给你们</strong>高品质的音乐享受。\n\t</h1>\n\t\n\n\n\n\n\n\n\n\n\n\n<div class=\"song-info\" monkey=\"songInfo\">\n\t\t<div class=\"play-holder clearfix\">\n\t\t\t<div class=\"song\">\n\t\t\t\t<h2 class=\"songpage-title clearfix\">\n\t\t\t\t        \t\t\t\t<span class=\"name\">给你们</span>                    <span data-id=\"264374\" class=\"icon-lossless lossless-hook\" title=\"无损品质音乐\"></span>                    \n\n\t\t\t\t</h2>\n\t\t\t\t                        <span class=\"song-play-num hot-num\">\n                                <span class=\"c6\">热度</span><span class=\"num\">217,861</span>                </span>\n\t\t\t</div>\n\n\t\t</div>\n\n    \n                    \n\n        <div class=\"song-opera clearfix\">\n          <div class=\"song-page-share clearfix\">\n                                                    <a   href=\"#\"  class=\"btn btn-b song-share\" >\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-share\"></i>                            <span class=\"txt\">分享</span>\n                        </span>\n    </a>\n            <span class=\"sep\"></span>\n            \n                                                                  <a data-btndata='{\"ids\":\"264374\",\"type\":\"song\",\"pay_type\":\"0\"}'  href=\"#\"  class=\"btn btn-b song-collect {&quot;ids&quot;:&quot;264374&quot;,&quot;type&quot;:&quot;song&quot;,&quot;pay_type&quot;:&quot;0&quot;}\" >\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-collect\"></i>                            <span class=\"txt\">收藏</span>\n                        </span>\n    </a>\n            \n\n            <div id=\"bdshare\" class=\"bds_tools bdshare_t\" >\n              <span class=\"arrow-down\"></span>\n              <a class=\"bds_qzone\"></a>\n              <a class=\"bds_renren\"></a>\n              <a class=\"bds_tqq\"></a>\n              <a class=\"bds_tsina\"></a>\n              <span class=\"bds_more\"></span>\n            </div>\n          </div>\n\n                      <span class=\"play-btn\" data-playdata='{&quot;id&quot;:&quot;264374&quot;,&quot;moduleName&quot;:&quot;playBtn&quot;}'>\n          \t                                          <a   href=\"javascript:void(0);\"  class=\"btn btn-a  clicklog-play-btn\" >\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-play\"></i>                            <span class=\"txt\">播放</span>\n                        </span>\n    </a>\n            </span>\n            <span class=\"add-song-btn\" data-adddata='{&quot;id&quot;:&quot;264374&quot;,&quot;moduleName&quot;:&quot;addBtn&quot;}'>\n          \t                                          <a   href=\"javascript:void(0);\"  class=\"btn btn-b \" >\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-add\"></i>                            <span class=\"txt\">添加</span>\n                        </span>\n    </a>\n            </span>\n                                                          \t                                                              <a data-btndata='{\"id\":\"264374\"}'  href=\"javascript:void(0);\"  class=\"btn btn-b down-song-btn {&quot;id&quot;:&quot;264374&quot;}\" >\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-down\"></i>                            <span class=\"txt\">下载</span>\n                        </span>\n    </a>\n          \n\n                                                                        <a data-btndata='{\"id\":\"264374\"}'  href=\"javascript:void(0);\"  class=\"btn btn-b btn-telapp {&quot;id&quot;:&quot;264374&quot;}\" >\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-send\"></i>                            <span class=\"txt\">下载到手机</span>\n                        </span>\n    </a>\n            <div class=\"tomobile-layer\">\n                <div class=\"layer-item method clearfix\">\n                    <a class=\"wireless\" href=\"javascript:;\">\n                        <span class=\"icon\"></span>\n                        <span class=\"text\">基于帐号下载到手机</span>\n                    </a>\n                    <a class=\"telapp\"\n                       href=\"javascript:;\"\n                       onclick=\"bd_app_dl(this);\"\n                       data_type=\"music\"\n                       data_url=\"http://zhangmenshiting.baidu.com/data2/music/638114/638114.mp3?xcode=24968852901d8b04356aa627b61115dd9b0c6a3cc498b9b1\"\n                       data_name=\"给你们\"\n                       data_package=\"\"\n                       data_versionname=\"\"\n                       data_icon=\"http://musicdata.baidu.com/data2/pic/115429767/115429767.jpg\"\n                       data_size=\"4701110\"\n                       data_from=\"1001490z\"\n                       ext_type=\"apk\"\n                       ext_url=\"http://music.baidu.com/cms/mobile/static/apk/BaiduMusic_pcbdshoujizhushou.apk\"\n                       ext_name=\"百度音乐\"\n                       ext_package=\"com.ting.mp3.android\"\n                       ext_versionname=\"3.8.1\"\n                       ext_icon=\"http://hiphotos.baidu.com/wisegame/pic/item/2410b912c8fcc3ce99f9f1709345d688d43f20b3.jpg\"\n                       ext_size=\"6828251\">\n                        <span class=\"icon\"></span>\n                        <span class=\"text\">通过数据线发送</span>\n                        <span class=\"em\">\n                            <span class=\"em-icon\"></span>\n                            <em>仅限安卓手机</em>\n                        </span>\n                    </a>\n                    <a class=\"sms\" href=\"javascript:;\">\n                        <span class=\"icon\"></span>\n                        <span class=\"text\">通过短信发送</span>\n                        <span class=\"em\">\n                            <span class=\"em-icon\"></span>\n                            <em>接收短信免费</em>\n                        </span>\n                    </a>\n                </div>\n                <div class=\"layer-item device\">\n                    <div class=\"head\">\n                        <h3>选择移动设备</h3>\n                        <div class=\"close\"></div>\n                    </div>\n                    <div class=\"body\">\n                        <ul class=\"device-list\"></ul>\n                        <div class=\"btn-wrapper\">\n                            <a href=\"javascript:;\" class=\"btn btn-h btn-i commit\">\n                                <span class=\"inner\">\n                                    <span class=\"txt\">发送到移动设备</span>\n                                </span>\n                            </a>\n                        </div>\n                        <div class=\"tip\">\n                            <p>如何添加新设备？</p>\n                            <p><strong>登录</strong> “百度音乐” 移动客户端，即可添加设备，刷新页面就可以看到新设备。</p>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"layer-item phone-number\">\n                    <div class=\"head\">\n                        <h3>填写要发送的手机号码</h3>\n                        <div class=\"close\"></div>\n                    </div>\n                    <div class=\"body\">\n                        <div class=\"number-input\">\n                            <input type=\"text\" />\n                        </div>\n                        <a href=\"javascript:;\" class=\"btn btn-h commit\">\n                            <span class=\"inner\">\n                                <span class=\"txt\">发送</span>\n                            </span>\n                        </a>\n                        <div class=\"tip\">\n                            收取短信不会扣除你的话费，下载歌曲需要你支付相应的无线上网费用\n                        </div>\n                    </div>\n                </div>\n                <div class=\"layer-item result-layer success unbind\">\n                    <div class=\"head\">\n                        <div class=\"close\"></div>\n                    </div>\n                    <div class=\"body\">\n                        <div class=\"icon\"></div>\n                        <div class=\"text\"></div>\n                        <p class=\"tip\"></p>\n                    </div>\n                    <div class=\"foot\">\n                        <h5>怎么在手机客户端接收歌曲？</h5>\n                        <ol>\n                            <li>\n                                下载并安装最新版百度音乐移动客户端：<br/>\n                                <a href=\"http://music.baidu.com/cms/mobile/static/apk/BaiduMusic_musicfsdx.apk\" title=\"Android版\">\n                                    <span class=\"icon android-icon-small\"></span>\n                                    Android版\n                                </a>\n                                <a href=\"http://itunes.apple.com/cn/app/id468623917\" title=\"iPhone版\">\n                                    <span  class=\"icon iphone-icon-small\"></span>\n                                    iPhone版\n                                </a>\n                                <a href=\"https://itunes.apple.com/cn/app/bai-duting/id585579073\" title=\"iPad版\">\n                                    <span class=\"icon pad-icon-small\"></span>\n                                    iPad版\n                                </a>\n                            </li>\n                            <li>打开百度音乐手机客户端并登录</li>\n                            <li>进入“我的下载”就可以看见它啦</li>\n                        </ol>\n                    </div>\n                </div>\n            </div>\n                </div>\n\n\t\t<div class=\"info-holder clearfix\">\n\t\t\t\t<ul class=\"base-info c6\">\n          \t\t\t\t\t<li>歌手：\t\t\t\t\t\t\t<span class=\"author_list\" title=\"张宇\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a  \" hidefocus=\"true\" href=\"/artist/1210\">张宇</a>\t</span>\n          \t\t\t\t\t</li>\n          \t\n\n\n\n\t\t\t\t\t\t\t\t\t\t<li class=\"clearfix\">所属专辑：<a href=\"/album/67198\">《雨一直下》</a></a>\n\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<li class=\"clearfix tag\">\n\t\t\t\t\t\t<span class=\"label\">歌曲标签：</span><a class=\"tag-list\" href=\"/tag/%E5%8D%8E%E8%AF%AD%E6%B5%81%E8%A1%8C\">华语流行</a><i class='module-line'></i><a class=\"tag-list\" href=\"/tag/%E6%80%80%E6%97%A7\">怀旧</a><i class='module-line'></i><a class=\"tag-list\" href=\"/tag/%E6%B5%81%E8%A1%8C\">流行</a><i class='module-line'></i><a class=\"tag-list\" href=\"/tag/70%E5%90%8E\">70后</a><i class='module-line'></i><a class=\"tag-list\" href=\"/tag/%E7%94%9C%E8%9C%9C\">甜蜜</a>\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t\t\t</ul>\n\n\t\t\t\t\t\t\t\t\n<div class=\"module module-mv clearfix\" monkey=\"module-mv\" >\n  <div class=\"head \">\n\t\n\n\n  </div>\t\n  <div class=\"body \">\n\t\n\n\n\n                    <div data-mvdata = '{&quot;id&quot;:&quot;67198&quot;,&quot;moduleName&quot;:&quot;mvCover&quot;}' class=\"mv-cover  mv-cover-hook\">\n                    \t<a target=\"_blank\" href=\"/mv/264374\" title=\"给你们-张宇\">\n        <img  class=\"lazyload\" org_src=\"http://pic8.qiyipic.com/thumb/20130327/a364296_160_90.jpg\" src=\"/static/images/blank.gif\"  alt=\"给你们-张宇\">\n        <span title=\"播放MV\" class=\"play\"></span>            </a>\n\t<a target=\"_blank\" href=\"/mv/264374\" class=\"mv-icon\"></a>    </div>\n\n  </div>\n  \n  \n</div>\n\t\t\t\t\t\t</div>\n\n\n\n</div>\n    <div id=\"download-clients\">\n    <div id=\"info-wrapper\">\n        <div id=\"clients-info\">\n            <div class=\"bd-music-logo css-icon-bd-music\"></div>\n            <div class=\"bd-music-text\"><em>百度音乐客户端</em><br>听歌，随时随地</div>\n        </div>\n    </div>\n    <div id=\"clients-wrapper\">\n        <ul id=\"clients-container\">\n            <li>\n                <a class=\"clients-pc\" href=\"http://qianqian.baidu.com/download/BaiduMusic-31000121.exe\" data-log='{ \"pos\":\"pc_down\" }' target=\"_blank\">\n                    <span class=\"icon css-icon-pc\"></span>PC版\n                </a>\n\n                <div class=\"pc-tips\">\n                    <span class=\"arrow-up\"></span>\n                    <a href=\"http://qianqian.baidu.com/download/BaiduMusic-12345628.exe\" target=\"_blank\">\n                        <img org_src=\"//mu6.bdstatic.com/static/i/9FPqiLDJ.png\" alt=\"\"/>\n                        <div class=\"pc-tips-download btn btn-a\"><span class=\"inner\">快速安装</span></div>\n                    </a>\n                </div>\n            </li>\n            <li >\n                <a class=\"clients-android\" href=\"http://music.baidu.com/cms/mobile/static/apk/BaiduMusic_danqu.apk\" data-log='{ \"pos\":\"android_down\" }'  target=\"_blank\" >\n                    <span class=\"icon css-icon-android\"></span>Android版\n                </a>\n                <div class=\"product-dialog\">\n                    <div class=\"mobile-tip-icon\"></div>\n                    <div class=\"head\">\n                        <div class=\"close\"></div>\n                        <h1>感谢您使用手机百度音乐</h1>\n                        <p>下载会在几秒内自动开始，如浏览器长时间没有响应，请点击<a target=\"_blank\" href=\"http://music.baidu.com/cms/mobile/static/apk/BaiduMusic_danqu.apk\">重新下载</a></p>\n                    </div>\n                    <div class=\"body\">\n                        <h2>您还可以通过以下方法下载百度音乐手机版</h2>\n                        <div class=\"down-method\">\n                            <img class=\"qrcode-down\" src=\"//mu5.bdstatic.com/static/i/wVUkcg1j.jpg\" alt=\"二维码下载\"/>\n                            <img class=\"web-down\" src=\"//mu7.bdstatic.com/static/i/pi4IS8vC.jpg\" alt=\"web下载\"/>\n                        </div>\n                    </div>\n                </div>\n            </li>\n            <li>\n                <a class=\"clients-iphone\" data-log='{ \"pos\":\"iphone_down\" }'  href=\"#\">\n                    <span class=\"icon css-icon-iphone\"></span>\n                    iPhone版\n                </a>\n            </li>\n            <li>\n                <a class=\"clients-ipad\" data-log='{ \"pos\":\"ipad_down\" }'  href=\"http://music.baidu.com/app/pad\" target=\"_blank\">\n                    <span class=\"icon css-icon-ipad\"></span>iPad版\n                </a>\n            </li>\n        </ul>\n    </div>\n    <div class=\"pop-tips ios-tips\">\n        <i class=\"arrow-up\"></i>\n        <a class=\"close\" href=\"#\"></a>\n        <p class=\"tip-head\">扫描下方的二维码立即安装，好音乐无处不在！</p>\n        <div class=\"down-logo\"><img width=\"110\" height=\"110\" org_src=\"//mu6.bdstatic.com/static/images/2code/app-down-danqu.png\" src=\"/static/images/blank.gif\"/></div>\n        <p class=\"tip-foot\">手机访问music.baidu.com更快捷</p>\n    </div>\n</div>\n\n\t\t\t\n\t\t<div class=\"module song-lyric clicklog-lyric clearfix\" monkey=\"song-lyric\" >\n  <div class=\"head \">\n\t\n\n\t\t\t\t\t\t<a name=\"song_lyric\"></a>\n<span class=\"opera\">\n\t<a class=\"room-lrc-btn\" target=\"_blank\" href=\"/xiuchang?song=%E7%BB%99%E4%BD%A0%E4%BB%AC&singer=%E5%BC%A0%E5%AE%87\">美女点唱</a>\n\t<span class=\"module-line\"></span>\n\t<a class=\"down-lrc-btn\" data-lyricdata='{ \"href\":\"/data2/lrc/30770249/%E7%BB%99%E4%BD%A0%E4%BB%AC.lrc\" }' href=\"#\">下载LRC歌词</a>\n\t<span class=\"module-line\"></span>\n\t<span data-clipboard-target=\"lyricCont\" id=\"copy-lyric\" class=\"copy-lyric copy-lyric-hook\">复制歌词</span>\n</span>\n<h2 class=\"title\">歌词</h2>\n\n  </div>\t\n  <div class=\"body \">\n\t\n\t<div id=\"lyricCont\" class=\"lyric-content lyric-hidden\">给你们<br />\n作词:十一郎 作曲:张宇<br />\n演唱：张宇<br />\n<br />\n他将是你的新郎<br />\n从今以后他就是你一生的伴<br />\n他的一切都将和你紧密相关<br />\n福和祸都要同当<br />\n<br />\n她将是你的新娘<br />\n她是别人用心托付在你手上<br />\n你要用你一生加倍照顾对待<br />\n苦或喜都要同享<br />\n<br />\n一定是特别的缘份<br />\n才可以一路走来变成了一家人<br />\n他多爱你几分<br />\n你多还他几分<br />\n找幸福的可能<br />\n从此不再是一个人<br />\n要处处时时想着念的都是我们<br />\n你付出了几分<br />\n爱就圆满了几分<br />\n<br />\n一定是特别的缘份<br />\n才可以一路走来变成了一家人<br />\n他多爱你几分<br />\n你多还他几分<br />\n找幸福的可能<br />\n从此不再是一个人<br />\n要处处时时想着念的都是我们<br />\n你付出了几分<br />\n爱就圆满了几分<br />\n他将是你的新郎<br />\n从今以后他就是你一生的伴<br />\n他的一切都将和你紧密相关<br />\n福和祸都要同当<br />\n<br />\n她将是你的新娘<br />\n她是别人用心托付在你手上<br />\n你要用你一生加倍照顾对待<br />\n苦或喜都要同享<br />\n<br />\n一定是特别的缘份<br />\n才可以一路走来变成了一家人<br />\n他多爱你几分<br />\n你多还他几分<br />\n找幸福的可能<br />\n从此不再是一个人<br />\n要处处时时想着念的都是我们<br />\n你付出了几分<br />\n爱就圆满了几分<br />\n<br />\n一定是特别的缘份<br />\n才可以一路走来变成了一家人<br />\n他多爱你几分<br />\n你多还他几分<br />\n找幸福的可能<br />\n从此不再是一个人<br />\n要处处时时想着念的都是我们<br />\n你付出了几分<br />\n爱就圆满了几分<br />\n你付出了几分<br />\n爱就圆满了几分</div>\n\t\t\t<a href=\"\" id=\"lyricSwitch\" class=\"lyric-switch\"><span class=\"text\">展开</span><span class=\"icon\"></span>\t </a>\n\t\n  </div>\n  \n  \n</div>\n\t\n</div>\n\t\n<div class=\"lossell-wrap\" style=\"margin-top:-20px\" data-page=\"songpage\">\n\t<p class=\"lossell-title underline\">相关无损大碟推荐</p>\n\t<ul class=\"lossell-list\">\n\n\t\t\n\t\t<li class=\"first-list\">\n\t\t\t<i class=\"lossell-icon\"></i>\n\t\t\t<div class=\"img-wrap\">\n\t\t\t\t<a href=\"/songlist/3059?pst=song_loss\" target=\"_blank\">\n\t\t\t\t\t<img src=\"http://a.hiphotos.baidu.com/ting/pic/item/9213b07eca806538630f699396dda144ac34824d.jpg\" width=\"150\" height=\"150\" title=\"泡pub\"/>\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t\t<div class=\"img-desgin\">\n\t\t\t\t<p><a href=\"/songlist/3059?pst=song_loss\" target=\"_blank\">泡pub</a></p>\n\t\t\t</div>\n\t\t</li>\n\n\t\t\n\t\t<li class=\"\">\n\t\t\t<i class=\"lossell-icon\"></i>\n\t\t\t<div class=\"img-wrap\">\n\t\t\t\t<a href=\"/songlist/2668?pst=song_loss\" target=\"_blank\">\n\t\t\t\t\t<img src=\"http://a.hiphotos.baidu.com/ting/pic/item/3b292df5e0fe99251cb5a4d035a85edf8cb171f1.jpg\" width=\"150\" height=\"150\" title=\"让棉花糖在天空中飞翔\"/>\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t\t<div class=\"img-desgin\">\n\t\t\t\t<p><a href=\"/songlist/2668?pst=song_loss\" target=\"_blank\">让棉花糖在天空中飞翔</a></p>\n\t\t\t</div>\n\t\t</li>\n\n\t\t\n\t\t<li class=\"\">\n\t\t\t<i class=\"lossell-icon\"></i>\n\t\t\t<div class=\"img-wrap\">\n\t\t\t\t<a href=\"/songlist/2165?pst=song_loss\" target=\"_blank\">\n\t\t\t\t\t<img src=\"http://b.hiphotos.baidu.com/ting/pic/item/d043ad4bd11373f07756a21fa50f4bfbfaed04c1.jpg\" width=\"150\" height=\"150\" title=\"影视金曲-侠骨柔情\"/>\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t\t<div class=\"img-desgin\">\n\t\t\t\t<p><a href=\"/songlist/2165?pst=song_loss\" target=\"_blank\">影视金曲-侠骨柔情</a></p>\n\t\t\t</div>\n\t\t</li>\n\n\t\t\n\t\t<li class=\"\">\n\t\t\t<i class=\"lossell-icon\"></i>\n\t\t\t<div class=\"img-wrap\">\n\t\t\t\t<a href=\"/songlist/2542?pst=song_loss\" target=\"_blank\">\n\t\t\t\t\t<img src=\"http://b.hiphotos.baidu.com/ting/pic/item/d53f8794a4c27d1e0b79f6441ad5ad6edcc438d7.jpg\" width=\"150\" height=\"150\" title=\"来吧 夜店达人们 我们一起骚！\"/>\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t\t<div class=\"img-desgin\">\n\t\t\t\t<p><a href=\"/songlist/2542?pst=song_loss\" target=\"_blank\">来吧 夜店达人们 我们一起骚！</a></p>\n\t\t\t</div>\n\t\t</li>\n\n\t\t\t</ul>\n</div>\n\n\n\t\t\t\t<div class=\"module hot-song clearfix\" monkey=\"hotSongs\">\n  <div class=\"head \">\n\t\n<a href=\"/artist/1210\" class=\"more\">更多<span>&gt;&gt;</span></a>\n<h2 class=\"title\">张宇的其他热歌</h2>\n\n  </div>\t\n  <div class=\"body \">\n\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"hot-song-list\" >\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t  <div data-listdata= '{&quot;moduleName&quot;:&quot;otherhotsong&quot;}' class=\"normal-song-list song-list song-list-hook   song-list-btnBottom\"><ul><li  data-songitem = '{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;10233440&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u6708\\u4eae\\u60f9\\u7684\\u7978&quot;,&quot;pay_type&quot;:0}}' class=\"  bb-dotimg clearfix  song-item-hook   list1\"><div class=\"song-item\"><span class=\"index-num index-hook\"  style=\"width: 20px;\" >01</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;10233440&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style='width: 248px;'><a href=\"/song/10233440\" title=\"月亮惹的祸\">月亮惹的祸</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/10233440\" class=\"mv-icon\"></a></span></div></li><li  data-songitem = '{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;2132046&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u8d81\\u65e9&quot;,&quot;pay_type&quot;:0}}' class=\"  bb-dotimg clearfix  song-item-hook   list2\"><div class=\"song-item\"><span class=\"index-num index-hook\"  style=\"width: 20px;\" >02</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;2132046&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style='width: 248px;'><a href=\"/song/2132046\" title=\"趁早\">趁早</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/2132046\" class=\"mv-icon\"></a></span></div></li><li  data-songitem = '{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;291890&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u96e8\\u4e00\\u76f4\\u4e0b&quot;,&quot;pay_type&quot;:0}}' class=\"  bb-dotimg clearfix  song-item-hook   list3\"><div class=\"song-item\"><span class=\"index-num index-hook\"  style=\"width: 20px;\" >03</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;291890&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style='width: 248px;'><a href=\"/song/291890\" title=\"雨一直下\">雨一直下</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/291890\" class=\"mv-icon\"></a></span></div></li><li  data-songitem = '{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;606412&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u66f2\\u7ec8\\u4eba\\u6563&quot;,&quot;pay_type&quot;:0}}' class=\"  bb-dotimg clearfix  song-item-hook   list4\"><div class=\"song-item\"><span class=\"index-num index-hook\"  style=\"width: 20px;\" >04</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;606412&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style='width: 248px;'><a href=\"/song/606412\" title=\"曲终人散\">曲终人散</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/606412\" class=\"mv-icon\"></a></span></div></li><li  data-songitem = '{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;229485&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u5c0f\\u5c0f\\u7684\\u592a\\u9633&quot;,&quot;pay_type&quot;:0}}' class=\"  bb-dotimg clearfix  song-item-hook   list5\"><div class=\"song-item\"><span class=\"index-num index-hook\"  style=\"width: 20px;\" >05</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;229485&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style='width: 248px;'><a href=\"/song/229485\" title=\"小小的太阳\">小小的太阳</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/229485\" class=\"mv-icon\"></a></span></div></li><li  data-songitem = '{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;962164&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u7528\\u5fc3\\u826f\\u82e6&quot;,&quot;pay_type&quot;:0}}' class=\"  bb-dotimg clearfix  song-item-hook   list6\"><div class=\"song-item\"><span class=\"index-num index-hook\"  style=\"width: 20px;\" >06</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;962164&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style='width: 248px;'><a href=\"/song/962164\" title=\"用心良苦\">用心良苦</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/962164\" class=\"mv-icon\"></a></span></div></li><li  data-songitem = '{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;260252&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u5927\\u5973\\u4eba&quot;,&quot;pay_type&quot;:0}}' class=\"  bb-dotimg clearfix  song-item-hook   list7\"><div class=\"song-item\"><span class=\"index-num index-hook\"  style=\"width: 20px;\" >07</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;260252&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style='width: 248px;'><a href=\"/song/260252\" title=\"大女人\">大女人</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/260252\" class=\"mv-icon\"></a></span></div></li><li  data-songitem = '{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;14743299&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u5fc3\\u672f&quot;,&quot;pay_type&quot;:0}}' class=\"  bb-dotimg clearfix  song-item-hook   list8\"><div class=\"song-item\"><span class=\"index-num index-hook\"  style=\"width: 20px;\" >08</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;14743299&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style='width: 248px;'><a href=\"/song/14743299\" title=\"心术\">心术</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/14743299\" class=\"mv-icon\"></a></span></div></li><li  data-songitem = '{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;678267&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u56da\\u9e1f&quot;,&quot;pay_type&quot;:0}}' class=\"  bb-dotimg clearfix  song-item-hook   list9\"><div class=\"song-item\"><span class=\"index-num index-hook\"  style=\"width: 20px;\" >09</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;678267&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style='width: 248px;'><a href=\"/song/678267\" title=\"囚鸟\">囚鸟</a></span></div></li><li  data-songitem = '{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;803696&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u7537\\u4eba\\u7684\\u597d&quot;,&quot;pay_type&quot;:0}}' class=\"  bb-dotimg clearfix  last-item song-item-hook   list10\"><div class=\"song-item\"><span class=\"index-num index-hook\"  style=\"width: 20px;\" >10</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;803696&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style='width: 248px;'><a href=\"/song/803696\" title=\"男人的好\">男人的好</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/803696\" class=\"mv-icon\"></a></span></div></li></ul></div>\n\t</div>\n\t<div class=\"hot-playall\">\n\t\t\t<span class=\"hot-play play-all-btn\" data-playdata = '{&quot;ids&quot;:&quot;10233440,2132046,291890,606412,229485,962164,260252,14743299,678267,803696&quot;,&quot;moduleName&quot;:&quot;otherhotsong&quot;}'>\n\t\t\t                                        <a   href=\"#\"  class=\"btn btn-a \" >\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-play\"></i>                            <span class=\"txt\">播放全部</span>\n                        </span>\n    </a>\n\t\t</span>\t\n\t</div>\t\n\n\n  </div>\n  \n  \n</div>\n\t\n\t\n\t\n<div class=\"module clicklog-hot clearfix\" monkey=\"hotSongs\">\n  <div class=\"head \">\n\t\n<h2 class=\"title\">最新评论</h2>\n\n  </div>\t\n  <div class=\"body \">\n\t\n<div id=\"song-comment\" class=\"mod-song-comment songpage-voice clicklog-voice\">\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\t\n<div class=\"user-voice-hook { userVoice:{ 'id':'264374','subjectType':'song','pageSize':'10', 'emptyMsg':'这首歌怎么样？快来评论一下吧！' } }\">\n\t<div class=\"comment-hook\">\n\t\t<ul class=\"comment-list comment-list-hook\"><li class=\"no-data\">评论加载中...</li></ul>\n\t\t\n\n<div class=\"page-navigator-hook  { pageNavigator:{ 'total':0, 'size':10, 'start':0, 'show_total':0, 'focus_neighbor':0 } }\">\n<div class=\"page-cont\">\n \t<div class=\"page-inner\">\n</div>\n</div>\n </div>\n\t\t<div class=\"comment-form clearfix\">\n\t\t\t<div class=\"comment-label\"></div>\n\t\t\t<div class=\"comment-input-icon\"></div>\n\t\t\t<div class=\"comment-form-submit clearfix\">\n\t\t\t\t<textarea autocomplete=\"off\" class=\"comment-area comment-input-hook field-text\">我来说两句！</textarea>\n\t\t\t\t<a href=\"javascript:void(0);\" class=\"user-voice-submit comment-submit-hook\">发布</a>\n\t\t\t</div>\n\t\t\t<span class=\"comment-prompt-hook\"></span>\n\t\t</div>\n\t</div>\n</div>\n\t\n</div>\n\n  </div>\n  \n  \n</div>\n\n\n</div>\n\n        </div>\n        <div class=\"sidebar\">\n\n            \n\t\n<div class=\"top-sidebar\" monkey=\"top-sidebar\">\n    \n   \n    \n    <dl class=\"clearfix\">\n        <dt>主打榜单</dt>\n                <dd  class=\"first\" >    \n           <a href=\"/top/dayhot\">热歌榜 <span>TOP500</span></a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"/top/new\">新歌榜 <span>TOP100</span></a>\n                   </dd>\n        \n                <dd >    \n           <a href=\"/top/artist\">歌手榜 <span>TOP200</span></a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"/king/top\">百度King榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"http://y.baidu.com/top?play_top=top&amp;pst=music_top\">原创音乐榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"http://y.baidu.com/top/song/pop?play_top=pop&amp;pst=music_top\">原创流行榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"http://y.baidu.com/top/song/folk?play_top=folk&amp;pst=music_top\">原创民谣榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"http://y.baidu.com/top/artist?pst=music_top\">热门原创音乐人榜</a>\n                   </dd>\n        \n            </dl>\n    \n    \n    <dl class=\"clearfix\">\n        <dt>分类榜单</dt>\n                <dd  class=\"first\" >    \n           <a href=\"/top/sprite\">雪碧音碰音榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"/top/oumei\">欧美金曲榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"/top/yingshijinqu\">影视金曲榜</a>\n                   </dd>\n        \n                <dd >    \n           <a href=\"/top/lovesong\">情歌对唱榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"/top/netsong\">网络歌曲榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"/top/oldsong\">经典老歌榜</a>\n                   </dd>\n        \n                <dd >    \n           <a href=\"/top/rock\">摇滚榜</a>\n                   </dd>\n        \n            </dl>\n    \n    \n    <dl class=\"clearfix\">\n        <dt>媒体榜单</dt>\n                <dd  class=\"first\" >    \n           <a href=\"/top/ktv\">KTV热歌榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"/top/billboard\">Billboard</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"/top/ukchart\">UK Chart</a>\n                   </dd>\n        \n                <dd >    \n           <a href=\"/top/hito\">Hito中文榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"/top/chizha\">叱咤歌曲榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"/top/mnet\">韩国Mnet</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"/top/oricon\">日本公信榜</a>\n                   </dd>\n        \n            </dl>\n    \n</div>\n    \t    <div class=\"module musician-top clearfix\" monkey=\"musician-top\" >\n  <div class=\"head \">\n\t\n<a class=\"more\" target=\"_blank\" href=\"http://y.baidu.com/top?pst=song_hot\">更多<span>&gt;&gt;</span></a>\n<h2 class=\"title\">原创音乐榜<span class=\"i-musician\" title=\"此资源来自百度音乐人\"></span></h2>\n\n  </div>\t\n  <div class=\"body \">\n\t\n<ul class=\"musician-top-inner\">\n                            <li class=\"clearfix\">\n        <span class=\"num one\">\n            1\n        </span>\n        <span class=\"status\">\n            <i class=\"fair\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/109205?play_song=68937&pst=song_hot\">江湖&middot;闪蝶</a>\n        </span>\n        <span class=\"hot\">4.5万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            2\n        </span>\n        <span class=\"status\">\n            <i class=\"fair\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/105242?play_song=32120&pst=song_hot\">剑起苍澜 </a>\n        </span>\n        <span class=\"hot\">59.1万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            3\n        </span>\n        <span class=\"status\">\n            <i class=\"up\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/103620?play_song=24765&pst=song_hot\">佛陀在金殿等你</a>\n        </span>\n        <span class=\"hot\">13.0万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            4\n        </span>\n        <span class=\"status\">\n            <i class=\"up\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/102277?play_song=19205&pst=song_hot\">高跟鞋</a>\n        </span>\n        <span class=\"hot\">2.9万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            5\n        </span>\n        <span class=\"status\">\n            <i class=\"down\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/105321?play_song=31740&pst=song_hot\">疯了</a>\n        </span>\n        <span class=\"hot\">4.9万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            6\n        </span>\n        <span class=\"status\">\n            <i class=\"new\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/101345?play_song=14943&pst=song_hot\">那些没有的事</a>\n        </span>\n        <span class=\"hot\">12.3万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            7\n        </span>\n        <span class=\"status\">\n            <i class=\"fair\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/111594?play_song=66876&pst=song_hot\">白银饭店</a>\n        </span>\n        <span class=\"hot\">1.9万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            8\n        </span>\n        <span class=\"status\">\n            <i class=\"up\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/101449?play_song=14840&pst=song_hot\">彩虹</a>\n        </span>\n        <span class=\"hot\">1.7万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            9\n        </span>\n        <span class=\"status\">\n            <i class=\"down\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/104973?play_song=29241&pst=song_hot\">爱情歌曲(demo)</a>\n        </span>\n        <span class=\"hot\">26.4万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            10\n        </span>\n        <span class=\"status\">\n            <i class=\"up\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/100441?play_song=15730&pst=song_hot\">朋友</a>\n        </span>\n        <span class=\"hot\">12.9万</span>\n    </li>\n        </ul>\n\n  </div>\n  \n  \n</div>\n    \t\n\n\n<div class=\"ad\">\n    \n\n\n        <div\n        class=\"adm \"\n        data-id=\"482354\" \n         >\n                    <iframe\n                class=\"adm-iframe \"\n                src='/static/html/cbjs.html?v=20130816&id=482354'\n width=\"224\"\n                 height=\"130\"  scrolling=\"no\"\n                frameborder=\"0\">\n            </iframe>\n            </div>\n\n</div>\n<div class=\"ad\">\n    \n\n\n        <div\n        class=\"adm \"\n        data-id=\"844401\" \n         >\n                    <iframe\n                class=\"adm-iframe \"\n                src='/static/html/cbjs.html?v=20130816&id=844401'\n width=\"224\"\n                 height=\"130\"  scrolling=\"no\"\n                frameborder=\"0\">\n            </iframe>\n            </div>\n\n</div>\n<div class=\"ad\">\n    \n\n\n        <div\n        class=\"adm \"\n        data-id=\"874612\" \n         >\n                    <iframe\n                class=\"adm-iframe \"\n                src='/static/html/cbjs.html?v=20130816&id=874612'\n width=\"224\"\n                 height=\"130\"  scrolling=\"no\"\n                frameborder=\"0\">\n            </iframe>\n            </div>\n\n</div>\t<div class=\"module mod-topic clearfix\" monkey=\"mod-topic\">\n  <div class=\"head \">\n\t\n  <h2 class=\"title\">精彩推荐</h2>\n\n  </div>\t\n  <div class=\"body \">\n\t\n  <ul>\n                  <li><i></i><a href=\"http://music.baidu.com/songlist/4045?pst=gq\" target=\"_blank\" title=\"新歌榜第20周 | EXO攻陷周榜\">新歌榜第20周 | EXO攻陷周榜</a> </li>\n                        <li><i></i><a href=\"http://music.baidu.com/topic/cooperation/easonshoufa2014?pst=gq \" target=\"_blank\" title=\"独家首发| 陈奕迅全新国语大碟\">独家首发| 陈奕迅全新国语大碟</a> </li>\n                        <li><i></i><a href=\"http://music.baidu.com/topic/cooperation/wsyyzk09?pst=gq\" target=\"_blank\" title=\"慵懒的诱惑 极品沙发音乐\">慵懒的诱惑 极品沙发音乐</a> </li>\n                        <li><i></i><a href=\"http://music.baidu.com/topic/people/bigstar14liyuchun?pst=gq\" target=\"_blank\" title=\"音乐大人物 | 李宇春将酷进行到底\">音乐大人物 | 李宇春将酷进行到底</a> </li>\n                        <li><i></i><a href=\"http://music.baidu.com/songlist/3373?pst=gq\" target=\"_blank\" title=\"昨日重现 欧美经典老歌精选\">昨日重现 欧美经典老歌精选</a> </li>\n                        <li><i></i><a href=\"http://music.baidu.com/album/116668633?pst=gq\" target=\"_blank\" title=\"新歌首发| Super Junior-M完美回归\">新歌首发| Super Junior-M完美回归</a> </li>\n                                          </ul>\n\n  </div>\n  \n  \n</div>\n\n        </div>\n    \n\n      </div>\n    </div>\n  </div>\n  \n\n  \n    <div class=\"music-foot\" monkey=\"music-foot\" alog-alias=\"music-foot-alog\">\n                    <a href=\"javascript:void(0)\" class=\"weixin-follow\" id=\"weixin_follow\">加微信好友</a>\n<a href=\"http://e.weibo.com/musicbaidu\" target=\"_blank\" class=\"weibo-follow\">加关注</a>\n<a href=\"http://tousu.baidu.com/music/add\" target=\"_blank\" rel=\"nofollow\">意见反馈</a>\n<i class=\"module-line\"></i>\n<a target=\"_blank\" href=\"/doc/help\" rel=\"nofollow\">帮助中心</a>\n<i class=\"module-line\"></i>\n<a href=\"http://musicopen.baidu.com\" target=\"_blank\" rel=\"nofollow\">资源合作开放平台</a>\n<i class=\"module-line\"></i>\n<a href=\"http://y.baidu.com\" target=\"_blank\">原创音乐人</a>\n<i class=\"module-line\"></i>\n<span class=\"copy\">&copy;2014 Baidu</span>\n<a href=\"http://www.baidu.com/duty/\" target=\"_blank\" class=\"reader\" rel=\"nofollow\">使用百度前必读</a>\n文网文<span class=\"license\">[2010]197</span>号\n<div class=\"weixin-detail\" id=\"weixin_detail\">\n    <div class=\"weixin-qr\"></div>\n    <span>微信扫一扫<br/>精选音乐每日推送!</span>\n</div>\n            </div>\n  \n\n  \n    <div class=\"app-down-panel\">\n        <div class=\"go-to-top\"></div>\n    </div>\n    <a class=\"vip-tips\" id=\"vip_tips\" target=\"_blank\" href=\"/mobile?pst=tips\">\n      <div class=\"vip-tips-content\">\n        <div class=\"vip-tips-left\">\n\n        </div>\n        <div class=\"vip-tips-right\">\n          <span class=\"vip-tips-text\" id=\"vip_tips_text_vip\"><em>免费续期</em>2个月VIP</span>\n          <span class=\"vip-tips-text\" id=\"vip_tips_text_not_vip\">百度音乐<em>免费</em>送2个月VIP会员</span>\n\n          <div class=\"vip-tips-btn\" href=\"\" target=\"_blank\">点击领取</div>\n        </div>\n        <div class=\"vip-tips-close\" href=\"javascript:void(0)\"></div>\n      </div>\n    </a>\n  \n  \n\n  \t<div class=\"layout-bdbrowser\">\n\t\t<span class=\"icon-add2box\"></span>\n\t</div>\n\n</body>\n\n        \n\t\t<script type=\"text/javascript\" src=\"//mu5.bdstatic.com/static/j/WN7TVLTU.js\"></script>\n        <script type=\"text/javascript\" src=\"//mu7.bdstatic.com/static/j/zpkwSYcr.js\"></script>\n\t\t<script type=\"text/javascript\" src=\"//mu6.bdstatic.com/static/j/p86CrQm2.js\"></script>\n    \t\n        \t<script type=\"text/javascript\" src=\"//mu5.bdstatic.com/static/j/WCKtkJuQ.js\"></script>\n    \t\n\t\n\n\n  \t\n<script type=\"text/javascript\" src=\"//mu5.bdstatic.com/static/j/u5CEGuS6.js\"></script>\n<script type=\"text/javascript\" src=\"//mu6.bdstatic.com/static/j/mnsJY5ts.js\"></script>\n<script src=\"http://music.baidu.com/cms/huodong/pepsi/pepsi_ad13.js\"></script>\n<script type=\"text/javascript\">\n\t\tinitCollection(264374);\n\t\n\t$(document).bind(\"logined\", function () {\n\t    initCollection(264374);\n\t});\n//\t$(\".ecom-ad\").ecomad();\n\t// createClickMonkey(\"ting-music-songpage\");\n</script>\n\n\n\n\n  <div style=\"display:none;\">\n    <script type=\"text/javascript\">\n      var pageId = \"ting-muisc-songpage\";\n      (document.getElementsByTagName('head')[0] || body).appendChild(document.createElement('script')).src = 'http://img.baidu.com/hunter/musicmonkey.min.js';\n      var _bdhmProtocol = ((\"https:\" == document.location.protocol) ? \" https://\" : \" http://\");\n      document.write(unescape(\"%3Cscript src='\" + _bdhmProtocol + \"hm.baidu.com/h.js%3Fd0ad46e4afeacf34cd12de4c9b553aa6' type='text/javascript'%3E%3C/script%3E\"));\n    </script>\n  </div>\n\n<script type=\"text/javascript\" id=\"bdshare_js\" data=\"type=tools&amp;uid=10004&amp;mini=1\"></script>\n<script type=\"text/javascript\" id=\"bdshell_js\"></script>\n<script type=\"text/javascript\">\n    var bds_config = {\n        'bdText':'推荐一首张宇的歌曲《给你们》 （分享自@百度音乐）',\n        'bdPic':'http://musicdata.baidu.com/data2/pic/115429753/115429753.jpg',\n        'searchPic': false\n    };\n\tvar tmpImg = new Image();\n\ttmpImg.src = \"http://musicdata.baidu.com/data2/pic/115429753/115429753.jpg\";\n\tvar artistId = 1210;\n\n    document.getElementById(\"bdshell_js\").src = \"http://share.baidu.com/static/js/shell_v2.js?t=\" + new Date().getHours();\n</script>\n<script type=\"text/javascript\" src=\"//mu5.bdstatic.com/static/js/ting.apk.js\"></script>\n<script type=\"text/javascript\" src=\"//mu6.bdstatic.com/static/js/ting.appdown.js\"></script>\n\n</html>\n","source":"images/article1/264374.html","raw":"            <!DOCTYPE HTML>\n<html>\n<head>\n  \n    <meta charset=\"utf-8\"/>\n    <title>给你们-张宇,给你们在线试听,MP3免费下载,给你们歌词下载_百度音乐-听到极致</title>\n    \n    <meta content=\"张宇, 给你们 ,音乐,歌曲,在线,试听,MP3,下载,歌词,免费\" name=\"keywords\"/>\n    <meta content=\"张宇单曲给你们,给你们在线试听,给你们歌词,给你们在线试听,MP3免费下载\"          name=\"description\"/>\n    \n    <meta name=\"baidu-tc-verification\" content=\"5532f353892ad86095cb538ab988fb55\"/>\n    \n    <meta name=\"google-site-verification\" content=\"-michJB8aokthZhSsY3KIyd7TW9tQ2jSXI_87qveZpo\"/>\n    \n    <meta name=\"msvalidate.01\" content=\"B96798BECBFD1C248180D6DA843E27ED\"/>\n    \n    <meta property=\"wb:webmaster\" content=\"95125c09ba4c1de4\"/>\n    <!--STATUS OK-->\n              <link rel=\"shortcut icon\" href=\"/static/images/favicon.ico\"/>\n          \n    <script type=\"text/javascript\">\n      var ting = ting || {};\n          </script>\n    <script type=\"text/javascript\" _xbuilder=\"true\">var ting=ting||{};var httpSuccess=function(t){try{return!t.status&&location.protocol===\"file:\"||t.status>=200&&t.status<300||t.status===304||t.status===1223||t.status===0}catch(e){}return false};var parseJSON=function(t){if(typeof t!==\"string\"||!t){return null}var e=/^(\\s|\\u00A0)+|(\\s|\\u00A0)+$/g,a=t.replace(e,\"\");if(/^[\\],:{}\\s]*$/.test(a.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])/g,\"@\").replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g,\"]\").replace(/(?:^|:|,)(?:\\s*\\[)+/g,\"\"))){return window.JSON&&window.JSON.parse?window.JSON.parse(a):new Function(\"return \"+a)()}else{throw\"Invalid JSON: \"+a}};var httpData=function(t,e){var a=t.responseText;if(typeof a===\"string\"){if(e===\"json\"){a=parseJSON(a)}}return a};function getUserBar(t,e){var a=false;var n=window.XMLHttpRequest&&(window.location.protocol!=\"file\"||window.ActiveXObject)?function(){return new window.XMLHttpRequest}:function(){try{return new window.ActiveXObject(\"Microsoft.XMLHTTP\")}catch(t){}};var r=n();if(!r){return}e+=\"?_t=\"+(new Date).getTime();r.open(\"get\",e,true);r.setRequestHeader(\"Accept\",\"application/json, text/javascript, */*\");r.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");var s=r.onreadystatechange=function(){var e=false;if(!r||r.readyState===0){a=true;if(r){r.onreadystatechange={}}}else if(!a&&r&&r.readyState===4){a=true;r.onreadystatechange={};e=!httpSuccess(r)?\"error\":\"success\";var n;if(e===\"success\"){try{data=httpData(r,\"json\")}catch(s){e=\"parsererror\";n=s}}if(e===\"success\"){t.innerHTML=data.data.html;if(!!window.$){new Function(data.data.js).call(data.data.html)}else{ting.userBarInit=new Function(data.data.js)}}else{}r=null}};try{r.send(null)}catch(c){}}try{document.execCommand(\"BackgroundImageCache\",false,true)}catch(e){}var isKr=/\\/king/.test(location.pathname);</script>\n\n    \n      <link rel=\"stylesheet\" type=\"text/css\" href=\"//mu5.bdstatic.com/static/c/bxNeP1Oq.css\"/>\n    \n    \n<link rel=\"stylesheet\" type=\"text/css\" href=\"//mu7.bdstatic.com/static/c/vp2oM67Z.css\" />\n   \n \t<script type=\"text/javascript\" src=\"http://m.baidu.com/static/as/res2exe/js/res2exe_1.0.4.min.js\"></script>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"//mu6.bdstatic.com/static/c/f7UC42zu.css\" />\n\t<link rel=\"stylesheet\" href=\"http://music.baidu.com/cms/huodong/pepsi/pepsi_ad.css\">\n    <!--[if IE 6]>\n    <link rel=\"stylesheet\" id=\"bd_app_dl\" type=\"text/css\" href=\"http://m.baidu.com/static/as/res2exe/external/apk2exe-img.css?v=0703\" />\n    <![endif]-->\n\n  \n</head>\n<body \nclass=\"sns body-song-page\"\n>\n\n  \n              <div class=\"music-head \"  monkey=\"music-head\">\n  <div class=\"lg\"> <a id=\"bm-logo\" href=\"/\" ></a> </div>\n  <div class=\"search-wrap\">\n    <div class=\"lk\"> <a href=\"http://news.baidu.com/\"  onmouseover=\"s(this)\">新闻</a><a    href=\"http://www.baidu.com/\" onmouseover=\"s(this)\">网页</a><a    href=\"http://tieba.baidu.com/\" onmouseover=\"s(this)\">贴吧</a><a    href=\"http://zhidao.baidu.com/\" onmouseover=\"s(this)\">知道</a><span>音乐</span><a    href=\"http://image.baidu.com/\" onmouseover=\"s(this)\">图片</a><a   href=\"http://v.baidu.com/\" onmouseover=\"s(this)\" >视频</a><a   href=\"http://map.baidu.com/\" onmouseover=\"s(this)\" >地图</a><a   href=\"http://baike.baidu.com/\" onmouseover=\"s(this)\" >百科</a><a   href=\"http://wenku.baidu.com/\" onmouseover=\"s(this)\" >文库</a></div>\n    <form id=\"search_form\" name=\"f1\" action=\"/search\">\n      <div class=\"search\">\n        <span class=\"s_ipt_wr\">\n            <input\n                type=\"text\"\n                name=\"key\"\n                value=\"\"\n                 data-value=\"\"\n                data-default=\"请输入歌名、歌词、歌手或专辑\"\n                id=\"ww\"\n                class=\"kw s_ipt s_ipt_def\"\n                size=\"42\"\n                maxlength=\"100\"\n                autocomplete=\"off\"\n            />\n        </span><span class=\"s_btn_wr\"><input type=\"submit\" value=\"百度一下\" class=\"s_btn\" onmousedown=\"this.className='s_btn s_btn_h'\" onmouseout=\"this.className='s_btn'\"></span><span class=\"s_tools\"></span>\n      </div>\n      <div id=\"loading-pic\"></div>\n      <div class=\"sug-result\"></div>\n    </form>\n\n  </div>\n\n  <form style=\"width:0;height:0;\" name=\"vform\" id=\"vform\"  action=\"http://v.baidu.com/v\">\n    <input type=\"hidden\" name=\"ct\" value=\"301989888\">\n    <input type=\"hidden\" name=\"rn\" value=\"20\">\n    <input type=\"hidden\" name=\"pn\" value=\"0\">\n    <input type=\"hidden\" name=\"db\" value=\"0\">\n    <input type=\"hidden\" name=\"s\" value=\"3\">\n    <input type=\"hidden\" name=\"word\" value=\"\">\n  </form>\n\n  \n\n\n  \n                <div class=\"head-ad async-module\" id=\"adm-head-right\">\n            \n        </div>\n        \n</div>\n<div class=\"nav nav-singer singer-\" monkey=\"nav\">\n    <div class=\"nav-wrapper singer\">\n        <div class=\"nav-border\"></div>\n        <div class=\"nav-content\">\n            <ul class=\"main-nav\">\n                <li class=\"nav-lib first nav-current\">\n                    <a href=\"/\" data-log=\"nav-music-lib\"><span class=\"text\">音乐库</span></a>\n                    <div class=\"arrow\"></div>\n                </li>\n                <li class=\"nav-y\">\n                    <a href=\"http://y.baidu.com?pst=musicnav\" target=\"_blank\" data-log=\"nav-musicer\"><span class=\"text\">百度音乐人</span></a>\n                </li>\n                <li class=\"nav-kr \">\n                    <a href=\"/king?pst=musicnav\" data-log=\"nav-korean\" target=\"_blank\"><span class=\"text\">King榜</span></a>\n                    <i class=\"icon-new\" style=\"left:76px;\"></i>\n                                    </li>\n                <li class=\"nav-piao last\">\n                    <a href=\"//piao.baidu.com?pst=shouyedaohang\" target=\"_blank\" title=\"百度票务，买低价放心票！\" data-log=\"nav-piao\"><span class=\"text\">票务</span></a>\n                </li>\n            </ul>\n            <ul class=\"extra-nav\">\n                <li>\n                    <i class=\"power-icon-min index-icon-vip-active icon-nav-vip\"></i>\n                    <a href=\"/vip?pst=banner\" target=\"_blank\" data-log=\"nav-vip\">VIP</a>\n                </li>\n                <li class=\"line\"></li>\n                <li><a href=\"/app/android?pst=banner\" target=\"_blank\" data-log=\"mobileapp\">手机版</a></li>\n                <li class=\"line\"></li>\n                <li><a href=\"http://qianqian.baidu.com\" target=\"_blank\" data-log=\"ttplayer\">电脑版</a></li>\n                <li class=\"line\"></li>\n                <li><a href=\"http://fm.baidu.com\" target=\"_blank\" data-log=\"nav-fm\">百度随心听</a></li>\n                <li><a href=\"http://play.baidu.com\" id=\"myMbox\" target=\"_blank\" class=\"nav-musicmbox\" data-log=\"mymbox\">我的音乐盒</a></li>\n            </ul>\n            <i class=\"bg\"></i>\n        </div>\n    </div>\n    <div class=\"sub-nav-wrapper\">\n        <div class=\"sub-nav-item nav-current\">\n            <ul class=\"clearfix sub-nav-content\" id=\"sub_lib\" data-parent=\"nav-lib\">\n                            <li class=\"link first \"><a href=\"/\" data-log=\"nav-home\">首页</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link \"><a href=\"/top\" data-log=\"nav-top\">榜单</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link actived\"><a href=\"/artist\" data-log=\"nav-singer\">歌手</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link \"><a href=\"/tag\" data-log=\"nav-music-cate\">分类</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link \"><a href=\"/mv\" data-log=\"nav-mv\">MV</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link \"><a href=\"/songlist\" data-log=\"nav-songlist\">歌单</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link \"><a href=\"/lossless\" data-log=\"nav-lossless\">无损专区</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link \"><a href=\"/xiuchang\" data-log=\"nav-show\">美女秀场</a></li>\n             \n           </ul>\n                    </div>\n        \n    </div>\n</div><div id=\"userbar\" class=\"userbar\" alog-alias=\"userbar\"></div>\n\n\n            \n  <script type=\"text/javascript\">function s(t){if(document.f1.key.value.length>0){var e={news:{url:\"http://news.baidu.com/\",word:\"ns?tn=news&cl=2&rn=20&ct=1&ie=utf-8&word=\"},www:{url:\"http://www.baidu.com/\",word:\"s?cl=3&wd=\"},tieba:{url:\"http://tieba.baidu.com/\",word:\"f?ie=utf-8&kw=\"},zhidao:{url:\"http://zhidao.baidu.com/\",word:\"search?pn=0&rn=10&lm=0&word=\"},image:{url:\"http://image.baidu.com/\",word:\"i?ct=201326592&cl=2&nc=1&lm=-1&st=-1&tn=baiduimage&istype=2&fm=&pv=&z=0&ie=utf-8&word=\"},v:{url:\"http://v.baidu.com/\",word:\"v?ct=301989888&s=25&ie=utf-8&word=\"},map:{url:\"http://map.baidu.com/\",word:\"?newmap=1&ie=utf-8&s=s%26wd%3D\"},baike:{url:\"http://baike.baidu.com/\",word:\"search/word?enc=utf8&word=\"},wenku:{url:\"http://wenku.baidu.com/\",word:\"search?ie=utf-8&word=\"}};var r=t.href,i=/^http:\\/\\/([^.]+)\\./,a=r.match(i)[1],d=t.href.split(\"?\"),n=document.getElementById(\"ww\");var o=encodeURIComponent(n.value);if(n.value==n.getAttribute(\"data-default\")){t.href=e[a].url}else{t.href=e[a].url+e[a].word+o}}}var ting=ting||{};function initUserBar(){require([\"ting/userbar/init\"])}if(!window.attachEvent){window.addEventListener(\"load\",initUserBar,false)}else{window.attachEvent(\"onload\",initUserBar)}ting.refreshUserBar=initUserBar;</script>\n\n        \n  \n  <div class=\"music-main\" alog-alias=\"music-main-alog\">\n    <div class=\"music-main-body\">\n      <div class=\"music-body clearfix\">\n        \n\t\n\n\n\n\n\t\n\t\n\t\t\t\t\t\t\n\t\n\t\t\t\t\t\t\t\t\t\t\t \n\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n   \n\t    \t<script type=\"text/javascript\" src=\"http://cbjs.baidu.com/js/m.js\"></script>\n\t\t<script type=\"text/javascript\">\n\t\t\t// var artisttype = $(\".path-list .path-list-item\").find(\"a\")[1].innerHTML;\n\t\t\tBAIDU_CLB_addOrientation(\"artistid\", \"1210\");\n\t\t\tBAIDU_CLB_addOrientation(\"artisttype\", \"华语男歌手\");\n\t\t\tBAIDU_CLB_addOrientation(\"songid\", \"264374\");\n\t\t\tBAIDU_CLB_fillSlot(\"554933\");\n\t\t</script>\n\n\n<div class=\"path_navigator clearfix clicklog-path-navigator\">\n\t\n\t\n\n\t\n\n\t\t<ul class=\"path-list clearfix\">\n\t\t\t<li  class=\"path-list-item\" >\n\t\t\t\t\t\t\t<a href=\"/artist\">\t\t\t\t歌手</a>\t\t\t\t\t</li>\n\t\t\t\t<li  class=\"path-list-item\" >\n\t\t\t\t\t\t\t<a href=\"/artist/cn/male\">\t\t\t\t华语男歌手</a>\t\t\t\t\t</li>\n\t\t\t\t<li  class=\"path-list-item\" >\n\t\t\t\t\t\t\t<a href=\"/artist/1210\">\t\t\t\t张宇</a>\t\t\t\t\t</li>\n\t\t\t\t<li >\n\t\t\t\t\t\t\t\t\t\t\t给你们\t\t\t\t\t</li>\n\t</ul>\t\n</div>\n  \n\n\n\n    \n        <div class=\"main-body\">\n\n            \n<div class=\"main-body-cont\">\n<div class=\"mod-song-info\" >\n\t<h1 class=\"music-seo\">\n\t\t张宇歌曲给你们,给你们在线试听,给你们歌词下载,给你们在线试听,MP3免费下载。百度音乐为你提供<strong>给你们</strong>高品质的音乐享受。\n\t</h1>\n\t\n\n\n\n\n\n\n\n\n\n\n<div class=\"song-info\" monkey=\"songInfo\">\n\t\t<div class=\"play-holder clearfix\">\n\t\t\t<div class=\"song\">\n\t\t\t\t<h2 class=\"songpage-title clearfix\">\n\t\t\t\t        \t\t\t\t<span class=\"name\">给你们</span>                    <span data-id=\"264374\" class=\"icon-lossless lossless-hook\" title=\"无损品质音乐\"></span>                    \n\n\t\t\t\t</h2>\n\t\t\t\t                        <span class=\"song-play-num hot-num\">\n                                <span class=\"c6\">热度</span><span class=\"num\">217,861</span>                </span>\n\t\t\t</div>\n\n\t\t</div>\n\n    \n                    \n\n        <div class=\"song-opera clearfix\">\n          <div class=\"song-page-share clearfix\">\n                                                    <a   href=\"#\"  class=\"btn btn-b song-share\" >\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-share\"></i>                            <span class=\"txt\">分享</span>\n                        </span>\n    </a>\n            <span class=\"sep\"></span>\n            \n                                                                  <a data-btndata='{\"ids\":\"264374\",\"type\":\"song\",\"pay_type\":\"0\"}'  href=\"#\"  class=\"btn btn-b song-collect {&quot;ids&quot;:&quot;264374&quot;,&quot;type&quot;:&quot;song&quot;,&quot;pay_type&quot;:&quot;0&quot;}\" >\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-collect\"></i>                            <span class=\"txt\">收藏</span>\n                        </span>\n    </a>\n            \n\n            <div id=\"bdshare\" class=\"bds_tools bdshare_t\" >\n              <span class=\"arrow-down\"></span>\n              <a class=\"bds_qzone\"></a>\n              <a class=\"bds_renren\"></a>\n              <a class=\"bds_tqq\"></a>\n              <a class=\"bds_tsina\"></a>\n              <span class=\"bds_more\"></span>\n            </div>\n          </div>\n\n                      <span class=\"play-btn\" data-playdata='{&quot;id&quot;:&quot;264374&quot;,&quot;moduleName&quot;:&quot;playBtn&quot;}'>\n          \t                                          <a   href=\"javascript:void(0);\"  class=\"btn btn-a  clicklog-play-btn\" >\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-play\"></i>                            <span class=\"txt\">播放</span>\n                        </span>\n    </a>\n            </span>\n            <span class=\"add-song-btn\" data-adddata='{&quot;id&quot;:&quot;264374&quot;,&quot;moduleName&quot;:&quot;addBtn&quot;}'>\n          \t                                          <a   href=\"javascript:void(0);\"  class=\"btn btn-b \" >\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-add\"></i>                            <span class=\"txt\">添加</span>\n                        </span>\n    </a>\n            </span>\n                                                          \t                                                              <a data-btndata='{\"id\":\"264374\"}'  href=\"javascript:void(0);\"  class=\"btn btn-b down-song-btn {&quot;id&quot;:&quot;264374&quot;}\" >\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-down\"></i>                            <span class=\"txt\">下载</span>\n                        </span>\n    </a>\n          \n\n                                                                        <a data-btndata='{\"id\":\"264374\"}'  href=\"javascript:void(0);\"  class=\"btn btn-b btn-telapp {&quot;id&quot;:&quot;264374&quot;}\" >\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-send\"></i>                            <span class=\"txt\">下载到手机</span>\n                        </span>\n    </a>\n            <div class=\"tomobile-layer\">\n                <div class=\"layer-item method clearfix\">\n                    <a class=\"wireless\" href=\"javascript:;\">\n                        <span class=\"icon\"></span>\n                        <span class=\"text\">基于帐号下载到手机</span>\n                    </a>\n                    <a class=\"telapp\"\n                       href=\"javascript:;\"\n                       onclick=\"bd_app_dl(this);\"\n                       data_type=\"music\"\n                       data_url=\"http://zhangmenshiting.baidu.com/data2/music/638114/638114.mp3?xcode=24968852901d8b04356aa627b61115dd9b0c6a3cc498b9b1\"\n                       data_name=\"给你们\"\n                       data_package=\"\"\n                       data_versionname=\"\"\n                       data_icon=\"http://musicdata.baidu.com/data2/pic/115429767/115429767.jpg\"\n                       data_size=\"4701110\"\n                       data_from=\"1001490z\"\n                       ext_type=\"apk\"\n                       ext_url=\"http://music.baidu.com/cms/mobile/static/apk/BaiduMusic_pcbdshoujizhushou.apk\"\n                       ext_name=\"百度音乐\"\n                       ext_package=\"com.ting.mp3.android\"\n                       ext_versionname=\"3.8.1\"\n                       ext_icon=\"http://hiphotos.baidu.com/wisegame/pic/item/2410b912c8fcc3ce99f9f1709345d688d43f20b3.jpg\"\n                       ext_size=\"6828251\">\n                        <span class=\"icon\"></span>\n                        <span class=\"text\">通过数据线发送</span>\n                        <span class=\"em\">\n                            <span class=\"em-icon\"></span>\n                            <em>仅限安卓手机</em>\n                        </span>\n                    </a>\n                    <a class=\"sms\" href=\"javascript:;\">\n                        <span class=\"icon\"></span>\n                        <span class=\"text\">通过短信发送</span>\n                        <span class=\"em\">\n                            <span class=\"em-icon\"></span>\n                            <em>接收短信免费</em>\n                        </span>\n                    </a>\n                </div>\n                <div class=\"layer-item device\">\n                    <div class=\"head\">\n                        <h3>选择移动设备</h3>\n                        <div class=\"close\"></div>\n                    </div>\n                    <div class=\"body\">\n                        <ul class=\"device-list\"></ul>\n                        <div class=\"btn-wrapper\">\n                            <a href=\"javascript:;\" class=\"btn btn-h btn-i commit\">\n                                <span class=\"inner\">\n                                    <span class=\"txt\">发送到移动设备</span>\n                                </span>\n                            </a>\n                        </div>\n                        <div class=\"tip\">\n                            <p>如何添加新设备？</p>\n                            <p><strong>登录</strong> “百度音乐” 移动客户端，即可添加设备，刷新页面就可以看到新设备。</p>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"layer-item phone-number\">\n                    <div class=\"head\">\n                        <h3>填写要发送的手机号码</h3>\n                        <div class=\"close\"></div>\n                    </div>\n                    <div class=\"body\">\n                        <div class=\"number-input\">\n                            <input type=\"text\" />\n                        </div>\n                        <a href=\"javascript:;\" class=\"btn btn-h commit\">\n                            <span class=\"inner\">\n                                <span class=\"txt\">发送</span>\n                            </span>\n                        </a>\n                        <div class=\"tip\">\n                            收取短信不会扣除你的话费，下载歌曲需要你支付相应的无线上网费用\n                        </div>\n                    </div>\n                </div>\n                <div class=\"layer-item result-layer success unbind\">\n                    <div class=\"head\">\n                        <div class=\"close\"></div>\n                    </div>\n                    <div class=\"body\">\n                        <div class=\"icon\"></div>\n                        <div class=\"text\"></div>\n                        <p class=\"tip\"></p>\n                    </div>\n                    <div class=\"foot\">\n                        <h5>怎么在手机客户端接收歌曲？</h5>\n                        <ol>\n                            <li>\n                                下载并安装最新版百度音乐移动客户端：<br/>\n                                <a href=\"http://music.baidu.com/cms/mobile/static/apk/BaiduMusic_musicfsdx.apk\" title=\"Android版\">\n                                    <span class=\"icon android-icon-small\"></span>\n                                    Android版\n                                </a>\n                                <a href=\"http://itunes.apple.com/cn/app/id468623917\" title=\"iPhone版\">\n                                    <span  class=\"icon iphone-icon-small\"></span>\n                                    iPhone版\n                                </a>\n                                <a href=\"https://itunes.apple.com/cn/app/bai-duting/id585579073\" title=\"iPad版\">\n                                    <span class=\"icon pad-icon-small\"></span>\n                                    iPad版\n                                </a>\n                            </li>\n                            <li>打开百度音乐手机客户端并登录</li>\n                            <li>进入“我的下载”就可以看见它啦</li>\n                        </ol>\n                    </div>\n                </div>\n            </div>\n                </div>\n\n\t\t<div class=\"info-holder clearfix\">\n\t\t\t\t<ul class=\"base-info c6\">\n          \t\t\t\t\t<li>歌手：\t\t\t\t\t\t\t<span class=\"author_list\" title=\"张宇\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a  \" hidefocus=\"true\" href=\"/artist/1210\">张宇</a>\t</span>\n          \t\t\t\t\t</li>\n          \t\n\n\n\n\t\t\t\t\t\t\t\t\t\t<li class=\"clearfix\">所属专辑：<a href=\"/album/67198\">《雨一直下》</a></a>\n\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<li class=\"clearfix tag\">\n\t\t\t\t\t\t<span class=\"label\">歌曲标签：</span><a class=\"tag-list\" href=\"/tag/%E5%8D%8E%E8%AF%AD%E6%B5%81%E8%A1%8C\">华语流行</a><i class='module-line'></i><a class=\"tag-list\" href=\"/tag/%E6%80%80%E6%97%A7\">怀旧</a><i class='module-line'></i><a class=\"tag-list\" href=\"/tag/%E6%B5%81%E8%A1%8C\">流行</a><i class='module-line'></i><a class=\"tag-list\" href=\"/tag/70%E5%90%8E\">70后</a><i class='module-line'></i><a class=\"tag-list\" href=\"/tag/%E7%94%9C%E8%9C%9C\">甜蜜</a>\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t\t\t</ul>\n\n\t\t\t\t\t\t\t\t\n<div class=\"module module-mv clearfix\" monkey=\"module-mv\" >\n  <div class=\"head \">\n\t\n\n\n  </div>\t\n  <div class=\"body \">\n\t\n\n\n\n                    <div data-mvdata = '{&quot;id&quot;:&quot;67198&quot;,&quot;moduleName&quot;:&quot;mvCover&quot;}' class=\"mv-cover  mv-cover-hook\">\n                    \t<a target=\"_blank\" href=\"/mv/264374\" title=\"给你们-张宇\">\n        <img  class=\"lazyload\" org_src=\"http://pic8.qiyipic.com/thumb/20130327/a364296_160_90.jpg\" src=\"/static/images/blank.gif\"  alt=\"给你们-张宇\">\n        <span title=\"播放MV\" class=\"play\"></span>            </a>\n\t<a target=\"_blank\" href=\"/mv/264374\" class=\"mv-icon\"></a>    </div>\n\n  </div>\n  \n  \n</div>\n\t\t\t\t\t\t</div>\n\n\n\n</div>\n    <div id=\"download-clients\">\n    <div id=\"info-wrapper\">\n        <div id=\"clients-info\">\n            <div class=\"bd-music-logo css-icon-bd-music\"></div>\n            <div class=\"bd-music-text\"><em>百度音乐客户端</em><br>听歌，随时随地</div>\n        </div>\n    </div>\n    <div id=\"clients-wrapper\">\n        <ul id=\"clients-container\">\n            <li>\n                <a class=\"clients-pc\" href=\"http://qianqian.baidu.com/download/BaiduMusic-31000121.exe\" data-log='{ \"pos\":\"pc_down\" }' target=\"_blank\">\n                    <span class=\"icon css-icon-pc\"></span>PC版\n                </a>\n\n                <div class=\"pc-tips\">\n                    <span class=\"arrow-up\"></span>\n                    <a href=\"http://qianqian.baidu.com/download/BaiduMusic-12345628.exe\" target=\"_blank\">\n                        <img org_src=\"//mu6.bdstatic.com/static/i/9FPqiLDJ.png\" alt=\"\"/>\n                        <div class=\"pc-tips-download btn btn-a\"><span class=\"inner\">快速安装</span></div>\n                    </a>\n                </div>\n            </li>\n            <li >\n                <a class=\"clients-android\" href=\"http://music.baidu.com/cms/mobile/static/apk/BaiduMusic_danqu.apk\" data-log='{ \"pos\":\"android_down\" }'  target=\"_blank\" >\n                    <span class=\"icon css-icon-android\"></span>Android版\n                </a>\n                <div class=\"product-dialog\">\n                    <div class=\"mobile-tip-icon\"></div>\n                    <div class=\"head\">\n                        <div class=\"close\"></div>\n                        <h1>感谢您使用手机百度音乐</h1>\n                        <p>下载会在几秒内自动开始，如浏览器长时间没有响应，请点击<a target=\"_blank\" href=\"http://music.baidu.com/cms/mobile/static/apk/BaiduMusic_danqu.apk\">重新下载</a></p>\n                    </div>\n                    <div class=\"body\">\n                        <h2>您还可以通过以下方法下载百度音乐手机版</h2>\n                        <div class=\"down-method\">\n                            <img class=\"qrcode-down\" src=\"//mu5.bdstatic.com/static/i/wVUkcg1j.jpg\" alt=\"二维码下载\"/>\n                            <img class=\"web-down\" src=\"//mu7.bdstatic.com/static/i/pi4IS8vC.jpg\" alt=\"web下载\"/>\n                        </div>\n                    </div>\n                </div>\n            </li>\n            <li>\n                <a class=\"clients-iphone\" data-log='{ \"pos\":\"iphone_down\" }'  href=\"#\">\n                    <span class=\"icon css-icon-iphone\"></span>\n                    iPhone版\n                </a>\n            </li>\n            <li>\n                <a class=\"clients-ipad\" data-log='{ \"pos\":\"ipad_down\" }'  href=\"http://music.baidu.com/app/pad\" target=\"_blank\">\n                    <span class=\"icon css-icon-ipad\"></span>iPad版\n                </a>\n            </li>\n        </ul>\n    </div>\n    <div class=\"pop-tips ios-tips\">\n        <i class=\"arrow-up\"></i>\n        <a class=\"close\" href=\"#\"></a>\n        <p class=\"tip-head\">扫描下方的二维码立即安装，好音乐无处不在！</p>\n        <div class=\"down-logo\"><img width=\"110\" height=\"110\" org_src=\"//mu6.bdstatic.com/static/images/2code/app-down-danqu.png\" src=\"/static/images/blank.gif\"/></div>\n        <p class=\"tip-foot\">手机访问music.baidu.com更快捷</p>\n    </div>\n</div>\n\n\t\t\t\n\t\t<div class=\"module song-lyric clicklog-lyric clearfix\" monkey=\"song-lyric\" >\n  <div class=\"head \">\n\t\n\n\t\t\t\t\t\t<a name=\"song_lyric\"></a>\n<span class=\"opera\">\n\t<a class=\"room-lrc-btn\" target=\"_blank\" href=\"/xiuchang?song=%E7%BB%99%E4%BD%A0%E4%BB%AC&singer=%E5%BC%A0%E5%AE%87\">美女点唱</a>\n\t<span class=\"module-line\"></span>\n\t<a class=\"down-lrc-btn\" data-lyricdata='{ \"href\":\"/data2/lrc/30770249/%E7%BB%99%E4%BD%A0%E4%BB%AC.lrc\" }' href=\"#\">下载LRC歌词</a>\n\t<span class=\"module-line\"></span>\n\t<span data-clipboard-target=\"lyricCont\" id=\"copy-lyric\" class=\"copy-lyric copy-lyric-hook\">复制歌词</span>\n</span>\n<h2 class=\"title\">歌词</h2>\n\n  </div>\t\n  <div class=\"body \">\n\t\n\t<div id=\"lyricCont\" class=\"lyric-content lyric-hidden\">给你们<br />\n作词:十一郎 作曲:张宇<br />\n演唱：张宇<br />\n<br />\n他将是你的新郎<br />\n从今以后他就是你一生的伴<br />\n他的一切都将和你紧密相关<br />\n福和祸都要同当<br />\n<br />\n她将是你的新娘<br />\n她是别人用心托付在你手上<br />\n你要用你一生加倍照顾对待<br />\n苦或喜都要同享<br />\n<br />\n一定是特别的缘份<br />\n才可以一路走来变成了一家人<br />\n他多爱你几分<br />\n你多还他几分<br />\n找幸福的可能<br />\n从此不再是一个人<br />\n要处处时时想着念的都是我们<br />\n你付出了几分<br />\n爱就圆满了几分<br />\n<br />\n一定是特别的缘份<br />\n才可以一路走来变成了一家人<br />\n他多爱你几分<br />\n你多还他几分<br />\n找幸福的可能<br />\n从此不再是一个人<br />\n要处处时时想着念的都是我们<br />\n你付出了几分<br />\n爱就圆满了几分<br />\n他将是你的新郎<br />\n从今以后他就是你一生的伴<br />\n他的一切都将和你紧密相关<br />\n福和祸都要同当<br />\n<br />\n她将是你的新娘<br />\n她是别人用心托付在你手上<br />\n你要用你一生加倍照顾对待<br />\n苦或喜都要同享<br />\n<br />\n一定是特别的缘份<br />\n才可以一路走来变成了一家人<br />\n他多爱你几分<br />\n你多还他几分<br />\n找幸福的可能<br />\n从此不再是一个人<br />\n要处处时时想着念的都是我们<br />\n你付出了几分<br />\n爱就圆满了几分<br />\n<br />\n一定是特别的缘份<br />\n才可以一路走来变成了一家人<br />\n他多爱你几分<br />\n你多还他几分<br />\n找幸福的可能<br />\n从此不再是一个人<br />\n要处处时时想着念的都是我们<br />\n你付出了几分<br />\n爱就圆满了几分<br />\n你付出了几分<br />\n爱就圆满了几分</div>\n\t\t\t<a href=\"\" id=\"lyricSwitch\" class=\"lyric-switch\"><span class=\"text\">展开</span><span class=\"icon\"></span>\t </a>\n\t\n  </div>\n  \n  \n</div>\n\t\n</div>\n\t\n<div class=\"lossell-wrap\" style=\"margin-top:-20px\" data-page=\"songpage\">\n\t<p class=\"lossell-title underline\">相关无损大碟推荐</p>\n\t<ul class=\"lossell-list\">\n\n\t\t\n\t\t<li class=\"first-list\">\n\t\t\t<i class=\"lossell-icon\"></i>\n\t\t\t<div class=\"img-wrap\">\n\t\t\t\t<a href=\"/songlist/3059?pst=song_loss\" target=\"_blank\">\n\t\t\t\t\t<img src=\"http://a.hiphotos.baidu.com/ting/pic/item/9213b07eca806538630f699396dda144ac34824d.jpg\" width=\"150\" height=\"150\" title=\"泡pub\"/>\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t\t<div class=\"img-desgin\">\n\t\t\t\t<p><a href=\"/songlist/3059?pst=song_loss\" target=\"_blank\">泡pub</a></p>\n\t\t\t</div>\n\t\t</li>\n\n\t\t\n\t\t<li class=\"\">\n\t\t\t<i class=\"lossell-icon\"></i>\n\t\t\t<div class=\"img-wrap\">\n\t\t\t\t<a href=\"/songlist/2668?pst=song_loss\" target=\"_blank\">\n\t\t\t\t\t<img src=\"http://a.hiphotos.baidu.com/ting/pic/item/3b292df5e0fe99251cb5a4d035a85edf8cb171f1.jpg\" width=\"150\" height=\"150\" title=\"让棉花糖在天空中飞翔\"/>\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t\t<div class=\"img-desgin\">\n\t\t\t\t<p><a href=\"/songlist/2668?pst=song_loss\" target=\"_blank\">让棉花糖在天空中飞翔</a></p>\n\t\t\t</div>\n\t\t</li>\n\n\t\t\n\t\t<li class=\"\">\n\t\t\t<i class=\"lossell-icon\"></i>\n\t\t\t<div class=\"img-wrap\">\n\t\t\t\t<a href=\"/songlist/2165?pst=song_loss\" target=\"_blank\">\n\t\t\t\t\t<img src=\"http://b.hiphotos.baidu.com/ting/pic/item/d043ad4bd11373f07756a21fa50f4bfbfaed04c1.jpg\" width=\"150\" height=\"150\" title=\"影视金曲-侠骨柔情\"/>\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t\t<div class=\"img-desgin\">\n\t\t\t\t<p><a href=\"/songlist/2165?pst=song_loss\" target=\"_blank\">影视金曲-侠骨柔情</a></p>\n\t\t\t</div>\n\t\t</li>\n\n\t\t\n\t\t<li class=\"\">\n\t\t\t<i class=\"lossell-icon\"></i>\n\t\t\t<div class=\"img-wrap\">\n\t\t\t\t<a href=\"/songlist/2542?pst=song_loss\" target=\"_blank\">\n\t\t\t\t\t<img src=\"http://b.hiphotos.baidu.com/ting/pic/item/d53f8794a4c27d1e0b79f6441ad5ad6edcc438d7.jpg\" width=\"150\" height=\"150\" title=\"来吧 夜店达人们 我们一起骚！\"/>\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t\t<div class=\"img-desgin\">\n\t\t\t\t<p><a href=\"/songlist/2542?pst=song_loss\" target=\"_blank\">来吧 夜店达人们 我们一起骚！</a></p>\n\t\t\t</div>\n\t\t</li>\n\n\t\t\t</ul>\n</div>\n\n\n\t\t\t\t<div class=\"module hot-song clearfix\" monkey=\"hotSongs\">\n  <div class=\"head \">\n\t\n<a href=\"/artist/1210\" class=\"more\">更多<span>&gt;&gt;</span></a>\n<h2 class=\"title\">张宇的其他热歌</h2>\n\n  </div>\t\n  <div class=\"body \">\n\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"hot-song-list\" >\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t  <div data-listdata= '{&quot;moduleName&quot;:&quot;otherhotsong&quot;}' class=\"normal-song-list song-list song-list-hook   song-list-btnBottom\"><ul><li  data-songitem = '{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;10233440&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u6708\\u4eae\\u60f9\\u7684\\u7978&quot;,&quot;pay_type&quot;:0}}' class=\"  bb-dotimg clearfix  song-item-hook   list1\"><div class=\"song-item\"><span class=\"index-num index-hook\"  style=\"width: 20px;\" >01</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;10233440&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style='width: 248px;'><a href=\"/song/10233440\" title=\"月亮惹的祸\">月亮惹的祸</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/10233440\" class=\"mv-icon\"></a></span></div></li><li  data-songitem = '{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;2132046&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u8d81\\u65e9&quot;,&quot;pay_type&quot;:0}}' class=\"  bb-dotimg clearfix  song-item-hook   list2\"><div class=\"song-item\"><span class=\"index-num index-hook\"  style=\"width: 20px;\" >02</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;2132046&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style='width: 248px;'><a href=\"/song/2132046\" title=\"趁早\">趁早</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/2132046\" class=\"mv-icon\"></a></span></div></li><li  data-songitem = '{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;291890&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u96e8\\u4e00\\u76f4\\u4e0b&quot;,&quot;pay_type&quot;:0}}' class=\"  bb-dotimg clearfix  song-item-hook   list3\"><div class=\"song-item\"><span class=\"index-num index-hook\"  style=\"width: 20px;\" >03</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;291890&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style='width: 248px;'><a href=\"/song/291890\" title=\"雨一直下\">雨一直下</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/291890\" class=\"mv-icon\"></a></span></div></li><li  data-songitem = '{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;606412&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u66f2\\u7ec8\\u4eba\\u6563&quot;,&quot;pay_type&quot;:0}}' class=\"  bb-dotimg clearfix  song-item-hook   list4\"><div class=\"song-item\"><span class=\"index-num index-hook\"  style=\"width: 20px;\" >04</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;606412&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style='width: 248px;'><a href=\"/song/606412\" title=\"曲终人散\">曲终人散</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/606412\" class=\"mv-icon\"></a></span></div></li><li  data-songitem = '{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;229485&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u5c0f\\u5c0f\\u7684\\u592a\\u9633&quot;,&quot;pay_type&quot;:0}}' class=\"  bb-dotimg clearfix  song-item-hook   list5\"><div class=\"song-item\"><span class=\"index-num index-hook\"  style=\"width: 20px;\" >05</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;229485&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style='width: 248px;'><a href=\"/song/229485\" title=\"小小的太阳\">小小的太阳</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/229485\" class=\"mv-icon\"></a></span></div></li><li  data-songitem = '{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;962164&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u7528\\u5fc3\\u826f\\u82e6&quot;,&quot;pay_type&quot;:0}}' class=\"  bb-dotimg clearfix  song-item-hook   list6\"><div class=\"song-item\"><span class=\"index-num index-hook\"  style=\"width: 20px;\" >06</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;962164&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style='width: 248px;'><a href=\"/song/962164\" title=\"用心良苦\">用心良苦</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/962164\" class=\"mv-icon\"></a></span></div></li><li  data-songitem = '{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;260252&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u5927\\u5973\\u4eba&quot;,&quot;pay_type&quot;:0}}' class=\"  bb-dotimg clearfix  song-item-hook   list7\"><div class=\"song-item\"><span class=\"index-num index-hook\"  style=\"width: 20px;\" >07</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;260252&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style='width: 248px;'><a href=\"/song/260252\" title=\"大女人\">大女人</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/260252\" class=\"mv-icon\"></a></span></div></li><li  data-songitem = '{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;14743299&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u5fc3\\u672f&quot;,&quot;pay_type&quot;:0}}' class=\"  bb-dotimg clearfix  song-item-hook   list8\"><div class=\"song-item\"><span class=\"index-num index-hook\"  style=\"width: 20px;\" >08</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;14743299&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style='width: 248px;'><a href=\"/song/14743299\" title=\"心术\">心术</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/14743299\" class=\"mv-icon\"></a></span></div></li><li  data-songitem = '{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;678267&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u56da\\u9e1f&quot;,&quot;pay_type&quot;:0}}' class=\"  bb-dotimg clearfix  song-item-hook   list9\"><div class=\"song-item\"><span class=\"index-num index-hook\"  style=\"width: 20px;\" >09</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;678267&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style='width: 248px;'><a href=\"/song/678267\" title=\"囚鸟\">囚鸟</a></span></div></li><li  data-songitem = '{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;803696&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u7537\\u4eba\\u7684\\u597d&quot;,&quot;pay_type&quot;:0}}' class=\"  bb-dotimg clearfix  last-item song-item-hook   list10\"><div class=\"song-item\"><span class=\"index-num index-hook\"  style=\"width: 20px;\" >10</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;803696&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style='width: 248px;'><a href=\"/song/803696\" title=\"男人的好\">男人的好</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/803696\" class=\"mv-icon\"></a></span></div></li></ul></div>\n\t</div>\n\t<div class=\"hot-playall\">\n\t\t\t<span class=\"hot-play play-all-btn\" data-playdata = '{&quot;ids&quot;:&quot;10233440,2132046,291890,606412,229485,962164,260252,14743299,678267,803696&quot;,&quot;moduleName&quot;:&quot;otherhotsong&quot;}'>\n\t\t\t                                        <a   href=\"#\"  class=\"btn btn-a \" >\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-play\"></i>                            <span class=\"txt\">播放全部</span>\n                        </span>\n    </a>\n\t\t</span>\t\n\t</div>\t\n\n\n  </div>\n  \n  \n</div>\n\t\n\t\n\t\n<div class=\"module clicklog-hot clearfix\" monkey=\"hotSongs\">\n  <div class=\"head \">\n\t\n<h2 class=\"title\">最新评论</h2>\n\n  </div>\t\n  <div class=\"body \">\n\t\n<div id=\"song-comment\" class=\"mod-song-comment songpage-voice clicklog-voice\">\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\t\n<div class=\"user-voice-hook { userVoice:{ 'id':'264374','subjectType':'song','pageSize':'10', 'emptyMsg':'这首歌怎么样？快来评论一下吧！' } }\">\n\t<div class=\"comment-hook\">\n\t\t<ul class=\"comment-list comment-list-hook\"><li class=\"no-data\">评论加载中...</li></ul>\n\t\t\n\n<div class=\"page-navigator-hook  { pageNavigator:{ 'total':0, 'size':10, 'start':0, 'show_total':0, 'focus_neighbor':0 } }\">\n<div class=\"page-cont\">\n \t<div class=\"page-inner\">\n</div>\n</div>\n </div>\n\t\t<div class=\"comment-form clearfix\">\n\t\t\t<div class=\"comment-label\"></div>\n\t\t\t<div class=\"comment-input-icon\"></div>\n\t\t\t<div class=\"comment-form-submit clearfix\">\n\t\t\t\t<textarea autocomplete=\"off\" class=\"comment-area comment-input-hook field-text\">我来说两句！</textarea>\n\t\t\t\t<a href=\"javascript:void(0);\" class=\"user-voice-submit comment-submit-hook\">发布</a>\n\t\t\t</div>\n\t\t\t<span class=\"comment-prompt-hook\"></span>\n\t\t</div>\n\t</div>\n</div>\n\t\n</div>\n\n  </div>\n  \n  \n</div>\n\n\n</div>\n\n        </div>\n        <div class=\"sidebar\">\n\n            \n\t\n<div class=\"top-sidebar\" monkey=\"top-sidebar\">\n    \n   \n    \n    <dl class=\"clearfix\">\n        <dt>主打榜单</dt>\n                <dd  class=\"first\" >    \n           <a href=\"/top/dayhot\">热歌榜 <span>TOP500</span></a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"/top/new\">新歌榜 <span>TOP100</span></a>\n                   </dd>\n        \n                <dd >    \n           <a href=\"/top/artist\">歌手榜 <span>TOP200</span></a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"/king/top\">百度King榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"http://y.baidu.com/top?play_top=top&amp;pst=music_top\">原创音乐榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"http://y.baidu.com/top/song/pop?play_top=pop&amp;pst=music_top\">原创流行榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"http://y.baidu.com/top/song/folk?play_top=folk&amp;pst=music_top\">原创民谣榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"http://y.baidu.com/top/artist?pst=music_top\">热门原创音乐人榜</a>\n                   </dd>\n        \n            </dl>\n    \n    \n    <dl class=\"clearfix\">\n        <dt>分类榜单</dt>\n                <dd  class=\"first\" >    \n           <a href=\"/top/sprite\">雪碧音碰音榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"/top/oumei\">欧美金曲榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"/top/yingshijinqu\">影视金曲榜</a>\n                   </dd>\n        \n                <dd >    \n           <a href=\"/top/lovesong\">情歌对唱榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"/top/netsong\">网络歌曲榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"/top/oldsong\">经典老歌榜</a>\n                   </dd>\n        \n                <dd >    \n           <a href=\"/top/rock\">摇滚榜</a>\n                   </dd>\n        \n            </dl>\n    \n    \n    <dl class=\"clearfix\">\n        <dt>媒体榜单</dt>\n                <dd  class=\"first\" >    \n           <a href=\"/top/ktv\">KTV热歌榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"/top/billboard\">Billboard</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"/top/ukchart\">UK Chart</a>\n                   </dd>\n        \n                <dd >    \n           <a href=\"/top/hito\">Hito中文榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"/top/chizha\">叱咤歌曲榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"/top/mnet\">韩国Mnet</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd >    \n           <a href=\"/top/oricon\">日本公信榜</a>\n                   </dd>\n        \n            </dl>\n    \n</div>\n    \t    <div class=\"module musician-top clearfix\" monkey=\"musician-top\" >\n  <div class=\"head \">\n\t\n<a class=\"more\" target=\"_blank\" href=\"http://y.baidu.com/top?pst=song_hot\">更多<span>&gt;&gt;</span></a>\n<h2 class=\"title\">原创音乐榜<span class=\"i-musician\" title=\"此资源来自百度音乐人\"></span></h2>\n\n  </div>\t\n  <div class=\"body \">\n\t\n<ul class=\"musician-top-inner\">\n                            <li class=\"clearfix\">\n        <span class=\"num one\">\n            1\n        </span>\n        <span class=\"status\">\n            <i class=\"fair\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/109205?play_song=68937&pst=song_hot\">江湖&middot;闪蝶</a>\n        </span>\n        <span class=\"hot\">4.5万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            2\n        </span>\n        <span class=\"status\">\n            <i class=\"fair\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/105242?play_song=32120&pst=song_hot\">剑起苍澜 </a>\n        </span>\n        <span class=\"hot\">59.1万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            3\n        </span>\n        <span class=\"status\">\n            <i class=\"up\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/103620?play_song=24765&pst=song_hot\">佛陀在金殿等你</a>\n        </span>\n        <span class=\"hot\">13.0万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            4\n        </span>\n        <span class=\"status\">\n            <i class=\"up\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/102277?play_song=19205&pst=song_hot\">高跟鞋</a>\n        </span>\n        <span class=\"hot\">2.9万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            5\n        </span>\n        <span class=\"status\">\n            <i class=\"down\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/105321?play_song=31740&pst=song_hot\">疯了</a>\n        </span>\n        <span class=\"hot\">4.9万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            6\n        </span>\n        <span class=\"status\">\n            <i class=\"new\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/101345?play_song=14943&pst=song_hot\">那些没有的事</a>\n        </span>\n        <span class=\"hot\">12.3万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            7\n        </span>\n        <span class=\"status\">\n            <i class=\"fair\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/111594?play_song=66876&pst=song_hot\">白银饭店</a>\n        </span>\n        <span class=\"hot\">1.9万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            8\n        </span>\n        <span class=\"status\">\n            <i class=\"up\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/101449?play_song=14840&pst=song_hot\">彩虹</a>\n        </span>\n        <span class=\"hot\">1.7万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            9\n        </span>\n        <span class=\"status\">\n            <i class=\"down\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/104973?play_song=29241&pst=song_hot\">爱情歌曲(demo)</a>\n        </span>\n        <span class=\"hot\">26.4万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            10\n        </span>\n        <span class=\"status\">\n            <i class=\"up\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/100441?play_song=15730&pst=song_hot\">朋友</a>\n        </span>\n        <span class=\"hot\">12.9万</span>\n    </li>\n        </ul>\n\n  </div>\n  \n  \n</div>\n    \t\n\n\n<div class=\"ad\">\n    \n\n\n        <div\n        class=\"adm \"\n        data-id=\"482354\" \n         >\n                    <iframe\n                class=\"adm-iframe \"\n                src='/static/html/cbjs.html?v=20130816&id=482354'\n width=\"224\"\n                 height=\"130\"  scrolling=\"no\"\n                frameborder=\"0\">\n            </iframe>\n            </div>\n\n</div>\n<div class=\"ad\">\n    \n\n\n        <div\n        class=\"adm \"\n        data-id=\"844401\" \n         >\n                    <iframe\n                class=\"adm-iframe \"\n                src='/static/html/cbjs.html?v=20130816&id=844401'\n width=\"224\"\n                 height=\"130\"  scrolling=\"no\"\n                frameborder=\"0\">\n            </iframe>\n            </div>\n\n</div>\n<div class=\"ad\">\n    \n\n\n        <div\n        class=\"adm \"\n        data-id=\"874612\" \n         >\n                    <iframe\n                class=\"adm-iframe \"\n                src='/static/html/cbjs.html?v=20130816&id=874612'\n width=\"224\"\n                 height=\"130\"  scrolling=\"no\"\n                frameborder=\"0\">\n            </iframe>\n            </div>\n\n</div>\t<div class=\"module mod-topic clearfix\" monkey=\"mod-topic\">\n  <div class=\"head \">\n\t\n  <h2 class=\"title\">精彩推荐</h2>\n\n  </div>\t\n  <div class=\"body \">\n\t\n  <ul>\n                  <li><i></i><a href=\"http://music.baidu.com/songlist/4045?pst=gq\" target=\"_blank\" title=\"新歌榜第20周 | EXO攻陷周榜\">新歌榜第20周 | EXO攻陷周榜</a> </li>\n                        <li><i></i><a href=\"http://music.baidu.com/topic/cooperation/easonshoufa2014?pst=gq \" target=\"_blank\" title=\"独家首发| 陈奕迅全新国语大碟\">独家首发| 陈奕迅全新国语大碟</a> </li>\n                        <li><i></i><a href=\"http://music.baidu.com/topic/cooperation/wsyyzk09?pst=gq\" target=\"_blank\" title=\"慵懒的诱惑 极品沙发音乐\">慵懒的诱惑 极品沙发音乐</a> </li>\n                        <li><i></i><a href=\"http://music.baidu.com/topic/people/bigstar14liyuchun?pst=gq\" target=\"_blank\" title=\"音乐大人物 | 李宇春将酷进行到底\">音乐大人物 | 李宇春将酷进行到底</a> </li>\n                        <li><i></i><a href=\"http://music.baidu.com/songlist/3373?pst=gq\" target=\"_blank\" title=\"昨日重现 欧美经典老歌精选\">昨日重现 欧美经典老歌精选</a> </li>\n                        <li><i></i><a href=\"http://music.baidu.com/album/116668633?pst=gq\" target=\"_blank\" title=\"新歌首发| Super Junior-M完美回归\">新歌首发| Super Junior-M完美回归</a> </li>\n                                          </ul>\n\n  </div>\n  \n  \n</div>\n\n        </div>\n    \n\n      </div>\n    </div>\n  </div>\n  \n\n  \n    <div class=\"music-foot\" monkey=\"music-foot\" alog-alias=\"music-foot-alog\">\n                    <a href=\"javascript:void(0)\" class=\"weixin-follow\" id=\"weixin_follow\">加微信好友</a>\n<a href=\"http://e.weibo.com/musicbaidu\" target=\"_blank\" class=\"weibo-follow\">加关注</a>\n<a href=\"http://tousu.baidu.com/music/add\" target=\"_blank\" rel=\"nofollow\">意见反馈</a>\n<i class=\"module-line\"></i>\n<a target=\"_blank\" href=\"/doc/help\" rel=\"nofollow\">帮助中心</a>\n<i class=\"module-line\"></i>\n<a href=\"http://musicopen.baidu.com\" target=\"_blank\" rel=\"nofollow\">资源合作开放平台</a>\n<i class=\"module-line\"></i>\n<a href=\"http://y.baidu.com\" target=\"_blank\">原创音乐人</a>\n<i class=\"module-line\"></i>\n<span class=\"copy\">&copy;2014 Baidu</span>\n<a href=\"http://www.baidu.com/duty/\" target=\"_blank\" class=\"reader\" rel=\"nofollow\">使用百度前必读</a>\n文网文<span class=\"license\">[2010]197</span>号\n<div class=\"weixin-detail\" id=\"weixin_detail\">\n    <div class=\"weixin-qr\"></div>\n    <span>微信扫一扫<br/>精选音乐每日推送!</span>\n</div>\n            </div>\n  \n\n  \n    <div class=\"app-down-panel\">\n        <div class=\"go-to-top\"></div>\n    </div>\n    <a class=\"vip-tips\" id=\"vip_tips\" target=\"_blank\" href=\"/mobile?pst=tips\">\n      <div class=\"vip-tips-content\">\n        <div class=\"vip-tips-left\">\n\n        </div>\n        <div class=\"vip-tips-right\">\n          <span class=\"vip-tips-text\" id=\"vip_tips_text_vip\"><em>免费续期</em>2个月VIP</span>\n          <span class=\"vip-tips-text\" id=\"vip_tips_text_not_vip\">百度音乐<em>免费</em>送2个月VIP会员</span>\n\n          <div class=\"vip-tips-btn\" href=\"\" target=\"_blank\">点击领取</div>\n        </div>\n        <div class=\"vip-tips-close\" href=\"javascript:void(0)\"></div>\n      </div>\n    </a>\n  \n  \n\n  \t<div class=\"layout-bdbrowser\">\n\t\t<span class=\"icon-add2box\"></span>\n\t</div>\n\n</body>\n\n        \n\t\t<script type=\"text/javascript\" src=\"//mu5.bdstatic.com/static/j/WN7TVLTU.js\"></script>\n        <script type=\"text/javascript\" src=\"//mu7.bdstatic.com/static/j/zpkwSYcr.js\"></script>\n\t\t<script type=\"text/javascript\" src=\"//mu6.bdstatic.com/static/j/p86CrQm2.js\"></script>\n    \t\n        \t<script type=\"text/javascript\" src=\"//mu5.bdstatic.com/static/j/WCKtkJuQ.js\"></script>\n    \t\n\t\n\n\n  \t\n<script type=\"text/javascript\" src=\"//mu5.bdstatic.com/static/j/u5CEGuS6.js\"></script>\n<script type=\"text/javascript\" src=\"//mu6.bdstatic.com/static/j/mnsJY5ts.js\"></script>\n<script src=\"http://music.baidu.com/cms/huodong/pepsi/pepsi_ad13.js\"></script>\n<script type=\"text/javascript\">\n\t\tinitCollection(264374);\n\t\n\t$(document).bind(\"logined\", function () {\n\t    initCollection(264374);\n\t});\n//\t$(\".ecom-ad\").ecomad();\n\t// createClickMonkey(\"ting-music-songpage\");\n</script>\n\n\n\n\n  <div style=\"display:none;\">\n    <script type=\"text/javascript\">\n      var pageId = \"ting-muisc-songpage\";\n      (document.getElementsByTagName('head')[0] || body).appendChild(document.createElement('script')).src = 'http://img.baidu.com/hunter/musicmonkey.min.js';\n      var _bdhmProtocol = ((\"https:\" == document.location.protocol) ? \" https://\" : \" http://\");\n      document.write(unescape(\"%3Cscript src='\" + _bdhmProtocol + \"hm.baidu.com/h.js%3Fd0ad46e4afeacf34cd12de4c9b553aa6' type='text/javascript'%3E%3C/script%3E\"));\n    </script>\n  </div>\n\n<script type=\"text/javascript\" id=\"bdshare_js\" data=\"type=tools&amp;uid=10004&amp;mini=1\"></script>\n<script type=\"text/javascript\" id=\"bdshell_js\"></script>\n<script type=\"text/javascript\">\n    var bds_config = {\n        'bdText':'推荐一首张宇的歌曲《给你们》 （分享自@百度音乐）',\n        'bdPic':'http://musicdata.baidu.com/data2/pic/115429753/115429753.jpg',\n        'searchPic': false\n    };\n\tvar tmpImg = new Image();\n\ttmpImg.src = \"http://musicdata.baidu.com/data2/pic/115429753/115429753.jpg\";\n\tvar artistId = 1210;\n\n    document.getElementById(\"bdshell_js\").src = \"http://share.baidu.com/static/js/shell_v2.js?t=\" + new Date().getHours();\n</script>\n<script type=\"text/javascript\" src=\"//mu5.bdstatic.com/static/js/ting.apk.js\"></script>\n<script type=\"text/javascript\" src=\"//mu6.bdstatic.com/static/js/ting.appdown.js\"></script>\n\n</html>\n","date":"2019-09-23T05:58:02.000Z","updated":"2017-02-06T10:25:50.000Z","path":"images/article1/264374.html","title":"","comments":1,"layout":"page","_id":"ck0zcliib005wqhtfx2mk2qhn","content":"            <!DOCTYPE HTML>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.9.0\">\n  \n    <meta charset=\"utf-8\">\n    <title>给你们-张宇,给你们在线试听,MP3免费下载,给你们歌词下载_百度音乐-听到极致</title>\n    \n    <meta content=\"张宇, 给你们 ,音乐,歌曲,在线,试听,MP3,下载,歌词,免费\" name=\"keywords\">\n    <meta content=\"张宇单曲给你们,给你们在线试听,给你们歌词,给你们在线试听,MP3免费下载\" name=\"description\">\n    \n    <meta name=\"baidu-tc-verification\" content=\"5532f353892ad86095cb538ab988fb55\">\n    \n    <meta name=\"google-site-verification\" content=\"-michJB8aokthZhSsY3KIyd7TW9tQ2jSXI_87qveZpo\">\n    \n    <meta name=\"msvalidate.01\" content=\"B96798BECBFD1C248180D6DA843E27ED\">\n    \n    <meta property=\"wb:webmaster\" content=\"95125c09ba4c1de4\">\n    <!--STATUS OK-->\n              <link rel=\"shortcut icon\" href=\"/static/images/favicon.ico\">\n          \n    <script type=\"text/javascript\">\n      var ting = ting || {};\n          </script>\n    <script type=\"text/javascript\" _xbuilder=\"true\">var ting=ting||{};var httpSuccess=function(t){try{return!t.status&&location.protocol===\"file:\"||t.status>=200&&t.status<300||t.status===304||t.status===1223||t.status===0}catch(e){}return false};var parseJSON=function(t){if(typeof t!==\"string\"||!t){return null}var e=/^(\\s|\\u00A0)+|(\\s|\\u00A0)+$/g,a=t.replace(e,\"\");if(/^[\\],:{}\\s]*$/.test(a.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])/g,\"@\").replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g,\"]\").replace(/(?:^|:|,)(?:\\s*\\[)+/g,\"\"))){return window.JSON&&window.JSON.parse?window.JSON.parse(a):new Function(\"return \"+a)()}else{throw\"Invalid JSON: \"+a}};var httpData=function(t,e){var a=t.responseText;if(typeof a===\"string\"){if(e===\"json\"){a=parseJSON(a)}}return a};function getUserBar(t,e){var a=false;var n=window.XMLHttpRequest&&(window.location.protocol!=\"file\"||window.ActiveXObject)?function(){return new window.XMLHttpRequest}:function(){try{return new window.ActiveXObject(\"Microsoft.XMLHTTP\")}catch(t){}};var r=n();if(!r){return}e+=\"?_t=\"+(new Date).getTime();r.open(\"get\",e,true);r.setRequestHeader(\"Accept\",\"application/json, text/javascript, */*\");r.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");var s=r.onreadystatechange=function(){var e=false;if(!r||r.readyState===0){a=true;if(r){r.onreadystatechange={}}}else if(!a&&r&&r.readyState===4){a=true;r.onreadystatechange={};e=!httpSuccess(r)?\"error\":\"success\";var n;if(e===\"success\"){try{data=httpData(r,\"json\")}catch(s){e=\"parsererror\";n=s}}if(e===\"success\"){t.innerHTML=data.data.html;if(!!window.$){new Function(data.data.js).call(data.data.html)}else{ting.userBarInit=new Function(data.data.js)}}else{}r=null}};try{r.send(null)}catch(c){}}try{document.execCommand(\"BackgroundImageCache\",false,true)}catch(e){}var isKr=/\\/king/.test(location.pathname);</script>\n\n    \n      <link rel=\"stylesheet\" type=\"text/css\" href=\"//mu5.bdstatic.com/static/c/bxNeP1Oq.css\">\n    \n    \n<link rel=\"stylesheet\" type=\"text/css\" href=\"//mu7.bdstatic.com/static/c/vp2oM67Z.css\">\n   \n \t<script type=\"text/javascript\" src=\"http://m.baidu.com/static/as/res2exe/js/res2exe_1.0.4.min.js\"></script>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"//mu6.bdstatic.com/static/c/f7UC42zu.css\">\n\t<link rel=\"stylesheet\" href=\"http://music.baidu.com/cms/huodong/pepsi/pepsi_ad.css\">\n    <!--[if IE 6]>\n    <link rel=\"stylesheet\" id=\"bd_app_dl\" type=\"text/css\" href=\"http://m.baidu.com/static/as/res2exe/external/apk2exe-img.css?v=0703\" />\n    <![endif]-->\n\n  \n</head>\n<body class=\"sns body-song-page\">\n\n  \n              <div class=\"music-head \" monkey=\"music-head\">\n  <div class=\"lg\"> <a id=\"bm-logo\" href=\"/\"></a> </div>\n  <div class=\"search-wrap\">\n    <div class=\"lk\"> <a href=\"http://news.baidu.com/\" onmouseover=\"s(this)\" target=\"_blank\" rel=\"noopener\">新闻</a><a href=\"http://www.baidu.com/\" onmouseover=\"s(this)\" target=\"_blank\" rel=\"noopener\">网页</a><a href=\"http://tieba.baidu.com/\" onmouseover=\"s(this)\" target=\"_blank\" rel=\"noopener\">贴吧</a><a href=\"http://zhidao.baidu.com/\" onmouseover=\"s(this)\" target=\"_blank\" rel=\"noopener\">知道</a><span>音乐</span><a href=\"http://image.baidu.com/\" onmouseover=\"s(this)\" target=\"_blank\" rel=\"noopener\">图片</a><a href=\"http://v.baidu.com/\" onmouseover=\"s(this)\" target=\"_blank\" rel=\"noopener\">视频</a><a href=\"http://map.baidu.com/\" onmouseover=\"s(this)\" target=\"_blank\" rel=\"noopener\">地图</a><a href=\"http://baike.baidu.com/\" onmouseover=\"s(this)\" target=\"_blank\" rel=\"noopener\">百科</a><a href=\"http://wenku.baidu.com/\" onmouseover=\"s(this)\" target=\"_blank\" rel=\"noopener\">文库</a></div>\n    <form id=\"search_form\" name=\"f1\" action=\"/search\">\n      <div class=\"search\">\n        <span class=\"s_ipt_wr\">\n            <input type=\"text\" name=\"key\" value data-value data-default=\"请输入歌名、歌词、歌手或专辑\" id=\"ww\" class=\"kw s_ipt s_ipt_def\" size=\"42\" maxlength=\"100\" autocomplete=\"off\">\n        </span><span class=\"s_btn_wr\"><input type=\"submit\" value=\"百度一下\" class=\"s_btn\" onmousedown=\"this.className='s_btn s_btn_h'\" onmouseout=\"this.className='s_btn'\"></span><span class=\"s_tools\"></span>\n      </div>\n      <div id=\"loading-pic\"></div>\n      <div class=\"sug-result\"></div>\n    </form>\n\n  </div>\n\n  <form style=\"width:0;height:0;\" name=\"vform\" id=\"vform\" action=\"http://v.baidu.com/v\">\n    <input type=\"hidden\" name=\"ct\" value=\"301989888\">\n    <input type=\"hidden\" name=\"rn\" value=\"20\">\n    <input type=\"hidden\" name=\"pn\" value=\"0\">\n    <input type=\"hidden\" name=\"db\" value=\"0\">\n    <input type=\"hidden\" name=\"s\" value=\"3\">\n    <input type=\"hidden\" name=\"word\" value>\n  </form>\n\n  \n\n\n  \n                <div class=\"head-ad async-module\" id=\"adm-head-right\">\n            \n        </div>\n        \n</div>\n<div class=\"nav nav-singer singer-\" monkey=\"nav\">\n    <div class=\"nav-wrapper singer\">\n        <div class=\"nav-border\"></div>\n        <div class=\"nav-content\">\n            <ul class=\"main-nav\">\n                <li class=\"nav-lib first nav-current\">\n                    <a href=\"/\" data-log=\"nav-music-lib\"><span class=\"text\">音乐库</span></a>\n                    <div class=\"arrow\"></div>\n                </li>\n                <li class=\"nav-y\">\n                    <a href=\"http://y.baidu.com?pst=musicnav\" target=\"_blank\" data-log=\"nav-musicer\"><span class=\"text\">百度音乐人</span></a>\n                </li>\n                <li class=\"nav-kr \">\n                    <a href=\"/king?pst=musicnav\" data-log=\"nav-korean\" target=\"_blank\"><span class=\"text\">King榜</span></a>\n                    <i class=\"icon-new\" style=\"left:76px;\"></i>\n                                    </li>\n                <li class=\"nav-piao last\">\n                    <a href=\"//piao.baidu.com?pst=shouyedaohang\" target=\"_blank\" title=\"百度票务，买低价放心票！\" data-log=\"nav-piao\"><span class=\"text\">票务</span></a>\n                </li>\n            </ul>\n            <ul class=\"extra-nav\">\n                <li>\n                    <i class=\"power-icon-min index-icon-vip-active icon-nav-vip\"></i>\n                    <a href=\"/vip?pst=banner\" target=\"_blank\" data-log=\"nav-vip\">VIP</a>\n                </li>\n                <li class=\"line\"></li>\n                <li><a href=\"/app/android?pst=banner\" target=\"_blank\" data-log=\"mobileapp\">手机版</a></li>\n                <li class=\"line\"></li>\n                <li><a href=\"http://qianqian.baidu.com\" target=\"_blank\" data-log=\"ttplayer\">电脑版</a></li>\n                <li class=\"line\"></li>\n                <li><a href=\"http://fm.baidu.com\" target=\"_blank\" data-log=\"nav-fm\">百度随心听</a></li>\n                <li><a href=\"http://play.baidu.com\" id=\"myMbox\" target=\"_blank\" class=\"nav-musicmbox\" data-log=\"mymbox\">我的音乐盒</a></li>\n            </ul>\n            <i class=\"bg\"></i>\n        </div>\n    </div>\n    <div class=\"sub-nav-wrapper\">\n        <div class=\"sub-nav-item nav-current\">\n            <ul class=\"clearfix sub-nav-content\" id=\"sub_lib\" data-parent=\"nav-lib\">\n                            <li class=\"link first \"><a href=\"/\" data-log=\"nav-home\">首页</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link \"><a href=\"/top\" data-log=\"nav-top\">榜单</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link actived\"><a href=\"/artist\" data-log=\"nav-singer\">歌手</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link \"><a href=\"/tag\" data-log=\"nav-music-cate\">分类</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link \"><a href=\"/mv\" data-log=\"nav-mv\">MV</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link \"><a href=\"/songlist\" data-log=\"nav-songlist\">歌单</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link \"><a href=\"/lossless\" data-log=\"nav-lossless\">无损专区</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link \"><a href=\"/xiuchang\" data-log=\"nav-show\">美女秀场</a></li>\n             \n           </ul>\n                    </div>\n        \n    </div>\n</div><div id=\"userbar\" class=\"userbar\" alog-alias=\"userbar\"></div>\n\n\n            \n  <script type=\"text/javascript\">function s(t){if(document.f1.key.value.length>0){var e={news:{url:\"http://news.baidu.com/\",word:\"ns?tn=news&cl=2&rn=20&ct=1&ie=utf-8&word=\"},www:{url:\"http://www.baidu.com/\",word:\"s?cl=3&wd=\"},tieba:{url:\"http://tieba.baidu.com/\",word:\"f?ie=utf-8&kw=\"},zhidao:{url:\"http://zhidao.baidu.com/\",word:\"search?pn=0&rn=10&lm=0&word=\"},image:{url:\"http://image.baidu.com/\",word:\"i?ct=201326592&cl=2&nc=1&lm=-1&st=-1&tn=baiduimage&istype=2&fm=&pv=&z=0&ie=utf-8&word=\"},v:{url:\"http://v.baidu.com/\",word:\"v?ct=301989888&s=25&ie=utf-8&word=\"},map:{url:\"http://map.baidu.com/\",word:\"?newmap=1&ie=utf-8&s=s%26wd%3D\"},baike:{url:\"http://baike.baidu.com/\",word:\"search/word?enc=utf8&word=\"},wenku:{url:\"http://wenku.baidu.com/\",word:\"search?ie=utf-8&word=\"}};var r=t.href,i=/^http:\\/\\/([^.]+)\\./,a=r.match(i)[1],d=t.href.split(\"?\"),n=document.getElementById(\"ww\");var o=encodeURIComponent(n.value);if(n.value==n.getAttribute(\"data-default\")){t.href=e[a].url}else{t.href=e[a].url+e[a].word+o}}}var ting=ting||{};function initUserBar(){require([\"ting/userbar/init\"])}if(!window.attachEvent){window.addEventListener(\"load\",initUserBar,false)}else{window.attachEvent(\"onload\",initUserBar)}ting.refreshUserBar=initUserBar;</script>\n\n        \n  \n  <div class=\"music-main\" alog-alias=\"music-main-alog\">\n    <div class=\"music-main-body\">\n      <div class=\"music-body clearfix\">\n        \n\t\n\n\n\n\n\t\n\t\n\t\t\t\t\t\t\n\t\n\t\t\t\t\t\t\t\t\t\t\t \n\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n   \n\t    \t<script type=\"text/javascript\" src=\"http://cbjs.baidu.com/js/m.js\"></script>\n\t\t<script type=\"text/javascript\">\n\t\t\t// var artisttype = $(\".path-list .path-list-item\").find(\"a\")[1].innerHTML;\n\t\t\tBAIDU_CLB_addOrientation(\"artistid\", \"1210\");\n\t\t\tBAIDU_CLB_addOrientation(\"artisttype\", \"华语男歌手\");\n\t\t\tBAIDU_CLB_addOrientation(\"songid\", \"264374\");\n\t\t\tBAIDU_CLB_fillSlot(\"554933\");\n\t\t</script>\n\n\n<div class=\"path_navigator clearfix clicklog-path-navigator\">\n\t\n\t\n\n\t\n\n\t\t<ul class=\"path-list clearfix\">\n\t\t\t<li class=\"path-list-item\">\n\t\t\t\t\t\t\t<a href=\"/artist\">\t\t\t\t歌手</a>\t\t\t\t\t</li>\n\t\t\t\t<li class=\"path-list-item\">\n\t\t\t\t\t\t\t<a href=\"/artist/cn/male\">\t\t\t\t华语男歌手</a>\t\t\t\t\t</li>\n\t\t\t\t<li class=\"path-list-item\">\n\t\t\t\t\t\t\t<a href=\"/artist/1210\">\t\t\t\t张宇</a>\t\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t\t\t给你们\t\t\t\t\t</li>\n\t</ul>\t\n</div>\n  \n\n\n\n    \n        <div class=\"main-body\">\n\n            \n<div class=\"main-body-cont\">\n<div class=\"mod-song-info\">\n\t<h1 class=\"music-seo\">\n\t\t张宇歌曲给你们,给你们在线试听,给你们歌词下载,给你们在线试听,MP3免费下载。百度音乐为你提供<strong>给你们</strong>高品质的音乐享受。\n\t</h1>\n\t\n\n\n\n\n\n\n\n\n\n\n<div class=\"song-info\" monkey=\"songInfo\">\n\t\t<div class=\"play-holder clearfix\">\n\t\t\t<div class=\"song\">\n\t\t\t\t<h2 class=\"songpage-title clearfix\">\n\t\t\t\t        \t\t\t\t<span class=\"name\">给你们</span>                    <span data-id=\"264374\" class=\"icon-lossless lossless-hook\" title=\"无损品质音乐\"></span>                    \n\n\t\t\t\t</h2>\n\t\t\t\t                        <span class=\"song-play-num hot-num\">\n                                <span class=\"c6\">热度</span><span class=\"num\">217,861</span>                </span>\n\t\t\t</div>\n\n\t\t</div>\n\n    \n                    \n\n        <div class=\"song-opera clearfix\">\n          <div class=\"song-page-share clearfix\">\n                                                    <a href=\"#\" class=\"btn btn-b song-share\">\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-share\"></i>                            <span class=\"txt\">分享</span>\n                        </span>\n    </a>\n            <span class=\"sep\"></span>\n            \n                                                                  <a data-btndata=\"{\" ids\":\"264374\",\"type\":\"song\",\"pay_type\":\"0\"}\" href=\"#\" class=\"btn btn-b song-collect {&quot;ids&quot;:&quot;264374&quot;,&quot;type&quot;:&quot;song&quot;,&quot;pay_type&quot;:&quot;0&quot;}\">\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-collect\"></i>                            <span class=\"txt\">收藏</span>\n                        </span>\n    </a>\n            \n\n            <div id=\"bdshare\" class=\"bds_tools bdshare_t\">\n              <span class=\"arrow-down\"></span>\n              <a class=\"bds_qzone\"></a>\n              <a class=\"bds_renren\"></a>\n              <a class=\"bds_tqq\"></a>\n              <a class=\"bds_tsina\"></a>\n              <span class=\"bds_more\"></span>\n            </div>\n          </div>\n\n                      <span class=\"play-btn\" data-playdata=\"{&quot;id&quot;:&quot;264374&quot;,&quot;moduleName&quot;:&quot;playBtn&quot;}\">\n          \t                                          <a href=\"javascript:void(0);\" class=\"btn btn-a  clicklog-play-btn\" target=\"_blank\" rel=\"noopener\">\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-play\"></i>                            <span class=\"txt\">播放</span>\n                        </span>\n    </a>\n            </span>\n            <span class=\"add-song-btn\" data-adddata=\"{&quot;id&quot;:&quot;264374&quot;,&quot;moduleName&quot;:&quot;addBtn&quot;}\">\n          \t                                          <a href=\"javascript:void(0);\" class=\"btn btn-b \" target=\"_blank\" rel=\"noopener\">\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-add\"></i>                            <span class=\"txt\">添加</span>\n                        </span>\n    </a>\n            </span>\n                                                          \t                                                              <a data-btndata=\"{\" id\":\"264374\"}\" href=\"javascript:void(0);\" class=\"btn btn-b down-song-btn {&quot;id&quot;:&quot;264374&quot;}\" target=\"_blank\" rel=\"noopener\">\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-down\"></i>                            <span class=\"txt\">下载</span>\n                        </span>\n    </a>\n          \n\n                                                                        <a data-btndata=\"{\" id\":\"264374\"}\" href=\"javascript:void(0);\" class=\"btn btn-b btn-telapp {&quot;id&quot;:&quot;264374&quot;}\" target=\"_blank\" rel=\"noopener\">\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-send\"></i>                            <span class=\"txt\">下载到手机</span>\n                        </span>\n    </a>\n            <div class=\"tomobile-layer\">\n                <div class=\"layer-item method clearfix\">\n                    <a class=\"wireless\" href=\"javascript:;\" target=\"_blank\" rel=\"noopener\">\n                        <span class=\"icon\"></span>\n                        <span class=\"text\">基于帐号下载到手机</span>\n                    </a>\n                    <a class=\"telapp\" href=\"javascript:;\" onclick=\"bd_app_dl(this);\" data_type=\"music\" data_url=\"http://zhangmenshiting.baidu.com/data2/music/638114/638114.mp3?xcode=24968852901d8b04356aa627b61115dd9b0c6a3cc498b9b1\" data_name=\"给你们\" data_package data_versionname data_icon=\"http://musicdata.baidu.com/data2/pic/115429767/115429767.jpg\" data_size=\"4701110\" data_from=\"1001490z\" ext_type=\"apk\" ext_url=\"http://music.baidu.com/cms/mobile/static/apk/BaiduMusic_pcbdshoujizhushou.apk\" ext_name=\"百度音乐\" ext_package=\"com.ting.mp3.android\" ext_versionname=\"3.8.1\" ext_icon=\"http://hiphotos.baidu.com/wisegame/pic/item/2410b912c8fcc3ce99f9f1709345d688d43f20b3.jpg\" ext_size=\"6828251\" target=\"_blank\" rel=\"noopener\">\n                        <span class=\"icon\"></span>\n                        <span class=\"text\">通过数据线发送</span>\n                        <span class=\"em\">\n                            <span class=\"em-icon\"></span>\n                            <em>仅限安卓手机</em>\n                        </span>\n                    </a>\n                    <a class=\"sms\" href=\"javascript:;\" target=\"_blank\" rel=\"noopener\">\n                        <span class=\"icon\"></span>\n                        <span class=\"text\">通过短信发送</span>\n                        <span class=\"em\">\n                            <span class=\"em-icon\"></span>\n                            <em>接收短信免费</em>\n                        </span>\n                    </a>\n                </div>\n                <div class=\"layer-item device\">\n                    <div class=\"head\">\n                        <h3>选择移动设备</h3>\n                        <div class=\"close\"></div>\n                    </div>\n                    <div class=\"body\">\n                        <ul class=\"device-list\"></ul>\n                        <div class=\"btn-wrapper\">\n                            <a href=\"javascript:;\" class=\"btn btn-h btn-i commit\" target=\"_blank\" rel=\"noopener\">\n                                <span class=\"inner\">\n                                    <span class=\"txt\">发送到移动设备</span>\n                                </span>\n                            </a>\n                        </div>\n                        <div class=\"tip\">\n                            <p>如何添加新设备？</p>\n                            <p><strong>登录</strong> “百度音乐” 移动客户端，即可添加设备，刷新页面就可以看到新设备。</p>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"layer-item phone-number\">\n                    <div class=\"head\">\n                        <h3>填写要发送的手机号码</h3>\n                        <div class=\"close\"></div>\n                    </div>\n                    <div class=\"body\">\n                        <div class=\"number-input\">\n                            <input type=\"text\">\n                        </div>\n                        <a href=\"javascript:;\" class=\"btn btn-h commit\" target=\"_blank\" rel=\"noopener\">\n                            <span class=\"inner\">\n                                <span class=\"txt\">发送</span>\n                            </span>\n                        </a>\n                        <div class=\"tip\">\n                            收取短信不会扣除你的话费，下载歌曲需要你支付相应的无线上网费用\n                        </div>\n                    </div>\n                </div>\n                <div class=\"layer-item result-layer success unbind\">\n                    <div class=\"head\">\n                        <div class=\"close\"></div>\n                    </div>\n                    <div class=\"body\">\n                        <div class=\"icon\"></div>\n                        <div class=\"text\"></div>\n                        <p class=\"tip\"></p>\n                    </div>\n                    <div class=\"foot\">\n                        <h5>怎么在手机客户端接收歌曲？</h5>\n                        <ol>\n                            <li>\n                                下载并安装最新版百度音乐移动客户端：<br>\n                                <a href=\"http://music.baidu.com/cms/mobile/static/apk/BaiduMusic_musicfsdx.apk\" title=\"Android版\" target=\"_blank\" rel=\"noopener\">\n                                    <span class=\"icon android-icon-small\"></span>\n                                    Android版\n                                </a>\n                                <a href=\"http://itunes.apple.com/cn/app/id468623917\" title=\"iPhone版\" target=\"_blank\" rel=\"noopener\">\n                                    <span class=\"icon iphone-icon-small\"></span>\n                                    iPhone版\n                                </a>\n                                <a href=\"https://itunes.apple.com/cn/app/bai-duting/id585579073\" title=\"iPad版\" target=\"_blank\" rel=\"noopener\">\n                                    <span class=\"icon pad-icon-small\"></span>\n                                    iPad版\n                                </a>\n                            </li>\n                            <li>打开百度音乐手机客户端并登录</li>\n                            <li>进入“我的下载”就可以看见它啦</li>\n                        </ol>\n                    </div>\n                </div>\n            </div>\n                </div>\n\n\t\t<div class=\"info-holder clearfix\">\n\t\t\t\t<ul class=\"base-info c6\">\n          \t\t\t\t\t<li>歌手：\t\t\t\t\t\t\t<span class=\"author_list\" title=\"张宇\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a \" hidefocus=\"true\" href=\"/artist/1210\">张宇</a>\t</span>\n          \t\t\t\t\t</li>\n          \t\n\n\n\n\t\t\t\t\t\t\t\t\t\t<li class=\"clearfix\">所属专辑：<a href=\"/album/67198\">《雨一直下》</a>\n\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<li class=\"clearfix tag\">\n\t\t\t\t\t\t<span class=\"label\">歌曲标签：</span><a class=\"tag-list\" href=\"/tag/%E5%8D%8E%E8%AF%AD%E6%B5%81%E8%A1%8C\">华语流行</a><i class=\"module-line\"></i><a class=\"tag-list\" href=\"/tag/%E6%80%80%E6%97%A7\">怀旧</a><i class=\"module-line\"></i><a class=\"tag-list\" href=\"/tag/%E6%B5%81%E8%A1%8C\">流行</a><i class=\"module-line\"></i><a class=\"tag-list\" href=\"/tag/70%E5%90%8E\">70后</a><i class=\"module-line\"></i><a class=\"tag-list\" href=\"/tag/%E7%94%9C%E8%9C%9C\">甜蜜</a>\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t\t\t</ul>\n\n\t\t\t\t\t\t\t\t\n<div class=\"module module-mv clearfix\" monkey=\"module-mv\">\n  <div class=\"head \">\n\t\n\n\n  </div>\t\n  <div class=\"body \">\n\t\n\n\n\n                    <div data-mvdata=\"{&quot;id&quot;:&quot;67198&quot;,&quot;moduleName&quot;:&quot;mvCover&quot;}\" class=\"mv-cover  mv-cover-hook\">\n                    \t<a target=\"_blank\" href=\"/mv/264374\" title=\"给你们-张宇\">\n        <img class=\"lazyload\" org_src=\"http://pic8.qiyipic.com/thumb/20130327/a364296_160_90.jpg\" src=\"/static/images/blank.gif\" alt=\"给你们-张宇\">\n        <span title=\"播放MV\" class=\"play\"></span>            </a>\n\t<a target=\"_blank\" href=\"/mv/264374\" class=\"mv-icon\"></a>    </div>\n\n  </div>\n  \n  \n</div>\n\t\t\t\t\t\t</div>\n\n\n\n</div>\n    <div id=\"download-clients\">\n    <div id=\"info-wrapper\">\n        <div id=\"clients-info\">\n            <div class=\"bd-music-logo css-icon-bd-music\"></div>\n            <div class=\"bd-music-text\"><em>百度音乐客户端</em><br>听歌，随时随地</div>\n        </div>\n    </div>\n    <div id=\"clients-wrapper\">\n        <ul id=\"clients-container\">\n            <li>\n                <a class=\"clients-pc\" href=\"http://qianqian.baidu.com/download/BaiduMusic-31000121.exe\" data-log=\"{ \" pos\":\"pc_down\" }\" target=\"_blank\">\n                    <span class=\"icon css-icon-pc\"></span>PC版\n                </a>\n\n                <div class=\"pc-tips\">\n                    <span class=\"arrow-up\"></span>\n                    <a href=\"http://qianqian.baidu.com/download/BaiduMusic-12345628.exe\" target=\"_blank\">\n                        <img org_src=\"//mu6.bdstatic.com/static/i/9FPqiLDJ.png\" alt>\n                        <div class=\"pc-tips-download btn btn-a\"><span class=\"inner\">快速安装</span></div>\n                    </a>\n                </div>\n            </li>\n            <li>\n                <a class=\"clients-android\" href=\"http://music.baidu.com/cms/mobile/static/apk/BaiduMusic_danqu.apk\" data-log=\"{ \" pos\":\"android_down\" }\" target=\"_blank\">\n                    <span class=\"icon css-icon-android\"></span>Android版\n                </a>\n                <div class=\"product-dialog\">\n                    <div class=\"mobile-tip-icon\"></div>\n                    <div class=\"head\">\n                        <div class=\"close\"></div>\n                        <h1>感谢您使用手机百度音乐</h1>\n                        <p>下载会在几秒内自动开始，如浏览器长时间没有响应，请点击<a target=\"_blank\" href=\"http://music.baidu.com/cms/mobile/static/apk/BaiduMusic_danqu.apk\">重新下载</a></p>\n                    </div>\n                    <div class=\"body\">\n                        <h2>您还可以通过以下方法下载百度音乐手机版</h2>\n                        <div class=\"down-method\">\n                            <img class=\"qrcode-down\" src=\"//mu5.bdstatic.com/static/i/wVUkcg1j.jpg\" alt=\"二维码下载\">\n                            <img class=\"web-down\" src=\"//mu7.bdstatic.com/static/i/pi4IS8vC.jpg\" alt=\"web下载\">\n                        </div>\n                    </div>\n                </div>\n            </li>\n            <li>\n                <a class=\"clients-iphone\" data-log=\"{ \" pos\":\"iphone_down\" }\" href=\"#\">\n                    <span class=\"icon css-icon-iphone\"></span>\n                    iPhone版\n                </a>\n            </li>\n            <li>\n                <a class=\"clients-ipad\" data-log=\"{ \" pos\":\"ipad_down\" }\" href=\"http://music.baidu.com/app/pad\" target=\"_blank\">\n                    <span class=\"icon css-icon-ipad\"></span>iPad版\n                </a>\n            </li>\n        </ul>\n    </div>\n    <div class=\"pop-tips ios-tips\">\n        <i class=\"arrow-up\"></i>\n        <a class=\"close\" href=\"#\"></a>\n        <p class=\"tip-head\">扫描下方的二维码立即安装，好音乐无处不在！</p>\n        <div class=\"down-logo\"><img width=\"110\" height=\"110\" org_src=\"//mu6.bdstatic.com/static/images/2code/app-down-danqu.png\" src=\"/static/images/blank.gif\"></div>\n        <p class=\"tip-foot\">手机访问music.baidu.com更快捷</p>\n    </div>\n</div>\n\n\t\t\t\n\t\t<div class=\"module song-lyric clicklog-lyric clearfix\" monkey=\"song-lyric\">\n  <div class=\"head \">\n\t\n\n\t\t\t\t\t\t<a name=\"song_lyric\"></a>\n<span class=\"opera\">\n\t<a class=\"room-lrc-btn\" target=\"_blank\" href=\"/xiuchang?song=%E7%BB%99%E4%BD%A0%E4%BB%AC&singer=%E5%BC%A0%E5%AE%87\">美女点唱</a>\n\t<span class=\"module-line\"></span>\n\t<a 30770249 class=\"down-lrc-btn\" data-lyricdata=\"{ \" href\":\" data2 lrc %e7%bb%99%e4%bd%a0%e4%bb%ac.lrc\" }\" href=\"#\">下载LRC歌词</a>\n\t<span class=\"module-line\"></span>\n\t<span data-clipboard-target=\"lyricCont\" id=\"copy-lyric\" class=\"copy-lyric copy-lyric-hook\">复制歌词</span>\n</span>\n<h2 class=\"title\">歌词</h2>\n\n  </div>\t\n  <div class=\"body \">\n\t\n\t<div id=\"lyricCont\" class=\"lyric-content lyric-hidden\">给你们<br>\n作词:十一郎 作曲:张宇<br>\n演唱：张宇<br>\n<br>\n他将是你的新郎<br>\n从今以后他就是你一生的伴<br>\n他的一切都将和你紧密相关<br>\n福和祸都要同当<br>\n<br>\n她将是你的新娘<br>\n她是别人用心托付在你手上<br>\n你要用你一生加倍照顾对待<br>\n苦或喜都要同享<br>\n<br>\n一定是特别的缘份<br>\n才可以一路走来变成了一家人<br>\n他多爱你几分<br>\n你多还他几分<br>\n找幸福的可能<br>\n从此不再是一个人<br>\n要处处时时想着念的都是我们<br>\n你付出了几分<br>\n爱就圆满了几分<br>\n<br>\n一定是特别的缘份<br>\n才可以一路走来变成了一家人<br>\n他多爱你几分<br>\n你多还他几分<br>\n找幸福的可能<br>\n从此不再是一个人<br>\n要处处时时想着念的都是我们<br>\n你付出了几分<br>\n爱就圆满了几分<br>\n他将是你的新郎<br>\n从今以后他就是你一生的伴<br>\n他的一切都将和你紧密相关<br>\n福和祸都要同当<br>\n<br>\n她将是你的新娘<br>\n她是别人用心托付在你手上<br>\n你要用你一生加倍照顾对待<br>\n苦或喜都要同享<br>\n<br>\n一定是特别的缘份<br>\n才可以一路走来变成了一家人<br>\n他多爱你几分<br>\n你多还他几分<br>\n找幸福的可能<br>\n从此不再是一个人<br>\n要处处时时想着念的都是我们<br>\n你付出了几分<br>\n爱就圆满了几分<br>\n<br>\n一定是特别的缘份<br>\n才可以一路走来变成了一家人<br>\n他多爱你几分<br>\n你多还他几分<br>\n找幸福的可能<br>\n从此不再是一个人<br>\n要处处时时想着念的都是我们<br>\n你付出了几分<br>\n爱就圆满了几分<br>\n你付出了几分<br>\n爱就圆满了几分</div>\n\t\t\t<a href id=\"lyricSwitch\" class=\"lyric-switch\"><span class=\"text\">展开</span><span class=\"icon\"></span>\t </a>\n\t\n  </div>\n  \n  \n</div>\n\t\n</div>\n\t\n<div class=\"lossell-wrap\" style=\"margin-top:-20px\" data-page=\"songpage\">\n\t<p class=\"lossell-title underline\">相关无损大碟推荐</p>\n\t<ul class=\"lossell-list\">\n\n\t\t\n\t\t<li class=\"first-list\">\n\t\t\t<i class=\"lossell-icon\"></i>\n\t\t\t<div class=\"img-wrap\">\n\t\t\t\t<a href=\"/songlist/3059?pst=song_loss\" target=\"_blank\">\n\t\t\t\t\t<img src=\"http://a.hiphotos.baidu.com/ting/pic/item/9213b07eca806538630f699396dda144ac34824d.jpg\" width=\"150\" height=\"150\" title=\"泡pub\">\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t\t<div class=\"img-desgin\">\n\t\t\t\t<p><a href=\"/songlist/3059?pst=song_loss\" target=\"_blank\">泡pub</a></p>\n\t\t\t</div>\n\t\t</li>\n\n\t\t\n\t\t<li class>\n\t\t\t<i class=\"lossell-icon\"></i>\n\t\t\t<div class=\"img-wrap\">\n\t\t\t\t<a href=\"/songlist/2668?pst=song_loss\" target=\"_blank\">\n\t\t\t\t\t<img src=\"http://a.hiphotos.baidu.com/ting/pic/item/3b292df5e0fe99251cb5a4d035a85edf8cb171f1.jpg\" width=\"150\" height=\"150\" title=\"让棉花糖在天空中飞翔\">\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t\t<div class=\"img-desgin\">\n\t\t\t\t<p><a href=\"/songlist/2668?pst=song_loss\" target=\"_blank\">让棉花糖在天空中飞翔</a></p>\n\t\t\t</div>\n\t\t</li>\n\n\t\t\n\t\t<li class>\n\t\t\t<i class=\"lossell-icon\"></i>\n\t\t\t<div class=\"img-wrap\">\n\t\t\t\t<a href=\"/songlist/2165?pst=song_loss\" target=\"_blank\">\n\t\t\t\t\t<img src=\"http://b.hiphotos.baidu.com/ting/pic/item/d043ad4bd11373f07756a21fa50f4bfbfaed04c1.jpg\" width=\"150\" height=\"150\" title=\"影视金曲-侠骨柔情\">\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t\t<div class=\"img-desgin\">\n\t\t\t\t<p><a href=\"/songlist/2165?pst=song_loss\" target=\"_blank\">影视金曲-侠骨柔情</a></p>\n\t\t\t</div>\n\t\t</li>\n\n\t\t\n\t\t<li class>\n\t\t\t<i class=\"lossell-icon\"></i>\n\t\t\t<div class=\"img-wrap\">\n\t\t\t\t<a href=\"/songlist/2542?pst=song_loss\" target=\"_blank\">\n\t\t\t\t\t<img src=\"http://b.hiphotos.baidu.com/ting/pic/item/d53f8794a4c27d1e0b79f6441ad5ad6edcc438d7.jpg\" width=\"150\" height=\"150\" title=\"来吧 夜店达人们 我们一起骚！\">\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t\t<div class=\"img-desgin\">\n\t\t\t\t<p><a href=\"/songlist/2542?pst=song_loss\" target=\"_blank\">来吧 夜店达人们 我们一起骚！</a></p>\n\t\t\t</div>\n\t\t</li>\n\n\t\t\t</ul>\n</div>\n\n\n\t\t\t\t<div class=\"module hot-song clearfix\" monkey=\"hotSongs\">\n  <div class=\"head \">\n\t\n<a href=\"/artist/1210\" class=\"more\">更多<span>&gt;&gt;</span></a>\n<h2 class=\"title\">张宇的其他热歌</h2>\n\n  </div>\t\n  <div class=\"body \">\n\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"hot-song-list\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t  <div data-listdata=\"{&quot;moduleName&quot;:&quot;otherhotsong&quot;}\" class=\"normal-song-list song-list song-list-hook   song-list-btnBottom\"><ul><li data-songitem=\"{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;10233440&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u6708\\u4eae\\u60f9\\u7684\\u7978&quot;,&quot;pay_type&quot;:0}}\" class=\"  bb-dotimg clearfix  song-item-hook   list1\"><div class=\"song-item\"><span class=\"index-num index-hook\" style=\"width: 20px;\">01</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;10233440&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style=\"width: 248px;\"><a href=\"/song/10233440\" title=\"月亮惹的祸\">月亮惹的祸</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/10233440\" class=\"mv-icon\"></a></span></div></li><li data-songitem=\"{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;2132046&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u8d81\\u65e9&quot;,&quot;pay_type&quot;:0}}\" class=\"  bb-dotimg clearfix  song-item-hook   list2\"><div class=\"song-item\"><span class=\"index-num index-hook\" style=\"width: 20px;\">02</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;2132046&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style=\"width: 248px;\"><a href=\"/song/2132046\" title=\"趁早\">趁早</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/2132046\" class=\"mv-icon\"></a></span></div></li><li data-songitem=\"{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;291890&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u96e8\\u4e00\\u76f4\\u4e0b&quot;,&quot;pay_type&quot;:0}}\" class=\"  bb-dotimg clearfix  song-item-hook   list3\"><div class=\"song-item\"><span class=\"index-num index-hook\" style=\"width: 20px;\">03</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;291890&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style=\"width: 248px;\"><a href=\"/song/291890\" title=\"雨一直下\">雨一直下</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/291890\" class=\"mv-icon\"></a></span></div></li><li data-songitem=\"{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;606412&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u66f2\\u7ec8\\u4eba\\u6563&quot;,&quot;pay_type&quot;:0}}\" class=\"  bb-dotimg clearfix  song-item-hook   list4\"><div class=\"song-item\"><span class=\"index-num index-hook\" style=\"width: 20px;\">04</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;606412&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style=\"width: 248px;\"><a href=\"/song/606412\" title=\"曲终人散\">曲终人散</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/606412\" class=\"mv-icon\"></a></span></div></li><li data-songitem=\"{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;229485&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u5c0f\\u5c0f\\u7684\\u592a\\u9633&quot;,&quot;pay_type&quot;:0}}\" class=\"  bb-dotimg clearfix  song-item-hook   list5\"><div class=\"song-item\"><span class=\"index-num index-hook\" style=\"width: 20px;\">05</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;229485&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style=\"width: 248px;\"><a href=\"/song/229485\" title=\"小小的太阳\">小小的太阳</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/229485\" class=\"mv-icon\"></a></span></div></li><li data-songitem=\"{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;962164&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u7528\\u5fc3\\u826f\\u82e6&quot;,&quot;pay_type&quot;:0}}\" class=\"  bb-dotimg clearfix  song-item-hook   list6\"><div class=\"song-item\"><span class=\"index-num index-hook\" style=\"width: 20px;\">06</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;962164&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style=\"width: 248px;\"><a href=\"/song/962164\" title=\"用心良苦\">用心良苦</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/962164\" class=\"mv-icon\"></a></span></div></li><li data-songitem=\"{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;260252&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u5927\\u5973\\u4eba&quot;,&quot;pay_type&quot;:0}}\" class=\"  bb-dotimg clearfix  song-item-hook   list7\"><div class=\"song-item\"><span class=\"index-num index-hook\" style=\"width: 20px;\">07</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;260252&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style=\"width: 248px;\"><a href=\"/song/260252\" title=\"大女人\">大女人</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/260252\" class=\"mv-icon\"></a></span></div></li><li data-songitem=\"{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;14743299&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u5fc3\\u672f&quot;,&quot;pay_type&quot;:0}}\" class=\"  bb-dotimg clearfix  song-item-hook   list8\"><div class=\"song-item\"><span class=\"index-num index-hook\" style=\"width: 20px;\">08</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;14743299&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style=\"width: 248px;\"><a href=\"/song/14743299\" title=\"心术\">心术</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/14743299\" class=\"mv-icon\"></a></span></div></li><li data-songitem=\"{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;678267&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u56da\\u9e1f&quot;,&quot;pay_type&quot;:0}}\" class=\"  bb-dotimg clearfix  song-item-hook   list9\"><div class=\"song-item\"><span class=\"index-num index-hook\" style=\"width: 20px;\">09</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;678267&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style=\"width: 248px;\"><a href=\"/song/678267\" title=\"囚鸟\">囚鸟</a></span></div></li><li data-songitem=\"{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;803696&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u7537\\u4eba\\u7684\\u597d&quot;,&quot;pay_type&quot;:0}}\" class=\"  bb-dotimg clearfix  last-item song-item-hook   list10\"><div class=\"song-item\"><span class=\"index-num index-hook\" style=\"width: 20px;\">10</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;803696&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style=\"width: 248px;\"><a href=\"/song/803696\" title=\"男人的好\">男人的好</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/803696\" class=\"mv-icon\"></a></span></div></li></ul></div>\n\t</div>\n\t<div class=\"hot-playall\">\n\t\t\t<span class=\"hot-play play-all-btn\" data-playdata=\"{&quot;ids&quot;:&quot;10233440,2132046,291890,606412,229485,962164,260252,14743299,678267,803696&quot;,&quot;moduleName&quot;:&quot;otherhotsong&quot;}\">\n\t\t\t                                        <a href=\"#\" class=\"btn btn-a \">\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-play\"></i>                            <span class=\"txt\">播放全部</span>\n                        </span>\n    </a>\n\t\t</span>\t\n\t</div>\t\n\n\n  </div>\n  \n  \n</div>\n\t\n\t\n\t\n<div class=\"module clicklog-hot clearfix\" monkey=\"hotSongs\">\n  <div class=\"head \">\n\t\n<h2 class=\"title\">最新评论</h2>\n\n  </div>\t\n  <div class=\"body \">\n\t\n<div id=\"song-comment\" class=\"mod-song-comment songpage-voice clicklog-voice\">\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\t\n<div class=\"user-voice-hook { userVoice:{ 'id':'264374','subjectType':'song','pageSize':'10', 'emptyMsg':'这首歌怎么样？快来评论一下吧！' } }\">\n\t<div class=\"comment-hook\">\n\t\t<ul class=\"comment-list comment-list-hook\"><li class=\"no-data\">评论加载中...</li></ul>\n\t\t\n\n<div class=\"page-navigator-hook  { pageNavigator:{ 'total':0, 'size':10, 'start':0, 'show_total':0, 'focus_neighbor':0 } }\">\n<div class=\"page-cont\">\n \t<div class=\"page-inner\">\n</div>\n</div>\n </div>\n\t\t<div class=\"comment-form clearfix\">\n\t\t\t<div class=\"comment-label\"></div>\n\t\t\t<div class=\"comment-input-icon\"></div>\n\t\t\t<div class=\"comment-form-submit clearfix\">\n\t\t\t\t<textarea autocomplete=\"off\" class=\"comment-area comment-input-hook field-text\">我来说两句！</textarea>\n\t\t\t\t<a href=\"javascript:void(0);\" class=\"user-voice-submit comment-submit-hook\" target=\"_blank\" rel=\"noopener\">发布</a>\n\t\t\t</div>\n\t\t\t<span class=\"comment-prompt-hook\"></span>\n\t\t</div>\n\t</div>\n</div>\n\t\n</div>\n\n  </div>\n  \n  \n</div>\n\n\n</div>\n\n        </div>\n        <div class=\"sidebar\">\n\n            \n\t\n<div class=\"top-sidebar\" monkey=\"top-sidebar\">\n    \n   \n    \n    <dl class=\"clearfix\">\n        <dt>主打榜单</dt>\n                <dd class=\"first\">    \n           <a href=\"/top/dayhot\">热歌榜 <span>TOP500</span></a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"/top/new\">新歌榜 <span>TOP100</span></a>\n                   </dd>\n        \n                <dd>    \n           <a href=\"/top/artist\">歌手榜 <span>TOP200</span></a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"/king/top\">百度King榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"http://y.baidu.com/top?play_top=top&amp;pst=music_top\" target=\"_blank\" rel=\"noopener\">原创音乐榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"http://y.baidu.com/top/song/pop?play_top=pop&amp;pst=music_top\" target=\"_blank\" rel=\"noopener\">原创流行榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"http://y.baidu.com/top/song/folk?play_top=folk&amp;pst=music_top\" target=\"_blank\" rel=\"noopener\">原创民谣榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"http://y.baidu.com/top/artist?pst=music_top\" target=\"_blank\" rel=\"noopener\">热门原创音乐人榜</a>\n                   </dd>\n        \n            </dl>\n    \n    \n    <dl class=\"clearfix\">\n        <dt>分类榜单</dt>\n                <dd class=\"first\">    \n           <a href=\"/top/sprite\">雪碧音碰音榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"/top/oumei\">欧美金曲榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"/top/yingshijinqu\">影视金曲榜</a>\n                   </dd>\n        \n                <dd>    \n           <a href=\"/top/lovesong\">情歌对唱榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"/top/netsong\">网络歌曲榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"/top/oldsong\">经典老歌榜</a>\n                   </dd>\n        \n                <dd>    \n           <a href=\"/top/rock\">摇滚榜</a>\n                   </dd>\n        \n            </dl>\n    \n    \n    <dl class=\"clearfix\">\n        <dt>媒体榜单</dt>\n                <dd class=\"first\">    \n           <a href=\"/top/ktv\">KTV热歌榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"/top/billboard\">Billboard</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"/top/ukchart\">UK Chart</a>\n                   </dd>\n        \n                <dd>    \n           <a href=\"/top/hito\">Hito中文榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"/top/chizha\">叱咤歌曲榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"/top/mnet\">韩国Mnet</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"/top/oricon\">日本公信榜</a>\n                   </dd>\n        \n            </dl>\n    \n</div>\n    \t    <div class=\"module musician-top clearfix\" monkey=\"musician-top\">\n  <div class=\"head \">\n\t\n<a class=\"more\" target=\"_blank\" href=\"http://y.baidu.com/top?pst=song_hot\">更多<span>&gt;&gt;</span></a>\n<h2 class=\"title\">原创音乐榜<span class=\"i-musician\" title=\"此资源来自百度音乐人\"></span></h2>\n\n  </div>\t\n  <div class=\"body \">\n\t\n<ul class=\"musician-top-inner\">\n                            <li class=\"clearfix\">\n        <span class=\"num one\">\n            1\n        </span>\n        <span class=\"status\">\n            <i class=\"fair\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/109205?play_song=68937&pst=song_hot\">江湖&middot;闪蝶</a>\n        </span>\n        <span class=\"hot\">4.5万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            2\n        </span>\n        <span class=\"status\">\n            <i class=\"fair\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/105242?play_song=32120&pst=song_hot\">剑起苍澜 </a>\n        </span>\n        <span class=\"hot\">59.1万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            3\n        </span>\n        <span class=\"status\">\n            <i class=\"up\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/103620?play_song=24765&pst=song_hot\">佛陀在金殿等你</a>\n        </span>\n        <span class=\"hot\">13.0万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            4\n        </span>\n        <span class=\"status\">\n            <i class=\"up\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/102277?play_song=19205&pst=song_hot\">高跟鞋</a>\n        </span>\n        <span class=\"hot\">2.9万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            5\n        </span>\n        <span class=\"status\">\n            <i class=\"down\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/105321?play_song=31740&pst=song_hot\">疯了</a>\n        </span>\n        <span class=\"hot\">4.9万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            6\n        </span>\n        <span class=\"status\">\n            <i class=\"new\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/101345?play_song=14943&pst=song_hot\">那些没有的事</a>\n        </span>\n        <span class=\"hot\">12.3万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            7\n        </span>\n        <span class=\"status\">\n            <i class=\"fair\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/111594?play_song=66876&pst=song_hot\">白银饭店</a>\n        </span>\n        <span class=\"hot\">1.9万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            8\n        </span>\n        <span class=\"status\">\n            <i class=\"up\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/101449?play_song=14840&pst=song_hot\">彩虹</a>\n        </span>\n        <span class=\"hot\">1.7万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            9\n        </span>\n        <span class=\"status\">\n            <i class=\"down\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/104973?play_song=29241&pst=song_hot\">爱情歌曲(demo)</a>\n        </span>\n        <span class=\"hot\">26.4万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            10\n        </span>\n        <span class=\"status\">\n            <i class=\"up\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/100441?play_song=15730&pst=song_hot\">朋友</a>\n        </span>\n        <span class=\"hot\">12.9万</span>\n    </li>\n        </ul>\n\n  </div>\n  \n  \n</div>\n    \t\n\n\n<div class=\"ad\">\n    \n\n\n        <div class=\"adm \" data-id=\"482354\">\n                    <iframe class=\"adm-iframe \" src=\"/static/html/cbjs.html?v=20130816&id=482354\" width=\"224\" height=\"130\" scrolling=\"no\" frameborder=\"0\">\n            </iframe>\n            </div>\n\n</div>\n<div class=\"ad\">\n    \n\n\n        <div class=\"adm \" data-id=\"844401\">\n                    <iframe class=\"adm-iframe \" src=\"/static/html/cbjs.html?v=20130816&id=844401\" width=\"224\" height=\"130\" scrolling=\"no\" frameborder=\"0\">\n            </iframe>\n            </div>\n\n</div>\n<div class=\"ad\">\n    \n\n\n        <div class=\"adm \" data-id=\"874612\">\n                    <iframe class=\"adm-iframe \" src=\"/static/html/cbjs.html?v=20130816&id=874612\" width=\"224\" height=\"130\" scrolling=\"no\" frameborder=\"0\">\n            </iframe>\n            </div>\n\n</div>\t<div class=\"module mod-topic clearfix\" monkey=\"mod-topic\">\n  <div class=\"head \">\n\t\n  <h2 class=\"title\">精彩推荐</h2>\n\n  </div>\t\n  <div class=\"body \">\n\t\n  <ul>\n                  <li><i></i><a href=\"http://music.baidu.com/songlist/4045?pst=gq\" target=\"_blank\" title=\"新歌榜第20周 | EXO攻陷周榜\">新歌榜第20周 | EXO攻陷周榜</a> </li>\n                        <li><i></i><a href=\"http://music.baidu.com/topic/cooperation/easonshoufa2014?pst=gq \" target=\"_blank\" title=\"独家首发| 陈奕迅全新国语大碟\">独家首发| 陈奕迅全新国语大碟</a> </li>\n                        <li><i></i><a href=\"http://music.baidu.com/topic/cooperation/wsyyzk09?pst=gq\" target=\"_blank\" title=\"慵懒的诱惑 极品沙发音乐\">慵懒的诱惑 极品沙发音乐</a> </li>\n                        <li><i></i><a href=\"http://music.baidu.com/topic/people/bigstar14liyuchun?pst=gq\" target=\"_blank\" title=\"音乐大人物 | 李宇春将酷进行到底\">音乐大人物 | 李宇春将酷进行到底</a> </li>\n                        <li><i></i><a href=\"http://music.baidu.com/songlist/3373?pst=gq\" target=\"_blank\" title=\"昨日重现 欧美经典老歌精选\">昨日重现 欧美经典老歌精选</a> </li>\n                        <li><i></i><a href=\"http://music.baidu.com/album/116668633?pst=gq\" target=\"_blank\" title=\"新歌首发| Super Junior-M完美回归\">新歌首发| Super Junior-M完美回归</a> </li>\n                                          </ul>\n\n  </div>\n  \n  \n</div>\n\n        </div>\n    \n\n      </div>\n    </div>\n  </div>\n  \n\n  \n    <div class=\"music-foot\" monkey=\"music-foot\" alog-alias=\"music-foot-alog\">\n                    <a href=\"javascript:void(0)\" class=\"weixin-follow\" id=\"weixin_follow\" target=\"_blank\" rel=\"noopener\">加微信好友</a>\n<a href=\"http://e.weibo.com/musicbaidu\" target=\"_blank\" class=\"weibo-follow\">加关注</a>\n<a href=\"http://tousu.baidu.com/music/add\" target=\"_blank\" rel=\"nofollow\">意见反馈</a>\n<i class=\"module-line\"></i>\n<a target=\"_blank\" href=\"/doc/help\" rel=\"nofollow\">帮助中心</a>\n<i class=\"module-line\"></i>\n<a href=\"http://musicopen.baidu.com\" target=\"_blank\" rel=\"nofollow\">资源合作开放平台</a>\n<i class=\"module-line\"></i>\n<a href=\"http://y.baidu.com\" target=\"_blank\">原创音乐人</a>\n<i class=\"module-line\"></i>\n<span class=\"copy\">&copy;2014 Baidu</span>\n<a href=\"http://www.baidu.com/duty/\" target=\"_blank\" class=\"reader\" rel=\"nofollow\">使用百度前必读</a>\n文网文<span class=\"license\">[2010]197</span>号\n<div class=\"weixin-detail\" id=\"weixin_detail\">\n    <div class=\"weixin-qr\"></div>\n    <span>微信扫一扫<br>精选音乐每日推送!</span>\n</div>\n            </div>\n  \n\n  \n    <div class=\"app-down-panel\">\n        <div class=\"go-to-top\"></div>\n    </div>\n    <a class=\"vip-tips\" id=\"vip_tips\" target=\"_blank\" href=\"/mobile?pst=tips\">\n      <div class=\"vip-tips-content\">\n        <div class=\"vip-tips-left\">\n\n        </div>\n        <div class=\"vip-tips-right\">\n          <span class=\"vip-tips-text\" id=\"vip_tips_text_vip\"><em>免费续期</em>2个月VIP</span>\n          <span class=\"vip-tips-text\" id=\"vip_tips_text_not_vip\">百度音乐<em>免费</em>送2个月VIP会员</span>\n\n          <div class=\"vip-tips-btn\" href target=\"_blank\">点击领取</div>\n        </div>\n        <div class=\"vip-tips-close\" href=\"javascript:void(0)\"></div>\n      </div>\n    </a>\n  \n  \n\n  \t<div class=\"layout-bdbrowser\">\n\t\t<span class=\"icon-add2box\"></span>\n\t</div>\n\n</body>\n\n        \n\t\t<script type=\"text/javascript\" src=\"//mu5.bdstatic.com/static/j/WN7TVLTU.js\"></script>\n        <script type=\"text/javascript\" src=\"//mu7.bdstatic.com/static/j/zpkwSYcr.js\"></script>\n\t\t<script type=\"text/javascript\" src=\"//mu6.bdstatic.com/static/j/p86CrQm2.js\"></script>\n    \t\n        \t<script type=\"text/javascript\" src=\"//mu5.bdstatic.com/static/j/WCKtkJuQ.js\"></script>\n    \t\n\t\n\n\n  \t\n<script type=\"text/javascript\" src=\"//mu5.bdstatic.com/static/j/u5CEGuS6.js\"></script>\n<script type=\"text/javascript\" src=\"//mu6.bdstatic.com/static/j/mnsJY5ts.js\"></script>\n<script src=\"http://music.baidu.com/cms/huodong/pepsi/pepsi_ad13.js\"></script>\n<script type=\"text/javascript\">\n\t\tinitCollection(264374);\n\t\n\t$(document).bind(\"logined\", function () {\n\t    initCollection(264374);\n\t});\n//\t$(\".ecom-ad\").ecomad();\n\t// createClickMonkey(\"ting-music-songpage\");\n</script>\n\n\n\n\n  <div style=\"display:none;\">\n    <script type=\"text/javascript\">\n      var pageId = \"ting-muisc-songpage\";\n      (document.getElementsByTagName('head')[0] || body).appendChild(document.createElement('script')).src = 'http://img.baidu.com/hunter/musicmonkey.min.js';\n      var _bdhmProtocol = ((\"https:\" == document.location.protocol) ? \" https://\" : \" http://\");\n      document.write(unescape(\"%3Cscript src='\" + _bdhmProtocol + \"hm.baidu.com/h.js%3Fd0ad46e4afeacf34cd12de4c9b553aa6' type='text/javascript'%3E%3C/script%3E\"));\n    </script>\n  </div>\n\n<script type=\"text/javascript\" id=\"bdshare_js\" data=\"type=tools&amp;uid=10004&amp;mini=1\"></script>\n<script type=\"text/javascript\" id=\"bdshell_js\"></script>\n<script type=\"text/javascript\">\n    var bds_config = {\n        'bdText':'推荐一首张宇的歌曲《给你们》 （分享自@百度音乐）',\n        'bdPic':'http://musicdata.baidu.com/data2/pic/115429753/115429753.jpg',\n        'searchPic': false\n    };\n\tvar tmpImg = new Image();\n\ttmpImg.src = \"http://musicdata.baidu.com/data2/pic/115429753/115429753.jpg\";\n\tvar artistId = 1210;\n\n    document.getElementById(\"bdshell_js\").src = \"http://share.baidu.com/static/js/shell_v2.js?t=\" + new Date().getHours();\n</script>\n<script type=\"text/javascript\" src=\"//mu5.bdstatic.com/static/js/ting.apk.js\"></script>\n<script type=\"text/javascript\" src=\"//mu6.bdstatic.com/static/js/ting.appdown.js\"></script>\n\n</html>\n","site":{"data":{}},"excerpt":"","more":"            <!DOCTYPE HTML>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.9.0\">\n  \n    <meta charset=\"utf-8\">\n    <title>给你们-张宇,给你们在线试听,MP3免费下载,给你们歌词下载_百度音乐-听到极致</title>\n    \n    <meta content=\"张宇, 给你们 ,音乐,歌曲,在线,试听,MP3,下载,歌词,免费\" name=\"keywords\">\n    <meta content=\"张宇单曲给你们,给你们在线试听,给你们歌词,给你们在线试听,MP3免费下载\" name=\"description\">\n    \n    <meta name=\"baidu-tc-verification\" content=\"5532f353892ad86095cb538ab988fb55\">\n    \n    <meta name=\"google-site-verification\" content=\"-michJB8aokthZhSsY3KIyd7TW9tQ2jSXI_87qveZpo\">\n    \n    <meta name=\"msvalidate.01\" content=\"B96798BECBFD1C248180D6DA843E27ED\">\n    \n    <meta property=\"wb:webmaster\" content=\"95125c09ba4c1de4\">\n    <!--STATUS OK-->\n              <link rel=\"shortcut icon\" href=\"/static/images/favicon.ico\">\n          \n    <script type=\"text/javascript\">\n      var ting = ting || {};\n          </script>\n    <script type=\"text/javascript\" _xbuilder=\"true\">var ting=ting||{};var httpSuccess=function(t){try{return!t.status&&location.protocol===\"file:\"||t.status>=200&&t.status<300||t.status===304||t.status===1223||t.status===0}catch(e){}return false};var parseJSON=function(t){if(typeof t!==\"string\"||!t){return null}var e=/^(\\s|\\u00A0)+|(\\s|\\u00A0)+$/g,a=t.replace(e,\"\");if(/^[\\],:{}\\s]*$/.test(a.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])/g,\"@\").replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g,\"]\").replace(/(?:^|:|,)(?:\\s*\\[)+/g,\"\"))){return window.JSON&&window.JSON.parse?window.JSON.parse(a):new Function(\"return \"+a)()}else{throw\"Invalid JSON: \"+a}};var httpData=function(t,e){var a=t.responseText;if(typeof a===\"string\"){if(e===\"json\"){a=parseJSON(a)}}return a};function getUserBar(t,e){var a=false;var n=window.XMLHttpRequest&&(window.location.protocol!=\"file\"||window.ActiveXObject)?function(){return new window.XMLHttpRequest}:function(){try{return new window.ActiveXObject(\"Microsoft.XMLHTTP\")}catch(t){}};var r=n();if(!r){return}e+=\"?_t=\"+(new Date).getTime();r.open(\"get\",e,true);r.setRequestHeader(\"Accept\",\"application/json, text/javascript, */*\");r.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");var s=r.onreadystatechange=function(){var e=false;if(!r||r.readyState===0){a=true;if(r){r.onreadystatechange={}}}else if(!a&&r&&r.readyState===4){a=true;r.onreadystatechange={};e=!httpSuccess(r)?\"error\":\"success\";var n;if(e===\"success\"){try{data=httpData(r,\"json\")}catch(s){e=\"parsererror\";n=s}}if(e===\"success\"){t.innerHTML=data.data.html;if(!!window.$){new Function(data.data.js).call(data.data.html)}else{ting.userBarInit=new Function(data.data.js)}}else{}r=null}};try{r.send(null)}catch(c){}}try{document.execCommand(\"BackgroundImageCache\",false,true)}catch(e){}var isKr=/\\/king/.test(location.pathname);</script>\n\n    \n      <link rel=\"stylesheet\" type=\"text/css\" href=\"//mu5.bdstatic.com/static/c/bxNeP1Oq.css\">\n    \n    \n<link rel=\"stylesheet\" type=\"text/css\" href=\"//mu7.bdstatic.com/static/c/vp2oM67Z.css\">\n   \n \t<script type=\"text/javascript\" src=\"http://m.baidu.com/static/as/res2exe/js/res2exe_1.0.4.min.js\"></script>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"//mu6.bdstatic.com/static/c/f7UC42zu.css\">\n\t<link rel=\"stylesheet\" href=\"http://music.baidu.com/cms/huodong/pepsi/pepsi_ad.css\">\n    <!--[if IE 6]>\n    <link rel=\"stylesheet\" id=\"bd_app_dl\" type=\"text/css\" href=\"http://m.baidu.com/static/as/res2exe/external/apk2exe-img.css?v=0703\" />\n    <![endif]-->\n\n  \n</head>\n<body class=\"sns body-song-page\">\n\n  \n              <div class=\"music-head \" monkey=\"music-head\">\n  <div class=\"lg\"> <a id=\"bm-logo\" href=\"/\"></a> </div>\n  <div class=\"search-wrap\">\n    <div class=\"lk\"> <a href=\"http://news.baidu.com/\" onmouseover=\"s(this)\" target=\"_blank\" rel=\"noopener\">新闻</a><a href=\"http://www.baidu.com/\" onmouseover=\"s(this)\" target=\"_blank\" rel=\"noopener\">网页</a><a href=\"http://tieba.baidu.com/\" onmouseover=\"s(this)\" target=\"_blank\" rel=\"noopener\">贴吧</a><a href=\"http://zhidao.baidu.com/\" onmouseover=\"s(this)\" target=\"_blank\" rel=\"noopener\">知道</a><span>音乐</span><a href=\"http://image.baidu.com/\" onmouseover=\"s(this)\" target=\"_blank\" rel=\"noopener\">图片</a><a href=\"http://v.baidu.com/\" onmouseover=\"s(this)\" target=\"_blank\" rel=\"noopener\">视频</a><a href=\"http://map.baidu.com/\" onmouseover=\"s(this)\" target=\"_blank\" rel=\"noopener\">地图</a><a href=\"http://baike.baidu.com/\" onmouseover=\"s(this)\" target=\"_blank\" rel=\"noopener\">百科</a><a href=\"http://wenku.baidu.com/\" onmouseover=\"s(this)\" target=\"_blank\" rel=\"noopener\">文库</a></div>\n    <form id=\"search_form\" name=\"f1\" action=\"/search\">\n      <div class=\"search\">\n        <span class=\"s_ipt_wr\">\n            <input type=\"text\" name=\"key\" value data-value data-default=\"请输入歌名、歌词、歌手或专辑\" id=\"ww\" class=\"kw s_ipt s_ipt_def\" size=\"42\" maxlength=\"100\" autocomplete=\"off\">\n        </span><span class=\"s_btn_wr\"><input type=\"submit\" value=\"百度一下\" class=\"s_btn\" onmousedown=\"this.className='s_btn s_btn_h'\" onmouseout=\"this.className='s_btn'\"></span><span class=\"s_tools\"></span>\n      </div>\n      <div id=\"loading-pic\"></div>\n      <div class=\"sug-result\"></div>\n    </form>\n\n  </div>\n\n  <form style=\"width:0;height:0;\" name=\"vform\" id=\"vform\" action=\"http://v.baidu.com/v\">\n    <input type=\"hidden\" name=\"ct\" value=\"301989888\">\n    <input type=\"hidden\" name=\"rn\" value=\"20\">\n    <input type=\"hidden\" name=\"pn\" value=\"0\">\n    <input type=\"hidden\" name=\"db\" value=\"0\">\n    <input type=\"hidden\" name=\"s\" value=\"3\">\n    <input type=\"hidden\" name=\"word\" value>\n  </form>\n\n  \n\n\n  \n                <div class=\"head-ad async-module\" id=\"adm-head-right\">\n            \n        </div>\n        \n</div>\n<div class=\"nav nav-singer singer-\" monkey=\"nav\">\n    <div class=\"nav-wrapper singer\">\n        <div class=\"nav-border\"></div>\n        <div class=\"nav-content\">\n            <ul class=\"main-nav\">\n                <li class=\"nav-lib first nav-current\">\n                    <a href=\"/\" data-log=\"nav-music-lib\"><span class=\"text\">音乐库</span></a>\n                    <div class=\"arrow\"></div>\n                </li>\n                <li class=\"nav-y\">\n                    <a href=\"http://y.baidu.com?pst=musicnav\" target=\"_blank\" data-log=\"nav-musicer\"><span class=\"text\">百度音乐人</span></a>\n                </li>\n                <li class=\"nav-kr \">\n                    <a href=\"/king?pst=musicnav\" data-log=\"nav-korean\" target=\"_blank\"><span class=\"text\">King榜</span></a>\n                    <i class=\"icon-new\" style=\"left:76px;\"></i>\n                                    </li>\n                <li class=\"nav-piao last\">\n                    <a href=\"//piao.baidu.com?pst=shouyedaohang\" target=\"_blank\" title=\"百度票务，买低价放心票！\" data-log=\"nav-piao\"><span class=\"text\">票务</span></a>\n                </li>\n            </ul>\n            <ul class=\"extra-nav\">\n                <li>\n                    <i class=\"power-icon-min index-icon-vip-active icon-nav-vip\"></i>\n                    <a href=\"/vip?pst=banner\" target=\"_blank\" data-log=\"nav-vip\">VIP</a>\n                </li>\n                <li class=\"line\"></li>\n                <li><a href=\"/app/android?pst=banner\" target=\"_blank\" data-log=\"mobileapp\">手机版</a></li>\n                <li class=\"line\"></li>\n                <li><a href=\"http://qianqian.baidu.com\" target=\"_blank\" data-log=\"ttplayer\">电脑版</a></li>\n                <li class=\"line\"></li>\n                <li><a href=\"http://fm.baidu.com\" target=\"_blank\" data-log=\"nav-fm\">百度随心听</a></li>\n                <li><a href=\"http://play.baidu.com\" id=\"myMbox\" target=\"_blank\" class=\"nav-musicmbox\" data-log=\"mymbox\">我的音乐盒</a></li>\n            </ul>\n            <i class=\"bg\"></i>\n        </div>\n    </div>\n    <div class=\"sub-nav-wrapper\">\n        <div class=\"sub-nav-item nav-current\">\n            <ul class=\"clearfix sub-nav-content\" id=\"sub_lib\" data-parent=\"nav-lib\">\n                            <li class=\"link first \"><a href=\"/\" data-log=\"nav-home\">首页</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link \"><a href=\"/top\" data-log=\"nav-top\">榜单</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link actived\"><a href=\"/artist\" data-log=\"nav-singer\">歌手</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link \"><a href=\"/tag\" data-log=\"nav-music-cate\">分类</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link \"><a href=\"/mv\" data-log=\"nav-mv\">MV</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link \"><a href=\"/songlist\" data-log=\"nav-songlist\">歌单</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link \"><a href=\"/lossless\" data-log=\"nav-lossless\">无损专区</a></li>\n                <li class=\"line\"></li>\n                <li class=\"link \"><a href=\"/xiuchang\" data-log=\"nav-show\">美女秀场</a></li>\n             \n           </ul>\n                    </div>\n        \n    </div>\n</div><div id=\"userbar\" class=\"userbar\" alog-alias=\"userbar\"></div>\n\n\n            \n  <script type=\"text/javascript\">function s(t){if(document.f1.key.value.length>0){var e={news:{url:\"http://news.baidu.com/\",word:\"ns?tn=news&cl=2&rn=20&ct=1&ie=utf-8&word=\"},www:{url:\"http://www.baidu.com/\",word:\"s?cl=3&wd=\"},tieba:{url:\"http://tieba.baidu.com/\",word:\"f?ie=utf-8&kw=\"},zhidao:{url:\"http://zhidao.baidu.com/\",word:\"search?pn=0&rn=10&lm=0&word=\"},image:{url:\"http://image.baidu.com/\",word:\"i?ct=201326592&cl=2&nc=1&lm=-1&st=-1&tn=baiduimage&istype=2&fm=&pv=&z=0&ie=utf-8&word=\"},v:{url:\"http://v.baidu.com/\",word:\"v?ct=301989888&s=25&ie=utf-8&word=\"},map:{url:\"http://map.baidu.com/\",word:\"?newmap=1&ie=utf-8&s=s%26wd%3D\"},baike:{url:\"http://baike.baidu.com/\",word:\"search/word?enc=utf8&word=\"},wenku:{url:\"http://wenku.baidu.com/\",word:\"search?ie=utf-8&word=\"}};var r=t.href,i=/^http:\\/\\/([^.]+)\\./,a=r.match(i)[1],d=t.href.split(\"?\"),n=document.getElementById(\"ww\");var o=encodeURIComponent(n.value);if(n.value==n.getAttribute(\"data-default\")){t.href=e[a].url}else{t.href=e[a].url+e[a].word+o}}}var ting=ting||{};function initUserBar(){require([\"ting/userbar/init\"])}if(!window.attachEvent){window.addEventListener(\"load\",initUserBar,false)}else{window.attachEvent(\"onload\",initUserBar)}ting.refreshUserBar=initUserBar;</script>\n\n        \n  \n  <div class=\"music-main\" alog-alias=\"music-main-alog\">\n    <div class=\"music-main-body\">\n      <div class=\"music-body clearfix\">\n        \n\t\n\n\n\n\n\t\n\t\n\t\t\t\t\t\t\n\t\n\t\t\t\t\t\t\t\t\t\t\t \n\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n   \n\t    \t<script type=\"text/javascript\" src=\"http://cbjs.baidu.com/js/m.js\"></script>\n\t\t<script type=\"text/javascript\">\n\t\t\t// var artisttype = $(\".path-list .path-list-item\").find(\"a\")[1].innerHTML;\n\t\t\tBAIDU_CLB_addOrientation(\"artistid\", \"1210\");\n\t\t\tBAIDU_CLB_addOrientation(\"artisttype\", \"华语男歌手\");\n\t\t\tBAIDU_CLB_addOrientation(\"songid\", \"264374\");\n\t\t\tBAIDU_CLB_fillSlot(\"554933\");\n\t\t</script>\n\n\n<div class=\"path_navigator clearfix clicklog-path-navigator\">\n\t\n\t\n\n\t\n\n\t\t<ul class=\"path-list clearfix\">\n\t\t\t<li class=\"path-list-item\">\n\t\t\t\t\t\t\t<a href=\"/artist\">\t\t\t\t歌手</a>\t\t\t\t\t</li>\n\t\t\t\t<li class=\"path-list-item\">\n\t\t\t\t\t\t\t<a href=\"/artist/cn/male\">\t\t\t\t华语男歌手</a>\t\t\t\t\t</li>\n\t\t\t\t<li class=\"path-list-item\">\n\t\t\t\t\t\t\t<a href=\"/artist/1210\">\t\t\t\t张宇</a>\t\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t\t\t给你们\t\t\t\t\t</li>\n\t</ul>\t\n</div>\n  \n\n\n\n    \n        <div class=\"main-body\">\n\n            \n<div class=\"main-body-cont\">\n<div class=\"mod-song-info\">\n\t<h1 class=\"music-seo\">\n\t\t张宇歌曲给你们,给你们在线试听,给你们歌词下载,给你们在线试听,MP3免费下载。百度音乐为你提供<strong>给你们</strong>高品质的音乐享受。\n\t</h1>\n\t\n\n\n\n\n\n\n\n\n\n\n<div class=\"song-info\" monkey=\"songInfo\">\n\t\t<div class=\"play-holder clearfix\">\n\t\t\t<div class=\"song\">\n\t\t\t\t<h2 class=\"songpage-title clearfix\">\n\t\t\t\t        \t\t\t\t<span class=\"name\">给你们</span>                    <span data-id=\"264374\" class=\"icon-lossless lossless-hook\" title=\"无损品质音乐\"></span>                    \n\n\t\t\t\t</h2>\n\t\t\t\t                        <span class=\"song-play-num hot-num\">\n                                <span class=\"c6\">热度</span><span class=\"num\">217,861</span>                </span>\n\t\t\t</div>\n\n\t\t</div>\n\n    \n                    \n\n        <div class=\"song-opera clearfix\">\n          <div class=\"song-page-share clearfix\">\n                                                    <a href=\"#\" class=\"btn btn-b song-share\">\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-share\"></i>                            <span class=\"txt\">分享</span>\n                        </span>\n    </a>\n            <span class=\"sep\"></span>\n            \n                                                                  <a data-btndata=\"{\" ids\":\"264374\",\"type\":\"song\",\"pay_type\":\"0\"}\" href=\"#\" class=\"btn btn-b song-collect {&quot;ids&quot;:&quot;264374&quot;,&quot;type&quot;:&quot;song&quot;,&quot;pay_type&quot;:&quot;0&quot;}\">\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-collect\"></i>                            <span class=\"txt\">收藏</span>\n                        </span>\n    </a>\n            \n\n            <div id=\"bdshare\" class=\"bds_tools bdshare_t\">\n              <span class=\"arrow-down\"></span>\n              <a class=\"bds_qzone\"></a>\n              <a class=\"bds_renren\"></a>\n              <a class=\"bds_tqq\"></a>\n              <a class=\"bds_tsina\"></a>\n              <span class=\"bds_more\"></span>\n            </div>\n          </div>\n\n                      <span class=\"play-btn\" data-playdata=\"{&quot;id&quot;:&quot;264374&quot;,&quot;moduleName&quot;:&quot;playBtn&quot;}\">\n          \t                                          <a href=\"javascript:void(0);\" class=\"btn btn-a  clicklog-play-btn\" target=\"_blank\" rel=\"noopener\">\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-play\"></i>                            <span class=\"txt\">播放</span>\n                        </span>\n    </a>\n            </span>\n            <span class=\"add-song-btn\" data-adddata=\"{&quot;id&quot;:&quot;264374&quot;,&quot;moduleName&quot;:&quot;addBtn&quot;}\">\n          \t                                          <a href=\"javascript:void(0);\" class=\"btn btn-b \" target=\"_blank\" rel=\"noopener\">\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-add\"></i>                            <span class=\"txt\">添加</span>\n                        </span>\n    </a>\n            </span>\n                                                          \t                                                              <a data-btndata=\"{\" id\":\"264374\"}\" href=\"javascript:void(0);\" class=\"btn btn-b down-song-btn {&quot;id&quot;:&quot;264374&quot;}\" target=\"_blank\" rel=\"noopener\">\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-down\"></i>                            <span class=\"txt\">下载</span>\n                        </span>\n    </a>\n          \n\n                                                                        <a data-btndata=\"{\" id\":\"264374\"}\" href=\"javascript:void(0);\" class=\"btn btn-b btn-telapp {&quot;id&quot;:&quot;264374&quot;}\" target=\"_blank\" rel=\"noopener\">\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-send\"></i>                            <span class=\"txt\">下载到手机</span>\n                        </span>\n    </a>\n            <div class=\"tomobile-layer\">\n                <div class=\"layer-item method clearfix\">\n                    <a class=\"wireless\" href=\"javascript:;\" target=\"_blank\" rel=\"noopener\">\n                        <span class=\"icon\"></span>\n                        <span class=\"text\">基于帐号下载到手机</span>\n                    </a>\n                    <a class=\"telapp\" href=\"javascript:;\" onclick=\"bd_app_dl(this);\" data_type=\"music\" data_url=\"http://zhangmenshiting.baidu.com/data2/music/638114/638114.mp3?xcode=24968852901d8b04356aa627b61115dd9b0c6a3cc498b9b1\" data_name=\"给你们\" data_package data_versionname data_icon=\"http://musicdata.baidu.com/data2/pic/115429767/115429767.jpg\" data_size=\"4701110\" data_from=\"1001490z\" ext_type=\"apk\" ext_url=\"http://music.baidu.com/cms/mobile/static/apk/BaiduMusic_pcbdshoujizhushou.apk\" ext_name=\"百度音乐\" ext_package=\"com.ting.mp3.android\" ext_versionname=\"3.8.1\" ext_icon=\"http://hiphotos.baidu.com/wisegame/pic/item/2410b912c8fcc3ce99f9f1709345d688d43f20b3.jpg\" ext_size=\"6828251\" target=\"_blank\" rel=\"noopener\">\n                        <span class=\"icon\"></span>\n                        <span class=\"text\">通过数据线发送</span>\n                        <span class=\"em\">\n                            <span class=\"em-icon\"></span>\n                            <em>仅限安卓手机</em>\n                        </span>\n                    </a>\n                    <a class=\"sms\" href=\"javascript:;\" target=\"_blank\" rel=\"noopener\">\n                        <span class=\"icon\"></span>\n                        <span class=\"text\">通过短信发送</span>\n                        <span class=\"em\">\n                            <span class=\"em-icon\"></span>\n                            <em>接收短信免费</em>\n                        </span>\n                    </a>\n                </div>\n                <div class=\"layer-item device\">\n                    <div class=\"head\">\n                        <h3>选择移动设备</h3>\n                        <div class=\"close\"></div>\n                    </div>\n                    <div class=\"body\">\n                        <ul class=\"device-list\"></ul>\n                        <div class=\"btn-wrapper\">\n                            <a href=\"javascript:;\" class=\"btn btn-h btn-i commit\" target=\"_blank\" rel=\"noopener\">\n                                <span class=\"inner\">\n                                    <span class=\"txt\">发送到移动设备</span>\n                                </span>\n                            </a>\n                        </div>\n                        <div class=\"tip\">\n                            <p>如何添加新设备？</p>\n                            <p><strong>登录</strong> “百度音乐” 移动客户端，即可添加设备，刷新页面就可以看到新设备。</p>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"layer-item phone-number\">\n                    <div class=\"head\">\n                        <h3>填写要发送的手机号码</h3>\n                        <div class=\"close\"></div>\n                    </div>\n                    <div class=\"body\">\n                        <div class=\"number-input\">\n                            <input type=\"text\">\n                        </div>\n                        <a href=\"javascript:;\" class=\"btn btn-h commit\" target=\"_blank\" rel=\"noopener\">\n                            <span class=\"inner\">\n                                <span class=\"txt\">发送</span>\n                            </span>\n                        </a>\n                        <div class=\"tip\">\n                            收取短信不会扣除你的话费，下载歌曲需要你支付相应的无线上网费用\n                        </div>\n                    </div>\n                </div>\n                <div class=\"layer-item result-layer success unbind\">\n                    <div class=\"head\">\n                        <div class=\"close\"></div>\n                    </div>\n                    <div class=\"body\">\n                        <div class=\"icon\"></div>\n                        <div class=\"text\"></div>\n                        <p class=\"tip\"></p>\n                    </div>\n                    <div class=\"foot\">\n                        <h5>怎么在手机客户端接收歌曲？</h5>\n                        <ol>\n                            <li>\n                                下载并安装最新版百度音乐移动客户端：<br>\n                                <a href=\"http://music.baidu.com/cms/mobile/static/apk/BaiduMusic_musicfsdx.apk\" title=\"Android版\" target=\"_blank\" rel=\"noopener\">\n                                    <span class=\"icon android-icon-small\"></span>\n                                    Android版\n                                </a>\n                                <a href=\"http://itunes.apple.com/cn/app/id468623917\" title=\"iPhone版\" target=\"_blank\" rel=\"noopener\">\n                                    <span class=\"icon iphone-icon-small\"></span>\n                                    iPhone版\n                                </a>\n                                <a href=\"https://itunes.apple.com/cn/app/bai-duting/id585579073\" title=\"iPad版\" target=\"_blank\" rel=\"noopener\">\n                                    <span class=\"icon pad-icon-small\"></span>\n                                    iPad版\n                                </a>\n                            </li>\n                            <li>打开百度音乐手机客户端并登录</li>\n                            <li>进入“我的下载”就可以看见它啦</li>\n                        </ol>\n                    </div>\n                </div>\n            </div>\n                </div>\n\n\t\t<div class=\"info-holder clearfix\">\n\t\t\t\t<ul class=\"base-info c6\">\n          \t\t\t\t\t<li>歌手：\t\t\t\t\t\t\t<span class=\"author_list\" title=\"张宇\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a \" hidefocus=\"true\" href=\"/artist/1210\">张宇</a>\t</span>\n          \t\t\t\t\t</li>\n          \t\n\n\n\n\t\t\t\t\t\t\t\t\t\t<li class=\"clearfix\">所属专辑：<a href=\"/album/67198\">《雨一直下》</a>\n\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<li class=\"clearfix tag\">\n\t\t\t\t\t\t<span class=\"label\">歌曲标签：</span><a class=\"tag-list\" href=\"/tag/%E5%8D%8E%E8%AF%AD%E6%B5%81%E8%A1%8C\">华语流行</a><i class=\"module-line\"></i><a class=\"tag-list\" href=\"/tag/%E6%80%80%E6%97%A7\">怀旧</a><i class=\"module-line\"></i><a class=\"tag-list\" href=\"/tag/%E6%B5%81%E8%A1%8C\">流行</a><i class=\"module-line\"></i><a class=\"tag-list\" href=\"/tag/70%E5%90%8E\">70后</a><i class=\"module-line\"></i><a class=\"tag-list\" href=\"/tag/%E7%94%9C%E8%9C%9C\">甜蜜</a>\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t\t\t</ul>\n\n\t\t\t\t\t\t\t\t\n<div class=\"module module-mv clearfix\" monkey=\"module-mv\">\n  <div class=\"head \">\n\t\n\n\n  </div>\t\n  <div class=\"body \">\n\t\n\n\n\n                    <div data-mvdata=\"{&quot;id&quot;:&quot;67198&quot;,&quot;moduleName&quot;:&quot;mvCover&quot;}\" class=\"mv-cover  mv-cover-hook\">\n                    \t<a target=\"_blank\" href=\"/mv/264374\" title=\"给你们-张宇\">\n        <img class=\"lazyload\" org_src=\"http://pic8.qiyipic.com/thumb/20130327/a364296_160_90.jpg\" src=\"/static/images/blank.gif\" alt=\"给你们-张宇\">\n        <span title=\"播放MV\" class=\"play\"></span>            </a>\n\t<a target=\"_blank\" href=\"/mv/264374\" class=\"mv-icon\"></a>    </div>\n\n  </div>\n  \n  \n</div>\n\t\t\t\t\t\t</div>\n\n\n\n</div>\n    <div id=\"download-clients\">\n    <div id=\"info-wrapper\">\n        <div id=\"clients-info\">\n            <div class=\"bd-music-logo css-icon-bd-music\"></div>\n            <div class=\"bd-music-text\"><em>百度音乐客户端</em><br>听歌，随时随地</div>\n        </div>\n    </div>\n    <div id=\"clients-wrapper\">\n        <ul id=\"clients-container\">\n            <li>\n                <a class=\"clients-pc\" href=\"http://qianqian.baidu.com/download/BaiduMusic-31000121.exe\" data-log=\"{ \" pos\":\"pc_down\" }\" target=\"_blank\">\n                    <span class=\"icon css-icon-pc\"></span>PC版\n                </a>\n\n                <div class=\"pc-tips\">\n                    <span class=\"arrow-up\"></span>\n                    <a href=\"http://qianqian.baidu.com/download/BaiduMusic-12345628.exe\" target=\"_blank\">\n                        <img org_src=\"//mu6.bdstatic.com/static/i/9FPqiLDJ.png\" alt>\n                        <div class=\"pc-tips-download btn btn-a\"><span class=\"inner\">快速安装</span></div>\n                    </a>\n                </div>\n            </li>\n            <li>\n                <a class=\"clients-android\" href=\"http://music.baidu.com/cms/mobile/static/apk/BaiduMusic_danqu.apk\" data-log=\"{ \" pos\":\"android_down\" }\" target=\"_blank\">\n                    <span class=\"icon css-icon-android\"></span>Android版\n                </a>\n                <div class=\"product-dialog\">\n                    <div class=\"mobile-tip-icon\"></div>\n                    <div class=\"head\">\n                        <div class=\"close\"></div>\n                        <h1>感谢您使用手机百度音乐</h1>\n                        <p>下载会在几秒内自动开始，如浏览器长时间没有响应，请点击<a target=\"_blank\" href=\"http://music.baidu.com/cms/mobile/static/apk/BaiduMusic_danqu.apk\">重新下载</a></p>\n                    </div>\n                    <div class=\"body\">\n                        <h2>您还可以通过以下方法下载百度音乐手机版</h2>\n                        <div class=\"down-method\">\n                            <img class=\"qrcode-down\" src=\"//mu5.bdstatic.com/static/i/wVUkcg1j.jpg\" alt=\"二维码下载\">\n                            <img class=\"web-down\" src=\"//mu7.bdstatic.com/static/i/pi4IS8vC.jpg\" alt=\"web下载\">\n                        </div>\n                    </div>\n                </div>\n            </li>\n            <li>\n                <a class=\"clients-iphone\" data-log=\"{ \" pos\":\"iphone_down\" }\" href=\"#\">\n                    <span class=\"icon css-icon-iphone\"></span>\n                    iPhone版\n                </a>\n            </li>\n            <li>\n                <a class=\"clients-ipad\" data-log=\"{ \" pos\":\"ipad_down\" }\" href=\"http://music.baidu.com/app/pad\" target=\"_blank\">\n                    <span class=\"icon css-icon-ipad\"></span>iPad版\n                </a>\n            </li>\n        </ul>\n    </div>\n    <div class=\"pop-tips ios-tips\">\n        <i class=\"arrow-up\"></i>\n        <a class=\"close\" href=\"#\"></a>\n        <p class=\"tip-head\">扫描下方的二维码立即安装，好音乐无处不在！</p>\n        <div class=\"down-logo\"><img width=\"110\" height=\"110\" org_src=\"//mu6.bdstatic.com/static/images/2code/app-down-danqu.png\" src=\"/static/images/blank.gif\"></div>\n        <p class=\"tip-foot\">手机访问music.baidu.com更快捷</p>\n    </div>\n</div>\n\n\t\t\t\n\t\t<div class=\"module song-lyric clicklog-lyric clearfix\" monkey=\"song-lyric\">\n  <div class=\"head \">\n\t\n\n\t\t\t\t\t\t<a name=\"song_lyric\"></a>\n<span class=\"opera\">\n\t<a class=\"room-lrc-btn\" target=\"_blank\" href=\"/xiuchang?song=%E7%BB%99%E4%BD%A0%E4%BB%AC&singer=%E5%BC%A0%E5%AE%87\">美女点唱</a>\n\t<span class=\"module-line\"></span>\n\t<a 30770249 class=\"down-lrc-btn\" data-lyricdata=\"{ \" href\":\" data2 lrc %e7%bb%99%e4%bd%a0%e4%bb%ac.lrc\" }\" href=\"#\">下载LRC歌词</a>\n\t<span class=\"module-line\"></span>\n\t<span data-clipboard-target=\"lyricCont\" id=\"copy-lyric\" class=\"copy-lyric copy-lyric-hook\">复制歌词</span>\n</span>\n<h2 class=\"title\">歌词</h2>\n\n  </div>\t\n  <div class=\"body \">\n\t\n\t<div id=\"lyricCont\" class=\"lyric-content lyric-hidden\">给你们<br>\n作词:十一郎 作曲:张宇<br>\n演唱：张宇<br>\n<br>\n他将是你的新郎<br>\n从今以后他就是你一生的伴<br>\n他的一切都将和你紧密相关<br>\n福和祸都要同当<br>\n<br>\n她将是你的新娘<br>\n她是别人用心托付在你手上<br>\n你要用你一生加倍照顾对待<br>\n苦或喜都要同享<br>\n<br>\n一定是特别的缘份<br>\n才可以一路走来变成了一家人<br>\n他多爱你几分<br>\n你多还他几分<br>\n找幸福的可能<br>\n从此不再是一个人<br>\n要处处时时想着念的都是我们<br>\n你付出了几分<br>\n爱就圆满了几分<br>\n<br>\n一定是特别的缘份<br>\n才可以一路走来变成了一家人<br>\n他多爱你几分<br>\n你多还他几分<br>\n找幸福的可能<br>\n从此不再是一个人<br>\n要处处时时想着念的都是我们<br>\n你付出了几分<br>\n爱就圆满了几分<br>\n他将是你的新郎<br>\n从今以后他就是你一生的伴<br>\n他的一切都将和你紧密相关<br>\n福和祸都要同当<br>\n<br>\n她将是你的新娘<br>\n她是别人用心托付在你手上<br>\n你要用你一生加倍照顾对待<br>\n苦或喜都要同享<br>\n<br>\n一定是特别的缘份<br>\n才可以一路走来变成了一家人<br>\n他多爱你几分<br>\n你多还他几分<br>\n找幸福的可能<br>\n从此不再是一个人<br>\n要处处时时想着念的都是我们<br>\n你付出了几分<br>\n爱就圆满了几分<br>\n<br>\n一定是特别的缘份<br>\n才可以一路走来变成了一家人<br>\n他多爱你几分<br>\n你多还他几分<br>\n找幸福的可能<br>\n从此不再是一个人<br>\n要处处时时想着念的都是我们<br>\n你付出了几分<br>\n爱就圆满了几分<br>\n你付出了几分<br>\n爱就圆满了几分</div>\n\t\t\t<a href id=\"lyricSwitch\" class=\"lyric-switch\"><span class=\"text\">展开</span><span class=\"icon\"></span>\t </a>\n\t\n  </div>\n  \n  \n</div>\n\t\n</div>\n\t\n<div class=\"lossell-wrap\" style=\"margin-top:-20px\" data-page=\"songpage\">\n\t<p class=\"lossell-title underline\">相关无损大碟推荐</p>\n\t<ul class=\"lossell-list\">\n\n\t\t\n\t\t<li class=\"first-list\">\n\t\t\t<i class=\"lossell-icon\"></i>\n\t\t\t<div class=\"img-wrap\">\n\t\t\t\t<a href=\"/songlist/3059?pst=song_loss\" target=\"_blank\">\n\t\t\t\t\t<img src=\"http://a.hiphotos.baidu.com/ting/pic/item/9213b07eca806538630f699396dda144ac34824d.jpg\" width=\"150\" height=\"150\" title=\"泡pub\">\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t\t<div class=\"img-desgin\">\n\t\t\t\t<p><a href=\"/songlist/3059?pst=song_loss\" target=\"_blank\">泡pub</a></p>\n\t\t\t</div>\n\t\t</li>\n\n\t\t\n\t\t<li class>\n\t\t\t<i class=\"lossell-icon\"></i>\n\t\t\t<div class=\"img-wrap\">\n\t\t\t\t<a href=\"/songlist/2668?pst=song_loss\" target=\"_blank\">\n\t\t\t\t\t<img src=\"http://a.hiphotos.baidu.com/ting/pic/item/3b292df5e0fe99251cb5a4d035a85edf8cb171f1.jpg\" width=\"150\" height=\"150\" title=\"让棉花糖在天空中飞翔\">\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t\t<div class=\"img-desgin\">\n\t\t\t\t<p><a href=\"/songlist/2668?pst=song_loss\" target=\"_blank\">让棉花糖在天空中飞翔</a></p>\n\t\t\t</div>\n\t\t</li>\n\n\t\t\n\t\t<li class>\n\t\t\t<i class=\"lossell-icon\"></i>\n\t\t\t<div class=\"img-wrap\">\n\t\t\t\t<a href=\"/songlist/2165?pst=song_loss\" target=\"_blank\">\n\t\t\t\t\t<img src=\"http://b.hiphotos.baidu.com/ting/pic/item/d043ad4bd11373f07756a21fa50f4bfbfaed04c1.jpg\" width=\"150\" height=\"150\" title=\"影视金曲-侠骨柔情\">\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t\t<div class=\"img-desgin\">\n\t\t\t\t<p><a href=\"/songlist/2165?pst=song_loss\" target=\"_blank\">影视金曲-侠骨柔情</a></p>\n\t\t\t</div>\n\t\t</li>\n\n\t\t\n\t\t<li class>\n\t\t\t<i class=\"lossell-icon\"></i>\n\t\t\t<div class=\"img-wrap\">\n\t\t\t\t<a href=\"/songlist/2542?pst=song_loss\" target=\"_blank\">\n\t\t\t\t\t<img src=\"http://b.hiphotos.baidu.com/ting/pic/item/d53f8794a4c27d1e0b79f6441ad5ad6edcc438d7.jpg\" width=\"150\" height=\"150\" title=\"来吧 夜店达人们 我们一起骚！\">\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t\t<div class=\"img-desgin\">\n\t\t\t\t<p><a href=\"/songlist/2542?pst=song_loss\" target=\"_blank\">来吧 夜店达人们 我们一起骚！</a></p>\n\t\t\t</div>\n\t\t</li>\n\n\t\t\t</ul>\n</div>\n\n\n\t\t\t\t<div class=\"module hot-song clearfix\" monkey=\"hotSongs\">\n  <div class=\"head \">\n\t\n<a href=\"/artist/1210\" class=\"more\">更多<span>&gt;&gt;</span></a>\n<h2 class=\"title\">张宇的其他热歌</h2>\n\n  </div>\t\n  <div class=\"body \">\n\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"hot-song-list\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t  <div data-listdata=\"{&quot;moduleName&quot;:&quot;otherhotsong&quot;}\" class=\"normal-song-list song-list song-list-hook   song-list-btnBottom\"><ul><li data-songitem=\"{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;10233440&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u6708\\u4eae\\u60f9\\u7684\\u7978&quot;,&quot;pay_type&quot;:0}}\" class=\"  bb-dotimg clearfix  song-item-hook   list1\"><div class=\"song-item\"><span class=\"index-num index-hook\" style=\"width: 20px;\">01</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;10233440&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style=\"width: 248px;\"><a href=\"/song/10233440\" title=\"月亮惹的祸\">月亮惹的祸</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/10233440\" class=\"mv-icon\"></a></span></div></li><li data-songitem=\"{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;2132046&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u8d81\\u65e9&quot;,&quot;pay_type&quot;:0}}\" class=\"  bb-dotimg clearfix  song-item-hook   list2\"><div class=\"song-item\"><span class=\"index-num index-hook\" style=\"width: 20px;\">02</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;2132046&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style=\"width: 248px;\"><a href=\"/song/2132046\" title=\"趁早\">趁早</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/2132046\" class=\"mv-icon\"></a></span></div></li><li data-songitem=\"{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;291890&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u96e8\\u4e00\\u76f4\\u4e0b&quot;,&quot;pay_type&quot;:0}}\" class=\"  bb-dotimg clearfix  song-item-hook   list3\"><div class=\"song-item\"><span class=\"index-num index-hook\" style=\"width: 20px;\">03</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;291890&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style=\"width: 248px;\"><a href=\"/song/291890\" title=\"雨一直下\">雨一直下</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/291890\" class=\"mv-icon\"></a></span></div></li><li data-songitem=\"{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;606412&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u66f2\\u7ec8\\u4eba\\u6563&quot;,&quot;pay_type&quot;:0}}\" class=\"  bb-dotimg clearfix  song-item-hook   list4\"><div class=\"song-item\"><span class=\"index-num index-hook\" style=\"width: 20px;\">04</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;606412&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style=\"width: 248px;\"><a href=\"/song/606412\" title=\"曲终人散\">曲终人散</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/606412\" class=\"mv-icon\"></a></span></div></li><li data-songitem=\"{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;229485&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u5c0f\\u5c0f\\u7684\\u592a\\u9633&quot;,&quot;pay_type&quot;:0}}\" class=\"  bb-dotimg clearfix  song-item-hook   list5\"><div class=\"song-item\"><span class=\"index-num index-hook\" style=\"width: 20px;\">05</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;229485&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style=\"width: 248px;\"><a href=\"/song/229485\" title=\"小小的太阳\">小小的太阳</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/229485\" class=\"mv-icon\"></a></span></div></li><li data-songitem=\"{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;962164&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u7528\\u5fc3\\u826f\\u82e6&quot;,&quot;pay_type&quot;:0}}\" class=\"  bb-dotimg clearfix  song-item-hook   list6\"><div class=\"song-item\"><span class=\"index-num index-hook\" style=\"width: 20px;\">06</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;962164&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style=\"width: 248px;\"><a href=\"/song/962164\" title=\"用心良苦\">用心良苦</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/962164\" class=\"mv-icon\"></a></span></div></li><li data-songitem=\"{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;260252&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u5927\\u5973\\u4eba&quot;,&quot;pay_type&quot;:0}}\" class=\"  bb-dotimg clearfix  song-item-hook   list7\"><div class=\"song-item\"><span class=\"index-num index-hook\" style=\"width: 20px;\">07</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;260252&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style=\"width: 248px;\"><a href=\"/song/260252\" title=\"大女人\">大女人</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/260252\" class=\"mv-icon\"></a></span></div></li><li data-songitem=\"{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;14743299&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u5fc3\\u672f&quot;,&quot;pay_type&quot;:0}}\" class=\"  bb-dotimg clearfix  song-item-hook   list8\"><div class=\"song-item\"><span class=\"index-num index-hook\" style=\"width: 20px;\">08</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;14743299&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style=\"width: 248px;\"><a href=\"/song/14743299\" title=\"心术\">心术</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/14743299\" class=\"mv-icon\"></a></span></div></li><li data-songitem=\"{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;678267&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u56da\\u9e1f&quot;,&quot;pay_type&quot;:0}}\" class=\"  bb-dotimg clearfix  song-item-hook   list9\"><div class=\"song-item\"><span class=\"index-num index-hook\" style=\"width: 20px;\">09</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;678267&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style=\"width: 248px;\"><a href=\"/song/678267\" title=\"囚鸟\">囚鸟</a></span></div></li><li data-songitem=\"{&quot;yyr_song_id&quot;:null,&quot;songItem&quot;:{&quot;sid&quot;:&quot;803696&quot;,&quot;author&quot;:&quot;\\u5f20\\u5b87&quot;,&quot;sname&quot;:&quot;\\u7537\\u4eba\\u7684\\u597d&quot;,&quot;pay_type&quot;:0}}\" class=\"  bb-dotimg clearfix  last-item song-item-hook   list10\"><div class=\"song-item\"><span class=\"index-num index-hook\" style=\"width: 20px;\">10</span><span class=\"fun-icon\">\n    \n    \n        \n    \n                                                                    \n    <span class=\"music-icon-hook\" data-musicicon=\"{&quot;id&quot;:&quot;803696&quot;,&quot;type&quot;:&quot;song&quot;,&quot;iconStr&quot;:&quot; play add&quot;,&quot;moduleName&quot;:&quot;otherhotsongIcon&quot;,&quot;yyr_song_id&quot;:null,&quot;pay_type&quot;:0}\">\n                                                                                        <a class=\"list-micon icon-play\" data-action=\"play\" title=\"播放\" href=\"#\"></a>\n                                                                                                                                                <a class=\"list-micon icon-add\" data-action=\"add\" title=\"添加\" href=\"#\"></a>\n                                                                            </span></span><span class=\"song-title \" style=\"width: 248px;\"><a href=\"/song/803696\" title=\"男人的好\">男人的好</a><a title=\"歌曲MV\" target=\"_blank\" href=\"/mv/803696\" class=\"mv-icon\"></a></span></div></li></ul></div>\n\t</div>\n\t<div class=\"hot-playall\">\n\t\t\t<span class=\"hot-play play-all-btn\" data-playdata=\"{&quot;ids&quot;:&quot;10233440,2132046,291890,606412,229485,962164,260252,14743299,678267,803696&quot;,&quot;moduleName&quot;:&quot;otherhotsong&quot;}\">\n\t\t\t                                        <a href=\"#\" class=\"btn btn-a \">\n        <span class=\"inner\">\n                            <i class=\"icon btn-icon-play\"></i>                            <span class=\"txt\">播放全部</span>\n                        </span>\n    </a>\n\t\t</span>\t\n\t</div>\t\n\n\n  </div>\n  \n  \n</div>\n\t\n\t\n\t\n<div class=\"module clicklog-hot clearfix\" monkey=\"hotSongs\">\n  <div class=\"head \">\n\t\n<h2 class=\"title\">最新评论</h2>\n\n  </div>\t\n  <div class=\"body \">\n\t\n<div id=\"song-comment\" class=\"mod-song-comment songpage-voice clicklog-voice\">\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\t\n<div class=\"user-voice-hook { userVoice:{ 'id':'264374','subjectType':'song','pageSize':'10', 'emptyMsg':'这首歌怎么样？快来评论一下吧！' } }\">\n\t<div class=\"comment-hook\">\n\t\t<ul class=\"comment-list comment-list-hook\"><li class=\"no-data\">评论加载中...</li></ul>\n\t\t\n\n<div class=\"page-navigator-hook  { pageNavigator:{ 'total':0, 'size':10, 'start':0, 'show_total':0, 'focus_neighbor':0 } }\">\n<div class=\"page-cont\">\n \t<div class=\"page-inner\">\n</div>\n</div>\n </div>\n\t\t<div class=\"comment-form clearfix\">\n\t\t\t<div class=\"comment-label\"></div>\n\t\t\t<div class=\"comment-input-icon\"></div>\n\t\t\t<div class=\"comment-form-submit clearfix\">\n\t\t\t\t<textarea autocomplete=\"off\" class=\"comment-area comment-input-hook field-text\">我来说两句！</textarea>\n\t\t\t\t<a href=\"javascript:void(0);\" class=\"user-voice-submit comment-submit-hook\" target=\"_blank\" rel=\"noopener\">发布</a>\n\t\t\t</div>\n\t\t\t<span class=\"comment-prompt-hook\"></span>\n\t\t</div>\n\t</div>\n</div>\n\t\n</div>\n\n  </div>\n  \n  \n</div>\n\n\n</div>\n\n        </div>\n        <div class=\"sidebar\">\n\n            \n\t\n<div class=\"top-sidebar\" monkey=\"top-sidebar\">\n    \n   \n    \n    <dl class=\"clearfix\">\n        <dt>主打榜单</dt>\n                <dd class=\"first\">    \n           <a href=\"/top/dayhot\">热歌榜 <span>TOP500</span></a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"/top/new\">新歌榜 <span>TOP100</span></a>\n                   </dd>\n        \n                <dd>    \n           <a href=\"/top/artist\">歌手榜 <span>TOP200</span></a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"/king/top\">百度King榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"http://y.baidu.com/top?play_top=top&amp;pst=music_top\" target=\"_blank\" rel=\"noopener\">原创音乐榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"http://y.baidu.com/top/song/pop?play_top=pop&amp;pst=music_top\" target=\"_blank\" rel=\"noopener\">原创流行榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"http://y.baidu.com/top/song/folk?play_top=folk&amp;pst=music_top\" target=\"_blank\" rel=\"noopener\">原创民谣榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"http://y.baidu.com/top/artist?pst=music_top\" target=\"_blank\" rel=\"noopener\">热门原创音乐人榜</a>\n                   </dd>\n        \n            </dl>\n    \n    \n    <dl class=\"clearfix\">\n        <dt>分类榜单</dt>\n                <dd class=\"first\">    \n           <a href=\"/top/sprite\">雪碧音碰音榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"/top/oumei\">欧美金曲榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"/top/yingshijinqu\">影视金曲榜</a>\n                   </dd>\n        \n                <dd>    \n           <a href=\"/top/lovesong\">情歌对唱榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"/top/netsong\">网络歌曲榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"/top/oldsong\">经典老歌榜</a>\n                   </dd>\n        \n                <dd>    \n           <a href=\"/top/rock\">摇滚榜</a>\n                   </dd>\n        \n            </dl>\n    \n    \n    <dl class=\"clearfix\">\n        <dt>媒体榜单</dt>\n                <dd class=\"first\">    \n           <a href=\"/top/ktv\">KTV热歌榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"/top/billboard\">Billboard</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"/top/ukchart\">UK Chart</a>\n                   </dd>\n        \n                <dd>    \n           <a href=\"/top/hito\">Hito中文榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"/top/chizha\">叱咤歌曲榜</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"/top/mnet\">韩国Mnet</a>\n           <i class=\"module-line\"></i>        </dd>\n        \n                <dd>    \n           <a href=\"/top/oricon\">日本公信榜</a>\n                   </dd>\n        \n            </dl>\n    \n</div>\n    \t    <div class=\"module musician-top clearfix\" monkey=\"musician-top\">\n  <div class=\"head \">\n\t\n<a class=\"more\" target=\"_blank\" href=\"http://y.baidu.com/top?pst=song_hot\">更多<span>&gt;&gt;</span></a>\n<h2 class=\"title\">原创音乐榜<span class=\"i-musician\" title=\"此资源来自百度音乐人\"></span></h2>\n\n  </div>\t\n  <div class=\"body \">\n\t\n<ul class=\"musician-top-inner\">\n                            <li class=\"clearfix\">\n        <span class=\"num one\">\n            1\n        </span>\n        <span class=\"status\">\n            <i class=\"fair\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/109205?play_song=68937&pst=song_hot\">江湖&middot;闪蝶</a>\n        </span>\n        <span class=\"hot\">4.5万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            2\n        </span>\n        <span class=\"status\">\n            <i class=\"fair\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/105242?play_song=32120&pst=song_hot\">剑起苍澜 </a>\n        </span>\n        <span class=\"hot\">59.1万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            3\n        </span>\n        <span class=\"status\">\n            <i class=\"up\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/103620?play_song=24765&pst=song_hot\">佛陀在金殿等你</a>\n        </span>\n        <span class=\"hot\">13.0万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            4\n        </span>\n        <span class=\"status\">\n            <i class=\"up\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/102277?play_song=19205&pst=song_hot\">高跟鞋</a>\n        </span>\n        <span class=\"hot\">2.9万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            5\n        </span>\n        <span class=\"status\">\n            <i class=\"down\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/105321?play_song=31740&pst=song_hot\">疯了</a>\n        </span>\n        <span class=\"hot\">4.9万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            6\n        </span>\n        <span class=\"status\">\n            <i class=\"new\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/101345?play_song=14943&pst=song_hot\">那些没有的事</a>\n        </span>\n        <span class=\"hot\">12.3万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            7\n        </span>\n        <span class=\"status\">\n            <i class=\"fair\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/111594?play_song=66876&pst=song_hot\">白银饭店</a>\n        </span>\n        <span class=\"hot\">1.9万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            8\n        </span>\n        <span class=\"status\">\n            <i class=\"up\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/101449?play_song=14840&pst=song_hot\">彩虹</a>\n        </span>\n        <span class=\"hot\">1.7万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            9\n        </span>\n        <span class=\"status\">\n            <i class=\"down\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/104973?play_song=29241&pst=song_hot\">爱情歌曲(demo)</a>\n        </span>\n        <span class=\"hot\">26.4万</span>\n    </li>\n                                <li class=\"clearfix\">\n        <span class=\"num \">\n            10\n        </span>\n        <span class=\"status\">\n            <i class=\"up\"></i>\n        </span>\n        <span class=\"song-name\">\n            <a target=\"_blank\" href=\"http://y.baidu.com/artist/100441?play_song=15730&pst=song_hot\">朋友</a>\n        </span>\n        <span class=\"hot\">12.9万</span>\n    </li>\n        </ul>\n\n  </div>\n  \n  \n</div>\n    \t\n\n\n<div class=\"ad\">\n    \n\n\n        <div class=\"adm \" data-id=\"482354\">\n                    <iframe class=\"adm-iframe \" src=\"/static/html/cbjs.html?v=20130816&id=482354\" width=\"224\" height=\"130\" scrolling=\"no\" frameborder=\"0\">\n            </iframe>\n            </div>\n\n</div>\n<div class=\"ad\">\n    \n\n\n        <div class=\"adm \" data-id=\"844401\">\n                    <iframe class=\"adm-iframe \" src=\"/static/html/cbjs.html?v=20130816&id=844401\" width=\"224\" height=\"130\" scrolling=\"no\" frameborder=\"0\">\n            </iframe>\n            </div>\n\n</div>\n<div class=\"ad\">\n    \n\n\n        <div class=\"adm \" data-id=\"874612\">\n                    <iframe class=\"adm-iframe \" src=\"/static/html/cbjs.html?v=20130816&id=874612\" width=\"224\" height=\"130\" scrolling=\"no\" frameborder=\"0\">\n            </iframe>\n            </div>\n\n</div>\t<div class=\"module mod-topic clearfix\" monkey=\"mod-topic\">\n  <div class=\"head \">\n\t\n  <h2 class=\"title\">精彩推荐</h2>\n\n  </div>\t\n  <div class=\"body \">\n\t\n  <ul>\n                  <li><i></i><a href=\"http://music.baidu.com/songlist/4045?pst=gq\" target=\"_blank\" title=\"新歌榜第20周 | EXO攻陷周榜\">新歌榜第20周 | EXO攻陷周榜</a> </li>\n                        <li><i></i><a href=\"http://music.baidu.com/topic/cooperation/easonshoufa2014?pst=gq \" target=\"_blank\" title=\"独家首发| 陈奕迅全新国语大碟\">独家首发| 陈奕迅全新国语大碟</a> </li>\n                        <li><i></i><a href=\"http://music.baidu.com/topic/cooperation/wsyyzk09?pst=gq\" target=\"_blank\" title=\"慵懒的诱惑 极品沙发音乐\">慵懒的诱惑 极品沙发音乐</a> </li>\n                        <li><i></i><a href=\"http://music.baidu.com/topic/people/bigstar14liyuchun?pst=gq\" target=\"_blank\" title=\"音乐大人物 | 李宇春将酷进行到底\">音乐大人物 | 李宇春将酷进行到底</a> </li>\n                        <li><i></i><a href=\"http://music.baidu.com/songlist/3373?pst=gq\" target=\"_blank\" title=\"昨日重现 欧美经典老歌精选\">昨日重现 欧美经典老歌精选</a> </li>\n                        <li><i></i><a href=\"http://music.baidu.com/album/116668633?pst=gq\" target=\"_blank\" title=\"新歌首发| Super Junior-M完美回归\">新歌首发| Super Junior-M完美回归</a> </li>\n                                          </ul>\n\n  </div>\n  \n  \n</div>\n\n        </div>\n    \n\n      </div>\n    </div>\n  </div>\n  \n\n  \n    <div class=\"music-foot\" monkey=\"music-foot\" alog-alias=\"music-foot-alog\">\n                    <a href=\"javascript:void(0)\" class=\"weixin-follow\" id=\"weixin_follow\" target=\"_blank\" rel=\"noopener\">加微信好友</a>\n<a href=\"http://e.weibo.com/musicbaidu\" target=\"_blank\" class=\"weibo-follow\">加关注</a>\n<a href=\"http://tousu.baidu.com/music/add\" target=\"_blank\" rel=\"nofollow\">意见反馈</a>\n<i class=\"module-line\"></i>\n<a target=\"_blank\" href=\"/doc/help\" rel=\"nofollow\">帮助中心</a>\n<i class=\"module-line\"></i>\n<a href=\"http://musicopen.baidu.com\" target=\"_blank\" rel=\"nofollow\">资源合作开放平台</a>\n<i class=\"module-line\"></i>\n<a href=\"http://y.baidu.com\" target=\"_blank\">原创音乐人</a>\n<i class=\"module-line\"></i>\n<span class=\"copy\">&copy;2014 Baidu</span>\n<a href=\"http://www.baidu.com/duty/\" target=\"_blank\" class=\"reader\" rel=\"nofollow\">使用百度前必读</a>\n文网文<span class=\"license\">[2010]197</span>号\n<div class=\"weixin-detail\" id=\"weixin_detail\">\n    <div class=\"weixin-qr\"></div>\n    <span>微信扫一扫<br>精选音乐每日推送!</span>\n</div>\n            </div>\n  \n\n  \n    <div class=\"app-down-panel\">\n        <div class=\"go-to-top\"></div>\n    </div>\n    <a class=\"vip-tips\" id=\"vip_tips\" target=\"_blank\" href=\"/mobile?pst=tips\">\n      <div class=\"vip-tips-content\">\n        <div class=\"vip-tips-left\">\n\n        </div>\n        <div class=\"vip-tips-right\">\n          <span class=\"vip-tips-text\" id=\"vip_tips_text_vip\"><em>免费续期</em>2个月VIP</span>\n          <span class=\"vip-tips-text\" id=\"vip_tips_text_not_vip\">百度音乐<em>免费</em>送2个月VIP会员</span>\n\n          <div class=\"vip-tips-btn\" href target=\"_blank\">点击领取</div>\n        </div>\n        <div class=\"vip-tips-close\" href=\"javascript:void(0)\"></div>\n      </div>\n    </a>\n  \n  \n\n  \t<div class=\"layout-bdbrowser\">\n\t\t<span class=\"icon-add2box\"></span>\n\t</div>\n\n</body>\n\n        \n\t\t<script type=\"text/javascript\" src=\"//mu5.bdstatic.com/static/j/WN7TVLTU.js\"></script>\n        <script type=\"text/javascript\" src=\"//mu7.bdstatic.com/static/j/zpkwSYcr.js\"></script>\n\t\t<script type=\"text/javascript\" src=\"//mu6.bdstatic.com/static/j/p86CrQm2.js\"></script>\n    \t\n        \t<script type=\"text/javascript\" src=\"//mu5.bdstatic.com/static/j/WCKtkJuQ.js\"></script>\n    \t\n\t\n\n\n  \t\n<script type=\"text/javascript\" src=\"//mu5.bdstatic.com/static/j/u5CEGuS6.js\"></script>\n<script type=\"text/javascript\" src=\"//mu6.bdstatic.com/static/j/mnsJY5ts.js\"></script>\n<script src=\"http://music.baidu.com/cms/huodong/pepsi/pepsi_ad13.js\"></script>\n<script type=\"text/javascript\">\n\t\tinitCollection(264374);\n\t\n\t$(document).bind(\"logined\", function () {\n\t    initCollection(264374);\n\t});\n//\t$(\".ecom-ad\").ecomad();\n\t// createClickMonkey(\"ting-music-songpage\");\n</script>\n\n\n\n\n  <div style=\"display:none;\">\n    <script type=\"text/javascript\">\n      var pageId = \"ting-muisc-songpage\";\n      (document.getElementsByTagName('head')[0] || body).appendChild(document.createElement('script')).src = 'http://img.baidu.com/hunter/musicmonkey.min.js';\n      var _bdhmProtocol = ((\"https:\" == document.location.protocol) ? \" https://\" : \" http://\");\n      document.write(unescape(\"%3Cscript src='\" + _bdhmProtocol + \"hm.baidu.com/h.js%3Fd0ad46e4afeacf34cd12de4c9b553aa6' type='text/javascript'%3E%3C/script%3E\"));\n    </script>\n  </div>\n\n<script type=\"text/javascript\" id=\"bdshare_js\" data=\"type=tools&amp;uid=10004&amp;mini=1\"></script>\n<script type=\"text/javascript\" id=\"bdshell_js\"></script>\n<script type=\"text/javascript\">\n    var bds_config = {\n        'bdText':'推荐一首张宇的歌曲《给你们》 （分享自@百度音乐）',\n        'bdPic':'http://musicdata.baidu.com/data2/pic/115429753/115429753.jpg',\n        'searchPic': false\n    };\n\tvar tmpImg = new Image();\n\ttmpImg.src = \"http://musicdata.baidu.com/data2/pic/115429753/115429753.jpg\";\n\tvar artistId = 1210;\n\n    document.getElementById(\"bdshell_js\").src = \"http://share.baidu.com/static/js/shell_v2.js?t=\" + new Date().getHours();\n</script>\n<script type=\"text/javascript\" src=\"//mu5.bdstatic.com/static/js/ting.apk.js\"></script>\n<script type=\"text/javascript\" src=\"//mu6.bdstatic.com/static/js/ting.appdown.js\"></script>\n\n</html>\n"}],"Post":[{"layout":"post","title":"让Octopress博客在多台Mac上同时使用","date":"2014-04-02T06:28:35.000Z","comments":1,"keywords":"octopress, 博客 ,octopress多电脑使用 ,Mac","_content":"\n\n前阵子在公司电脑上配置好了Octopress博客，但是想在家里的Mac上使用，开始以为简单的将仓库clone就可以了，不幸的是我想的太简单。后来在网上看到了前面列出的第一篇文章，终于解决问题。\n\n## 一、Octopress目录结构\n\nOctopress的仓库目录下有两个branch，`source`和`master`。\n\n* `source`分支下保存Octopress的源代码，我们需要用他们生成博客，该分支保存在Octopress本地仓库的根目录下；\n\n* `master`分支下保存生成的博客内容，该分支在Octopress本地仓库的根目录下一个叫`_deploy`得文件夹中。该文件夹是以下划线开头的，会在执行`git push origin source`命令时被忽略，这也是为什么一个目录中能同时存在两个不同分支的文件夹的原因。\n\n\n<!-- more -->\n\n\n## 二、在本地重建Octopress仓库\n\n需要执行以下命令：\n\n#### 1. clone `source`分支\n\n```\n$ git clone -b source git@github.com:username/username.github.com.git octopress\n```\n别忘了`username`替换成你自己github用户名。\n另外还要注意的是，clone的地址不能是`http`而必须得是`ssh`的。\n\n\n如果执行时提示以下错误：\n\n```\nCloning into 'octopress'...\nThe authenticity of host 'github.com (192.30.252.131)' can't be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added 'github.com,192.30.252.131' (RSA) to the list of known hosts.\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n\n```\n\n说明你的电脑不被github信任，需要在你电脑上创建`ssh key`并添加到github中。\n\n这是你需要执行2；\n如果没出现上述错误，直接执行3。\n\n#### 2.创建并添加ssh key\n\n###### 2.1 创建ssh key\n\n######## 2.1.1 生成key\n\n执行命令：\n\n```\n$ ssh-keygen -t rsa -C \"your_email@example.com\"\n```\n\n会提示：\n\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]\n```\n\n这时候按回车键(Enter)继续：\n\n```\nEnter passphrase (empty for no passphrase): [Type a passphrase]\n# Enter same passphrase again: [Type passphrase again]\n```\n\n会要求你输入一个密码，4位以上，要记住，后面有用。\n\n接下来会提示：\n\n```\nYour identification has been saved in /Users/you/.ssh/id_rsa.\n# Your public key has been saved in /Users/you/.ssh/id_rsa.pub.\n# The key fingerprint is:\n# 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com\n```\n\n到这里就说明key已经创建成功了。\n\n######## 2.1.2 把生成的key添加到`ssh-agent`中\n\n最后需要执行以下命令：\n\n```\n$ ssh-add ~/.ssh/id_rsa\n```\n\n###### 2.2 把生成的key添加到github\n\n######## 2.2.1 copy key内容\n\n先执行下面的命令：\n\n```\npbcopy < ~/.ssh/id_rsa.pub\n```\n该命令将key中的内容copy到粘贴板中，以便后面使用。当然你也可以用自己的方式copy。\n\n######## 2.2.2 找到添加key的地方\n\n先点击[Account Settings](https://github.com/settings)：\n\n![账户设置](https://github-images.s3.amazonaws.com/help/settings/userbar-account-settings.png)\n\n进入设置界面后，点击界面左侧的[SSH KEYS](https://github.com/settings/ssh):\n\n![ssh keys](https://github-images.s3.amazonaws.com/help/settings/settings-sidebar-ssh-keys.png)\n\n点击`Add SSH key`按钮：\n\n![add ssh key](https://github-images.s3.amazonaws.com/help/settings/ssh-add-ssh-key.png)\n\n点击`Add key`按钮：\n\n![add key](https://github-images.s3.amazonaws.com/help/settings/ssh-add-key.png)\n\n在输入框内粘贴刚才copy的key，点击确定即可。\n\n###### 2.3 验证key可用性\n\n通过ssh github验证key是否可用：\n\n```\n$ ssh -T git@github.com\n```\n\n命令执行后会输出：\n\n\n```\nThe authenticity of host 'github.com (207.97.227.239)' can't be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)?\n```\n\n输入`yes`如果打印以下内容，就说明OK了：\n\n```\nHi username! You've successfully authenticated, but GitHub does not\n```\n\n#### 3.clone master分支\n\n下面需要将master分支clone到`_deploy`目录：\n\n```\n$ cd octopress\n$ git clone git@github.com:username/username.github.com.git _deploy \n```\n\n#### 4.配置环境\n\n执行以下命令配置环境：\n \n```\n$ gem install bundler\n$ rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command\n$ bundle install\n$ rake setup_github_pages \n```\n\n执行最后一条命令时需要你输入github中博客仓库地址：\n\n```\nEnter the read/write url for your repository\n(For example, 'git@github.com:your_username/your_username.github.com)\n```\n到此所有的工作都完成了，你就可以享受在两台电脑上使用Octopress了！\n\n\n## 三、Tips\n\n#### 1. 及时提交本地修改\n\n在每处配置了Octopress的地方，做了任何修改都要提交，否则另一个地方做了修改，本地更新的时候肯定会冲突。\n\n每次在本地做完修改以后，都要及时提交，分别执行以下命令：\n\n```\n$ rake generate\n$ rake deploy             # update the remote master branch\n```\n\n第一条命令会使用本地的修改生成最新的blog网站，并且生成的blog会存放到`Octopress`根目录下的`public/`目录下；\n\n第二条命令主要做了两件事：\n\n* 用`generate`命令生成在`public/`目录下的内容覆盖`_deploy/`目录下内容；\n\n* 将`_deploy/`目录下的修改`add` 、 `commit`到git，并`push`到git的`master`分支。\n\n\n别以为这就结束了，你还得把source分支中做的修改提交的git仓库中，执行以下命令：\n\n```\n$ git add .\n$ git commit -am \"Some comment here.\" \n$ git push origin source  # update the remote source branch \n```\n执行完这两步后，稍过一会就能看到自己blog中的更新啦！\n\n#### 2.修改前先更新到最新版本\n\n为了以防万一，在本地做任何修改前都要先做更新，可以执行以下命令分别更新`source`和`master`分支：\n\n```\n$ cd octopress\n$ git pull origin source  # update the local source branch\n$ cd ./_deploy\n$ git pull origin master  # update the local master branch\n```\n\n\n## 四、参考文档\n\n本文参考了以下两篇文章：\n\n* [**Clone Your Octopress to Blog From Two Places**](http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/)\n\n* [**Generating SSH Keys**](https://help.github.com/articles/generating-ssh-keys)\n\n","source":"_posts/2014-04-02-ru-he-pei-zhi-rang-ni-de-octopressbo-ke-zai-duo-tai-macshang-tong-shi-shi-yong.markdown","raw":"---\n\nlayout: post\ntitle: \"让Octopress博客在多台Mac上同时使用\"\ndate: 2014-04-02 14:28:35 +0800\ncomments: true\ncategories: Octopress\ntags: [octopress, 博客]\nkeywords: octopress, 博客 ,octopress多电脑使用 ,Mac\n---\n\n\n前阵子在公司电脑上配置好了Octopress博客，但是想在家里的Mac上使用，开始以为简单的将仓库clone就可以了，不幸的是我想的太简单。后来在网上看到了前面列出的第一篇文章，终于解决问题。\n\n## 一、Octopress目录结构\n\nOctopress的仓库目录下有两个branch，`source`和`master`。\n\n* `source`分支下保存Octopress的源代码，我们需要用他们生成博客，该分支保存在Octopress本地仓库的根目录下；\n\n* `master`分支下保存生成的博客内容，该分支在Octopress本地仓库的根目录下一个叫`_deploy`得文件夹中。该文件夹是以下划线开头的，会在执行`git push origin source`命令时被忽略，这也是为什么一个目录中能同时存在两个不同分支的文件夹的原因。\n\n\n<!-- more -->\n\n\n## 二、在本地重建Octopress仓库\n\n需要执行以下命令：\n\n#### 1. clone `source`分支\n\n```\n$ git clone -b source git@github.com:username/username.github.com.git octopress\n```\n别忘了`username`替换成你自己github用户名。\n另外还要注意的是，clone的地址不能是`http`而必须得是`ssh`的。\n\n\n如果执行时提示以下错误：\n\n```\nCloning into 'octopress'...\nThe authenticity of host 'github.com (192.30.252.131)' can't be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added 'github.com,192.30.252.131' (RSA) to the list of known hosts.\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n\n```\n\n说明你的电脑不被github信任，需要在你电脑上创建`ssh key`并添加到github中。\n\n这是你需要执行2；\n如果没出现上述错误，直接执行3。\n\n#### 2.创建并添加ssh key\n\n###### 2.1 创建ssh key\n\n######## 2.1.1 生成key\n\n执行命令：\n\n```\n$ ssh-keygen -t rsa -C \"your_email@example.com\"\n```\n\n会提示：\n\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]\n```\n\n这时候按回车键(Enter)继续：\n\n```\nEnter passphrase (empty for no passphrase): [Type a passphrase]\n# Enter same passphrase again: [Type passphrase again]\n```\n\n会要求你输入一个密码，4位以上，要记住，后面有用。\n\n接下来会提示：\n\n```\nYour identification has been saved in /Users/you/.ssh/id_rsa.\n# Your public key has been saved in /Users/you/.ssh/id_rsa.pub.\n# The key fingerprint is:\n# 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com\n```\n\n到这里就说明key已经创建成功了。\n\n######## 2.1.2 把生成的key添加到`ssh-agent`中\n\n最后需要执行以下命令：\n\n```\n$ ssh-add ~/.ssh/id_rsa\n```\n\n###### 2.2 把生成的key添加到github\n\n######## 2.2.1 copy key内容\n\n先执行下面的命令：\n\n```\npbcopy < ~/.ssh/id_rsa.pub\n```\n该命令将key中的内容copy到粘贴板中，以便后面使用。当然你也可以用自己的方式copy。\n\n######## 2.2.2 找到添加key的地方\n\n先点击[Account Settings](https://github.com/settings)：\n\n![账户设置](https://github-images.s3.amazonaws.com/help/settings/userbar-account-settings.png)\n\n进入设置界面后，点击界面左侧的[SSH KEYS](https://github.com/settings/ssh):\n\n![ssh keys](https://github-images.s3.amazonaws.com/help/settings/settings-sidebar-ssh-keys.png)\n\n点击`Add SSH key`按钮：\n\n![add ssh key](https://github-images.s3.amazonaws.com/help/settings/ssh-add-ssh-key.png)\n\n点击`Add key`按钮：\n\n![add key](https://github-images.s3.amazonaws.com/help/settings/ssh-add-key.png)\n\n在输入框内粘贴刚才copy的key，点击确定即可。\n\n###### 2.3 验证key可用性\n\n通过ssh github验证key是否可用：\n\n```\n$ ssh -T git@github.com\n```\n\n命令执行后会输出：\n\n\n```\nThe authenticity of host 'github.com (207.97.227.239)' can't be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)?\n```\n\n输入`yes`如果打印以下内容，就说明OK了：\n\n```\nHi username! You've successfully authenticated, but GitHub does not\n```\n\n#### 3.clone master分支\n\n下面需要将master分支clone到`_deploy`目录：\n\n```\n$ cd octopress\n$ git clone git@github.com:username/username.github.com.git _deploy \n```\n\n#### 4.配置环境\n\n执行以下命令配置环境：\n \n```\n$ gem install bundler\n$ rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command\n$ bundle install\n$ rake setup_github_pages \n```\n\n执行最后一条命令时需要你输入github中博客仓库地址：\n\n```\nEnter the read/write url for your repository\n(For example, 'git@github.com:your_username/your_username.github.com)\n```\n到此所有的工作都完成了，你就可以享受在两台电脑上使用Octopress了！\n\n\n## 三、Tips\n\n#### 1. 及时提交本地修改\n\n在每处配置了Octopress的地方，做了任何修改都要提交，否则另一个地方做了修改，本地更新的时候肯定会冲突。\n\n每次在本地做完修改以后，都要及时提交，分别执行以下命令：\n\n```\n$ rake generate\n$ rake deploy             # update the remote master branch\n```\n\n第一条命令会使用本地的修改生成最新的blog网站，并且生成的blog会存放到`Octopress`根目录下的`public/`目录下；\n\n第二条命令主要做了两件事：\n\n* 用`generate`命令生成在`public/`目录下的内容覆盖`_deploy/`目录下内容；\n\n* 将`_deploy/`目录下的修改`add` 、 `commit`到git，并`push`到git的`master`分支。\n\n\n别以为这就结束了，你还得把source分支中做的修改提交的git仓库中，执行以下命令：\n\n```\n$ git add .\n$ git commit -am \"Some comment here.\" \n$ git push origin source  # update the remote source branch \n```\n执行完这两步后，稍过一会就能看到自己blog中的更新啦！\n\n#### 2.修改前先更新到最新版本\n\n为了以防万一，在本地做任何修改前都要先做更新，可以执行以下命令分别更新`source`和`master`分支：\n\n```\n$ cd octopress\n$ git pull origin source  # update the local source branch\n$ cd ./_deploy\n$ git pull origin master  # update the local master branch\n```\n\n\n## 四、参考文档\n\n本文参考了以下两篇文章：\n\n* [**Clone Your Octopress to Blog From Two Places**](http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/)\n\n* [**Generating SSH Keys**](https://help.github.com/articles/generating-ssh-keys)\n\n","slug":"2014-04-02-ru-he-pei-zhi-rang-ni-de-octopressbo-ke-zai-duo-tai-macshang-tong-shi-shi-yong","published":1,"updated":"2019-09-23T13:06:40.000Z","photos":[],"link":"","_id":"ck0zcli6w0000qhtfn94t2938","content":"<p>前阵子在公司电脑上配置好了Octopress博客，但是想在家里的Mac上使用，开始以为简单的将仓库clone就可以了，不幸的是我想的太简单。后来在网上看到了前面列出的第一篇文章，终于解决问题。</p>\n<h2 id=\"一、Octopress目录结构\"><a href=\"#一、Octopress目录结构\" class=\"headerlink\" title=\"一、Octopress目录结构\"></a>一、Octopress目录结构</h2><p>Octopress的仓库目录下有两个branch，<code>source</code>和<code>master</code>。</p>\n<ul>\n<li><p><code>source</code>分支下保存Octopress的源代码，我们需要用他们生成博客，该分支保存在Octopress本地仓库的根目录下；</p>\n</li>\n<li><p><code>master</code>分支下保存生成的博客内容，该分支在Octopress本地仓库的根目录下一个叫<code>_deploy</code>得文件夹中。该文件夹是以下划线开头的，会在执行<code>git push origin source</code>命令时被忽略，这也是为什么一个目录中能同时存在两个不同分支的文件夹的原因。</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n\n\n<h2 id=\"二、在本地重建Octopress仓库\"><a href=\"#二、在本地重建Octopress仓库\" class=\"headerlink\" title=\"二、在本地重建Octopress仓库\"></a>二、在本地重建Octopress仓库</h2><p>需要执行以下命令：</p>\n<h4 id=\"1-clone-source分支\"><a href=\"#1-clone-source分支\" class=\"headerlink\" title=\"1. clone source分支\"></a>1. clone <code>source</code>分支</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone -b source git@github.com:username/username.github.com.git octopress</span><br></pre></td></tr></table></figure>\n\n<p>别忘了<code>username</code>替换成你自己github用户名。<br>另外还要注意的是，clone的地址不能是<code>http</code>而必须得是<code>ssh</code>的。</p>\n<p>如果执行时提示以下错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cloning into &apos;octopress&apos;...</span><br><span class=\"line\">The authenticity of host &apos;github.com (192.30.252.131)&apos; can&apos;t be established.</span><br><span class=\"line\">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class=\"line\">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class=\"line\">Warning: Permanently added &apos;github.com,192.30.252.131&apos; (RSA) to the list of known hosts.</span><br><span class=\"line\">Permission denied (publickey).</span><br><span class=\"line\">fatal: Could not read from remote repository.</span><br><span class=\"line\"></span><br><span class=\"line\">Please make sure you have the correct access rights</span><br><span class=\"line\">and the repository exists.</span><br></pre></td></tr></table></figure>\n\n<p>说明你的电脑不被github信任，需要在你电脑上创建<code>ssh key</code>并添加到github中。</p>\n<p>这是你需要执行2；<br>如果没出现上述错误，直接执行3。</p>\n<h4 id=\"2-创建并添加ssh-key\"><a href=\"#2-创建并添加ssh-key\" class=\"headerlink\" title=\"2.创建并添加ssh key\"></a>2.创建并添加ssh key</h4><h6 id=\"2-1-创建ssh-key\"><a href=\"#2-1-创建ssh-key\" class=\"headerlink\" title=\"2.1 创建ssh key\"></a>2.1 创建ssh key</h6><p>######## 2.1.1 生成key</p>\n<p>执行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure>\n\n<p>会提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]</span><br></pre></td></tr></table></figure>\n\n<p>这时候按回车键(Enter)继续：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter passphrase (empty for no passphrase): [Type a passphrase]</span><br><span class=\"line\"># Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure>\n\n<p>会要求你输入一个密码，4位以上，要记住，后面有用。</p>\n<p>接下来会提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Your identification has been saved in /Users/you/.ssh/id_rsa.</span><br><span class=\"line\"># Your public key has been saved in /Users/you/.ssh/id_rsa.pub.</span><br><span class=\"line\"># The key fingerprint is:</span><br><span class=\"line\"># 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</span><br></pre></td></tr></table></figure>\n\n<p>到这里就说明key已经创建成功了。</p>\n<p>######## 2.1.2 把生成的key添加到<code>ssh-agent</code>中</p>\n<p>最后需要执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-2-把生成的key添加到github\"><a href=\"#2-2-把生成的key添加到github\" class=\"headerlink\" title=\"2.2 把生成的key添加到github\"></a>2.2 把生成的key添加到github</h6><p>######## 2.2.1 copy key内容</p>\n<p>先执行下面的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pbcopy &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n\n<p>该命令将key中的内容copy到粘贴板中，以便后面使用。当然你也可以用自己的方式copy。</p>\n<p>######## 2.2.2 找到添加key的地方</p>\n<p>先点击<a href=\"https://github.com/settings\" target=\"_blank\" rel=\"noopener\">Account Settings</a>：</p>\n<p><img src=\"https://github-images.s3.amazonaws.com/help/settings/userbar-account-settings.png\" alt=\"账户设置\"></p>\n<p>进入设置界面后，点击界面左侧的<a href=\"https://github.com/settings/ssh\" target=\"_blank\" rel=\"noopener\">SSH KEYS</a>:</p>\n<p><img src=\"https://github-images.s3.amazonaws.com/help/settings/settings-sidebar-ssh-keys.png\" alt=\"ssh keys\"></p>\n<p>点击<code>Add SSH key</code>按钮：</p>\n<p><img src=\"https://github-images.s3.amazonaws.com/help/settings/ssh-add-ssh-key.png\" alt=\"add ssh key\"></p>\n<p>点击<code>Add key</code>按钮：</p>\n<p><img src=\"https://github-images.s3.amazonaws.com/help/settings/ssh-add-key.png\" alt=\"add key\"></p>\n<p>在输入框内粘贴刚才copy的key，点击确定即可。</p>\n<h6 id=\"2-3-验证key可用性\"><a href=\"#2-3-验证key可用性\" class=\"headerlink\" title=\"2.3 验证key可用性\"></a>2.3 验证key可用性</h6><p>通过ssh github验证key是否可用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n\n<p>命令执行后会输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.</span><br><span class=\"line\">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class=\"line\">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure>\n\n<p>输入<code>yes</code>如果打印以下内容，就说明OK了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hi username! You&apos;ve successfully authenticated, but GitHub does not</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-clone-master分支\"><a href=\"#3-clone-master分支\" class=\"headerlink\" title=\"3.clone master分支\"></a>3.clone master分支</h4><p>下面需要将master分支clone到<code>_deploy</code>目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd octopress</span><br><span class=\"line\">$ git clone git@github.com:username/username.github.com.git _deploy</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-配置环境\"><a href=\"#4-配置环境\" class=\"headerlink\" title=\"4.配置环境\"></a>4.配置环境</h4><p>执行以下命令配置环境：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem install bundler</span><br><span class=\"line\">$ rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command</span><br><span class=\"line\">$ bundle install</span><br><span class=\"line\">$ rake setup_github_pages</span><br></pre></td></tr></table></figure>\n\n<p>执行最后一条命令时需要你输入github中博客仓库地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter the read/write url for your repository</span><br><span class=\"line\">(For example, &apos;git@github.com:your_username/your_username.github.com)</span><br></pre></td></tr></table></figure>\n\n<p>到此所有的工作都完成了，你就可以享受在两台电脑上使用Octopress了！</p>\n<h2 id=\"三、Tips\"><a href=\"#三、Tips\" class=\"headerlink\" title=\"三、Tips\"></a>三、Tips</h2><h4 id=\"1-及时提交本地修改\"><a href=\"#1-及时提交本地修改\" class=\"headerlink\" title=\"1. 及时提交本地修改\"></a>1. 及时提交本地修改</h4><p>在每处配置了Octopress的地方，做了任何修改都要提交，否则另一个地方做了修改，本地更新的时候肯定会冲突。</p>\n<p>每次在本地做完修改以后，都要及时提交，分别执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rake generate</span><br><span class=\"line\">$ rake deploy             # update the remote master branch</span><br></pre></td></tr></table></figure>\n\n<p>第一条命令会使用本地的修改生成最新的blog网站，并且生成的blog会存放到<code>Octopress</code>根目录下的<code>public/</code>目录下；</p>\n<p>第二条命令主要做了两件事：</p>\n<ul>\n<li><p>用<code>generate</code>命令生成在<code>public/</code>目录下的内容覆盖<code>_deploy/</code>目录下内容；</p>\n</li>\n<li><p>将<code>_deploy/</code>目录下的修改<code>add</code> 、 <code>commit</code>到git，并<code>push</code>到git的<code>master</code>分支。</p>\n</li>\n</ul>\n<p>别以为这就结束了，你还得把source分支中做的修改提交的git仓库中，执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -am &quot;Some comment here.&quot; </span><br><span class=\"line\">$ git push origin source  # update the remote source branch</span><br></pre></td></tr></table></figure>\n\n<p>执行完这两步后，稍过一会就能看到自己blog中的更新啦！</p>\n<h4 id=\"2-修改前先更新到最新版本\"><a href=\"#2-修改前先更新到最新版本\" class=\"headerlink\" title=\"2.修改前先更新到最新版本\"></a>2.修改前先更新到最新版本</h4><p>为了以防万一，在本地做任何修改前都要先做更新，可以执行以下命令分别更新<code>source</code>和<code>master</code>分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd octopress</span><br><span class=\"line\">$ git pull origin source  # update the local source branch</span><br><span class=\"line\">$ cd ./_deploy</span><br><span class=\"line\">$ git pull origin master  # update the local master branch</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、参考文档\"><a href=\"#四、参考文档\" class=\"headerlink\" title=\"四、参考文档\"></a>四、参考文档</h2><p>本文参考了以下两篇文章：</p>\n<ul>\n<li><p><a href=\"http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/\" target=\"_blank\" rel=\"noopener\"><strong>Clone Your Octopress to Blog From Two Places</strong></a></p>\n</li>\n<li><p><a href=\"https://help.github.com/articles/generating-ssh-keys\" target=\"_blank\" rel=\"noopener\"><strong>Generating SSH Keys</strong></a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>前阵子在公司电脑上配置好了Octopress博客，但是想在家里的Mac上使用，开始以为简单的将仓库clone就可以了，不幸的是我想的太简单。后来在网上看到了前面列出的第一篇文章，终于解决问题。</p>\n<h2 id=\"一、Octopress目录结构\"><a href=\"#一、Octopress目录结构\" class=\"headerlink\" title=\"一、Octopress目录结构\"></a>一、Octopress目录结构</h2><p>Octopress的仓库目录下有两个branch，<code>source</code>和<code>master</code>。</p>\n<ul>\n<li><p><code>source</code>分支下保存Octopress的源代码，我们需要用他们生成博客，该分支保存在Octopress本地仓库的根目录下；</p>\n</li>\n<li><p><code>master</code>分支下保存生成的博客内容，该分支在Octopress本地仓库的根目录下一个叫<code>_deploy</code>得文件夹中。该文件夹是以下划线开头的，会在执行<code>git push origin source</code>命令时被忽略，这也是为什么一个目录中能同时存在两个不同分支的文件夹的原因。</p>\n</li>\n</ul>","more":"<h2 id=\"二、在本地重建Octopress仓库\"><a href=\"#二、在本地重建Octopress仓库\" class=\"headerlink\" title=\"二、在本地重建Octopress仓库\"></a>二、在本地重建Octopress仓库</h2><p>需要执行以下命令：</p>\n<h4 id=\"1-clone-source分支\"><a href=\"#1-clone-source分支\" class=\"headerlink\" title=\"1. clone source分支\"></a>1. clone <code>source</code>分支</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone -b source git@github.com:username/username.github.com.git octopress</span><br></pre></td></tr></table></figure>\n\n<p>别忘了<code>username</code>替换成你自己github用户名。<br>另外还要注意的是，clone的地址不能是<code>http</code>而必须得是<code>ssh</code>的。</p>\n<p>如果执行时提示以下错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cloning into &apos;octopress&apos;...</span><br><span class=\"line\">The authenticity of host &apos;github.com (192.30.252.131)&apos; can&apos;t be established.</span><br><span class=\"line\">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class=\"line\">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class=\"line\">Warning: Permanently added &apos;github.com,192.30.252.131&apos; (RSA) to the list of known hosts.</span><br><span class=\"line\">Permission denied (publickey).</span><br><span class=\"line\">fatal: Could not read from remote repository.</span><br><span class=\"line\"></span><br><span class=\"line\">Please make sure you have the correct access rights</span><br><span class=\"line\">and the repository exists.</span><br></pre></td></tr></table></figure>\n\n<p>说明你的电脑不被github信任，需要在你电脑上创建<code>ssh key</code>并添加到github中。</p>\n<p>这是你需要执行2；<br>如果没出现上述错误，直接执行3。</p>\n<h4 id=\"2-创建并添加ssh-key\"><a href=\"#2-创建并添加ssh-key\" class=\"headerlink\" title=\"2.创建并添加ssh key\"></a>2.创建并添加ssh key</h4><h6 id=\"2-1-创建ssh-key\"><a href=\"#2-1-创建ssh-key\" class=\"headerlink\" title=\"2.1 创建ssh key\"></a>2.1 创建ssh key</h6><p>######## 2.1.1 生成key</p>\n<p>执行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure>\n\n<p>会提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]</span><br></pre></td></tr></table></figure>\n\n<p>这时候按回车键(Enter)继续：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter passphrase (empty for no passphrase): [Type a passphrase]</span><br><span class=\"line\"># Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure>\n\n<p>会要求你输入一个密码，4位以上，要记住，后面有用。</p>\n<p>接下来会提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Your identification has been saved in /Users/you/.ssh/id_rsa.</span><br><span class=\"line\"># Your public key has been saved in /Users/you/.ssh/id_rsa.pub.</span><br><span class=\"line\"># The key fingerprint is:</span><br><span class=\"line\"># 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</span><br></pre></td></tr></table></figure>\n\n<p>到这里就说明key已经创建成功了。</p>\n<p>######## 2.1.2 把生成的key添加到<code>ssh-agent</code>中</p>\n<p>最后需要执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-2-把生成的key添加到github\"><a href=\"#2-2-把生成的key添加到github\" class=\"headerlink\" title=\"2.2 把生成的key添加到github\"></a>2.2 把生成的key添加到github</h6><p>######## 2.2.1 copy key内容</p>\n<p>先执行下面的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pbcopy &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n\n<p>该命令将key中的内容copy到粘贴板中，以便后面使用。当然你也可以用自己的方式copy。</p>\n<p>######## 2.2.2 找到添加key的地方</p>\n<p>先点击<a href=\"https://github.com/settings\" target=\"_blank\" rel=\"noopener\">Account Settings</a>：</p>\n<p><img src=\"https://github-images.s3.amazonaws.com/help/settings/userbar-account-settings.png\" alt=\"账户设置\"></p>\n<p>进入设置界面后，点击界面左侧的<a href=\"https://github.com/settings/ssh\" target=\"_blank\" rel=\"noopener\">SSH KEYS</a>:</p>\n<p><img src=\"https://github-images.s3.amazonaws.com/help/settings/settings-sidebar-ssh-keys.png\" alt=\"ssh keys\"></p>\n<p>点击<code>Add SSH key</code>按钮：</p>\n<p><img src=\"https://github-images.s3.amazonaws.com/help/settings/ssh-add-ssh-key.png\" alt=\"add ssh key\"></p>\n<p>点击<code>Add key</code>按钮：</p>\n<p><img src=\"https://github-images.s3.amazonaws.com/help/settings/ssh-add-key.png\" alt=\"add key\"></p>\n<p>在输入框内粘贴刚才copy的key，点击确定即可。</p>\n<h6 id=\"2-3-验证key可用性\"><a href=\"#2-3-验证key可用性\" class=\"headerlink\" title=\"2.3 验证key可用性\"></a>2.3 验证key可用性</h6><p>通过ssh github验证key是否可用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n\n<p>命令执行后会输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.</span><br><span class=\"line\">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class=\"line\">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure>\n\n<p>输入<code>yes</code>如果打印以下内容，就说明OK了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hi username! You&apos;ve successfully authenticated, but GitHub does not</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-clone-master分支\"><a href=\"#3-clone-master分支\" class=\"headerlink\" title=\"3.clone master分支\"></a>3.clone master分支</h4><p>下面需要将master分支clone到<code>_deploy</code>目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd octopress</span><br><span class=\"line\">$ git clone git@github.com:username/username.github.com.git _deploy</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-配置环境\"><a href=\"#4-配置环境\" class=\"headerlink\" title=\"4.配置环境\"></a>4.配置环境</h4><p>执行以下命令配置环境：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem install bundler</span><br><span class=\"line\">$ rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command</span><br><span class=\"line\">$ bundle install</span><br><span class=\"line\">$ rake setup_github_pages</span><br></pre></td></tr></table></figure>\n\n<p>执行最后一条命令时需要你输入github中博客仓库地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter the read/write url for your repository</span><br><span class=\"line\">(For example, &apos;git@github.com:your_username/your_username.github.com)</span><br></pre></td></tr></table></figure>\n\n<p>到此所有的工作都完成了，你就可以享受在两台电脑上使用Octopress了！</p>\n<h2 id=\"三、Tips\"><a href=\"#三、Tips\" class=\"headerlink\" title=\"三、Tips\"></a>三、Tips</h2><h4 id=\"1-及时提交本地修改\"><a href=\"#1-及时提交本地修改\" class=\"headerlink\" title=\"1. 及时提交本地修改\"></a>1. 及时提交本地修改</h4><p>在每处配置了Octopress的地方，做了任何修改都要提交，否则另一个地方做了修改，本地更新的时候肯定会冲突。</p>\n<p>每次在本地做完修改以后，都要及时提交，分别执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rake generate</span><br><span class=\"line\">$ rake deploy             # update the remote master branch</span><br></pre></td></tr></table></figure>\n\n<p>第一条命令会使用本地的修改生成最新的blog网站，并且生成的blog会存放到<code>Octopress</code>根目录下的<code>public/</code>目录下；</p>\n<p>第二条命令主要做了两件事：</p>\n<ul>\n<li><p>用<code>generate</code>命令生成在<code>public/</code>目录下的内容覆盖<code>_deploy/</code>目录下内容；</p>\n</li>\n<li><p>将<code>_deploy/</code>目录下的修改<code>add</code> 、 <code>commit</code>到git，并<code>push</code>到git的<code>master</code>分支。</p>\n</li>\n</ul>\n<p>别以为这就结束了，你还得把source分支中做的修改提交的git仓库中，执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -am &quot;Some comment here.&quot; </span><br><span class=\"line\">$ git push origin source  # update the remote source branch</span><br></pre></td></tr></table></figure>\n\n<p>执行完这两步后，稍过一会就能看到自己blog中的更新啦！</p>\n<h4 id=\"2-修改前先更新到最新版本\"><a href=\"#2-修改前先更新到最新版本\" class=\"headerlink\" title=\"2.修改前先更新到最新版本\"></a>2.修改前先更新到最新版本</h4><p>为了以防万一，在本地做任何修改前都要先做更新，可以执行以下命令分别更新<code>source</code>和<code>master</code>分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd octopress</span><br><span class=\"line\">$ git pull origin source  # update the local source branch</span><br><span class=\"line\">$ cd ./_deploy</span><br><span class=\"line\">$ git pull origin master  # update the local master branch</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、参考文档\"><a href=\"#四、参考文档\" class=\"headerlink\" title=\"四、参考文档\"></a>四、参考文档</h2><p>本文参考了以下两篇文章：</p>\n<ul>\n<li><p><a href=\"http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/\" target=\"_blank\" rel=\"noopener\"><strong>Clone Your Octopress to Blog From Two Places</strong></a></p>\n</li>\n<li><p><a href=\"https://help.github.com/articles/generating-ssh-keys\" target=\"_blank\" rel=\"noopener\"><strong>Generating SSH Keys</strong></a></p>\n</li>\n</ul>"},{"layout":"post","title":"自定义你的Octopress博客","date":"2014-04-28T03:17:31.000Z","comments":1,"keywords":"seo, octopress, analytics, 博客自定义","_content":"\n\n## SEO\n\n* 增加统计工具\n\n博客搭建好了以后，大家一定很想知道每天都有多少的访问量。现在有很多工具都可以帮助我们做这件事，比如`Google Analytics`、`百度统计`、`CNZZ` 等。\n\n其中`Google Analytics`是Octopress自带的统计工具，使用方式也非常简单，只需要到`Google Analytics`申请一个`app id`，填写到`_config.yml`文件中的`google_analytics_tracking_id`后面即可。但`Google Analytics`存在翻墙的麻烦，而且`百度统计`功能也挺齐全，完全能满足我的需求，就选择了`百度统计`。\n\n集成百度统计方式非常简单：\n\n只需到`百度统计`官方网站申请一个账号，将获取的代码添加到`source/_includes/custom/footer.html`中，重新部署即可。\n\n <!-- more -->\n\n* 搜索优化\n\n为了让自己搭建的博客更容易被搜索引擎搜到，最好将网站地址提交给各大搜索引擎，下面有两个连接搜集了各个搜索引擎的网站提交入口：\n\n```\nhttp://urlc.cn/tool/addurl.html\nhttp://tool.lusongsong.com/addurl.html\n```\n\n我试了下，添加到`google`以后，搜索关键字的时候自己的博客确实排名靠前了。\n\n\n光是将网址添加到搜索引擎还不够，你必须得为你的文章添加关键字，才能更好地被引擎搜到，在创建一篇新文章的时候，生成的makedown文件包含以下内容，以本文举例：\n\n```\n\n---\n\nlayout: post\ntitle: \"自定义你的Octopress博客\"\ndate: 2014-04-28 11:17:31 +0800\ncomments: true\ncategories: Octopress\n\n---\n```\n\n实际上我们还可以为其添加以下几项，以本文举例：\n\n```\ntags: [octopress, 博客自定义, seo]\nkeywords: seo, octopress, analytics, 博客自定义\ndescription: 如何自定义Octopress博客\n```\n\n这样更利于搜索引擎抓取到我们的博客。\n\n事实上，如果我们不做上述设置，Octopress会默认将文章的前150个字作为文章的关键字，供搜索引擎抓取，但那并不一定准确。\n\nOctopress实现该功能的代码在`source/_includes/head.html`文件中：\n\n```\n{% capture description %}{% if page.description %}{{ page.description }}{% else %}{{ content | raw_content }}{% endif %}{% endcapture %}\n  <meta name=\"description\" content=\"{{ description | strip_html | condense_spaces | truncate:150 }}\">\n{% if page.keywords %}<meta name=\"keywords\" content=\"{{ page.keywords }}\">{% endif %}\n```\n\n此外，还可以在`_config.yml`里添加默认的`description`和`keywords`，不过我没试过。\n\n\n\n## 界面相关\n\n* 博客首页显示文章摘要\n\n默认情况下，博客首页文章列表中都会全部展示，要想让文章在首页中只显示一部分配置也非常简单：\n\n首先在文章列表中你想展示的缩略部分增加标记：\n\n```\n <!-- more -->\n\n```\n\n\n然后自定义`_config.yml`中的对应设置项：\n\n```\n excerpt_link: \"阅读更多 &rarr;\"\n```\n\n这样就有了我博客中现在的效果：\n![read more](https://github.com/wangzz/wangzz.github.com/blob/master/images/336C83D8-ADEB-49A2-93D6-815A74509434.png?raw=true)\n\n* 自定义侧边栏之增加category列表\n\n下面以增加侧边栏category列表为例。\n\n在创建新文章时，我们会填写以下属性：\n\n```\n\n---\n\nlayout: post\ntitle: \"自定义你的Octopress博客\"\ndate: 2014-04-28 11:17:31 +0800\ncomments: true\ncategories: Octopress\ntags: [octopress, 博客自定义, seo]\nkeywords: seo, octopress, analytics, 博客自定义\ndescription: 如何自定义Octopress博客\n\n---\n```\n\n\n\n其中的`categories`会为当前文章指定一个分类。我们可能有需要通过分类查找文章的需求，而侧边栏中默认只有最近提交列表。下面就介绍如何在侧边栏中显示文章分类列表。\n\n\n首先，保存以下内容到`plugins/category_list_tag.rb`中（如果文件不存在就新创建一个）：\n\n\n```\n module Jekyll\n  class CategoryListTag < Liquid::Tag\n    def render(context)\n      html = \"\"\n      categories = context.registers[:site].categories.keys\n      categories.sort.each do |category|\n        posts_in_category = context.registers[:site].categories[category].size\n        category_dir = context.registers[:site].config['category_dir']\n        category_url = File.join(category_dir, category.gsub(/_|\\P{Word}/, '-').gsub(/-{2,}/, '-').downcase)\n        html << \"<li class='category'><a href='/#{category_url}/'>#{category} (#{posts_in_category})</a></li>\\n\"\n      end\n      html\n    end\n  end\nend\n\nLiquid::Template.register_tag('category_list', Jekyll::CategoryListTag)\n\n```\n\n\n这个插件会向liquid注册一个名为`category_list`的tag，该tag就是以li的形式将站点所有的category组织起来。\n\n\n然后再增加aside，复制以下代码到`source/_includes/asides/category_list.html`（如果没有就新建）中：\n\n```\n<section>\n <h1>Categories</h1>\n <ul id=\"categories\">\n  { category_list }\n </ul>\n</section>\n```\n注意要将`{ category_list }`中`category_list`单词的左右两边分别加个`%`,即写成下图所示样式：\n![categorylist_pic](https://github.com/wangzz/wangzz.github.com/blob/master/images/D04878A8-B17E-4B76-A8FD-E4938C293B84.png?raw=true)\n\n搞那么复杂是markdown排版问题。。。\n\n最后更改_config.yml文件，让侧边栏链接到刚才新增加的`source/_includes/asides/category_list.html`文件：\n\n\n```\ndefault_asides: [asides/recent_posts.html, asides/category_list.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html]\n```\n\n完成以上步骤后，重新部署就能看到博客的右侧边栏增加了`category`列表了。\n\n\n\n* 自定义侧边栏之增加新浪微博\n\n在博客中增加新浪模块是一个很好的和渎职互动方式，增加方式如下：\n\n首先要从[新浪微博秀](http://app.weibo.com/tool/weiboshow)获取到自定义的微博秀代码，设定好微博秀样式后将代码复制下来。\n\n然后在`source/_includes/custom/asides`目录下新建`weibo.html`文件，按照如下格式编辑该文件：\n\n```\n<section>\n    <h1>新浪微博</h1>\n    <ul id=\"weibo\">\n    <li>\n\n   -- 在此插入获得的微博秀代码 --\n\n      </li>\n    </ul>\n</section>\n```\n\n将刚才赋值下来的自定义微博秀代码粘贴到上述指定位置。\n\n最后，和自定义category侧边栏一样，我们需要在`default_asides`中加入`custom/asides/weibo.html`。\n\n重新部署后，微博秀就能正常展示啦！\n\n\n\n* 自定义Navigation\n\n默认的导航栏只有Blog、Archives两项，很难满足大家的要求。下面以增加about界面为例说明如何在导航栏上增加内容。\n\n首先编辑文件`/source/_includes/custom/navigation.html`，仿照Blog和Archives的写法增加一行About：\n\n![about](https://github.com/wangzz/wangzz.github.com/blob/master/images/1E66BCE6-EB83-42E8-AA5A-F0E66CD04A65.png?raw=true)\n\n然后使用命令：\n\n```\nrake new_page['about']\n```\n\n创建一个页面，保存路径为`source\\about\\index.markdown`\n\n编辑index.markdown文件成自己想要的样式，然后重新部署，就能看到导航栏上新增了About项目。\n\n\n* 自定义Footer\n\n界面底部的声明部分同样可以自定义，修改文件：`source/_includes/custom/footer.html`成自己想要的格式即可。\n\n\n* 自定义网站主题\n\n目前有很多第三方主题，比如：[http://opthemes.com/](http://opthemes.com/)\n\n该网站搜集了很多漂亮的主题，对应的主题里都有安装方式。\n\n\n* 新标签页打开网站中第三方链接\n\nOctopress博客中，默认是在当前界面中打开第三方链接，这导致网站浏览者跳到第三方链接后很难回来。\n\n将以下代码加入`source/_includes/custom/head.html`文件中：\n\n```\n> <script type=\"text/javascript\">\n> function addBlankTargetForLinks () {\n>   $('a[href^=\"http\"]').each(function(){\n>       $(this).attr('target', '_blank');\n>   });\n> }\n> \n> $(document).bind('DOMNodeInserted', function(event) {\n>  addBlankTargetForLinks();\n> });\n> </script>\n```\n记得把左侧的`>`符号都去掉。\n\n不过本站的链接还是会在当前界面中打开。\n\n## 返回顶部按钮\n\n文章较长时，返回顶部按钮还是很有用的。下面方法介绍了如何添加一个返回顶部按钮：\n\n* 实现返回按钮功能\n\n首先创建`source/javascripts/top.js`，添加如下代码实现滑动返回顶部效果:\n```\nfunction goTop(acceleration, time)\n{\n        acceleration = acceleration || 0.1;\n        time = time || 16;\n\n        var x1 = 0;\n        var y1 = 0;\n        var x2 = 0;\n        var y2 = 0;\n        var x3 = 0;\n        var y3 = 0;\n\n        if (document.documentElement)\n        {\n                x1 = document.documentElement.scrollLeft || 0;\n                y1 = document.documentElement.scrollTop || 0;\n        }\n        if (document.body)\n        {\n                x2 = document.body.scrollLeft || 0;\n                y2 = document.body.scrollTop || 0;\n        }\n        var x3 = window.scrollX || 0;\n        var y3 = window.scrollY || 0;\n\n        var x = Math.max(x1, Math.max(x2, x3));\n        var y = Math.max(y1, Math.max(y2, y3));\n\n        var speed = 1 + acceleration;\n        window.scrollTo(Math.floor(x / speed), Math.floor(y / speed));\n\n        if(x > 0 || y > 0)\n        {\n                var invokeFunction = \"goTop(\" + acceleration + \", \" + time + \")\";\n                window.setTimeout(invokeFunction, time);\n        }\n}\n```\n\n* 自定义返回按钮格式\n\n创建`source/_includes/custom/totop.html`，设置返回顶部按钮样式和位置，代码如下：\n\n```\n<!--返回顶部开始-->\n<div id=\"full\" style=\"width:0px; height:0px; position:fixed; right:180px; bottom:150px; z-index:100; text-align:center; background-color:transparent; cursor:pointer;\">\n\t<a href=\"#\" onclick=\"goTop();return false;\"><img src=\"/images/top.png\" border=0 alt=\"返回顶部\"></a>\n</div>\n<script src=\"/javascripts/top.js\" type=\"text/javascript\"></script>\n<!--返回顶部结束-->\n```\n\n* 选择按钮图片\n\n找到自己喜爱的返回按钮图片，命名为`top.png`后添加到`source/images`目录中（或修改`totop.html`中图片的路径）。\n\n## 自定义域名\n\n使用[Github Pages](https://pages.github.com/)服务搭建好博客以后，默认的访问地址是`yourname.github.io`形式的二级域名。大家一定迫不及待的想换成自己的个性域名了。\n\n* 购买域名\n\n到各大域名购买网站购买自己心仪的域名\n\n* 获取自己github二级域名的IP\n\n以我的域名`wangzz.github.io`为例，输入以下命令：\n\n```\n$dig wangzz.github.io\n```\n\n在输出内容中找到`ANSWER SECTION`一项，比如我的：\n\n```\nANSWER SECTION:\nwangzz.github.io.\t3599\tIN\tCNAME\tgithub.map.fastly.net.\ngithub.map.fastly.net.\t29\tIN\tA\t103.235.222.168\n```\n\n可以看到我的IP是`103.235.222.168`。\n\n* 添加A记录\n\n得到IP以后，需要到你的域名解析服务商处添加一个A记录，将你的域名解析成对应的IP。\n\n经过以上步骤，访问`wangzz.github.io`的地址就会自动跳转到自己的域名了。不过更改需要等一段时间才能生效。\n\n\n## 参考文章\n\n* [SEO统计](http://blog.csdn.net/lcliliil/article/details/13727927)\n\n* [增加category列表](http://codemacro.com/2012/07/18/add-category-list-to-octopress/)\n\n* [Theming & Customization](http://octopress.org/docs/theme/template/)\n\n* [Add About Page](http://asaf.github.io/blog/2013/07/08/blogging-with-octopress-add-about-page/)\n\n* [新标签页打开第三方链接](http://www.blogjava.net/lishunli/archive/2013/01/20/394478.html)\n\n* [增加新浪微博秀](http://blog.csdn.net/lcliliil/article/details/13725895)\n\n* [Octopress主题样式修改](http://812lcl.com/blog/2013/10/27/octopresszhu-ti-yang-shi-xiu-gai/)\n\n\n","source":"_posts/2014-04-28-custom-your-octopress-blog.markdown","raw":"---\n\nlayout: post\ntitle: \"自定义你的Octopress博客\"\ndate: 2014-04-28 11:17:31 +0800\ncomments: true\ncategories: Octopress\ntags: [octopress, 博客自定义, seo]\nkeywords: seo, octopress, analytics, 博客自定义\n---\n\n\n## SEO\n\n* 增加统计工具\n\n博客搭建好了以后，大家一定很想知道每天都有多少的访问量。现在有很多工具都可以帮助我们做这件事，比如`Google Analytics`、`百度统计`、`CNZZ` 等。\n\n其中`Google Analytics`是Octopress自带的统计工具，使用方式也非常简单，只需要到`Google Analytics`申请一个`app id`，填写到`_config.yml`文件中的`google_analytics_tracking_id`后面即可。但`Google Analytics`存在翻墙的麻烦，而且`百度统计`功能也挺齐全，完全能满足我的需求，就选择了`百度统计`。\n\n集成百度统计方式非常简单：\n\n只需到`百度统计`官方网站申请一个账号，将获取的代码添加到`source/_includes/custom/footer.html`中，重新部署即可。\n\n <!-- more -->\n\n* 搜索优化\n\n为了让自己搭建的博客更容易被搜索引擎搜到，最好将网站地址提交给各大搜索引擎，下面有两个连接搜集了各个搜索引擎的网站提交入口：\n\n```\nhttp://urlc.cn/tool/addurl.html\nhttp://tool.lusongsong.com/addurl.html\n```\n\n我试了下，添加到`google`以后，搜索关键字的时候自己的博客确实排名靠前了。\n\n\n光是将网址添加到搜索引擎还不够，你必须得为你的文章添加关键字，才能更好地被引擎搜到，在创建一篇新文章的时候，生成的makedown文件包含以下内容，以本文举例：\n\n```\n\n---\n\nlayout: post\ntitle: \"自定义你的Octopress博客\"\ndate: 2014-04-28 11:17:31 +0800\ncomments: true\ncategories: Octopress\n\n---\n```\n\n实际上我们还可以为其添加以下几项，以本文举例：\n\n```\ntags: [octopress, 博客自定义, seo]\nkeywords: seo, octopress, analytics, 博客自定义\ndescription: 如何自定义Octopress博客\n```\n\n这样更利于搜索引擎抓取到我们的博客。\n\n事实上，如果我们不做上述设置，Octopress会默认将文章的前150个字作为文章的关键字，供搜索引擎抓取，但那并不一定准确。\n\nOctopress实现该功能的代码在`source/_includes/head.html`文件中：\n\n```\n{% capture description %}{% if page.description %}{{ page.description }}{% else %}{{ content | raw_content }}{% endif %}{% endcapture %}\n  <meta name=\"description\" content=\"{{ description | strip_html | condense_spaces | truncate:150 }}\">\n{% if page.keywords %}<meta name=\"keywords\" content=\"{{ page.keywords }}\">{% endif %}\n```\n\n此外，还可以在`_config.yml`里添加默认的`description`和`keywords`，不过我没试过。\n\n\n\n## 界面相关\n\n* 博客首页显示文章摘要\n\n默认情况下，博客首页文章列表中都会全部展示，要想让文章在首页中只显示一部分配置也非常简单：\n\n首先在文章列表中你想展示的缩略部分增加标记：\n\n```\n <!-- more -->\n\n```\n\n\n然后自定义`_config.yml`中的对应设置项：\n\n```\n excerpt_link: \"阅读更多 &rarr;\"\n```\n\n这样就有了我博客中现在的效果：\n![read more](https://github.com/wangzz/wangzz.github.com/blob/master/images/336C83D8-ADEB-49A2-93D6-815A74509434.png?raw=true)\n\n* 自定义侧边栏之增加category列表\n\n下面以增加侧边栏category列表为例。\n\n在创建新文章时，我们会填写以下属性：\n\n```\n\n---\n\nlayout: post\ntitle: \"自定义你的Octopress博客\"\ndate: 2014-04-28 11:17:31 +0800\ncomments: true\ncategories: Octopress\ntags: [octopress, 博客自定义, seo]\nkeywords: seo, octopress, analytics, 博客自定义\ndescription: 如何自定义Octopress博客\n\n---\n```\n\n\n\n其中的`categories`会为当前文章指定一个分类。我们可能有需要通过分类查找文章的需求，而侧边栏中默认只有最近提交列表。下面就介绍如何在侧边栏中显示文章分类列表。\n\n\n首先，保存以下内容到`plugins/category_list_tag.rb`中（如果文件不存在就新创建一个）：\n\n\n```\n module Jekyll\n  class CategoryListTag < Liquid::Tag\n    def render(context)\n      html = \"\"\n      categories = context.registers[:site].categories.keys\n      categories.sort.each do |category|\n        posts_in_category = context.registers[:site].categories[category].size\n        category_dir = context.registers[:site].config['category_dir']\n        category_url = File.join(category_dir, category.gsub(/_|\\P{Word}/, '-').gsub(/-{2,}/, '-').downcase)\n        html << \"<li class='category'><a href='/#{category_url}/'>#{category} (#{posts_in_category})</a></li>\\n\"\n      end\n      html\n    end\n  end\nend\n\nLiquid::Template.register_tag('category_list', Jekyll::CategoryListTag)\n\n```\n\n\n这个插件会向liquid注册一个名为`category_list`的tag，该tag就是以li的形式将站点所有的category组织起来。\n\n\n然后再增加aside，复制以下代码到`source/_includes/asides/category_list.html`（如果没有就新建）中：\n\n```\n<section>\n <h1>Categories</h1>\n <ul id=\"categories\">\n  { category_list }\n </ul>\n</section>\n```\n注意要将`{ category_list }`中`category_list`单词的左右两边分别加个`%`,即写成下图所示样式：\n![categorylist_pic](https://github.com/wangzz/wangzz.github.com/blob/master/images/D04878A8-B17E-4B76-A8FD-E4938C293B84.png?raw=true)\n\n搞那么复杂是markdown排版问题。。。\n\n最后更改_config.yml文件，让侧边栏链接到刚才新增加的`source/_includes/asides/category_list.html`文件：\n\n\n```\ndefault_asides: [asides/recent_posts.html, asides/category_list.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html]\n```\n\n完成以上步骤后，重新部署就能看到博客的右侧边栏增加了`category`列表了。\n\n\n\n* 自定义侧边栏之增加新浪微博\n\n在博客中增加新浪模块是一个很好的和渎职互动方式，增加方式如下：\n\n首先要从[新浪微博秀](http://app.weibo.com/tool/weiboshow)获取到自定义的微博秀代码，设定好微博秀样式后将代码复制下来。\n\n然后在`source/_includes/custom/asides`目录下新建`weibo.html`文件，按照如下格式编辑该文件：\n\n```\n<section>\n    <h1>新浪微博</h1>\n    <ul id=\"weibo\">\n    <li>\n\n   -- 在此插入获得的微博秀代码 --\n\n      </li>\n    </ul>\n</section>\n```\n\n将刚才赋值下来的自定义微博秀代码粘贴到上述指定位置。\n\n最后，和自定义category侧边栏一样，我们需要在`default_asides`中加入`custom/asides/weibo.html`。\n\n重新部署后，微博秀就能正常展示啦！\n\n\n\n* 自定义Navigation\n\n默认的导航栏只有Blog、Archives两项，很难满足大家的要求。下面以增加about界面为例说明如何在导航栏上增加内容。\n\n首先编辑文件`/source/_includes/custom/navigation.html`，仿照Blog和Archives的写法增加一行About：\n\n![about](https://github.com/wangzz/wangzz.github.com/blob/master/images/1E66BCE6-EB83-42E8-AA5A-F0E66CD04A65.png?raw=true)\n\n然后使用命令：\n\n```\nrake new_page['about']\n```\n\n创建一个页面，保存路径为`source\\about\\index.markdown`\n\n编辑index.markdown文件成自己想要的样式，然后重新部署，就能看到导航栏上新增了About项目。\n\n\n* 自定义Footer\n\n界面底部的声明部分同样可以自定义，修改文件：`source/_includes/custom/footer.html`成自己想要的格式即可。\n\n\n* 自定义网站主题\n\n目前有很多第三方主题，比如：[http://opthemes.com/](http://opthemes.com/)\n\n该网站搜集了很多漂亮的主题，对应的主题里都有安装方式。\n\n\n* 新标签页打开网站中第三方链接\n\nOctopress博客中，默认是在当前界面中打开第三方链接，这导致网站浏览者跳到第三方链接后很难回来。\n\n将以下代码加入`source/_includes/custom/head.html`文件中：\n\n```\n> <script type=\"text/javascript\">\n> function addBlankTargetForLinks () {\n>   $('a[href^=\"http\"]').each(function(){\n>       $(this).attr('target', '_blank');\n>   });\n> }\n> \n> $(document).bind('DOMNodeInserted', function(event) {\n>  addBlankTargetForLinks();\n> });\n> </script>\n```\n记得把左侧的`>`符号都去掉。\n\n不过本站的链接还是会在当前界面中打开。\n\n## 返回顶部按钮\n\n文章较长时，返回顶部按钮还是很有用的。下面方法介绍了如何添加一个返回顶部按钮：\n\n* 实现返回按钮功能\n\n首先创建`source/javascripts/top.js`，添加如下代码实现滑动返回顶部效果:\n```\nfunction goTop(acceleration, time)\n{\n        acceleration = acceleration || 0.1;\n        time = time || 16;\n\n        var x1 = 0;\n        var y1 = 0;\n        var x2 = 0;\n        var y2 = 0;\n        var x3 = 0;\n        var y3 = 0;\n\n        if (document.documentElement)\n        {\n                x1 = document.documentElement.scrollLeft || 0;\n                y1 = document.documentElement.scrollTop || 0;\n        }\n        if (document.body)\n        {\n                x2 = document.body.scrollLeft || 0;\n                y2 = document.body.scrollTop || 0;\n        }\n        var x3 = window.scrollX || 0;\n        var y3 = window.scrollY || 0;\n\n        var x = Math.max(x1, Math.max(x2, x3));\n        var y = Math.max(y1, Math.max(y2, y3));\n\n        var speed = 1 + acceleration;\n        window.scrollTo(Math.floor(x / speed), Math.floor(y / speed));\n\n        if(x > 0 || y > 0)\n        {\n                var invokeFunction = \"goTop(\" + acceleration + \", \" + time + \")\";\n                window.setTimeout(invokeFunction, time);\n        }\n}\n```\n\n* 自定义返回按钮格式\n\n创建`source/_includes/custom/totop.html`，设置返回顶部按钮样式和位置，代码如下：\n\n```\n<!--返回顶部开始-->\n<div id=\"full\" style=\"width:0px; height:0px; position:fixed; right:180px; bottom:150px; z-index:100; text-align:center; background-color:transparent; cursor:pointer;\">\n\t<a href=\"#\" onclick=\"goTop();return false;\"><img src=\"/images/top.png\" border=0 alt=\"返回顶部\"></a>\n</div>\n<script src=\"/javascripts/top.js\" type=\"text/javascript\"></script>\n<!--返回顶部结束-->\n```\n\n* 选择按钮图片\n\n找到自己喜爱的返回按钮图片，命名为`top.png`后添加到`source/images`目录中（或修改`totop.html`中图片的路径）。\n\n## 自定义域名\n\n使用[Github Pages](https://pages.github.com/)服务搭建好博客以后，默认的访问地址是`yourname.github.io`形式的二级域名。大家一定迫不及待的想换成自己的个性域名了。\n\n* 购买域名\n\n到各大域名购买网站购买自己心仪的域名\n\n* 获取自己github二级域名的IP\n\n以我的域名`wangzz.github.io`为例，输入以下命令：\n\n```\n$dig wangzz.github.io\n```\n\n在输出内容中找到`ANSWER SECTION`一项，比如我的：\n\n```\nANSWER SECTION:\nwangzz.github.io.\t3599\tIN\tCNAME\tgithub.map.fastly.net.\ngithub.map.fastly.net.\t29\tIN\tA\t103.235.222.168\n```\n\n可以看到我的IP是`103.235.222.168`。\n\n* 添加A记录\n\n得到IP以后，需要到你的域名解析服务商处添加一个A记录，将你的域名解析成对应的IP。\n\n经过以上步骤，访问`wangzz.github.io`的地址就会自动跳转到自己的域名了。不过更改需要等一段时间才能生效。\n\n\n## 参考文章\n\n* [SEO统计](http://blog.csdn.net/lcliliil/article/details/13727927)\n\n* [增加category列表](http://codemacro.com/2012/07/18/add-category-list-to-octopress/)\n\n* [Theming & Customization](http://octopress.org/docs/theme/template/)\n\n* [Add About Page](http://asaf.github.io/blog/2013/07/08/blogging-with-octopress-add-about-page/)\n\n* [新标签页打开第三方链接](http://www.blogjava.net/lishunli/archive/2013/01/20/394478.html)\n\n* [增加新浪微博秀](http://blog.csdn.net/lcliliil/article/details/13725895)\n\n* [Octopress主题样式修改](http://812lcl.com/blog/2013/10/27/octopresszhu-ti-yang-shi-xiu-gai/)\n\n\n","slug":"2014-04-28-custom-your-octopress-blog","published":1,"updated":"2019-09-23T13:00:31.000Z","photos":[],"link":"","_id":"ck0zclic20001qhtf711x6j6u","content":"<h2 id=\"SEO\"><a href=\"#SEO\" class=\"headerlink\" title=\"SEO\"></a>SEO</h2><ul>\n<li>增加统计工具</li>\n</ul>\n<p>博客搭建好了以后，大家一定很想知道每天都有多少的访问量。现在有很多工具都可以帮助我们做这件事，比如<code>Google Analytics</code>、<code>百度统计</code>、<code>CNZZ</code> 等。</p>\n<p>其中<code>Google Analytics</code>是Octopress自带的统计工具，使用方式也非常简单，只需要到<code>Google Analytics</code>申请一个<code>app id</code>，填写到<code>_config.yml</code>文件中的<code>google_analytics_tracking_id</code>后面即可。但<code>Google Analytics</code>存在翻墙的麻烦，而且<code>百度统计</code>功能也挺齐全，完全能满足我的需求，就选择了<code>百度统计</code>。</p>\n<p>集成百度统计方式非常简单：</p>\n<p>只需到<code>百度统计</code>官方网站申请一个账号，将获取的代码添加到<code>source/_includes/custom/footer.html</code>中，重新部署即可。</p>\n <a id=\"more\"></a>\n\n<ul>\n<li>搜索优化</li>\n</ul>\n<p>为了让自己搭建的博客更容易被搜索引擎搜到，最好将网站地址提交给各大搜索引擎，下面有两个连接搜集了各个搜索引擎的网站提交入口：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://urlc.cn/tool/addurl.html</span><br><span class=\"line\">http://tool.lusongsong.com/addurl.html</span><br></pre></td></tr></table></figure>\n\n<p>我试了下，添加到<code>google</code>以后，搜索关键字的时候自己的博客确实排名靠前了。</p>\n<p>光是将网址添加到搜索引擎还不够，你必须得为你的文章添加关键字，才能更好地被引擎搜到，在创建一篇新文章的时候，生成的makedown文件包含以下内容，以本文举例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">layout: post</span><br><span class=\"line\">title: &quot;自定义你的Octopress博客&quot;</span><br><span class=\"line\">date: 2014-04-28 11:17:31 +0800</span><br><span class=\"line\">comments: true</span><br><span class=\"line\">categories: Octopress</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>实际上我们还可以为其添加以下几项，以本文举例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tags: [octopress, 博客自定义, seo]</span><br><span class=\"line\">keywords: seo, octopress, analytics, 博客自定义</span><br><span class=\"line\">description: 如何自定义Octopress博客</span><br></pre></td></tr></table></figure>\n\n<p>这样更利于搜索引擎抓取到我们的博客。</p>\n<p>事实上，如果我们不做上述设置，Octopress会默认将文章的前150个字作为文章的关键字，供搜索引擎抓取，但那并不一定准确。</p>\n<p>Octopress实现该功能的代码在<code>source/_includes/head.html</code>文件中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% capture description %&#125;&#123;% if page.description %&#125;&#123;&#123; page.description &#125;&#125;&#123;% else %&#125;&#123;&#123; content | raw_content &#125;&#125;&#123;% endif %&#125;&#123;% endcapture %&#125;</span><br><span class=\"line\">  &lt;meta name=&quot;description&quot; content=&quot;&#123;&#123; description | strip_html | condense_spaces | truncate:150 &#125;&#125;&quot;&gt;</span><br><span class=\"line\">&#123;% if page.keywords %&#125;&lt;meta name=&quot;keywords&quot; content=&quot;&#123;&#123; page.keywords &#125;&#125;&quot;&gt;&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此外，还可以在<code>_config.yml</code>里添加默认的<code>description</code>和<code>keywords</code>，不过我没试过。</p>\n<h2 id=\"界面相关\"><a href=\"#界面相关\" class=\"headerlink\" title=\"界面相关\"></a>界面相关</h2><ul>\n<li>博客首页显示文章摘要</li>\n</ul>\n<p>默认情况下，博客首页文章列表中都会全部展示，要想让文章在首页中只显示一部分配置也非常简单：</p>\n<p>首先在文章列表中你想展示的缩略部分增加标记：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>\n\n<p>然后自定义<code>_config.yml</code>中的对应设置项：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">excerpt_link: &quot;阅读更多 &amp;rarr;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>这样就有了我博客中现在的效果：<br><img src=\"https://github.com/wangzz/wangzz.github.com/blob/master/images/336C83D8-ADEB-49A2-93D6-815A74509434.png?raw=true\" alt=\"read more\"></p>\n<ul>\n<li>自定义侧边栏之增加category列表</li>\n</ul>\n<p>下面以增加侧边栏category列表为例。</p>\n<p>在创建新文章时，我们会填写以下属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">layout: post</span><br><span class=\"line\">title: &quot;自定义你的Octopress博客&quot;</span><br><span class=\"line\">date: 2014-04-28 11:17:31 +0800</span><br><span class=\"line\">comments: true</span><br><span class=\"line\">categories: Octopress</span><br><span class=\"line\">tags: [octopress, 博客自定义, seo]</span><br><span class=\"line\">keywords: seo, octopress, analytics, 博客自定义</span><br><span class=\"line\">description: 如何自定义Octopress博客</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>其中的<code>categories</code>会为当前文章指定一个分类。我们可能有需要通过分类查找文章的需求，而侧边栏中默认只有最近提交列表。下面就介绍如何在侧边栏中显示文章分类列表。</p>\n<p>首先，保存以下内容到<code>plugins/category_list_tag.rb</code>中（如果文件不存在就新创建一个）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> module Jekyll</span><br><span class=\"line\">  class CategoryListTag &lt; Liquid::Tag</span><br><span class=\"line\">    def render(context)</span><br><span class=\"line\">      html = &quot;&quot;</span><br><span class=\"line\">      categories = context.registers[:site].categories.keys</span><br><span class=\"line\">      categories.sort.each do |category|</span><br><span class=\"line\">        posts_in_category = context.registers[:site].categories[category].size</span><br><span class=\"line\">        category_dir = context.registers[:site].config[&apos;category_dir&apos;]</span><br><span class=\"line\">        category_url = File.join(category_dir, category.gsub(/_|\\P&#123;Word&#125;/, &apos;-&apos;).gsub(/-&#123;2,&#125;/, &apos;-&apos;).downcase)</span><br><span class=\"line\">        html &lt;&lt; &quot;&lt;li class=&apos;category&apos;&gt;&lt;a href=&apos;/#&#123;category_url&#125;/&apos;&gt;#&#123;category&#125; (#&#123;posts_in_category&#125;)&lt;/a&gt;&lt;/li&gt;\\n&quot;</span><br><span class=\"line\">      end</span><br><span class=\"line\">      html</span><br><span class=\"line\">    end</span><br><span class=\"line\">  end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">Liquid::Template.register_tag(&apos;category_list&apos;, Jekyll::CategoryListTag)</span><br></pre></td></tr></table></figure>\n\n<p>这个插件会向liquid注册一个名为<code>category_list</code>的tag，该tag就是以li的形式将站点所有的category组织起来。</p>\n<p>然后再增加aside，复制以下代码到<code>source/_includes/asides/category_list.html</code>（如果没有就新建）中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;section&gt;</span><br><span class=\"line\"> &lt;h1&gt;Categories&lt;/h1&gt;</span><br><span class=\"line\"> &lt;ul id=&quot;categories&quot;&gt;</span><br><span class=\"line\">  &#123; category_list &#125;</span><br><span class=\"line\"> &lt;/ul&gt;</span><br><span class=\"line\">&lt;/section&gt;</span><br></pre></td></tr></table></figure>\n\n<p>注意要将<code>{ category_list }</code>中<code>category_list</code>单词的左右两边分别加个<code>%</code>,即写成下图所示样式：<br><img src=\"https://github.com/wangzz/wangzz.github.com/blob/master/images/D04878A8-B17E-4B76-A8FD-E4938C293B84.png?raw=true\" alt=\"categorylist_pic\"></p>\n<p>搞那么复杂是markdown排版问题。。。</p>\n<p>最后更改_config.yml文件，让侧边栏链接到刚才新增加的<code>source/_includes/asides/category_list.html</code>文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default_asides: [asides/recent_posts.html, asides/category_list.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html]</span><br></pre></td></tr></table></figure>\n\n<p>完成以上步骤后，重新部署就能看到博客的右侧边栏增加了<code>category</code>列表了。</p>\n<ul>\n<li>自定义侧边栏之增加新浪微博</li>\n</ul>\n<p>在博客中增加新浪模块是一个很好的和渎职互动方式，增加方式如下：</p>\n<p>首先要从<a href=\"http://app.weibo.com/tool/weiboshow\" target=\"_blank\" rel=\"noopener\">新浪微博秀</a>获取到自定义的微博秀代码，设定好微博秀样式后将代码复制下来。</p>\n<p>然后在<code>source/_includes/custom/asides</code>目录下新建<code>weibo.html</code>文件，按照如下格式编辑该文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;section&gt;</span><br><span class=\"line\">    &lt;h1&gt;新浪微博&lt;/h1&gt;</span><br><span class=\"line\">    &lt;ul id=&quot;weibo&quot;&gt;</span><br><span class=\"line\">    &lt;li&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   -- 在此插入获得的微博秀代码 --</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">&lt;/section&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将刚才赋值下来的自定义微博秀代码粘贴到上述指定位置。</p>\n<p>最后，和自定义category侧边栏一样，我们需要在<code>default_asides</code>中加入<code>custom/asides/weibo.html</code>。</p>\n<p>重新部署后，微博秀就能正常展示啦！</p>\n<ul>\n<li>自定义Navigation</li>\n</ul>\n<p>默认的导航栏只有Blog、Archives两项，很难满足大家的要求。下面以增加about界面为例说明如何在导航栏上增加内容。</p>\n<p>首先编辑文件<code>/source/_includes/custom/navigation.html</code>，仿照Blog和Archives的写法增加一行About：</p>\n<p><img src=\"https://github.com/wangzz/wangzz.github.com/blob/master/images/1E66BCE6-EB83-42E8-AA5A-F0E66CD04A65.png?raw=true\" alt=\"about\"></p>\n<p>然后使用命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rake new_page[&apos;about&apos;]</span><br></pre></td></tr></table></figure>\n\n<p>创建一个页面，保存路径为<code>source\\about\\index.markdown</code></p>\n<p>编辑index.markdown文件成自己想要的样式，然后重新部署，就能看到导航栏上新增了About项目。</p>\n<ul>\n<li>自定义Footer</li>\n</ul>\n<p>界面底部的声明部分同样可以自定义，修改文件：<code>source/_includes/custom/footer.html</code>成自己想要的格式即可。</p>\n<ul>\n<li>自定义网站主题</li>\n</ul>\n<p>目前有很多第三方主题，比如：<a href=\"http://opthemes.com/\" target=\"_blank\" rel=\"noopener\">http://opthemes.com/</a></p>\n<p>该网站搜集了很多漂亮的主题，对应的主题里都有安装方式。</p>\n<ul>\n<li>新标签页打开网站中第三方链接</li>\n</ul>\n<p>Octopress博客中，默认是在当前界面中打开第三方链接，这导致网站浏览者跳到第三方链接后很难回来。</p>\n<p>将以下代码加入<code>source/_includes/custom/head.html</code>文件中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">&gt; function addBlankTargetForLinks () &#123;</span><br><span class=\"line\">&gt;   $(&apos;a[href^=&quot;http&quot;]&apos;).each(function()&#123;</span><br><span class=\"line\">&gt;       $(this).attr(&apos;target&apos;, &apos;_blank&apos;);</span><br><span class=\"line\">&gt;   &#125;);</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt; $(document).bind(&apos;DOMNodeInserted&apos;, function(event) &#123;</span><br><span class=\"line\">&gt;  addBlankTargetForLinks();</span><br><span class=\"line\">&gt; &#125;);</span><br><span class=\"line\">&gt; &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>记得把左侧的<code>&gt;</code>符号都去掉。</p>\n<p>不过本站的链接还是会在当前界面中打开。</p>\n<h2 id=\"返回顶部按钮\"><a href=\"#返回顶部按钮\" class=\"headerlink\" title=\"返回顶部按钮\"></a>返回顶部按钮</h2><p>文章较长时，返回顶部按钮还是很有用的。下面方法介绍了如何添加一个返回顶部按钮：</p>\n<ul>\n<li>实现返回按钮功能</li>\n</ul>\n<p>首先创建<code>source/javascripts/top.js</code>，添加如下代码实现滑动返回顶部效果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function goTop(acceleration, time)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        acceleration = acceleration || 0.1;</span><br><span class=\"line\">        time = time || 16;</span><br><span class=\"line\"></span><br><span class=\"line\">        var x1 = 0;</span><br><span class=\"line\">        var y1 = 0;</span><br><span class=\"line\">        var x2 = 0;</span><br><span class=\"line\">        var y2 = 0;</span><br><span class=\"line\">        var x3 = 0;</span><br><span class=\"line\">        var y3 = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (document.documentElement)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                x1 = document.documentElement.scrollLeft || 0;</span><br><span class=\"line\">                y1 = document.documentElement.scrollTop || 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (document.body)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                x2 = document.body.scrollLeft || 0;</span><br><span class=\"line\">                y2 = document.body.scrollTop || 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var x3 = window.scrollX || 0;</span><br><span class=\"line\">        var y3 = window.scrollY || 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        var x = Math.max(x1, Math.max(x2, x3));</span><br><span class=\"line\">        var y = Math.max(y1, Math.max(y2, y3));</span><br><span class=\"line\"></span><br><span class=\"line\">        var speed = 1 + acceleration;</span><br><span class=\"line\">        window.scrollTo(Math.floor(x / speed), Math.floor(y / speed));</span><br><span class=\"line\"></span><br><span class=\"line\">        if(x &gt; 0 || y &gt; 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                var invokeFunction = &quot;goTop(&quot; + acceleration + &quot;, &quot; + time + &quot;)&quot;;</span><br><span class=\"line\">                window.setTimeout(invokeFunction, time);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>自定义返回按钮格式</li>\n</ul>\n<p>创建<code>source/_includes/custom/totop.html</code>，设置返回顶部按钮样式和位置，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--返回顶部开始--&gt;</span><br><span class=\"line\">&lt;div id=&quot;full&quot; style=&quot;width:0px; height:0px; position:fixed; right:180px; bottom:150px; z-index:100; text-align:center; background-color:transparent; cursor:pointer;&quot;&gt;</span><br><span class=\"line\">\t&lt;a href=&quot;#&quot; onclick=&quot;goTop();return false;&quot;&gt;&lt;img src=&quot;/images/top.png&quot; border=0 alt=&quot;返回顶部&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script src=&quot;/javascripts/top.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;!--返回顶部结束--&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>选择按钮图片</li>\n</ul>\n<p>找到自己喜爱的返回按钮图片，命名为<code>top.png</code>后添加到<code>source/images</code>目录中（或修改<code>totop.html</code>中图片的路径）。</p>\n<h2 id=\"自定义域名\"><a href=\"#自定义域名\" class=\"headerlink\" title=\"自定义域名\"></a>自定义域名</h2><p>使用<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">Github Pages</a>服务搭建好博客以后，默认的访问地址是<code>yourname.github.io</code>形式的二级域名。大家一定迫不及待的想换成自己的个性域名了。</p>\n<ul>\n<li>购买域名</li>\n</ul>\n<p>到各大域名购买网站购买自己心仪的域名</p>\n<ul>\n<li>获取自己github二级域名的IP</li>\n</ul>\n<p>以我的域名<code>wangzz.github.io</code>为例，输入以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$dig wangzz.github.io</span><br></pre></td></tr></table></figure>\n\n<p>在输出内容中找到<code>ANSWER SECTION</code>一项，比如我的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ANSWER SECTION:</span><br><span class=\"line\">wangzz.github.io.\t3599\tIN\tCNAME\tgithub.map.fastly.net.</span><br><span class=\"line\">github.map.fastly.net.\t29\tIN\tA\t103.235.222.168</span><br></pre></td></tr></table></figure>\n\n<p>可以看到我的IP是<code>103.235.222.168</code>。</p>\n<ul>\n<li>添加A记录</li>\n</ul>\n<p>得到IP以后，需要到你的域名解析服务商处添加一个A记录，将你的域名解析成对应的IP。</p>\n<p>经过以上步骤，访问<code>wangzz.github.io</code>的地址就会自动跳转到自己的域名了。不过更改需要等一段时间才能生效。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><p><a href=\"http://blog.csdn.net/lcliliil/article/details/13727927\" target=\"_blank\" rel=\"noopener\">SEO统计</a></p>\n</li>\n<li><p><a href=\"http://codemacro.com/2012/07/18/add-category-list-to-octopress/\" target=\"_blank\" rel=\"noopener\">增加category列表</a></p>\n</li>\n<li><p><a href=\"http://octopress.org/docs/theme/template/\" target=\"_blank\" rel=\"noopener\">Theming &amp; Customization</a></p>\n</li>\n<li><p><a href=\"http://asaf.github.io/blog/2013/07/08/blogging-with-octopress-add-about-page/\" target=\"_blank\" rel=\"noopener\">Add About Page</a></p>\n</li>\n<li><p><a href=\"http://www.blogjava.net/lishunli/archive/2013/01/20/394478.html\" target=\"_blank\" rel=\"noopener\">新标签页打开第三方链接</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/lcliliil/article/details/13725895\" target=\"_blank\" rel=\"noopener\">增加新浪微博秀</a></p>\n</li>\n<li><p><a href=\"http://812lcl.com/blog/2013/10/27/octopresszhu-ti-yang-shi-xiu-gai/\" target=\"_blank\" rel=\"noopener\">Octopress主题样式修改</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"SEO\"><a href=\"#SEO\" class=\"headerlink\" title=\"SEO\"></a>SEO</h2><ul>\n<li>增加统计工具</li>\n</ul>\n<p>博客搭建好了以后，大家一定很想知道每天都有多少的访问量。现在有很多工具都可以帮助我们做这件事，比如<code>Google Analytics</code>、<code>百度统计</code>、<code>CNZZ</code> 等。</p>\n<p>其中<code>Google Analytics</code>是Octopress自带的统计工具，使用方式也非常简单，只需要到<code>Google Analytics</code>申请一个<code>app id</code>，填写到<code>_config.yml</code>文件中的<code>google_analytics_tracking_id</code>后面即可。但<code>Google Analytics</code>存在翻墙的麻烦，而且<code>百度统计</code>功能也挺齐全，完全能满足我的需求，就选择了<code>百度统计</code>。</p>\n<p>集成百度统计方式非常简单：</p>\n<p>只需到<code>百度统计</code>官方网站申请一个账号，将获取的代码添加到<code>source/_includes/custom/footer.html</code>中，重新部署即可。</p>","more":"<ul>\n<li>搜索优化</li>\n</ul>\n<p>为了让自己搭建的博客更容易被搜索引擎搜到，最好将网站地址提交给各大搜索引擎，下面有两个连接搜集了各个搜索引擎的网站提交入口：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://urlc.cn/tool/addurl.html</span><br><span class=\"line\">http://tool.lusongsong.com/addurl.html</span><br></pre></td></tr></table></figure>\n\n<p>我试了下，添加到<code>google</code>以后，搜索关键字的时候自己的博客确实排名靠前了。</p>\n<p>光是将网址添加到搜索引擎还不够，你必须得为你的文章添加关键字，才能更好地被引擎搜到，在创建一篇新文章的时候，生成的makedown文件包含以下内容，以本文举例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">layout: post</span><br><span class=\"line\">title: &quot;自定义你的Octopress博客&quot;</span><br><span class=\"line\">date: 2014-04-28 11:17:31 +0800</span><br><span class=\"line\">comments: true</span><br><span class=\"line\">categories: Octopress</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>实际上我们还可以为其添加以下几项，以本文举例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tags: [octopress, 博客自定义, seo]</span><br><span class=\"line\">keywords: seo, octopress, analytics, 博客自定义</span><br><span class=\"line\">description: 如何自定义Octopress博客</span><br></pre></td></tr></table></figure>\n\n<p>这样更利于搜索引擎抓取到我们的博客。</p>\n<p>事实上，如果我们不做上述设置，Octopress会默认将文章的前150个字作为文章的关键字，供搜索引擎抓取，但那并不一定准确。</p>\n<p>Octopress实现该功能的代码在<code>source/_includes/head.html</code>文件中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% capture description %&#125;&#123;% if page.description %&#125;&#123;&#123; page.description &#125;&#125;&#123;% else %&#125;&#123;&#123; content | raw_content &#125;&#125;&#123;% endif %&#125;&#123;% endcapture %&#125;</span><br><span class=\"line\">  &lt;meta name=&quot;description&quot; content=&quot;&#123;&#123; description | strip_html | condense_spaces | truncate:150 &#125;&#125;&quot;&gt;</span><br><span class=\"line\">&#123;% if page.keywords %&#125;&lt;meta name=&quot;keywords&quot; content=&quot;&#123;&#123; page.keywords &#125;&#125;&quot;&gt;&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此外，还可以在<code>_config.yml</code>里添加默认的<code>description</code>和<code>keywords</code>，不过我没试过。</p>\n<h2 id=\"界面相关\"><a href=\"#界面相关\" class=\"headerlink\" title=\"界面相关\"></a>界面相关</h2><ul>\n<li>博客首页显示文章摘要</li>\n</ul>\n<p>默认情况下，博客首页文章列表中都会全部展示，要想让文章在首页中只显示一部分配置也非常简单：</p>\n<p>首先在文章列表中你想展示的缩略部分增加标记：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>\n\n<p>然后自定义<code>_config.yml</code>中的对应设置项：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">excerpt_link: &quot;阅读更多 &amp;rarr;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>这样就有了我博客中现在的效果：<br><img src=\"https://github.com/wangzz/wangzz.github.com/blob/master/images/336C83D8-ADEB-49A2-93D6-815A74509434.png?raw=true\" alt=\"read more\"></p>\n<ul>\n<li>自定义侧边栏之增加category列表</li>\n</ul>\n<p>下面以增加侧边栏category列表为例。</p>\n<p>在创建新文章时，我们会填写以下属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">layout: post</span><br><span class=\"line\">title: &quot;自定义你的Octopress博客&quot;</span><br><span class=\"line\">date: 2014-04-28 11:17:31 +0800</span><br><span class=\"line\">comments: true</span><br><span class=\"line\">categories: Octopress</span><br><span class=\"line\">tags: [octopress, 博客自定义, seo]</span><br><span class=\"line\">keywords: seo, octopress, analytics, 博客自定义</span><br><span class=\"line\">description: 如何自定义Octopress博客</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>其中的<code>categories</code>会为当前文章指定一个分类。我们可能有需要通过分类查找文章的需求，而侧边栏中默认只有最近提交列表。下面就介绍如何在侧边栏中显示文章分类列表。</p>\n<p>首先，保存以下内容到<code>plugins/category_list_tag.rb</code>中（如果文件不存在就新创建一个）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> module Jekyll</span><br><span class=\"line\">  class CategoryListTag &lt; Liquid::Tag</span><br><span class=\"line\">    def render(context)</span><br><span class=\"line\">      html = &quot;&quot;</span><br><span class=\"line\">      categories = context.registers[:site].categories.keys</span><br><span class=\"line\">      categories.sort.each do |category|</span><br><span class=\"line\">        posts_in_category = context.registers[:site].categories[category].size</span><br><span class=\"line\">        category_dir = context.registers[:site].config[&apos;category_dir&apos;]</span><br><span class=\"line\">        category_url = File.join(category_dir, category.gsub(/_|\\P&#123;Word&#125;/, &apos;-&apos;).gsub(/-&#123;2,&#125;/, &apos;-&apos;).downcase)</span><br><span class=\"line\">        html &lt;&lt; &quot;&lt;li class=&apos;category&apos;&gt;&lt;a href=&apos;/#&#123;category_url&#125;/&apos;&gt;#&#123;category&#125; (#&#123;posts_in_category&#125;)&lt;/a&gt;&lt;/li&gt;\\n&quot;</span><br><span class=\"line\">      end</span><br><span class=\"line\">      html</span><br><span class=\"line\">    end</span><br><span class=\"line\">  end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">Liquid::Template.register_tag(&apos;category_list&apos;, Jekyll::CategoryListTag)</span><br></pre></td></tr></table></figure>\n\n<p>这个插件会向liquid注册一个名为<code>category_list</code>的tag，该tag就是以li的形式将站点所有的category组织起来。</p>\n<p>然后再增加aside，复制以下代码到<code>source/_includes/asides/category_list.html</code>（如果没有就新建）中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;section&gt;</span><br><span class=\"line\"> &lt;h1&gt;Categories&lt;/h1&gt;</span><br><span class=\"line\"> &lt;ul id=&quot;categories&quot;&gt;</span><br><span class=\"line\">  &#123; category_list &#125;</span><br><span class=\"line\"> &lt;/ul&gt;</span><br><span class=\"line\">&lt;/section&gt;</span><br></pre></td></tr></table></figure>\n\n<p>注意要将<code>{ category_list }</code>中<code>category_list</code>单词的左右两边分别加个<code>%</code>,即写成下图所示样式：<br><img src=\"https://github.com/wangzz/wangzz.github.com/blob/master/images/D04878A8-B17E-4B76-A8FD-E4938C293B84.png?raw=true\" alt=\"categorylist_pic\"></p>\n<p>搞那么复杂是markdown排版问题。。。</p>\n<p>最后更改_config.yml文件，让侧边栏链接到刚才新增加的<code>source/_includes/asides/category_list.html</code>文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default_asides: [asides/recent_posts.html, asides/category_list.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html]</span><br></pre></td></tr></table></figure>\n\n<p>完成以上步骤后，重新部署就能看到博客的右侧边栏增加了<code>category</code>列表了。</p>\n<ul>\n<li>自定义侧边栏之增加新浪微博</li>\n</ul>\n<p>在博客中增加新浪模块是一个很好的和渎职互动方式，增加方式如下：</p>\n<p>首先要从<a href=\"http://app.weibo.com/tool/weiboshow\" target=\"_blank\" rel=\"noopener\">新浪微博秀</a>获取到自定义的微博秀代码，设定好微博秀样式后将代码复制下来。</p>\n<p>然后在<code>source/_includes/custom/asides</code>目录下新建<code>weibo.html</code>文件，按照如下格式编辑该文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;section&gt;</span><br><span class=\"line\">    &lt;h1&gt;新浪微博&lt;/h1&gt;</span><br><span class=\"line\">    &lt;ul id=&quot;weibo&quot;&gt;</span><br><span class=\"line\">    &lt;li&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   -- 在此插入获得的微博秀代码 --</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">&lt;/section&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将刚才赋值下来的自定义微博秀代码粘贴到上述指定位置。</p>\n<p>最后，和自定义category侧边栏一样，我们需要在<code>default_asides</code>中加入<code>custom/asides/weibo.html</code>。</p>\n<p>重新部署后，微博秀就能正常展示啦！</p>\n<ul>\n<li>自定义Navigation</li>\n</ul>\n<p>默认的导航栏只有Blog、Archives两项，很难满足大家的要求。下面以增加about界面为例说明如何在导航栏上增加内容。</p>\n<p>首先编辑文件<code>/source/_includes/custom/navigation.html</code>，仿照Blog和Archives的写法增加一行About：</p>\n<p><img src=\"https://github.com/wangzz/wangzz.github.com/blob/master/images/1E66BCE6-EB83-42E8-AA5A-F0E66CD04A65.png?raw=true\" alt=\"about\"></p>\n<p>然后使用命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rake new_page[&apos;about&apos;]</span><br></pre></td></tr></table></figure>\n\n<p>创建一个页面，保存路径为<code>source\\about\\index.markdown</code></p>\n<p>编辑index.markdown文件成自己想要的样式，然后重新部署，就能看到导航栏上新增了About项目。</p>\n<ul>\n<li>自定义Footer</li>\n</ul>\n<p>界面底部的声明部分同样可以自定义，修改文件：<code>source/_includes/custom/footer.html</code>成自己想要的格式即可。</p>\n<ul>\n<li>自定义网站主题</li>\n</ul>\n<p>目前有很多第三方主题，比如：<a href=\"http://opthemes.com/\" target=\"_blank\" rel=\"noopener\">http://opthemes.com/</a></p>\n<p>该网站搜集了很多漂亮的主题，对应的主题里都有安装方式。</p>\n<ul>\n<li>新标签页打开网站中第三方链接</li>\n</ul>\n<p>Octopress博客中，默认是在当前界面中打开第三方链接，这导致网站浏览者跳到第三方链接后很难回来。</p>\n<p>将以下代码加入<code>source/_includes/custom/head.html</code>文件中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">&gt; function addBlankTargetForLinks () &#123;</span><br><span class=\"line\">&gt;   $(&apos;a[href^=&quot;http&quot;]&apos;).each(function()&#123;</span><br><span class=\"line\">&gt;       $(this).attr(&apos;target&apos;, &apos;_blank&apos;);</span><br><span class=\"line\">&gt;   &#125;);</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt; $(document).bind(&apos;DOMNodeInserted&apos;, function(event) &#123;</span><br><span class=\"line\">&gt;  addBlankTargetForLinks();</span><br><span class=\"line\">&gt; &#125;);</span><br><span class=\"line\">&gt; &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>记得把左侧的<code>&gt;</code>符号都去掉。</p>\n<p>不过本站的链接还是会在当前界面中打开。</p>\n<h2 id=\"返回顶部按钮\"><a href=\"#返回顶部按钮\" class=\"headerlink\" title=\"返回顶部按钮\"></a>返回顶部按钮</h2><p>文章较长时，返回顶部按钮还是很有用的。下面方法介绍了如何添加一个返回顶部按钮：</p>\n<ul>\n<li>实现返回按钮功能</li>\n</ul>\n<p>首先创建<code>source/javascripts/top.js</code>，添加如下代码实现滑动返回顶部效果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function goTop(acceleration, time)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        acceleration = acceleration || 0.1;</span><br><span class=\"line\">        time = time || 16;</span><br><span class=\"line\"></span><br><span class=\"line\">        var x1 = 0;</span><br><span class=\"line\">        var y1 = 0;</span><br><span class=\"line\">        var x2 = 0;</span><br><span class=\"line\">        var y2 = 0;</span><br><span class=\"line\">        var x3 = 0;</span><br><span class=\"line\">        var y3 = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (document.documentElement)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                x1 = document.documentElement.scrollLeft || 0;</span><br><span class=\"line\">                y1 = document.documentElement.scrollTop || 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (document.body)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                x2 = document.body.scrollLeft || 0;</span><br><span class=\"line\">                y2 = document.body.scrollTop || 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var x3 = window.scrollX || 0;</span><br><span class=\"line\">        var y3 = window.scrollY || 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        var x = Math.max(x1, Math.max(x2, x3));</span><br><span class=\"line\">        var y = Math.max(y1, Math.max(y2, y3));</span><br><span class=\"line\"></span><br><span class=\"line\">        var speed = 1 + acceleration;</span><br><span class=\"line\">        window.scrollTo(Math.floor(x / speed), Math.floor(y / speed));</span><br><span class=\"line\"></span><br><span class=\"line\">        if(x &gt; 0 || y &gt; 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                var invokeFunction = &quot;goTop(&quot; + acceleration + &quot;, &quot; + time + &quot;)&quot;;</span><br><span class=\"line\">                window.setTimeout(invokeFunction, time);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>自定义返回按钮格式</li>\n</ul>\n<p>创建<code>source/_includes/custom/totop.html</code>，设置返回顶部按钮样式和位置，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--返回顶部开始--&gt;</span><br><span class=\"line\">&lt;div id=&quot;full&quot; style=&quot;width:0px; height:0px; position:fixed; right:180px; bottom:150px; z-index:100; text-align:center; background-color:transparent; cursor:pointer;&quot;&gt;</span><br><span class=\"line\">\t&lt;a href=&quot;#&quot; onclick=&quot;goTop();return false;&quot;&gt;&lt;img src=&quot;/images/top.png&quot; border=0 alt=&quot;返回顶部&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script src=&quot;/javascripts/top.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;!--返回顶部结束--&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>选择按钮图片</li>\n</ul>\n<p>找到自己喜爱的返回按钮图片，命名为<code>top.png</code>后添加到<code>source/images</code>目录中（或修改<code>totop.html</code>中图片的路径）。</p>\n<h2 id=\"自定义域名\"><a href=\"#自定义域名\" class=\"headerlink\" title=\"自定义域名\"></a>自定义域名</h2><p>使用<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">Github Pages</a>服务搭建好博客以后，默认的访问地址是<code>yourname.github.io</code>形式的二级域名。大家一定迫不及待的想换成自己的个性域名了。</p>\n<ul>\n<li>购买域名</li>\n</ul>\n<p>到各大域名购买网站购买自己心仪的域名</p>\n<ul>\n<li>获取自己github二级域名的IP</li>\n</ul>\n<p>以我的域名<code>wangzz.github.io</code>为例，输入以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$dig wangzz.github.io</span><br></pre></td></tr></table></figure>\n\n<p>在输出内容中找到<code>ANSWER SECTION</code>一项，比如我的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ANSWER SECTION:</span><br><span class=\"line\">wangzz.github.io.\t3599\tIN\tCNAME\tgithub.map.fastly.net.</span><br><span class=\"line\">github.map.fastly.net.\t29\tIN\tA\t103.235.222.168</span><br></pre></td></tr></table></figure>\n\n<p>可以看到我的IP是<code>103.235.222.168</code>。</p>\n<ul>\n<li>添加A记录</li>\n</ul>\n<p>得到IP以后，需要到你的域名解析服务商处添加一个A记录，将你的域名解析成对应的IP。</p>\n<p>经过以上步骤，访问<code>wangzz.github.io</code>的地址就会自动跳转到自己的域名了。不过更改需要等一段时间才能生效。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><p><a href=\"http://blog.csdn.net/lcliliil/article/details/13727927\" target=\"_blank\" rel=\"noopener\">SEO统计</a></p>\n</li>\n<li><p><a href=\"http://codemacro.com/2012/07/18/add-category-list-to-octopress/\" target=\"_blank\" rel=\"noopener\">增加category列表</a></p>\n</li>\n<li><p><a href=\"http://octopress.org/docs/theme/template/\" target=\"_blank\" rel=\"noopener\">Theming &amp; Customization</a></p>\n</li>\n<li><p><a href=\"http://asaf.github.io/blog/2013/07/08/blogging-with-octopress-add-about-page/\" target=\"_blank\" rel=\"noopener\">Add About Page</a></p>\n</li>\n<li><p><a href=\"http://www.blogjava.net/lishunli/archive/2013/01/20/394478.html\" target=\"_blank\" rel=\"noopener\">新标签页打开第三方链接</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/lcliliil/article/details/13725895\" target=\"_blank\" rel=\"noopener\">增加新浪微博秀</a></p>\n</li>\n<li><p><a href=\"http://812lcl.com/blog/2013/10/27/octopresszhu-ti-yang-shi-xiu-gai/\" target=\"_blank\" rel=\"noopener\">Octopress主题样式修改</a></p>\n</li>\n</ul>"},{"layout":"post","title":"github优秀开源项目大全-iOS","date":"2014-04-25T09:45:33.000Z","comments":1,"keywords":"octopress, 博客, github, 开源, iOS, ChatSecure-iOS","_content":"\n## 前言\n\n 1. 本文旨在搜集github上优秀的开源项目\n\n 2. 本文搜集的项目都是用于iOS开发\n\n 3. 本文会持续更新...\n\n\n## 完整客户端\n\n * [ioctocat](https://github.com/dennisreimann/)\n\ngithub的iOS客户端，目前开源代码是V1版本，V2版本在appstore上可以下载\n\n * [ChatSecure-iOS](https://github.com/chrisballinger/ChatSecure-iOS)\n\n使用XMPP协议的IM开源软件，很强大，在appstore上可以下载\n\n\n<!-- more -->\n\n\n * [SegmentFault](https://github.com/gaosboy/iOSSF)\n\nSegmentFault的官方iOS客户端\n\n * [OSChina-iOS](http://git.oschina.net/oschina/iphone-app)\n\n开源中国社区oschina的官方iPhone客户端，appstore已上线。早期地址在[github](https://github.com/gaosboy/iOSSF)上,后来迁移到OSChina自己的代码托管平台.\n\n\n* [FFCalendar](https://github.com/fggeraissate/FFCalendar)\n\n实现了日历的基本功能，目前只支持iPad版本\n\n<p><img src=\"https://raw.githubusercontent.com/fggeraissate/FFCalendar/master/FFCalendar/FFCalendars/Util/Images/YearlyCalendar.png\" width=\"320\" height=\"480\"></p>\n\n* [wh-app-ios](https://github.com/WhiteHouse/wh-app-ios)\n\n美国白宫（WhiteHouse）的官方app，听起来很高大上哈\n\n* [ruby-china-for-ios](https://github.com/ruby-china/ruby-china-for-ios)\n\nRuby China的官方app\n\n* [cheddar-ios](https://github.com/nothingmagical/cheddar-ios)\n\n一款不错的日程管理软件，Appstore上能下载\n\n<p><img src=\"https://github.com/wangzz/wangzz.github.com/blob/master/images/cheddar-ios-screen-short.jpeg?raw=true\" width=\"320\" height=\"480\"></p>\n\n\n* [twitterfon](https://github.com/jimpick/twitterfon)\n\n第三方twitter客户端，不过作者上传后至今5年了都没更新过。。。\n\n\n* [viewfinder](https://github.com/viewfinderco/viewfinder)\n\n移动支付公司Square在其工程博客上宣布，基于Apache 2.0许可协议，开源了于去年12月初收购的照片管理和共享应用Viewfinder，包括Viewfinder服务器、Android和iOS应用在内的25万行代码已托管到GitHub上。\n对此，Square工程师Peter Mattis在[工程博客](http://corner.squareup.com/2014/05/open-sourcing-viewfinder.html)上表示，Square之所以考虑到将Viewfinder的完整代码公之于众，是希望能够与人方便，让开发者在应用开发过程中可以加以利用或作为参考。尽管Square团队并没有为Viewfinder提供技术支持，也没有进行Bug修复，但此举还是赢得了满堂喝彩一致点赞。\n\nViewfinder包含了许多非常有趣的代码，对于开发者来说，绝对是大大的Surprise，主要如下：\n\n\t. Viewfinder服务器提供了一个拥有各种Amazon DynamoDB索引选项的结构化数据库架构。\n\t. 服务器还提供了数据库和协议层版本控制支持。\n\t. 在本地元数据存储方面，Viewfinder客户端使用LevelDB，相比CoreData，更易于使用，也相当便捷。\n\t. 内置可直接运行于移动设备上的全文本搜索引擎，支持联系人和图片搜索。\n\t. 使用GYP生成Xcode项目文件和Android构建文件。\n\t. 支持C++模板元编程，可使用C++11可变参数模板根据C++方法自动计算Java方法签名。\n\n该段介绍出自[这里](http://www.pcbeta.com/viewnews-63336-1.html)。\n\nviewfinder使用GYP生成Xcode的工程文件，生成方式如下：\n\n首先要安装GYP，执行以下步骤：\n\n```\n$ svn checkout http://gyp.googlecode.com/svn/trunk/ gyp-read-only \n$ cd gyp-read-only \n$ ./setup.py build \n$ sudo ./setup.py install \n```\n\t\n安装成功以后，再进入到clone下来的viewfineder源码目录，执行：\n\n```\n$ cd viewfinder/clients/ios\n$ gyp --depth=. -DOS=ios -Iglobals.gypi ViewfinderGyp.gyp\n```\n\n这样就能成功生成Xcode工程文件了，不过需要通过`ViewfinderGyp.xcodeproj`文件打开工程。\n\n* [HackerNews](https://github.com/Xuzz/newsyc)\n\n`Hacker News`的iPhone客户端\n\n<img src=\"/images/article1/app_hack_news.png\" width=\"320\" height=\"480\">\n\n* [AmericanEnglish](https://github.com/kesalin/AmericanEnglish)\n\niOS资深开发者[罗朝辉](http://blog.csdn.net/kesalin)做的一款应用，《美式英语》的iPhone版本\n\n<img src=\"/images/article1/app_american_english.png\" width=\"320\" height=\"480\">\n\n\n* [FormosaWeibo](https://github.com/xincode9/FormosaWeibo)\n\n使用新浪微博开放平台做的微博客户端，做工略显粗糙，作者也有几个月没更新了。\n\n* [RSSRead](https://github.com/ming1016/RSSRead)\n\nAppStore[上线产品](https://itunes.apple.com/cn/app/yi-yue-rss-li-xian-xin-wen-yue-du/id850246364?mt=8)，中文名称`已阅`。一个iOS设备上的RSS/Atom阅读器，刚成立的项目，还有很多有待完善的地方。\n\n<img src=\"/images/article1/app_rssread.jpeg\" width=\"320\" height=\"480\">\n\n\n## Xcode插件\n\n * [cocoapods-xcode-plugin](https://github.com/kattrali/cocoapods-xcode-plugin)\n\n用于在Xcode中管理CocoaPods依赖库\n\n<img src=\"/images/article1/plugin_cocoapods_menu.png\" width=\"560\" height=\"390\">\n\n\n * [XAlign](https://github.com/qfish/XAlign)\n\n方便实现代码对其功能，使代码风格统一\n\n<img src=\"/images/article1/plugin_align.gif\" width=\"560\" height=\"460\">\n\n* [XcodeBoost](https://github.com/fortinmike/XcodeBoost)\n\n一个辅助代码编辑插件。支持高亮选中、批量选中方法和方法名、根据选中的方法批量生成方法声明、高亮正则搜索等功能。\n\n\n* [Injection for Xcode](https://github.com/johnno1962/injectionforxcode)\n\n一个神奇的Xcode 插件，能让应用在运行的时候做出的小的改变立马体现效果，而不需要重新编译。。。\n\n* [Alcatraz](https://github.com/supermarin/Alcatraz)\n\n以图形化界面管理Xcode插件的插件。\n\n<img src=\"/images/article1/plugin_alcatraz.png\" width=\"560\" height=\"650\">\n\n* [KSImageNamed-Xcode](https://github.com/ksuther/KSImageNamed-Xcode)\n\n当输入`[NSImage imageNamed:` 或者`[UIImage imageNamed:`时，会自动补全工程中可用的图片名称，同时能提供选中图片的预览。\n\n<img src=\"/images/article1/plugin_image_named.gif\" width=\"516\" height=\"220\">\n\n* [XToDo](https://github.com/trawor/XToDo)\n\n能以图形界面列表的形式列出代码中添加了`TODO`,`FIXME`,`???`,`!!!!`标识的项目，方便解决软件中备注的未解决问题。另外，能查找的还不只上述四种标识，用户可以自己添加想支持的标识。\n\n<img src=\"/images/article1/plugin_xtodo.png\" width=\"516\" height=\"320\">\n\n* [CodePilot](https://github.com/macoscope/CodePilot)\n\n快速查找工程中的文件、代码等资源，和Xcode5自带的`Open Quickly`功能相似。\n\n<img src=\"/images/article1/plugin_codepilot.png\" width=\"516\" height=\"540\">\n\n* [VVDocumenter-Xcode](https://github.com/onevcat/VVDocumenter-Xcode)\n\n提供了为代码增加注视的最快捷方式，是我使用频率最高的插件，[猫神](http://onevcat.com/)出品。\n\n<img src=\"/images/article1/plugin_vvdocumenter.gif\" width=\"516\" height=\"300\">\n\n\n## 工具\n\n * [Xtrace](https://github.com/johnno1962/Xtrace)\n\n能详细打印出一个某个方法被调用的堆栈，方便调试时定位问题\n\n<img src=\"/images/article1/tool_xtrace.png\" width=\"560\" height=\"460\">\n\n * [RMConnecter](https://github.com/realmacsoftware/RMConnecter)\n\n在上传AppStore时需要填写app的描述信息，此软件能很方便的填写这些信息。\n\n<img src=\"/images/article1/tool_rnconnecter.png\" width=\"580\" height=\"500\">\n\n* [xctool](https://github.com/facebook/xctool)\n\nfacebook出的自动编译工具，不像xcodebuild，它能够整洁的打印出日志\n\n<img src=\"/images/article1/tool_xctool.gif\" width=\"584\" height=\"414\">\n\n* [iOS-Universal-Framework](https://github.com/kstenerud/iOS-Universal-Framework)\n\n用于生成兼容armv6/armv7/i386 `framework`的Xcode工程模版：\n\n<img src=\"/images/article1/tool_framework.png\" width=\"584\" height=\"414\">\n\n\n* [UYLPasswordManager](https://github.com/kharrison/UYLPasswordManager)\n\n对访问iOS Keychain的封装库。\n\n* [sqlcipher](https://github.com/sqlcipher/sqlcipher)\n\n这是目前我已知的唯一一个支持对SQLite加密的免费开源库，对应的有收费版本。本开源库实现了对SQLite开源免费版本中未实现的加密接口，同时做了一定的扩展。使用的是256位AES加密方式。\n\n强烈推荐！\n\n\n* [Xcode-Snippets](https://github.com/mattt/Xcode-Snippets)\n\n`AFNetworking`作者、mattt大神开源的常用Xcode代码片段。\n\n\n\n## 开发框架\n\n* [pop](https://github.com/facebook/pop)\n\nfacebook那神奇的动画引擎，你懂得。。。\n\n![pop](https://github.com/facebook/pop/blob/master/Images/pop.gif?raw=true)\n\n* [KVOController](https://github.com/facebook/KVOController)\n\nfacebook出品，基于Cocoa的KVO开发，提供简单地使用方式，同时也是线程安全的。\n\n* [Aspects](https://github.com/steipete/Aspects)\n\n通过method swizzling技术，能够在一个类的现有方法执行之前或之后附加一个代码片段（以block方式），能极大的方便我们调试。\n\n* [PSPDFKit](https://github.com/PSPDFKit/PSPDFKit-Demo)\n\n十分强大的PDF开发框架，有异步加载、预览、编辑、加标注等很多功能\n\n\n* [TEAChart](https://github.com/xhacker/TEAChart)\n\n使用简单，功能强大的图表工具\n\n![TEAChart](https://github.com/wangzz/wangzz.github.com/blob/master/images/TEAChart-screen-short.gif?raw=true)\n\n* [SearchCoreTest](https://github.com/kewenya/SearchCoreTest)\n\n一个联系人搜索库，支持的搜索方式包括：用户名汉字、拼音及模糊搜索，号码搜索，最重要的是支持T9搜索，做过通讯录类应用的同学都懂的。我在项目里用过，很赞。\n\n* [XMPPFramework](https://github.com/robbiehanson/XMPPFramework)\n\n应该是XMPP协议Objective-C实现的最好版本，小型开发者想做IM应用的好选择，使用起来也很方便。\n\n* [JSQMessagesViewController](https://github.com/jessesquires/JSQMessagesViewController)\n\n一个通用聊天界面框架，效果不错，感谢作者的开源。这个框架后来被国内某无耻程序员修改成[MessageDisplayKit](https://github.com/xhzengAIB/MessageDisplayKit)，大有据为己有之势。\n\n<img src=\"/images/article1/framework_JSQMessagesViewController.png\" width=\"320\" height=\"480\">\n\n* [vTeam](https://github.com/hailongz/vTeam)\n\n一个开发者积累多年的开发框架，值得看看。\n\n\n* [AGGeometryKit](https://github.com/hfossli/AGGeometryKit)\n\n几何图形框架，把AGGeometryKit和POP结合起来使用，可实现非常棒的动态和动画。\n\n\n* [IMQuickSearch](https://github.com/Intermark/IMQuickSearch)\n\nIMQuickSearch是一个快速搜索工具，可以过滤包含多种自定义NSObject类的NSArray。\n\n<img src=\"/images/article1/framework_IMQuickSearch.gif\" width=\"320\" height=\"480\">\n\n\n* [iOSPlot](https://github.com/honcheng/iOSPlot)\n\n新加坡开发者`honcheng`实现的图标制作框架，支持折线图、饼状图等。\n\n<img src=\"/images/article1/framework_iOSPlot.png\" width=\"480\" height=\"320\">\n\n\n## 自定义view\n\n * [DZTableView](https://github.com/yishuiliunian/DZTableView)\n\n仿照UITableView机制自己实现的一个自定义tableview，带有详细的说明文档\n\n\n* [AMWaveTransition](https://github.com/andreamazz/AMWaveTransition)\n\n很炫的带有表格的视图控制器切换效果，点击每个栏目会有限带有波浪效果的信息展示，类似于Facebook Paper\n\n![AMWaveTransition](https://raw.githubusercontent.com/andreamazz/AMWaveTransition/master/screenshot.gif)\n\n\n* [Shimmer](https://github.com/facebook/Shimmer)\n\n又是facebook出的，可以让view展示波光粼粼的效果\n\n![Shimmer](https://github.com/facebook/Shimmer/blob/master/shimmer.gif?raw=true)\n\n* [PSTCollectionView](https://github.com/steipete/PSTCollectionView)\n\n仿照系统的UICollectionView的API实现的collection view，支持ARC和iOS4.3+系统，可用于替代只能从iOS6开始支持的UICollectionView\n\n* [JDStatusBarNotification](https://github.com/jaydee3/JDStatusBarNotification)\n\n各种形式在状态栏展示信息，包括提示、进度等，展示格式和动画方式也有好几种。下图只是以静态方式展示其效果，更多详情请点击链接查看。\n\n![JDStatusBarNotification](https://github.com/wangzz/wangzz.github.com/blob/master/images/article1/styles.png?raw=true)\n\n\n* [SphereView](https://github.com/heroims/SphereView)\n\n一个球形3D标签，能够放大、缩小、拖动、点击、自动旋转。效果挺玄的，就是感觉有点卡，还有一定的优化空间。下图截了一个静态图片:\n\n![SphereView](https://github.com/wangzz/wangzz.github.com/blob/master/images/article1/SphereView.png?raw=true)\n\n\n* [RESideMenu](https://github.com/romaonthego/RESideMenu)\n\niOS7风格的侧滑菜单，支持左右双向侧滑：\n\n![RESideMenu](/images/article1/RESideMenu.gif)\n\n* [GCDiscreetNotificationView](https://github.com/gcamp/GCDiscreetNotificationView)\n\n一种在view的顶部弹出并会自动消失的通知类view，是toast的一种变形。目前[开源中国](http://git.oschina.net/oschina/iphone-app)的项目正在用该view。\n\n\n* [CLProgressHUD](https://github.com/cleexiang/CLProgressHUD)\n\n大麦网iOS客户端工程师开源的一个HUD view，\n\n<img src=\"/images/article1/view_clprogresshud.gif\" width=\"320\" height=\"480\">\n\n* [REMenu](https://github.com/romaonthego/REMenu)\n\n自定义的下拉菜单\n\n<img src=\"/images/article1/view_remenu.gif\" width=\"320\" height=\"480\">\n\n\n* [SWParallaxScrollView](https://github.com/5sw/SWParallaxScrollView)\n\n能够实现在多个图层上以不同速度滑动的自定义ScrollView，可用于做软件启动时的help界面：\n\n<img src=\"/images/article1/view_parallax_scrollview.gif\" width=\"480\" height=\"320\">\n\n* [Vurig-Calendar](https://github.com/tjeerdintveen/Vurig-Calendar)\n\n自定义的日历，界面很简洁，月份切换时动画效果也不错。\n\n<img src=\"/images/article1/framework_Vurig-Calendar.png\" width=\"320\" height=\"480\">\n\n\n* [M80AttributedLabel](https://github.com/xiangwangfeng/M80AttributedLabel)\n\n功能较齐全的attributed lable，支持attributed string和图片、链接、控件的混排。\n\n* [BCMeshTransformView](https://github.com/Ciechan/BCMeshTransformView)\n\n实现了相当炫的拉幕式的界面切换效果，其灵感来自CALayer的私有属性`meshTransform`以及和其对应的`CAMeshTransform`。\n\n<img src=\"/images/article1/view_BCMeshTransformView.jpg\" width=\"320\" height=\"480\">\n\n\n* [TwitterCover](https://github.com/cyndibaby905/TwitterCover)\n\n新浪微博开发者仿照Twitter的iOS客户端中的效果实现的向下拉动滚动视图，视图顶端的图片会随着下拉而变大，并且带有模糊的效果。\n\n<img src=\"/images/article1/view_TwitterCover.gif\" width=\"320\" height=\"480\">\n\n\n* [THContactPicker](https://github.com/tristanhimmelman/THContactPicker)\n\n模仿系统邮件应用实现的联系人选择界面。\n\n<img src=\"/images/article1/view_THContactPicker.gif\" width=\"320\" height=\"480\">\n\n\n* [DKCircleButton](https://github.com/kronik/DKCircleButton)\n\n一个扁平化的，能带声波效果的按钮。\n\n<img src=\"/images/article1/view_DKCircleButton.gif\" width=\"320\" height=\"480\">\n\n* [PaperFold-for-iOS](https://github.com/honcheng/PaperFold-for-iOS)\n\n新加坡开发者`honcheng`实现的折纸效果的界面切换，适合做电子书阅读类应用。\n\n<img src=\"/images/article1/view_PaperFold-for-iOS.png\" width=\"320\" height=\"480\">\n\n* [RTLabel](https://github.com/honcheng/RTLabel)\n\n新加坡开发者`honcheng`多媒体显示view，支持html语法，应用非常广泛。\n\n<img src=\"/images/article1/view_RTLabel.png\" width=\"320\" height=\"480\">\n\n\n\n\n\n\n","source":"_posts/2014-04-25-githubyou-xiu-xiang-mu-ios.markdown","raw":"---\nlayout: post\ntitle: \"github优秀开源项目大全-iOS\"\ndate: 2014-04-25 17:45:33 +0800\ncomments: true\ncategories: opensource\ntags: [octopress, 博客, github, 开源, iOS]\nkeywords: octopress, 博客, github, 开源, iOS, ChatSecure-iOS\n---\n\n## 前言\n\n 1. 本文旨在搜集github上优秀的开源项目\n\n 2. 本文搜集的项目都是用于iOS开发\n\n 3. 本文会持续更新...\n\n\n## 完整客户端\n\n * [ioctocat](https://github.com/dennisreimann/)\n\ngithub的iOS客户端，目前开源代码是V1版本，V2版本在appstore上可以下载\n\n * [ChatSecure-iOS](https://github.com/chrisballinger/ChatSecure-iOS)\n\n使用XMPP协议的IM开源软件，很强大，在appstore上可以下载\n\n\n<!-- more -->\n\n\n * [SegmentFault](https://github.com/gaosboy/iOSSF)\n\nSegmentFault的官方iOS客户端\n\n * [OSChina-iOS](http://git.oschina.net/oschina/iphone-app)\n\n开源中国社区oschina的官方iPhone客户端，appstore已上线。早期地址在[github](https://github.com/gaosboy/iOSSF)上,后来迁移到OSChina自己的代码托管平台.\n\n\n* [FFCalendar](https://github.com/fggeraissate/FFCalendar)\n\n实现了日历的基本功能，目前只支持iPad版本\n\n<p><img src=\"https://raw.githubusercontent.com/fggeraissate/FFCalendar/master/FFCalendar/FFCalendars/Util/Images/YearlyCalendar.png\" width=\"320\" height=\"480\"></p>\n\n* [wh-app-ios](https://github.com/WhiteHouse/wh-app-ios)\n\n美国白宫（WhiteHouse）的官方app，听起来很高大上哈\n\n* [ruby-china-for-ios](https://github.com/ruby-china/ruby-china-for-ios)\n\nRuby China的官方app\n\n* [cheddar-ios](https://github.com/nothingmagical/cheddar-ios)\n\n一款不错的日程管理软件，Appstore上能下载\n\n<p><img src=\"https://github.com/wangzz/wangzz.github.com/blob/master/images/cheddar-ios-screen-short.jpeg?raw=true\" width=\"320\" height=\"480\"></p>\n\n\n* [twitterfon](https://github.com/jimpick/twitterfon)\n\n第三方twitter客户端，不过作者上传后至今5年了都没更新过。。。\n\n\n* [viewfinder](https://github.com/viewfinderco/viewfinder)\n\n移动支付公司Square在其工程博客上宣布，基于Apache 2.0许可协议，开源了于去年12月初收购的照片管理和共享应用Viewfinder，包括Viewfinder服务器、Android和iOS应用在内的25万行代码已托管到GitHub上。\n对此，Square工程师Peter Mattis在[工程博客](http://corner.squareup.com/2014/05/open-sourcing-viewfinder.html)上表示，Square之所以考虑到将Viewfinder的完整代码公之于众，是希望能够与人方便，让开发者在应用开发过程中可以加以利用或作为参考。尽管Square团队并没有为Viewfinder提供技术支持，也没有进行Bug修复，但此举还是赢得了满堂喝彩一致点赞。\n\nViewfinder包含了许多非常有趣的代码，对于开发者来说，绝对是大大的Surprise，主要如下：\n\n\t. Viewfinder服务器提供了一个拥有各种Amazon DynamoDB索引选项的结构化数据库架构。\n\t. 服务器还提供了数据库和协议层版本控制支持。\n\t. 在本地元数据存储方面，Viewfinder客户端使用LevelDB，相比CoreData，更易于使用，也相当便捷。\n\t. 内置可直接运行于移动设备上的全文本搜索引擎，支持联系人和图片搜索。\n\t. 使用GYP生成Xcode项目文件和Android构建文件。\n\t. 支持C++模板元编程，可使用C++11可变参数模板根据C++方法自动计算Java方法签名。\n\n该段介绍出自[这里](http://www.pcbeta.com/viewnews-63336-1.html)。\n\nviewfinder使用GYP生成Xcode的工程文件，生成方式如下：\n\n首先要安装GYP，执行以下步骤：\n\n```\n$ svn checkout http://gyp.googlecode.com/svn/trunk/ gyp-read-only \n$ cd gyp-read-only \n$ ./setup.py build \n$ sudo ./setup.py install \n```\n\t\n安装成功以后，再进入到clone下来的viewfineder源码目录，执行：\n\n```\n$ cd viewfinder/clients/ios\n$ gyp --depth=. -DOS=ios -Iglobals.gypi ViewfinderGyp.gyp\n```\n\n这样就能成功生成Xcode工程文件了，不过需要通过`ViewfinderGyp.xcodeproj`文件打开工程。\n\n* [HackerNews](https://github.com/Xuzz/newsyc)\n\n`Hacker News`的iPhone客户端\n\n<img src=\"/images/article1/app_hack_news.png\" width=\"320\" height=\"480\">\n\n* [AmericanEnglish](https://github.com/kesalin/AmericanEnglish)\n\niOS资深开发者[罗朝辉](http://blog.csdn.net/kesalin)做的一款应用，《美式英语》的iPhone版本\n\n<img src=\"/images/article1/app_american_english.png\" width=\"320\" height=\"480\">\n\n\n* [FormosaWeibo](https://github.com/xincode9/FormosaWeibo)\n\n使用新浪微博开放平台做的微博客户端，做工略显粗糙，作者也有几个月没更新了。\n\n* [RSSRead](https://github.com/ming1016/RSSRead)\n\nAppStore[上线产品](https://itunes.apple.com/cn/app/yi-yue-rss-li-xian-xin-wen-yue-du/id850246364?mt=8)，中文名称`已阅`。一个iOS设备上的RSS/Atom阅读器，刚成立的项目，还有很多有待完善的地方。\n\n<img src=\"/images/article1/app_rssread.jpeg\" width=\"320\" height=\"480\">\n\n\n## Xcode插件\n\n * [cocoapods-xcode-plugin](https://github.com/kattrali/cocoapods-xcode-plugin)\n\n用于在Xcode中管理CocoaPods依赖库\n\n<img src=\"/images/article1/plugin_cocoapods_menu.png\" width=\"560\" height=\"390\">\n\n\n * [XAlign](https://github.com/qfish/XAlign)\n\n方便实现代码对其功能，使代码风格统一\n\n<img src=\"/images/article1/plugin_align.gif\" width=\"560\" height=\"460\">\n\n* [XcodeBoost](https://github.com/fortinmike/XcodeBoost)\n\n一个辅助代码编辑插件。支持高亮选中、批量选中方法和方法名、根据选中的方法批量生成方法声明、高亮正则搜索等功能。\n\n\n* [Injection for Xcode](https://github.com/johnno1962/injectionforxcode)\n\n一个神奇的Xcode 插件，能让应用在运行的时候做出的小的改变立马体现效果，而不需要重新编译。。。\n\n* [Alcatraz](https://github.com/supermarin/Alcatraz)\n\n以图形化界面管理Xcode插件的插件。\n\n<img src=\"/images/article1/plugin_alcatraz.png\" width=\"560\" height=\"650\">\n\n* [KSImageNamed-Xcode](https://github.com/ksuther/KSImageNamed-Xcode)\n\n当输入`[NSImage imageNamed:` 或者`[UIImage imageNamed:`时，会自动补全工程中可用的图片名称，同时能提供选中图片的预览。\n\n<img src=\"/images/article1/plugin_image_named.gif\" width=\"516\" height=\"220\">\n\n* [XToDo](https://github.com/trawor/XToDo)\n\n能以图形界面列表的形式列出代码中添加了`TODO`,`FIXME`,`???`,`!!!!`标识的项目，方便解决软件中备注的未解决问题。另外，能查找的还不只上述四种标识，用户可以自己添加想支持的标识。\n\n<img src=\"/images/article1/plugin_xtodo.png\" width=\"516\" height=\"320\">\n\n* [CodePilot](https://github.com/macoscope/CodePilot)\n\n快速查找工程中的文件、代码等资源，和Xcode5自带的`Open Quickly`功能相似。\n\n<img src=\"/images/article1/plugin_codepilot.png\" width=\"516\" height=\"540\">\n\n* [VVDocumenter-Xcode](https://github.com/onevcat/VVDocumenter-Xcode)\n\n提供了为代码增加注视的最快捷方式，是我使用频率最高的插件，[猫神](http://onevcat.com/)出品。\n\n<img src=\"/images/article1/plugin_vvdocumenter.gif\" width=\"516\" height=\"300\">\n\n\n## 工具\n\n * [Xtrace](https://github.com/johnno1962/Xtrace)\n\n能详细打印出一个某个方法被调用的堆栈，方便调试时定位问题\n\n<img src=\"/images/article1/tool_xtrace.png\" width=\"560\" height=\"460\">\n\n * [RMConnecter](https://github.com/realmacsoftware/RMConnecter)\n\n在上传AppStore时需要填写app的描述信息，此软件能很方便的填写这些信息。\n\n<img src=\"/images/article1/tool_rnconnecter.png\" width=\"580\" height=\"500\">\n\n* [xctool](https://github.com/facebook/xctool)\n\nfacebook出的自动编译工具，不像xcodebuild，它能够整洁的打印出日志\n\n<img src=\"/images/article1/tool_xctool.gif\" width=\"584\" height=\"414\">\n\n* [iOS-Universal-Framework](https://github.com/kstenerud/iOS-Universal-Framework)\n\n用于生成兼容armv6/armv7/i386 `framework`的Xcode工程模版：\n\n<img src=\"/images/article1/tool_framework.png\" width=\"584\" height=\"414\">\n\n\n* [UYLPasswordManager](https://github.com/kharrison/UYLPasswordManager)\n\n对访问iOS Keychain的封装库。\n\n* [sqlcipher](https://github.com/sqlcipher/sqlcipher)\n\n这是目前我已知的唯一一个支持对SQLite加密的免费开源库，对应的有收费版本。本开源库实现了对SQLite开源免费版本中未实现的加密接口，同时做了一定的扩展。使用的是256位AES加密方式。\n\n强烈推荐！\n\n\n* [Xcode-Snippets](https://github.com/mattt/Xcode-Snippets)\n\n`AFNetworking`作者、mattt大神开源的常用Xcode代码片段。\n\n\n\n## 开发框架\n\n* [pop](https://github.com/facebook/pop)\n\nfacebook那神奇的动画引擎，你懂得。。。\n\n![pop](https://github.com/facebook/pop/blob/master/Images/pop.gif?raw=true)\n\n* [KVOController](https://github.com/facebook/KVOController)\n\nfacebook出品，基于Cocoa的KVO开发，提供简单地使用方式，同时也是线程安全的。\n\n* [Aspects](https://github.com/steipete/Aspects)\n\n通过method swizzling技术，能够在一个类的现有方法执行之前或之后附加一个代码片段（以block方式），能极大的方便我们调试。\n\n* [PSPDFKit](https://github.com/PSPDFKit/PSPDFKit-Demo)\n\n十分强大的PDF开发框架，有异步加载、预览、编辑、加标注等很多功能\n\n\n* [TEAChart](https://github.com/xhacker/TEAChart)\n\n使用简单，功能强大的图表工具\n\n![TEAChart](https://github.com/wangzz/wangzz.github.com/blob/master/images/TEAChart-screen-short.gif?raw=true)\n\n* [SearchCoreTest](https://github.com/kewenya/SearchCoreTest)\n\n一个联系人搜索库，支持的搜索方式包括：用户名汉字、拼音及模糊搜索，号码搜索，最重要的是支持T9搜索，做过通讯录类应用的同学都懂的。我在项目里用过，很赞。\n\n* [XMPPFramework](https://github.com/robbiehanson/XMPPFramework)\n\n应该是XMPP协议Objective-C实现的最好版本，小型开发者想做IM应用的好选择，使用起来也很方便。\n\n* [JSQMessagesViewController](https://github.com/jessesquires/JSQMessagesViewController)\n\n一个通用聊天界面框架，效果不错，感谢作者的开源。这个框架后来被国内某无耻程序员修改成[MessageDisplayKit](https://github.com/xhzengAIB/MessageDisplayKit)，大有据为己有之势。\n\n<img src=\"/images/article1/framework_JSQMessagesViewController.png\" width=\"320\" height=\"480\">\n\n* [vTeam](https://github.com/hailongz/vTeam)\n\n一个开发者积累多年的开发框架，值得看看。\n\n\n* [AGGeometryKit](https://github.com/hfossli/AGGeometryKit)\n\n几何图形框架，把AGGeometryKit和POP结合起来使用，可实现非常棒的动态和动画。\n\n\n* [IMQuickSearch](https://github.com/Intermark/IMQuickSearch)\n\nIMQuickSearch是一个快速搜索工具，可以过滤包含多种自定义NSObject类的NSArray。\n\n<img src=\"/images/article1/framework_IMQuickSearch.gif\" width=\"320\" height=\"480\">\n\n\n* [iOSPlot](https://github.com/honcheng/iOSPlot)\n\n新加坡开发者`honcheng`实现的图标制作框架，支持折线图、饼状图等。\n\n<img src=\"/images/article1/framework_iOSPlot.png\" width=\"480\" height=\"320\">\n\n\n## 自定义view\n\n * [DZTableView](https://github.com/yishuiliunian/DZTableView)\n\n仿照UITableView机制自己实现的一个自定义tableview，带有详细的说明文档\n\n\n* [AMWaveTransition](https://github.com/andreamazz/AMWaveTransition)\n\n很炫的带有表格的视图控制器切换效果，点击每个栏目会有限带有波浪效果的信息展示，类似于Facebook Paper\n\n![AMWaveTransition](https://raw.githubusercontent.com/andreamazz/AMWaveTransition/master/screenshot.gif)\n\n\n* [Shimmer](https://github.com/facebook/Shimmer)\n\n又是facebook出的，可以让view展示波光粼粼的效果\n\n![Shimmer](https://github.com/facebook/Shimmer/blob/master/shimmer.gif?raw=true)\n\n* [PSTCollectionView](https://github.com/steipete/PSTCollectionView)\n\n仿照系统的UICollectionView的API实现的collection view，支持ARC和iOS4.3+系统，可用于替代只能从iOS6开始支持的UICollectionView\n\n* [JDStatusBarNotification](https://github.com/jaydee3/JDStatusBarNotification)\n\n各种形式在状态栏展示信息，包括提示、进度等，展示格式和动画方式也有好几种。下图只是以静态方式展示其效果，更多详情请点击链接查看。\n\n![JDStatusBarNotification](https://github.com/wangzz/wangzz.github.com/blob/master/images/article1/styles.png?raw=true)\n\n\n* [SphereView](https://github.com/heroims/SphereView)\n\n一个球形3D标签，能够放大、缩小、拖动、点击、自动旋转。效果挺玄的，就是感觉有点卡，还有一定的优化空间。下图截了一个静态图片:\n\n![SphereView](https://github.com/wangzz/wangzz.github.com/blob/master/images/article1/SphereView.png?raw=true)\n\n\n* [RESideMenu](https://github.com/romaonthego/RESideMenu)\n\niOS7风格的侧滑菜单，支持左右双向侧滑：\n\n![RESideMenu](/images/article1/RESideMenu.gif)\n\n* [GCDiscreetNotificationView](https://github.com/gcamp/GCDiscreetNotificationView)\n\n一种在view的顶部弹出并会自动消失的通知类view，是toast的一种变形。目前[开源中国](http://git.oschina.net/oschina/iphone-app)的项目正在用该view。\n\n\n* [CLProgressHUD](https://github.com/cleexiang/CLProgressHUD)\n\n大麦网iOS客户端工程师开源的一个HUD view，\n\n<img src=\"/images/article1/view_clprogresshud.gif\" width=\"320\" height=\"480\">\n\n* [REMenu](https://github.com/romaonthego/REMenu)\n\n自定义的下拉菜单\n\n<img src=\"/images/article1/view_remenu.gif\" width=\"320\" height=\"480\">\n\n\n* [SWParallaxScrollView](https://github.com/5sw/SWParallaxScrollView)\n\n能够实现在多个图层上以不同速度滑动的自定义ScrollView，可用于做软件启动时的help界面：\n\n<img src=\"/images/article1/view_parallax_scrollview.gif\" width=\"480\" height=\"320\">\n\n* [Vurig-Calendar](https://github.com/tjeerdintveen/Vurig-Calendar)\n\n自定义的日历，界面很简洁，月份切换时动画效果也不错。\n\n<img src=\"/images/article1/framework_Vurig-Calendar.png\" width=\"320\" height=\"480\">\n\n\n* [M80AttributedLabel](https://github.com/xiangwangfeng/M80AttributedLabel)\n\n功能较齐全的attributed lable，支持attributed string和图片、链接、控件的混排。\n\n* [BCMeshTransformView](https://github.com/Ciechan/BCMeshTransformView)\n\n实现了相当炫的拉幕式的界面切换效果，其灵感来自CALayer的私有属性`meshTransform`以及和其对应的`CAMeshTransform`。\n\n<img src=\"/images/article1/view_BCMeshTransformView.jpg\" width=\"320\" height=\"480\">\n\n\n* [TwitterCover](https://github.com/cyndibaby905/TwitterCover)\n\n新浪微博开发者仿照Twitter的iOS客户端中的效果实现的向下拉动滚动视图，视图顶端的图片会随着下拉而变大，并且带有模糊的效果。\n\n<img src=\"/images/article1/view_TwitterCover.gif\" width=\"320\" height=\"480\">\n\n\n* [THContactPicker](https://github.com/tristanhimmelman/THContactPicker)\n\n模仿系统邮件应用实现的联系人选择界面。\n\n<img src=\"/images/article1/view_THContactPicker.gif\" width=\"320\" height=\"480\">\n\n\n* [DKCircleButton](https://github.com/kronik/DKCircleButton)\n\n一个扁平化的，能带声波效果的按钮。\n\n<img src=\"/images/article1/view_DKCircleButton.gif\" width=\"320\" height=\"480\">\n\n* [PaperFold-for-iOS](https://github.com/honcheng/PaperFold-for-iOS)\n\n新加坡开发者`honcheng`实现的折纸效果的界面切换，适合做电子书阅读类应用。\n\n<img src=\"/images/article1/view_PaperFold-for-iOS.png\" width=\"320\" height=\"480\">\n\n* [RTLabel](https://github.com/honcheng/RTLabel)\n\n新加坡开发者`honcheng`多媒体显示view，支持html语法，应用非常广泛。\n\n<img src=\"/images/article1/view_RTLabel.png\" width=\"320\" height=\"480\">\n\n\n\n\n\n\n","slug":"2014-04-25-githubyou-xiu-xiang-mu-ios","published":1,"updated":"2019-09-23T13:02:47.000Z","photos":[],"link":"","_id":"ck0zclic80004qhtfo3wep8j6","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ol>\n<li><p>本文旨在搜集github上优秀的开源项目</p>\n</li>\n<li><p>本文搜集的项目都是用于iOS开发</p>\n</li>\n<li><p>本文会持续更新…</p>\n</li>\n</ol>\n<h2 id=\"完整客户端\"><a href=\"#完整客户端\" class=\"headerlink\" title=\"完整客户端\"></a>完整客户端</h2><ul>\n<li><a href=\"https://github.com/dennisreimann/\" target=\"_blank\" rel=\"noopener\">ioctocat</a></li>\n</ul>\n<p>github的iOS客户端，目前开源代码是V1版本，V2版本在appstore上可以下载</p>\n<ul>\n<li><a href=\"https://github.com/chrisballinger/ChatSecure-iOS\" target=\"_blank\" rel=\"noopener\">ChatSecure-iOS</a></li>\n</ul>\n<p>使用XMPP协议的IM开源软件，很强大，在appstore上可以下载</p>\n<a id=\"more\"></a>\n\n\n<ul>\n<li><a href=\"https://github.com/gaosboy/iOSSF\" target=\"_blank\" rel=\"noopener\">SegmentFault</a></li>\n</ul>\n<p>SegmentFault的官方iOS客户端</p>\n<ul>\n<li><a href=\"http://git.oschina.net/oschina/iphone-app\" target=\"_blank\" rel=\"noopener\">OSChina-iOS</a></li>\n</ul>\n<p>开源中国社区oschina的官方iPhone客户端，appstore已上线。早期地址在<a href=\"https://github.com/gaosboy/iOSSF\" target=\"_blank\" rel=\"noopener\">github</a>上,后来迁移到OSChina自己的代码托管平台.</p>\n<ul>\n<li><a href=\"https://github.com/fggeraissate/FFCalendar\" target=\"_blank\" rel=\"noopener\">FFCalendar</a></li>\n</ul>\n<p>实现了日历的基本功能，目前只支持iPad版本</p>\n<p><img src=\"https://raw.githubusercontent.com/fggeraissate/FFCalendar/master/FFCalendar/FFCalendars/Util/Images/YearlyCalendar.png\" width=\"320\" height=\"480\"></p>\n\n<ul>\n<li><a href=\"https://github.com/WhiteHouse/wh-app-ios\" target=\"_blank\" rel=\"noopener\">wh-app-ios</a></li>\n</ul>\n<p>美国白宫（WhiteHouse）的官方app，听起来很高大上哈</p>\n<ul>\n<li><a href=\"https://github.com/ruby-china/ruby-china-for-ios\" target=\"_blank\" rel=\"noopener\">ruby-china-for-ios</a></li>\n</ul>\n<p>Ruby China的官方app</p>\n<ul>\n<li><a href=\"https://github.com/nothingmagical/cheddar-ios\" target=\"_blank\" rel=\"noopener\">cheddar-ios</a></li>\n</ul>\n<p>一款不错的日程管理软件，Appstore上能下载</p>\n<p><img src=\"https://github.com/wangzz/wangzz.github.com/blob/master/images/cheddar-ios-screen-short.jpeg?raw=true\" width=\"320\" height=\"480\"></p>\n\n\n<ul>\n<li><a href=\"https://github.com/jimpick/twitterfon\" target=\"_blank\" rel=\"noopener\">twitterfon</a></li>\n</ul>\n<p>第三方twitter客户端，不过作者上传后至今5年了都没更新过。。。</p>\n<ul>\n<li><a href=\"https://github.com/viewfinderco/viewfinder\" target=\"_blank\" rel=\"noopener\">viewfinder</a></li>\n</ul>\n<p>移动支付公司Square在其工程博客上宣布，基于Apache 2.0许可协议，开源了于去年12月初收购的照片管理和共享应用Viewfinder，包括Viewfinder服务器、Android和iOS应用在内的25万行代码已托管到GitHub上。<br>对此，Square工程师Peter Mattis在<a href=\"http://corner.squareup.com/2014/05/open-sourcing-viewfinder.html\" target=\"_blank\" rel=\"noopener\">工程博客</a>上表示，Square之所以考虑到将Viewfinder的完整代码公之于众，是希望能够与人方便，让开发者在应用开发过程中可以加以利用或作为参考。尽管Square团队并没有为Viewfinder提供技术支持，也没有进行Bug修复，但此举还是赢得了满堂喝彩一致点赞。</p>\n<p>Viewfinder包含了许多非常有趣的代码，对于开发者来说，绝对是大大的Surprise，主要如下：</p>\n<pre><code>. Viewfinder服务器提供了一个拥有各种Amazon DynamoDB索引选项的结构化数据库架构。\n. 服务器还提供了数据库和协议层版本控制支持。\n. 在本地元数据存储方面，Viewfinder客户端使用LevelDB，相比CoreData，更易于使用，也相当便捷。\n. 内置可直接运行于移动设备上的全文本搜索引擎，支持联系人和图片搜索。\n. 使用GYP生成Xcode项目文件和Android构建文件。\n. 支持C++模板元编程，可使用C++11可变参数模板根据C++方法自动计算Java方法签名。</code></pre><p>该段介绍出自<a href=\"http://www.pcbeta.com/viewnews-63336-1.html\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>viewfinder使用GYP生成Xcode的工程文件，生成方式如下：</p>\n<p>首先要安装GYP，执行以下步骤：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ svn checkout http://gyp.googlecode.com/svn/trunk/ gyp-read-only </span><br><span class=\"line\">$ cd gyp-read-only </span><br><span class=\"line\">$ ./setup.py build </span><br><span class=\"line\">$ sudo ./setup.py install</span><br></pre></td></tr></table></figure>\n\n\n<p>安装成功以后，再进入到clone下来的viewfineder源码目录，执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd viewfinder/clients/ios</span><br><span class=\"line\">$ gyp --depth=. -DOS=ios -Iglobals.gypi ViewfinderGyp.gyp</span><br></pre></td></tr></table></figure>\n\n<p>这样就能成功生成Xcode工程文件了，不过需要通过<code>ViewfinderGyp.xcodeproj</code>文件打开工程。</p>\n<ul>\n<li><a href=\"https://github.com/Xuzz/newsyc\" target=\"_blank\" rel=\"noopener\">HackerNews</a></li>\n</ul>\n<p><code>Hacker News</code>的iPhone客户端</p>\n<img src=\"/images/article1/app_hack_news.png\" width=\"320\" height=\"480\">\n\n<ul>\n<li><a href=\"https://github.com/kesalin/AmericanEnglish\" target=\"_blank\" rel=\"noopener\">AmericanEnglish</a></li>\n</ul>\n<p>iOS资深开发者<a href=\"http://blog.csdn.net/kesalin\" target=\"_blank\" rel=\"noopener\">罗朝辉</a>做的一款应用，《美式英语》的iPhone版本</p>\n<img src=\"/images/article1/app_american_english.png\" width=\"320\" height=\"480\">\n\n\n<ul>\n<li><a href=\"https://github.com/xincode9/FormosaWeibo\" target=\"_blank\" rel=\"noopener\">FormosaWeibo</a></li>\n</ul>\n<p>使用新浪微博开放平台做的微博客户端，做工略显粗糙，作者也有几个月没更新了。</p>\n<ul>\n<li><a href=\"https://github.com/ming1016/RSSRead\" target=\"_blank\" rel=\"noopener\">RSSRead</a></li>\n</ul>\n<p>AppStore<a href=\"https://itunes.apple.com/cn/app/yi-yue-rss-li-xian-xin-wen-yue-du/id850246364?mt=8\" target=\"_blank\" rel=\"noopener\">上线产品</a>，中文名称<code>已阅</code>。一个iOS设备上的RSS/Atom阅读器，刚成立的项目，还有很多有待完善的地方。</p>\n<img src=\"/images/article1/app_rssread.jpeg\" width=\"320\" height=\"480\">\n\n\n<h2 id=\"Xcode插件\"><a href=\"#Xcode插件\" class=\"headerlink\" title=\"Xcode插件\"></a>Xcode插件</h2><ul>\n<li><a href=\"https://github.com/kattrali/cocoapods-xcode-plugin\" target=\"_blank\" rel=\"noopener\">cocoapods-xcode-plugin</a></li>\n</ul>\n<p>用于在Xcode中管理CocoaPods依赖库</p>\n<img src=\"/images/article1/plugin_cocoapods_menu.png\" width=\"560\" height=\"390\">\n\n\n<ul>\n<li><a href=\"https://github.com/qfish/XAlign\" target=\"_blank\" rel=\"noopener\">XAlign</a></li>\n</ul>\n<p>方便实现代码对其功能，使代码风格统一</p>\n<img src=\"/images/article1/plugin_align.gif\" width=\"560\" height=\"460\">\n\n<ul>\n<li><a href=\"https://github.com/fortinmike/XcodeBoost\" target=\"_blank\" rel=\"noopener\">XcodeBoost</a></li>\n</ul>\n<p>一个辅助代码编辑插件。支持高亮选中、批量选中方法和方法名、根据选中的方法批量生成方法声明、高亮正则搜索等功能。</p>\n<ul>\n<li><a href=\"https://github.com/johnno1962/injectionforxcode\" target=\"_blank\" rel=\"noopener\">Injection for Xcode</a></li>\n</ul>\n<p>一个神奇的Xcode 插件，能让应用在运行的时候做出的小的改变立马体现效果，而不需要重新编译。。。</p>\n<ul>\n<li><a href=\"https://github.com/supermarin/Alcatraz\" target=\"_blank\" rel=\"noopener\">Alcatraz</a></li>\n</ul>\n<p>以图形化界面管理Xcode插件的插件。</p>\n<img src=\"/images/article1/plugin_alcatraz.png\" width=\"560\" height=\"650\">\n\n<ul>\n<li><a href=\"https://github.com/ksuther/KSImageNamed-Xcode\" target=\"_blank\" rel=\"noopener\">KSImageNamed-Xcode</a></li>\n</ul>\n<p>当输入<code>[NSImage imageNamed:</code> 或者<code>[UIImage imageNamed:</code>时，会自动补全工程中可用的图片名称，同时能提供选中图片的预览。</p>\n<img src=\"/images/article1/plugin_image_named.gif\" width=\"516\" height=\"220\">\n\n<ul>\n<li><a href=\"https://github.com/trawor/XToDo\" target=\"_blank\" rel=\"noopener\">XToDo</a></li>\n</ul>\n<p>能以图形界面列表的形式列出代码中添加了<code>TODO</code>,<code>FIXME</code>,<code>???</code>,<code>!!!!</code>标识的项目，方便解决软件中备注的未解决问题。另外，能查找的还不只上述四种标识，用户可以自己添加想支持的标识。</p>\n<img src=\"/images/article1/plugin_xtodo.png\" width=\"516\" height=\"320\">\n\n<ul>\n<li><a href=\"https://github.com/macoscope/CodePilot\" target=\"_blank\" rel=\"noopener\">CodePilot</a></li>\n</ul>\n<p>快速查找工程中的文件、代码等资源，和Xcode5自带的<code>Open Quickly</code>功能相似。</p>\n<img src=\"/images/article1/plugin_codepilot.png\" width=\"516\" height=\"540\">\n\n<ul>\n<li><a href=\"https://github.com/onevcat/VVDocumenter-Xcode\" target=\"_blank\" rel=\"noopener\">VVDocumenter-Xcode</a></li>\n</ul>\n<p>提供了为代码增加注视的最快捷方式，是我使用频率最高的插件，<a href=\"http://onevcat.com/\" target=\"_blank\" rel=\"noopener\">猫神</a>出品。</p>\n<img src=\"/images/article1/plugin_vvdocumenter.gif\" width=\"516\" height=\"300\">\n\n\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><ul>\n<li><a href=\"https://github.com/johnno1962/Xtrace\" target=\"_blank\" rel=\"noopener\">Xtrace</a></li>\n</ul>\n<p>能详细打印出一个某个方法被调用的堆栈，方便调试时定位问题</p>\n<img src=\"/images/article1/tool_xtrace.png\" width=\"560\" height=\"460\">\n\n<ul>\n<li><a href=\"https://github.com/realmacsoftware/RMConnecter\" target=\"_blank\" rel=\"noopener\">RMConnecter</a></li>\n</ul>\n<p>在上传AppStore时需要填写app的描述信息，此软件能很方便的填写这些信息。</p>\n<img src=\"/images/article1/tool_rnconnecter.png\" width=\"580\" height=\"500\">\n\n<ul>\n<li><a href=\"https://github.com/facebook/xctool\" target=\"_blank\" rel=\"noopener\">xctool</a></li>\n</ul>\n<p>facebook出的自动编译工具，不像xcodebuild，它能够整洁的打印出日志</p>\n<img src=\"/images/article1/tool_xctool.gif\" width=\"584\" height=\"414\">\n\n<ul>\n<li><a href=\"https://github.com/kstenerud/iOS-Universal-Framework\" target=\"_blank\" rel=\"noopener\">iOS-Universal-Framework</a></li>\n</ul>\n<p>用于生成兼容armv6/armv7/i386 <code>framework</code>的Xcode工程模版：</p>\n<img src=\"/images/article1/tool_framework.png\" width=\"584\" height=\"414\">\n\n\n<ul>\n<li><a href=\"https://github.com/kharrison/UYLPasswordManager\" target=\"_blank\" rel=\"noopener\">UYLPasswordManager</a></li>\n</ul>\n<p>对访问iOS Keychain的封装库。</p>\n<ul>\n<li><a href=\"https://github.com/sqlcipher/sqlcipher\" target=\"_blank\" rel=\"noopener\">sqlcipher</a></li>\n</ul>\n<p>这是目前我已知的唯一一个支持对SQLite加密的免费开源库，对应的有收费版本。本开源库实现了对SQLite开源免费版本中未实现的加密接口，同时做了一定的扩展。使用的是256位AES加密方式。</p>\n<p>强烈推荐！</p>\n<ul>\n<li><a href=\"https://github.com/mattt/Xcode-Snippets\" target=\"_blank\" rel=\"noopener\">Xcode-Snippets</a></li>\n</ul>\n<p><code>AFNetworking</code>作者、mattt大神开源的常用Xcode代码片段。</p>\n<h2 id=\"开发框架\"><a href=\"#开发框架\" class=\"headerlink\" title=\"开发框架\"></a>开发框架</h2><ul>\n<li><a href=\"https://github.com/facebook/pop\" target=\"_blank\" rel=\"noopener\">pop</a></li>\n</ul>\n<p>facebook那神奇的动画引擎，你懂得。。。</p>\n<p><img src=\"https://github.com/facebook/pop/blob/master/Images/pop.gif?raw=true\" alt=\"pop\"></p>\n<ul>\n<li><a href=\"https://github.com/facebook/KVOController\" target=\"_blank\" rel=\"noopener\">KVOController</a></li>\n</ul>\n<p>facebook出品，基于Cocoa的KVO开发，提供简单地使用方式，同时也是线程安全的。</p>\n<ul>\n<li><a href=\"https://github.com/steipete/Aspects\" target=\"_blank\" rel=\"noopener\">Aspects</a></li>\n</ul>\n<p>通过method swizzling技术，能够在一个类的现有方法执行之前或之后附加一个代码片段（以block方式），能极大的方便我们调试。</p>\n<ul>\n<li><a href=\"https://github.com/PSPDFKit/PSPDFKit-Demo\" target=\"_blank\" rel=\"noopener\">PSPDFKit</a></li>\n</ul>\n<p>十分强大的PDF开发框架，有异步加载、预览、编辑、加标注等很多功能</p>\n<ul>\n<li><a href=\"https://github.com/xhacker/TEAChart\" target=\"_blank\" rel=\"noopener\">TEAChart</a></li>\n</ul>\n<p>使用简单，功能强大的图表工具</p>\n<p><img src=\"https://github.com/wangzz/wangzz.github.com/blob/master/images/TEAChart-screen-short.gif?raw=true\" alt=\"TEAChart\"></p>\n<ul>\n<li><a href=\"https://github.com/kewenya/SearchCoreTest\" target=\"_blank\" rel=\"noopener\">SearchCoreTest</a></li>\n</ul>\n<p>一个联系人搜索库，支持的搜索方式包括：用户名汉字、拼音及模糊搜索，号码搜索，最重要的是支持T9搜索，做过通讯录类应用的同学都懂的。我在项目里用过，很赞。</p>\n<ul>\n<li><a href=\"https://github.com/robbiehanson/XMPPFramework\" target=\"_blank\" rel=\"noopener\">XMPPFramework</a></li>\n</ul>\n<p>应该是XMPP协议Objective-C实现的最好版本，小型开发者想做IM应用的好选择，使用起来也很方便。</p>\n<ul>\n<li><a href=\"https://github.com/jessesquires/JSQMessagesViewController\" target=\"_blank\" rel=\"noopener\">JSQMessagesViewController</a></li>\n</ul>\n<p>一个通用聊天界面框架，效果不错，感谢作者的开源。这个框架后来被国内某无耻程序员修改成<a href=\"https://github.com/xhzengAIB/MessageDisplayKit\" target=\"_blank\" rel=\"noopener\">MessageDisplayKit</a>，大有据为己有之势。</p>\n<img src=\"/images/article1/framework_JSQMessagesViewController.png\" width=\"320\" height=\"480\">\n\n<ul>\n<li><a href=\"https://github.com/hailongz/vTeam\" target=\"_blank\" rel=\"noopener\">vTeam</a></li>\n</ul>\n<p>一个开发者积累多年的开发框架，值得看看。</p>\n<ul>\n<li><a href=\"https://github.com/hfossli/AGGeometryKit\" target=\"_blank\" rel=\"noopener\">AGGeometryKit</a></li>\n</ul>\n<p>几何图形框架，把AGGeometryKit和POP结合起来使用，可实现非常棒的动态和动画。</p>\n<ul>\n<li><a href=\"https://github.com/Intermark/IMQuickSearch\" target=\"_blank\" rel=\"noopener\">IMQuickSearch</a></li>\n</ul>\n<p>IMQuickSearch是一个快速搜索工具，可以过滤包含多种自定义NSObject类的NSArray。</p>\n<img src=\"/images/article1/framework_IMQuickSearch.gif\" width=\"320\" height=\"480\">\n\n\n<ul>\n<li><a href=\"https://github.com/honcheng/iOSPlot\" target=\"_blank\" rel=\"noopener\">iOSPlot</a></li>\n</ul>\n<p>新加坡开发者<code>honcheng</code>实现的图标制作框架，支持折线图、饼状图等。</p>\n<img src=\"/images/article1/framework_iOSPlot.png\" width=\"480\" height=\"320\">\n\n\n<h2 id=\"自定义view\"><a href=\"#自定义view\" class=\"headerlink\" title=\"自定义view\"></a>自定义view</h2><ul>\n<li><a href=\"https://github.com/yishuiliunian/DZTableView\" target=\"_blank\" rel=\"noopener\">DZTableView</a></li>\n</ul>\n<p>仿照UITableView机制自己实现的一个自定义tableview，带有详细的说明文档</p>\n<ul>\n<li><a href=\"https://github.com/andreamazz/AMWaveTransition\" target=\"_blank\" rel=\"noopener\">AMWaveTransition</a></li>\n</ul>\n<p>很炫的带有表格的视图控制器切换效果，点击每个栏目会有限带有波浪效果的信息展示，类似于Facebook Paper</p>\n<p><img src=\"https://raw.githubusercontent.com/andreamazz/AMWaveTransition/master/screenshot.gif\" alt=\"AMWaveTransition\"></p>\n<ul>\n<li><a href=\"https://github.com/facebook/Shimmer\" target=\"_blank\" rel=\"noopener\">Shimmer</a></li>\n</ul>\n<p>又是facebook出的，可以让view展示波光粼粼的效果</p>\n<p><img src=\"https://github.com/facebook/Shimmer/blob/master/shimmer.gif?raw=true\" alt=\"Shimmer\"></p>\n<ul>\n<li><a href=\"https://github.com/steipete/PSTCollectionView\" target=\"_blank\" rel=\"noopener\">PSTCollectionView</a></li>\n</ul>\n<p>仿照系统的UICollectionView的API实现的collection view，支持ARC和iOS4.3+系统，可用于替代只能从iOS6开始支持的UICollectionView</p>\n<ul>\n<li><a href=\"https://github.com/jaydee3/JDStatusBarNotification\" target=\"_blank\" rel=\"noopener\">JDStatusBarNotification</a></li>\n</ul>\n<p>各种形式在状态栏展示信息，包括提示、进度等，展示格式和动画方式也有好几种。下图只是以静态方式展示其效果，更多详情请点击链接查看。</p>\n<p><img src=\"https://github.com/wangzz/wangzz.github.com/blob/master/images/article1/styles.png?raw=true\" alt=\"JDStatusBarNotification\"></p>\n<ul>\n<li><a href=\"https://github.com/heroims/SphereView\" target=\"_blank\" rel=\"noopener\">SphereView</a></li>\n</ul>\n<p>一个球形3D标签，能够放大、缩小、拖动、点击、自动旋转。效果挺玄的，就是感觉有点卡，还有一定的优化空间。下图截了一个静态图片:</p>\n<p><img src=\"https://github.com/wangzz/wangzz.github.com/blob/master/images/article1/SphereView.png?raw=true\" alt=\"SphereView\"></p>\n<ul>\n<li><a href=\"https://github.com/romaonthego/RESideMenu\" target=\"_blank\" rel=\"noopener\">RESideMenu</a></li>\n</ul>\n<p>iOS7风格的侧滑菜单，支持左右双向侧滑：</p>\n<p><img src=\"/images/article1/RESideMenu.gif\" alt=\"RESideMenu\"></p>\n<ul>\n<li><a href=\"https://github.com/gcamp/GCDiscreetNotificationView\" target=\"_blank\" rel=\"noopener\">GCDiscreetNotificationView</a></li>\n</ul>\n<p>一种在view的顶部弹出并会自动消失的通知类view，是toast的一种变形。目前<a href=\"http://git.oschina.net/oschina/iphone-app\" target=\"_blank\" rel=\"noopener\">开源中国</a>的项目正在用该view。</p>\n<ul>\n<li><a href=\"https://github.com/cleexiang/CLProgressHUD\" target=\"_blank\" rel=\"noopener\">CLProgressHUD</a></li>\n</ul>\n<p>大麦网iOS客户端工程师开源的一个HUD view，</p>\n<img src=\"/images/article1/view_clprogresshud.gif\" width=\"320\" height=\"480\">\n\n<ul>\n<li><a href=\"https://github.com/romaonthego/REMenu\" target=\"_blank\" rel=\"noopener\">REMenu</a></li>\n</ul>\n<p>自定义的下拉菜单</p>\n<img src=\"/images/article1/view_remenu.gif\" width=\"320\" height=\"480\">\n\n\n<ul>\n<li><a href=\"https://github.com/5sw/SWParallaxScrollView\" target=\"_blank\" rel=\"noopener\">SWParallaxScrollView</a></li>\n</ul>\n<p>能够实现在多个图层上以不同速度滑动的自定义ScrollView，可用于做软件启动时的help界面：</p>\n<img src=\"/images/article1/view_parallax_scrollview.gif\" width=\"480\" height=\"320\">\n\n<ul>\n<li><a href=\"https://github.com/tjeerdintveen/Vurig-Calendar\" target=\"_blank\" rel=\"noopener\">Vurig-Calendar</a></li>\n</ul>\n<p>自定义的日历，界面很简洁，月份切换时动画效果也不错。</p>\n<img src=\"/images/article1/framework_Vurig-Calendar.png\" width=\"320\" height=\"480\">\n\n\n<ul>\n<li><a href=\"https://github.com/xiangwangfeng/M80AttributedLabel\" target=\"_blank\" rel=\"noopener\">M80AttributedLabel</a></li>\n</ul>\n<p>功能较齐全的attributed lable，支持attributed string和图片、链接、控件的混排。</p>\n<ul>\n<li><a href=\"https://github.com/Ciechan/BCMeshTransformView\" target=\"_blank\" rel=\"noopener\">BCMeshTransformView</a></li>\n</ul>\n<p>实现了相当炫的拉幕式的界面切换效果，其灵感来自CALayer的私有属性<code>meshTransform</code>以及和其对应的<code>CAMeshTransform</code>。</p>\n<img src=\"/images/article1/view_BCMeshTransformView.jpg\" width=\"320\" height=\"480\">\n\n\n<ul>\n<li><a href=\"https://github.com/cyndibaby905/TwitterCover\" target=\"_blank\" rel=\"noopener\">TwitterCover</a></li>\n</ul>\n<p>新浪微博开发者仿照Twitter的iOS客户端中的效果实现的向下拉动滚动视图，视图顶端的图片会随着下拉而变大，并且带有模糊的效果。</p>\n<img src=\"/images/article1/view_TwitterCover.gif\" width=\"320\" height=\"480\">\n\n\n<ul>\n<li><a href=\"https://github.com/tristanhimmelman/THContactPicker\" target=\"_blank\" rel=\"noopener\">THContactPicker</a></li>\n</ul>\n<p>模仿系统邮件应用实现的联系人选择界面。</p>\n<img src=\"/images/article1/view_THContactPicker.gif\" width=\"320\" height=\"480\">\n\n\n<ul>\n<li><a href=\"https://github.com/kronik/DKCircleButton\" target=\"_blank\" rel=\"noopener\">DKCircleButton</a></li>\n</ul>\n<p>一个扁平化的，能带声波效果的按钮。</p>\n<img src=\"/images/article1/view_DKCircleButton.gif\" width=\"320\" height=\"480\">\n\n<ul>\n<li><a href=\"https://github.com/honcheng/PaperFold-for-iOS\" target=\"_blank\" rel=\"noopener\">PaperFold-for-iOS</a></li>\n</ul>\n<p>新加坡开发者<code>honcheng</code>实现的折纸效果的界面切换，适合做电子书阅读类应用。</p>\n<img src=\"/images/article1/view_PaperFold-for-iOS.png\" width=\"320\" height=\"480\">\n\n<ul>\n<li><a href=\"https://github.com/honcheng/RTLabel\" target=\"_blank\" rel=\"noopener\">RTLabel</a></li>\n</ul>\n<p>新加坡开发者<code>honcheng</code>多媒体显示view，支持html语法，应用非常广泛。</p>\n<img src=\"/images/article1/view_RTLabel.png\" width=\"320\" height=\"480\">\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ol>\n<li><p>本文旨在搜集github上优秀的开源项目</p>\n</li>\n<li><p>本文搜集的项目都是用于iOS开发</p>\n</li>\n<li><p>本文会持续更新…</p>\n</li>\n</ol>\n<h2 id=\"完整客户端\"><a href=\"#完整客户端\" class=\"headerlink\" title=\"完整客户端\"></a>完整客户端</h2><ul>\n<li><a href=\"https://github.com/dennisreimann/\" target=\"_blank\" rel=\"noopener\">ioctocat</a></li>\n</ul>\n<p>github的iOS客户端，目前开源代码是V1版本，V2版本在appstore上可以下载</p>\n<ul>\n<li><a href=\"https://github.com/chrisballinger/ChatSecure-iOS\" target=\"_blank\" rel=\"noopener\">ChatSecure-iOS</a></li>\n</ul>\n<p>使用XMPP协议的IM开源软件，很强大，在appstore上可以下载</p>","more":"<ul>\n<li><a href=\"https://github.com/gaosboy/iOSSF\" target=\"_blank\" rel=\"noopener\">SegmentFault</a></li>\n</ul>\n<p>SegmentFault的官方iOS客户端</p>\n<ul>\n<li><a href=\"http://git.oschina.net/oschina/iphone-app\" target=\"_blank\" rel=\"noopener\">OSChina-iOS</a></li>\n</ul>\n<p>开源中国社区oschina的官方iPhone客户端，appstore已上线。早期地址在<a href=\"https://github.com/gaosboy/iOSSF\" target=\"_blank\" rel=\"noopener\">github</a>上,后来迁移到OSChina自己的代码托管平台.</p>\n<ul>\n<li><a href=\"https://github.com/fggeraissate/FFCalendar\" target=\"_blank\" rel=\"noopener\">FFCalendar</a></li>\n</ul>\n<p>实现了日历的基本功能，目前只支持iPad版本</p>\n<p><img src=\"https://raw.githubusercontent.com/fggeraissate/FFCalendar/master/FFCalendar/FFCalendars/Util/Images/YearlyCalendar.png\" width=\"320\" height=\"480\"></p>\n\n<ul>\n<li><a href=\"https://github.com/WhiteHouse/wh-app-ios\" target=\"_blank\" rel=\"noopener\">wh-app-ios</a></li>\n</ul>\n<p>美国白宫（WhiteHouse）的官方app，听起来很高大上哈</p>\n<ul>\n<li><a href=\"https://github.com/ruby-china/ruby-china-for-ios\" target=\"_blank\" rel=\"noopener\">ruby-china-for-ios</a></li>\n</ul>\n<p>Ruby China的官方app</p>\n<ul>\n<li><a href=\"https://github.com/nothingmagical/cheddar-ios\" target=\"_blank\" rel=\"noopener\">cheddar-ios</a></li>\n</ul>\n<p>一款不错的日程管理软件，Appstore上能下载</p>\n<p><img src=\"https://github.com/wangzz/wangzz.github.com/blob/master/images/cheddar-ios-screen-short.jpeg?raw=true\" width=\"320\" height=\"480\"></p>\n\n\n<ul>\n<li><a href=\"https://github.com/jimpick/twitterfon\" target=\"_blank\" rel=\"noopener\">twitterfon</a></li>\n</ul>\n<p>第三方twitter客户端，不过作者上传后至今5年了都没更新过。。。</p>\n<ul>\n<li><a href=\"https://github.com/viewfinderco/viewfinder\" target=\"_blank\" rel=\"noopener\">viewfinder</a></li>\n</ul>\n<p>移动支付公司Square在其工程博客上宣布，基于Apache 2.0许可协议，开源了于去年12月初收购的照片管理和共享应用Viewfinder，包括Viewfinder服务器、Android和iOS应用在内的25万行代码已托管到GitHub上。<br>对此，Square工程师Peter Mattis在<a href=\"http://corner.squareup.com/2014/05/open-sourcing-viewfinder.html\" target=\"_blank\" rel=\"noopener\">工程博客</a>上表示，Square之所以考虑到将Viewfinder的完整代码公之于众，是希望能够与人方便，让开发者在应用开发过程中可以加以利用或作为参考。尽管Square团队并没有为Viewfinder提供技术支持，也没有进行Bug修复，但此举还是赢得了满堂喝彩一致点赞。</p>\n<p>Viewfinder包含了许多非常有趣的代码，对于开发者来说，绝对是大大的Surprise，主要如下：</p>\n<pre><code>. Viewfinder服务器提供了一个拥有各种Amazon DynamoDB索引选项的结构化数据库架构。\n. 服务器还提供了数据库和协议层版本控制支持。\n. 在本地元数据存储方面，Viewfinder客户端使用LevelDB，相比CoreData，更易于使用，也相当便捷。\n. 内置可直接运行于移动设备上的全文本搜索引擎，支持联系人和图片搜索。\n. 使用GYP生成Xcode项目文件和Android构建文件。\n. 支持C++模板元编程，可使用C++11可变参数模板根据C++方法自动计算Java方法签名。</code></pre><p>该段介绍出自<a href=\"http://www.pcbeta.com/viewnews-63336-1.html\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>viewfinder使用GYP生成Xcode的工程文件，生成方式如下：</p>\n<p>首先要安装GYP，执行以下步骤：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ svn checkout http://gyp.googlecode.com/svn/trunk/ gyp-read-only </span><br><span class=\"line\">$ cd gyp-read-only </span><br><span class=\"line\">$ ./setup.py build </span><br><span class=\"line\">$ sudo ./setup.py install</span><br></pre></td></tr></table></figure>\n\n\n<p>安装成功以后，再进入到clone下来的viewfineder源码目录，执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd viewfinder/clients/ios</span><br><span class=\"line\">$ gyp --depth=. -DOS=ios -Iglobals.gypi ViewfinderGyp.gyp</span><br></pre></td></tr></table></figure>\n\n<p>这样就能成功生成Xcode工程文件了，不过需要通过<code>ViewfinderGyp.xcodeproj</code>文件打开工程。</p>\n<ul>\n<li><a href=\"https://github.com/Xuzz/newsyc\" target=\"_blank\" rel=\"noopener\">HackerNews</a></li>\n</ul>\n<p><code>Hacker News</code>的iPhone客户端</p>\n<img src=\"/images/article1/app_hack_news.png\" width=\"320\" height=\"480\">\n\n<ul>\n<li><a href=\"https://github.com/kesalin/AmericanEnglish\" target=\"_blank\" rel=\"noopener\">AmericanEnglish</a></li>\n</ul>\n<p>iOS资深开发者<a href=\"http://blog.csdn.net/kesalin\" target=\"_blank\" rel=\"noopener\">罗朝辉</a>做的一款应用，《美式英语》的iPhone版本</p>\n<img src=\"/images/article1/app_american_english.png\" width=\"320\" height=\"480\">\n\n\n<ul>\n<li><a href=\"https://github.com/xincode9/FormosaWeibo\" target=\"_blank\" rel=\"noopener\">FormosaWeibo</a></li>\n</ul>\n<p>使用新浪微博开放平台做的微博客户端，做工略显粗糙，作者也有几个月没更新了。</p>\n<ul>\n<li><a href=\"https://github.com/ming1016/RSSRead\" target=\"_blank\" rel=\"noopener\">RSSRead</a></li>\n</ul>\n<p>AppStore<a href=\"https://itunes.apple.com/cn/app/yi-yue-rss-li-xian-xin-wen-yue-du/id850246364?mt=8\" target=\"_blank\" rel=\"noopener\">上线产品</a>，中文名称<code>已阅</code>。一个iOS设备上的RSS/Atom阅读器，刚成立的项目，还有很多有待完善的地方。</p>\n<img src=\"/images/article1/app_rssread.jpeg\" width=\"320\" height=\"480\">\n\n\n<h2 id=\"Xcode插件\"><a href=\"#Xcode插件\" class=\"headerlink\" title=\"Xcode插件\"></a>Xcode插件</h2><ul>\n<li><a href=\"https://github.com/kattrali/cocoapods-xcode-plugin\" target=\"_blank\" rel=\"noopener\">cocoapods-xcode-plugin</a></li>\n</ul>\n<p>用于在Xcode中管理CocoaPods依赖库</p>\n<img src=\"/images/article1/plugin_cocoapods_menu.png\" width=\"560\" height=\"390\">\n\n\n<ul>\n<li><a href=\"https://github.com/qfish/XAlign\" target=\"_blank\" rel=\"noopener\">XAlign</a></li>\n</ul>\n<p>方便实现代码对其功能，使代码风格统一</p>\n<img src=\"/images/article1/plugin_align.gif\" width=\"560\" height=\"460\">\n\n<ul>\n<li><a href=\"https://github.com/fortinmike/XcodeBoost\" target=\"_blank\" rel=\"noopener\">XcodeBoost</a></li>\n</ul>\n<p>一个辅助代码编辑插件。支持高亮选中、批量选中方法和方法名、根据选中的方法批量生成方法声明、高亮正则搜索等功能。</p>\n<ul>\n<li><a href=\"https://github.com/johnno1962/injectionforxcode\" target=\"_blank\" rel=\"noopener\">Injection for Xcode</a></li>\n</ul>\n<p>一个神奇的Xcode 插件，能让应用在运行的时候做出的小的改变立马体现效果，而不需要重新编译。。。</p>\n<ul>\n<li><a href=\"https://github.com/supermarin/Alcatraz\" target=\"_blank\" rel=\"noopener\">Alcatraz</a></li>\n</ul>\n<p>以图形化界面管理Xcode插件的插件。</p>\n<img src=\"/images/article1/plugin_alcatraz.png\" width=\"560\" height=\"650\">\n\n<ul>\n<li><a href=\"https://github.com/ksuther/KSImageNamed-Xcode\" target=\"_blank\" rel=\"noopener\">KSImageNamed-Xcode</a></li>\n</ul>\n<p>当输入<code>[NSImage imageNamed:</code> 或者<code>[UIImage imageNamed:</code>时，会自动补全工程中可用的图片名称，同时能提供选中图片的预览。</p>\n<img src=\"/images/article1/plugin_image_named.gif\" width=\"516\" height=\"220\">\n\n<ul>\n<li><a href=\"https://github.com/trawor/XToDo\" target=\"_blank\" rel=\"noopener\">XToDo</a></li>\n</ul>\n<p>能以图形界面列表的形式列出代码中添加了<code>TODO</code>,<code>FIXME</code>,<code>???</code>,<code>!!!!</code>标识的项目，方便解决软件中备注的未解决问题。另外，能查找的还不只上述四种标识，用户可以自己添加想支持的标识。</p>\n<img src=\"/images/article1/plugin_xtodo.png\" width=\"516\" height=\"320\">\n\n<ul>\n<li><a href=\"https://github.com/macoscope/CodePilot\" target=\"_blank\" rel=\"noopener\">CodePilot</a></li>\n</ul>\n<p>快速查找工程中的文件、代码等资源，和Xcode5自带的<code>Open Quickly</code>功能相似。</p>\n<img src=\"/images/article1/plugin_codepilot.png\" width=\"516\" height=\"540\">\n\n<ul>\n<li><a href=\"https://github.com/onevcat/VVDocumenter-Xcode\" target=\"_blank\" rel=\"noopener\">VVDocumenter-Xcode</a></li>\n</ul>\n<p>提供了为代码增加注视的最快捷方式，是我使用频率最高的插件，<a href=\"http://onevcat.com/\" target=\"_blank\" rel=\"noopener\">猫神</a>出品。</p>\n<img src=\"/images/article1/plugin_vvdocumenter.gif\" width=\"516\" height=\"300\">\n\n\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><ul>\n<li><a href=\"https://github.com/johnno1962/Xtrace\" target=\"_blank\" rel=\"noopener\">Xtrace</a></li>\n</ul>\n<p>能详细打印出一个某个方法被调用的堆栈，方便调试时定位问题</p>\n<img src=\"/images/article1/tool_xtrace.png\" width=\"560\" height=\"460\">\n\n<ul>\n<li><a href=\"https://github.com/realmacsoftware/RMConnecter\" target=\"_blank\" rel=\"noopener\">RMConnecter</a></li>\n</ul>\n<p>在上传AppStore时需要填写app的描述信息，此软件能很方便的填写这些信息。</p>\n<img src=\"/images/article1/tool_rnconnecter.png\" width=\"580\" height=\"500\">\n\n<ul>\n<li><a href=\"https://github.com/facebook/xctool\" target=\"_blank\" rel=\"noopener\">xctool</a></li>\n</ul>\n<p>facebook出的自动编译工具，不像xcodebuild，它能够整洁的打印出日志</p>\n<img src=\"/images/article1/tool_xctool.gif\" width=\"584\" height=\"414\">\n\n<ul>\n<li><a href=\"https://github.com/kstenerud/iOS-Universal-Framework\" target=\"_blank\" rel=\"noopener\">iOS-Universal-Framework</a></li>\n</ul>\n<p>用于生成兼容armv6/armv7/i386 <code>framework</code>的Xcode工程模版：</p>\n<img src=\"/images/article1/tool_framework.png\" width=\"584\" height=\"414\">\n\n\n<ul>\n<li><a href=\"https://github.com/kharrison/UYLPasswordManager\" target=\"_blank\" rel=\"noopener\">UYLPasswordManager</a></li>\n</ul>\n<p>对访问iOS Keychain的封装库。</p>\n<ul>\n<li><a href=\"https://github.com/sqlcipher/sqlcipher\" target=\"_blank\" rel=\"noopener\">sqlcipher</a></li>\n</ul>\n<p>这是目前我已知的唯一一个支持对SQLite加密的免费开源库，对应的有收费版本。本开源库实现了对SQLite开源免费版本中未实现的加密接口，同时做了一定的扩展。使用的是256位AES加密方式。</p>\n<p>强烈推荐！</p>\n<ul>\n<li><a href=\"https://github.com/mattt/Xcode-Snippets\" target=\"_blank\" rel=\"noopener\">Xcode-Snippets</a></li>\n</ul>\n<p><code>AFNetworking</code>作者、mattt大神开源的常用Xcode代码片段。</p>\n<h2 id=\"开发框架\"><a href=\"#开发框架\" class=\"headerlink\" title=\"开发框架\"></a>开发框架</h2><ul>\n<li><a href=\"https://github.com/facebook/pop\" target=\"_blank\" rel=\"noopener\">pop</a></li>\n</ul>\n<p>facebook那神奇的动画引擎，你懂得。。。</p>\n<p><img src=\"https://github.com/facebook/pop/blob/master/Images/pop.gif?raw=true\" alt=\"pop\"></p>\n<ul>\n<li><a href=\"https://github.com/facebook/KVOController\" target=\"_blank\" rel=\"noopener\">KVOController</a></li>\n</ul>\n<p>facebook出品，基于Cocoa的KVO开发，提供简单地使用方式，同时也是线程安全的。</p>\n<ul>\n<li><a href=\"https://github.com/steipete/Aspects\" target=\"_blank\" rel=\"noopener\">Aspects</a></li>\n</ul>\n<p>通过method swizzling技术，能够在一个类的现有方法执行之前或之后附加一个代码片段（以block方式），能极大的方便我们调试。</p>\n<ul>\n<li><a href=\"https://github.com/PSPDFKit/PSPDFKit-Demo\" target=\"_blank\" rel=\"noopener\">PSPDFKit</a></li>\n</ul>\n<p>十分强大的PDF开发框架，有异步加载、预览、编辑、加标注等很多功能</p>\n<ul>\n<li><a href=\"https://github.com/xhacker/TEAChart\" target=\"_blank\" rel=\"noopener\">TEAChart</a></li>\n</ul>\n<p>使用简单，功能强大的图表工具</p>\n<p><img src=\"https://github.com/wangzz/wangzz.github.com/blob/master/images/TEAChart-screen-short.gif?raw=true\" alt=\"TEAChart\"></p>\n<ul>\n<li><a href=\"https://github.com/kewenya/SearchCoreTest\" target=\"_blank\" rel=\"noopener\">SearchCoreTest</a></li>\n</ul>\n<p>一个联系人搜索库，支持的搜索方式包括：用户名汉字、拼音及模糊搜索，号码搜索，最重要的是支持T9搜索，做过通讯录类应用的同学都懂的。我在项目里用过，很赞。</p>\n<ul>\n<li><a href=\"https://github.com/robbiehanson/XMPPFramework\" target=\"_blank\" rel=\"noopener\">XMPPFramework</a></li>\n</ul>\n<p>应该是XMPP协议Objective-C实现的最好版本，小型开发者想做IM应用的好选择，使用起来也很方便。</p>\n<ul>\n<li><a href=\"https://github.com/jessesquires/JSQMessagesViewController\" target=\"_blank\" rel=\"noopener\">JSQMessagesViewController</a></li>\n</ul>\n<p>一个通用聊天界面框架，效果不错，感谢作者的开源。这个框架后来被国内某无耻程序员修改成<a href=\"https://github.com/xhzengAIB/MessageDisplayKit\" target=\"_blank\" rel=\"noopener\">MessageDisplayKit</a>，大有据为己有之势。</p>\n<img src=\"/images/article1/framework_JSQMessagesViewController.png\" width=\"320\" height=\"480\">\n\n<ul>\n<li><a href=\"https://github.com/hailongz/vTeam\" target=\"_blank\" rel=\"noopener\">vTeam</a></li>\n</ul>\n<p>一个开发者积累多年的开发框架，值得看看。</p>\n<ul>\n<li><a href=\"https://github.com/hfossli/AGGeometryKit\" target=\"_blank\" rel=\"noopener\">AGGeometryKit</a></li>\n</ul>\n<p>几何图形框架，把AGGeometryKit和POP结合起来使用，可实现非常棒的动态和动画。</p>\n<ul>\n<li><a href=\"https://github.com/Intermark/IMQuickSearch\" target=\"_blank\" rel=\"noopener\">IMQuickSearch</a></li>\n</ul>\n<p>IMQuickSearch是一个快速搜索工具，可以过滤包含多种自定义NSObject类的NSArray。</p>\n<img src=\"/images/article1/framework_IMQuickSearch.gif\" width=\"320\" height=\"480\">\n\n\n<ul>\n<li><a href=\"https://github.com/honcheng/iOSPlot\" target=\"_blank\" rel=\"noopener\">iOSPlot</a></li>\n</ul>\n<p>新加坡开发者<code>honcheng</code>实现的图标制作框架，支持折线图、饼状图等。</p>\n<img src=\"/images/article1/framework_iOSPlot.png\" width=\"480\" height=\"320\">\n\n\n<h2 id=\"自定义view\"><a href=\"#自定义view\" class=\"headerlink\" title=\"自定义view\"></a>自定义view</h2><ul>\n<li><a href=\"https://github.com/yishuiliunian/DZTableView\" target=\"_blank\" rel=\"noopener\">DZTableView</a></li>\n</ul>\n<p>仿照UITableView机制自己实现的一个自定义tableview，带有详细的说明文档</p>\n<ul>\n<li><a href=\"https://github.com/andreamazz/AMWaveTransition\" target=\"_blank\" rel=\"noopener\">AMWaveTransition</a></li>\n</ul>\n<p>很炫的带有表格的视图控制器切换效果，点击每个栏目会有限带有波浪效果的信息展示，类似于Facebook Paper</p>\n<p><img src=\"https://raw.githubusercontent.com/andreamazz/AMWaveTransition/master/screenshot.gif\" alt=\"AMWaveTransition\"></p>\n<ul>\n<li><a href=\"https://github.com/facebook/Shimmer\" target=\"_blank\" rel=\"noopener\">Shimmer</a></li>\n</ul>\n<p>又是facebook出的，可以让view展示波光粼粼的效果</p>\n<p><img src=\"https://github.com/facebook/Shimmer/blob/master/shimmer.gif?raw=true\" alt=\"Shimmer\"></p>\n<ul>\n<li><a href=\"https://github.com/steipete/PSTCollectionView\" target=\"_blank\" rel=\"noopener\">PSTCollectionView</a></li>\n</ul>\n<p>仿照系统的UICollectionView的API实现的collection view，支持ARC和iOS4.3+系统，可用于替代只能从iOS6开始支持的UICollectionView</p>\n<ul>\n<li><a href=\"https://github.com/jaydee3/JDStatusBarNotification\" target=\"_blank\" rel=\"noopener\">JDStatusBarNotification</a></li>\n</ul>\n<p>各种形式在状态栏展示信息，包括提示、进度等，展示格式和动画方式也有好几种。下图只是以静态方式展示其效果，更多详情请点击链接查看。</p>\n<p><img src=\"https://github.com/wangzz/wangzz.github.com/blob/master/images/article1/styles.png?raw=true\" alt=\"JDStatusBarNotification\"></p>\n<ul>\n<li><a href=\"https://github.com/heroims/SphereView\" target=\"_blank\" rel=\"noopener\">SphereView</a></li>\n</ul>\n<p>一个球形3D标签，能够放大、缩小、拖动、点击、自动旋转。效果挺玄的，就是感觉有点卡，还有一定的优化空间。下图截了一个静态图片:</p>\n<p><img src=\"https://github.com/wangzz/wangzz.github.com/blob/master/images/article1/SphereView.png?raw=true\" alt=\"SphereView\"></p>\n<ul>\n<li><a href=\"https://github.com/romaonthego/RESideMenu\" target=\"_blank\" rel=\"noopener\">RESideMenu</a></li>\n</ul>\n<p>iOS7风格的侧滑菜单，支持左右双向侧滑：</p>\n<p><img src=\"/images/article1/RESideMenu.gif\" alt=\"RESideMenu\"></p>\n<ul>\n<li><a href=\"https://github.com/gcamp/GCDiscreetNotificationView\" target=\"_blank\" rel=\"noopener\">GCDiscreetNotificationView</a></li>\n</ul>\n<p>一种在view的顶部弹出并会自动消失的通知类view，是toast的一种变形。目前<a href=\"http://git.oschina.net/oschina/iphone-app\" target=\"_blank\" rel=\"noopener\">开源中国</a>的项目正在用该view。</p>\n<ul>\n<li><a href=\"https://github.com/cleexiang/CLProgressHUD\" target=\"_blank\" rel=\"noopener\">CLProgressHUD</a></li>\n</ul>\n<p>大麦网iOS客户端工程师开源的一个HUD view，</p>\n<img src=\"/images/article1/view_clprogresshud.gif\" width=\"320\" height=\"480\">\n\n<ul>\n<li><a href=\"https://github.com/romaonthego/REMenu\" target=\"_blank\" rel=\"noopener\">REMenu</a></li>\n</ul>\n<p>自定义的下拉菜单</p>\n<img src=\"/images/article1/view_remenu.gif\" width=\"320\" height=\"480\">\n\n\n<ul>\n<li><a href=\"https://github.com/5sw/SWParallaxScrollView\" target=\"_blank\" rel=\"noopener\">SWParallaxScrollView</a></li>\n</ul>\n<p>能够实现在多个图层上以不同速度滑动的自定义ScrollView，可用于做软件启动时的help界面：</p>\n<img src=\"/images/article1/view_parallax_scrollview.gif\" width=\"480\" height=\"320\">\n\n<ul>\n<li><a href=\"https://github.com/tjeerdintveen/Vurig-Calendar\" target=\"_blank\" rel=\"noopener\">Vurig-Calendar</a></li>\n</ul>\n<p>自定义的日历，界面很简洁，月份切换时动画效果也不错。</p>\n<img src=\"/images/article1/framework_Vurig-Calendar.png\" width=\"320\" height=\"480\">\n\n\n<ul>\n<li><a href=\"https://github.com/xiangwangfeng/M80AttributedLabel\" target=\"_blank\" rel=\"noopener\">M80AttributedLabel</a></li>\n</ul>\n<p>功能较齐全的attributed lable，支持attributed string和图片、链接、控件的混排。</p>\n<ul>\n<li><a href=\"https://github.com/Ciechan/BCMeshTransformView\" target=\"_blank\" rel=\"noopener\">BCMeshTransformView</a></li>\n</ul>\n<p>实现了相当炫的拉幕式的界面切换效果，其灵感来自CALayer的私有属性<code>meshTransform</code>以及和其对应的<code>CAMeshTransform</code>。</p>\n<img src=\"/images/article1/view_BCMeshTransformView.jpg\" width=\"320\" height=\"480\">\n\n\n<ul>\n<li><a href=\"https://github.com/cyndibaby905/TwitterCover\" target=\"_blank\" rel=\"noopener\">TwitterCover</a></li>\n</ul>\n<p>新浪微博开发者仿照Twitter的iOS客户端中的效果实现的向下拉动滚动视图，视图顶端的图片会随着下拉而变大，并且带有模糊的效果。</p>\n<img src=\"/images/article1/view_TwitterCover.gif\" width=\"320\" height=\"480\">\n\n\n<ul>\n<li><a href=\"https://github.com/tristanhimmelman/THContactPicker\" target=\"_blank\" rel=\"noopener\">THContactPicker</a></li>\n</ul>\n<p>模仿系统邮件应用实现的联系人选择界面。</p>\n<img src=\"/images/article1/view_THContactPicker.gif\" width=\"320\" height=\"480\">\n\n\n<ul>\n<li><a href=\"https://github.com/kronik/DKCircleButton\" target=\"_blank\" rel=\"noopener\">DKCircleButton</a></li>\n</ul>\n<p>一个扁平化的，能带声波效果的按钮。</p>\n<img src=\"/images/article1/view_DKCircleButton.gif\" width=\"320\" height=\"480\">\n\n<ul>\n<li><a href=\"https://github.com/honcheng/PaperFold-for-iOS\" target=\"_blank\" rel=\"noopener\">PaperFold-for-iOS</a></li>\n</ul>\n<p>新加坡开发者<code>honcheng</code>实现的折纸效果的界面切换，适合做电子书阅读类应用。</p>\n<img src=\"/images/article1/view_PaperFold-for-iOS.png\" width=\"320\" height=\"480\">\n\n<ul>\n<li><a href=\"https://github.com/honcheng/RTLabel\" target=\"_blank\" rel=\"noopener\">RTLabel</a></li>\n</ul>\n<p>新加坡开发者<code>honcheng</code>多媒体显示view，支持html语法，应用非常广泛。</p>\n<img src=\"/images/article1/view_RTLabel.png\" width=\"320\" height=\"480\">"},{"layout":"post","title":"Xcode设置项之Architectures和Valid Architectures","date":"2014-05-09T09:45:33.000Z","comments":1,"keywords":"Architectures, Valid Architectures, Xcode","_content":"\n\n## iPhone指令集\n\n本文所讲的内容都是围绕iPhone的CPU指令集(想了解ARM指令集的同学请点击[这里](http://en.wikipedia.org/wiki/ARM_architecture))，现在先说说不同型号的iPhone都使用的是什么指令集：\n\n```\nARMv8/ARM64 = iPhone 5s, iPad Air, Retina iPad Mini\nARMv7s = iPhone 5, iPhone 5c, iPad 4\nARMv7  = iPhone 3GS, iPhone 4, iPhone 4S, iPod 3G/4G/5G, iPad, iPad 2, iPad 3, iPad Mini  \nARMv6  = iPhone, iPhone 3G, iPod 1G/2G\n```\n\n## 设置你想支持的指令集\n\nXcode中关于生成二进制包指令集相关的设置项有以下三个：\n\n<!-- more -->\n\n#### Architectures\n\n官方文档说明：\n\n```\nSpace-separated list of identifiers. Specifies the architectures (ABIs, processor models) to which the binary is targeted. When this build setting specifies more than one architecture, the generated binary may contain object code for each of the specified architectures.\n```\n\n该编译选项指定了工程将被编译成支持哪些指令集，支持指令集是通过编译生成对应的二进制数据包实现的，如果支持的指令集数目有多个，就会编译出包含多个指令集代码的数据包，造成最终编译的包很大。\n\n\n#### Valid Architectures\n\n官方文档说明：\n\n```\nSpace-separated list of identifiers. Specifies the architectures for which the binary may be built. During the build, this list is intersected with the value of ARCHS build setting; the resulting list specifies the architectures the binary can run on. If the resulting architecture list is empty, the target generates no binary.\n```\n\n该编译项指定可能支持的指令集，**该列表和Architectures列表的交集，将是Xcode最终生成二进制包所支持的指令集**。\n\n比如，你的`Valid Architectures`设置的支持arm指令集版本有：`armv7/armv7s/arm64`，对应的`Architectures`设置的支持arm指令集版本有：`armv7s`，这时Xcode只会生成一个`armv7s`指令集的二进制包。\n\n\n#### Build Active Architecture Only\n\n官方文档说明：\n\n```\nBoolean value. Specifies whether the product includes only object code for the native architecture.\n```\n该编译项用于设置是否只编译当前使用的设备对应的arm指令集。\n\n当该选项设置成YES时，你连上一个`armv7`指令集的设备，就算你的`Valid Architectures`和`Architectures`都设置成`armv7/armv7s/arm64`，还是依然只会生成一个`armv7`指令集的二进制包。\n\n当然该选项起作用的前提是**你的Xcode必须成功连接了调试设备**。如果你没有任何活跃设备，即Xcode没有成功连接调试设备，就算该设置项设置成YES依然还会编译`Valid Architectures`和`Architectures`指定的二进制包。\n\n通常情况下，该编译选项在Debug模式都设成YES，Release模式都设成NO。\n\n\n## 说明\n\n* 指令集都是可以向下兼容的\n\n比如，你的设备是armv7s指令集，那么它也可以兼容运行比armv7s版本低的指令集：armv7、armv6\n\n* xcode对armv6指令集的支持\n\nXcode4.5起不再支持armv6，Xcode4.5的release notes中明确指出：\n\n```\nChanges\nGeneral: iOS\n\nThis version of Xcode does not generate armv6 binaries. 12282156\nThe minimum deployment target is iOS 4.3. 12282166\n```\n\n\n## 如何选择支持的指令集\n\n如果你的软件对安装包大小非常敏感，你可以减少安装包中的指令集数据包，而且这能达到立竿见影的效果。\n\n我们的项目之前支持的指令集是armv7/armv7s，后来改成只支持armv7后，比原来小了10MB左右。目前AppStore上的一些知名应用，比如`百度地图`、`腾讯地图`通过反汇编工具查看后，也都只支持armv7指令集。\n\n根据向下兼容原则，armv7指令集的应用是可以正常在支持armv7s/arm64指令集的机器上运行的。\n\n不过对于armv7s/arm64指令集设备来说，使用运行armv7应用是会有一定的性能损失，不过这种损失有多大缺乏权威统计数据，个人认为是不会影响用户体验的。\n\n\n\n\n## 参考文档\n\n* [ARM architecture](http://en.wikipedia.org/wiki/ARM_architecture)\n\n* [Xcode Build Setting Reference](https://developer.apple.com/library/ios/documentation/DeveloperTools/Reference/XcodeBuildSettingRef/0-Introduction/introduction.html#//apple_ref/doc/uid/TP40003931-CH1-SW1)\n\n* [xcode5 arm64](http://justsee.iteye.com/blog/2009954)\n\n* [Xcode 4.5 Release Notes](https://developer.apple.com/library/mac/releasenotes/DeveloperTools/RN-Xcode/xc4_release_notes/xc4_release_notes.html#//apple_ref/doc/uid/TP40001051-CH3-SW174)\n\n\n","source":"_posts/2014-05-08-xcodeshe-zhi-xiang-zhi-architectureshe-valid-architectures.markdown","raw":"---\nlayout: post\ntitle: \"Xcode设置项之Architectures和Valid Architectures\"\ndate: 2014-05-9 17:45:33 +0800\ncomments: true\ncategories: Xcode\ntags: [Architectures, Valid Architectures, Xcode]\nkeywords: Architectures, Valid Architectures, Xcode\n---\n\n\n## iPhone指令集\n\n本文所讲的内容都是围绕iPhone的CPU指令集(想了解ARM指令集的同学请点击[这里](http://en.wikipedia.org/wiki/ARM_architecture))，现在先说说不同型号的iPhone都使用的是什么指令集：\n\n```\nARMv8/ARM64 = iPhone 5s, iPad Air, Retina iPad Mini\nARMv7s = iPhone 5, iPhone 5c, iPad 4\nARMv7  = iPhone 3GS, iPhone 4, iPhone 4S, iPod 3G/4G/5G, iPad, iPad 2, iPad 3, iPad Mini  \nARMv6  = iPhone, iPhone 3G, iPod 1G/2G\n```\n\n## 设置你想支持的指令集\n\nXcode中关于生成二进制包指令集相关的设置项有以下三个：\n\n<!-- more -->\n\n#### Architectures\n\n官方文档说明：\n\n```\nSpace-separated list of identifiers. Specifies the architectures (ABIs, processor models) to which the binary is targeted. When this build setting specifies more than one architecture, the generated binary may contain object code for each of the specified architectures.\n```\n\n该编译选项指定了工程将被编译成支持哪些指令集，支持指令集是通过编译生成对应的二进制数据包实现的，如果支持的指令集数目有多个，就会编译出包含多个指令集代码的数据包，造成最终编译的包很大。\n\n\n#### Valid Architectures\n\n官方文档说明：\n\n```\nSpace-separated list of identifiers. Specifies the architectures for which the binary may be built. During the build, this list is intersected with the value of ARCHS build setting; the resulting list specifies the architectures the binary can run on. If the resulting architecture list is empty, the target generates no binary.\n```\n\n该编译项指定可能支持的指令集，**该列表和Architectures列表的交集，将是Xcode最终生成二进制包所支持的指令集**。\n\n比如，你的`Valid Architectures`设置的支持arm指令集版本有：`armv7/armv7s/arm64`，对应的`Architectures`设置的支持arm指令集版本有：`armv7s`，这时Xcode只会生成一个`armv7s`指令集的二进制包。\n\n\n#### Build Active Architecture Only\n\n官方文档说明：\n\n```\nBoolean value. Specifies whether the product includes only object code for the native architecture.\n```\n该编译项用于设置是否只编译当前使用的设备对应的arm指令集。\n\n当该选项设置成YES时，你连上一个`armv7`指令集的设备，就算你的`Valid Architectures`和`Architectures`都设置成`armv7/armv7s/arm64`，还是依然只会生成一个`armv7`指令集的二进制包。\n\n当然该选项起作用的前提是**你的Xcode必须成功连接了调试设备**。如果你没有任何活跃设备，即Xcode没有成功连接调试设备，就算该设置项设置成YES依然还会编译`Valid Architectures`和`Architectures`指定的二进制包。\n\n通常情况下，该编译选项在Debug模式都设成YES，Release模式都设成NO。\n\n\n## 说明\n\n* 指令集都是可以向下兼容的\n\n比如，你的设备是armv7s指令集，那么它也可以兼容运行比armv7s版本低的指令集：armv7、armv6\n\n* xcode对armv6指令集的支持\n\nXcode4.5起不再支持armv6，Xcode4.5的release notes中明确指出：\n\n```\nChanges\nGeneral: iOS\n\nThis version of Xcode does not generate armv6 binaries. 12282156\nThe minimum deployment target is iOS 4.3. 12282166\n```\n\n\n## 如何选择支持的指令集\n\n如果你的软件对安装包大小非常敏感，你可以减少安装包中的指令集数据包，而且这能达到立竿见影的效果。\n\n我们的项目之前支持的指令集是armv7/armv7s，后来改成只支持armv7后，比原来小了10MB左右。目前AppStore上的一些知名应用，比如`百度地图`、`腾讯地图`通过反汇编工具查看后，也都只支持armv7指令集。\n\n根据向下兼容原则，armv7指令集的应用是可以正常在支持armv7s/arm64指令集的机器上运行的。\n\n不过对于armv7s/arm64指令集设备来说，使用运行armv7应用是会有一定的性能损失，不过这种损失有多大缺乏权威统计数据，个人认为是不会影响用户体验的。\n\n\n\n\n## 参考文档\n\n* [ARM architecture](http://en.wikipedia.org/wiki/ARM_architecture)\n\n* [Xcode Build Setting Reference](https://developer.apple.com/library/ios/documentation/DeveloperTools/Reference/XcodeBuildSettingRef/0-Introduction/introduction.html#//apple_ref/doc/uid/TP40003931-CH1-SW1)\n\n* [xcode5 arm64](http://justsee.iteye.com/blog/2009954)\n\n* [Xcode 4.5 Release Notes](https://developer.apple.com/library/mac/releasenotes/DeveloperTools/RN-Xcode/xc4_release_notes/xc4_release_notes.html#//apple_ref/doc/uid/TP40001051-CH3-SW174)\n\n\n","slug":"2014-05-08-xcodeshe-zhi-xiang-zhi-architectureshe-valid-architectures","published":1,"updated":"2019-09-23T13:01:54.000Z","photos":[],"link":"","_id":"ck0zclic90005qhtfcest0rel","content":"<h2 id=\"iPhone指令集\"><a href=\"#iPhone指令集\" class=\"headerlink\" title=\"iPhone指令集\"></a>iPhone指令集</h2><p>本文所讲的内容都是围绕iPhone的CPU指令集(想了解ARM指令集的同学请点击<a href=\"http://en.wikipedia.org/wiki/ARM_architecture\" target=\"_blank\" rel=\"noopener\">这里</a>)，现在先说说不同型号的iPhone都使用的是什么指令集：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ARMv8/ARM64 = iPhone 5s, iPad Air, Retina iPad Mini</span><br><span class=\"line\">ARMv7s = iPhone 5, iPhone 5c, iPad 4</span><br><span class=\"line\">ARMv7  = iPhone 3GS, iPhone 4, iPhone 4S, iPod 3G/4G/5G, iPad, iPad 2, iPad 3, iPad Mini  </span><br><span class=\"line\">ARMv6  = iPhone, iPhone 3G, iPod 1G/2G</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置你想支持的指令集\"><a href=\"#设置你想支持的指令集\" class=\"headerlink\" title=\"设置你想支持的指令集\"></a>设置你想支持的指令集</h2><p>Xcode中关于生成二进制包指令集相关的设置项有以下三个：</p>\n<a id=\"more\"></a>\n\n<h4 id=\"Architectures\"><a href=\"#Architectures\" class=\"headerlink\" title=\"Architectures\"></a>Architectures</h4><p>官方文档说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Space-separated list of identifiers. Specifies the architectures (ABIs, processor models) to which the binary is targeted. When this build setting specifies more than one architecture, the generated binary may contain object code for each of the specified architectures.</span><br></pre></td></tr></table></figure>\n\n<p>该编译选项指定了工程将被编译成支持哪些指令集，支持指令集是通过编译生成对应的二进制数据包实现的，如果支持的指令集数目有多个，就会编译出包含多个指令集代码的数据包，造成最终编译的包很大。</p>\n<h4 id=\"Valid-Architectures\"><a href=\"#Valid-Architectures\" class=\"headerlink\" title=\"Valid Architectures\"></a>Valid Architectures</h4><p>官方文档说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Space-separated list of identifiers. Specifies the architectures for which the binary may be built. During the build, this list is intersected with the value of ARCHS build setting; the resulting list specifies the architectures the binary can run on. If the resulting architecture list is empty, the target generates no binary.</span><br></pre></td></tr></table></figure>\n\n<p>该编译项指定可能支持的指令集，<strong>该列表和Architectures列表的交集，将是Xcode最终生成二进制包所支持的指令集</strong>。</p>\n<p>比如，你的<code>Valid Architectures</code>设置的支持arm指令集版本有：<code>armv7/armv7s/arm64</code>，对应的<code>Architectures</code>设置的支持arm指令集版本有：<code>armv7s</code>，这时Xcode只会生成一个<code>armv7s</code>指令集的二进制包。</p>\n<h4 id=\"Build-Active-Architecture-Only\"><a href=\"#Build-Active-Architecture-Only\" class=\"headerlink\" title=\"Build Active Architecture Only\"></a>Build Active Architecture Only</h4><p>官方文档说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Boolean value. Specifies whether the product includes only object code for the native architecture.</span><br></pre></td></tr></table></figure>\n\n<p>该编译项用于设置是否只编译当前使用的设备对应的arm指令集。</p>\n<p>当该选项设置成YES时，你连上一个<code>armv7</code>指令集的设备，就算你的<code>Valid Architectures</code>和<code>Architectures</code>都设置成<code>armv7/armv7s/arm64</code>，还是依然只会生成一个<code>armv7</code>指令集的二进制包。</p>\n<p>当然该选项起作用的前提是<strong>你的Xcode必须成功连接了调试设备</strong>。如果你没有任何活跃设备，即Xcode没有成功连接调试设备，就算该设置项设置成YES依然还会编译<code>Valid Architectures</code>和<code>Architectures</code>指定的二进制包。</p>\n<p>通常情况下，该编译选项在Debug模式都设成YES，Release模式都设成NO。</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><ul>\n<li>指令集都是可以向下兼容的</li>\n</ul>\n<p>比如，你的设备是armv7s指令集，那么它也可以兼容运行比armv7s版本低的指令集：armv7、armv6</p>\n<ul>\n<li>xcode对armv6指令集的支持</li>\n</ul>\n<p>Xcode4.5起不再支持armv6，Xcode4.5的release notes中明确指出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Changes</span><br><span class=\"line\">General: iOS</span><br><span class=\"line\"></span><br><span class=\"line\">This version of Xcode does not generate armv6 binaries. 12282156</span><br><span class=\"line\">The minimum deployment target is iOS 4.3. 12282166</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何选择支持的指令集\"><a href=\"#如何选择支持的指令集\" class=\"headerlink\" title=\"如何选择支持的指令集\"></a>如何选择支持的指令集</h2><p>如果你的软件对安装包大小非常敏感，你可以减少安装包中的指令集数据包，而且这能达到立竿见影的效果。</p>\n<p>我们的项目之前支持的指令集是armv7/armv7s，后来改成只支持armv7后，比原来小了10MB左右。目前AppStore上的一些知名应用，比如<code>百度地图</code>、<code>腾讯地图</code>通过反汇编工具查看后，也都只支持armv7指令集。</p>\n<p>根据向下兼容原则，armv7指令集的应用是可以正常在支持armv7s/arm64指令集的机器上运行的。</p>\n<p>不过对于armv7s/arm64指令集设备来说，使用运行armv7应用是会有一定的性能损失，不过这种损失有多大缺乏权威统计数据，个人认为是不会影响用户体验的。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><p><a href=\"http://en.wikipedia.org/wiki/ARM_architecture\" target=\"_blank\" rel=\"noopener\">ARM architecture</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/ios/documentation/DeveloperTools/Reference/XcodeBuildSettingRef/0-Introduction/introduction.html#//apple_ref/doc/uid/TP40003931-CH1-SW1\" target=\"_blank\" rel=\"noopener\">Xcode Build Setting Reference</a></p>\n</li>\n<li><p><a href=\"http://justsee.iteye.com/blog/2009954\" target=\"_blank\" rel=\"noopener\">xcode5 arm64</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/mac/releasenotes/DeveloperTools/RN-Xcode/xc4_release_notes/xc4_release_notes.html#//apple_ref/doc/uid/TP40001051-CH3-SW174\" target=\"_blank\" rel=\"noopener\">Xcode 4.5 Release Notes</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"iPhone指令集\"><a href=\"#iPhone指令集\" class=\"headerlink\" title=\"iPhone指令集\"></a>iPhone指令集</h2><p>本文所讲的内容都是围绕iPhone的CPU指令集(想了解ARM指令集的同学请点击<a href=\"http://en.wikipedia.org/wiki/ARM_architecture\" target=\"_blank\" rel=\"noopener\">这里</a>)，现在先说说不同型号的iPhone都使用的是什么指令集：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ARMv8/ARM64 = iPhone 5s, iPad Air, Retina iPad Mini</span><br><span class=\"line\">ARMv7s = iPhone 5, iPhone 5c, iPad 4</span><br><span class=\"line\">ARMv7  = iPhone 3GS, iPhone 4, iPhone 4S, iPod 3G/4G/5G, iPad, iPad 2, iPad 3, iPad Mini  </span><br><span class=\"line\">ARMv6  = iPhone, iPhone 3G, iPod 1G/2G</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置你想支持的指令集\"><a href=\"#设置你想支持的指令集\" class=\"headerlink\" title=\"设置你想支持的指令集\"></a>设置你想支持的指令集</h2><p>Xcode中关于生成二进制包指令集相关的设置项有以下三个：</p>","more":"<h4 id=\"Architectures\"><a href=\"#Architectures\" class=\"headerlink\" title=\"Architectures\"></a>Architectures</h4><p>官方文档说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Space-separated list of identifiers. Specifies the architectures (ABIs, processor models) to which the binary is targeted. When this build setting specifies more than one architecture, the generated binary may contain object code for each of the specified architectures.</span><br></pre></td></tr></table></figure>\n\n<p>该编译选项指定了工程将被编译成支持哪些指令集，支持指令集是通过编译生成对应的二进制数据包实现的，如果支持的指令集数目有多个，就会编译出包含多个指令集代码的数据包，造成最终编译的包很大。</p>\n<h4 id=\"Valid-Architectures\"><a href=\"#Valid-Architectures\" class=\"headerlink\" title=\"Valid Architectures\"></a>Valid Architectures</h4><p>官方文档说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Space-separated list of identifiers. Specifies the architectures for which the binary may be built. During the build, this list is intersected with the value of ARCHS build setting; the resulting list specifies the architectures the binary can run on. If the resulting architecture list is empty, the target generates no binary.</span><br></pre></td></tr></table></figure>\n\n<p>该编译项指定可能支持的指令集，<strong>该列表和Architectures列表的交集，将是Xcode最终生成二进制包所支持的指令集</strong>。</p>\n<p>比如，你的<code>Valid Architectures</code>设置的支持arm指令集版本有：<code>armv7/armv7s/arm64</code>，对应的<code>Architectures</code>设置的支持arm指令集版本有：<code>armv7s</code>，这时Xcode只会生成一个<code>armv7s</code>指令集的二进制包。</p>\n<h4 id=\"Build-Active-Architecture-Only\"><a href=\"#Build-Active-Architecture-Only\" class=\"headerlink\" title=\"Build Active Architecture Only\"></a>Build Active Architecture Only</h4><p>官方文档说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Boolean value. Specifies whether the product includes only object code for the native architecture.</span><br></pre></td></tr></table></figure>\n\n<p>该编译项用于设置是否只编译当前使用的设备对应的arm指令集。</p>\n<p>当该选项设置成YES时，你连上一个<code>armv7</code>指令集的设备，就算你的<code>Valid Architectures</code>和<code>Architectures</code>都设置成<code>armv7/armv7s/arm64</code>，还是依然只会生成一个<code>armv7</code>指令集的二进制包。</p>\n<p>当然该选项起作用的前提是<strong>你的Xcode必须成功连接了调试设备</strong>。如果你没有任何活跃设备，即Xcode没有成功连接调试设备，就算该设置项设置成YES依然还会编译<code>Valid Architectures</code>和<code>Architectures</code>指定的二进制包。</p>\n<p>通常情况下，该编译选项在Debug模式都设成YES，Release模式都设成NO。</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><ul>\n<li>指令集都是可以向下兼容的</li>\n</ul>\n<p>比如，你的设备是armv7s指令集，那么它也可以兼容运行比armv7s版本低的指令集：armv7、armv6</p>\n<ul>\n<li>xcode对armv6指令集的支持</li>\n</ul>\n<p>Xcode4.5起不再支持armv6，Xcode4.5的release notes中明确指出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Changes</span><br><span class=\"line\">General: iOS</span><br><span class=\"line\"></span><br><span class=\"line\">This version of Xcode does not generate armv6 binaries. 12282156</span><br><span class=\"line\">The minimum deployment target is iOS 4.3. 12282166</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何选择支持的指令集\"><a href=\"#如何选择支持的指令集\" class=\"headerlink\" title=\"如何选择支持的指令集\"></a>如何选择支持的指令集</h2><p>如果你的软件对安装包大小非常敏感，你可以减少安装包中的指令集数据包，而且这能达到立竿见影的效果。</p>\n<p>我们的项目之前支持的指令集是armv7/armv7s，后来改成只支持armv7后，比原来小了10MB左右。目前AppStore上的一些知名应用，比如<code>百度地图</code>、<code>腾讯地图</code>通过反汇编工具查看后，也都只支持armv7指令集。</p>\n<p>根据向下兼容原则，armv7指令集的应用是可以正常在支持armv7s/arm64指令集的机器上运行的。</p>\n<p>不过对于armv7s/arm64指令集设备来说，使用运行armv7应用是会有一定的性能损失，不过这种损失有多大缺乏权威统计数据，个人认为是不会影响用户体验的。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><p><a href=\"http://en.wikipedia.org/wiki/ARM_architecture\" target=\"_blank\" rel=\"noopener\">ARM architecture</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/ios/documentation/DeveloperTools/Reference/XcodeBuildSettingRef/0-Introduction/introduction.html#//apple_ref/doc/uid/TP40003931-CH1-SW1\" target=\"_blank\" rel=\"noopener\">Xcode Build Setting Reference</a></p>\n</li>\n<li><p><a href=\"http://justsee.iteye.com/blog/2009954\" target=\"_blank\" rel=\"noopener\">xcode5 arm64</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/mac/releasenotes/DeveloperTools/RN-Xcode/xc4_release_notes/xc4_release_notes.html#//apple_ref/doc/uid/TP40001051-CH3-SW174\" target=\"_blank\" rel=\"noopener\">Xcode 4.5 Release Notes</a></p>\n</li>\n</ul>"},{"layout":"post","title":"开始写blog啦","date":"2014-03-31T12:19:44.000Z","comments":1,"_content":"\n这是我的第一篇日志，以后多多关注！\n","source":"_posts/2014-03-31-kai-shi-xie-blogla.markdown","raw":"---\nlayout: post\ntitle: \"开始写blog啦\"\ndate: 2014-03-31 20:19:44 +0800\ncomments: true\ncategories: \n---\n\n这是我的第一篇日志，以后多多关注！\n","slug":"2014-03-31-kai-shi-xie-blogla","published":1,"updated":"2017-02-06T10:25:50.000Z","photos":[],"link":"","_id":"ck0zclica0006qhtf087z9k63","content":"<p>这是我的第一篇日志，以后多多关注！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这是我的第一篇日志，以后多多关注！</p>\n"},{"layout":"post","title":"加密你的SQLite","date":"2014-05-19T02:19:42.000Z","comments":1,"keywords":"SQLite, sqlcipher","_content":"\n\n## 关于SQLite\n\nSQLite是一个`轻量的`、`跨平台的`、`开源的`数据库引擎，它的在`读写效率`、`消耗总量`、`延迟时间`和`整体简单性上`具有的优越性，使其成为移动平台数据库的最佳解决方案（如iOS、Android）。\n\n然而免费版的SQLite有一个致命缺点：不支持加密。这就导致存储在SQLite中的数据可以被任何人用任何文本编辑器查看到。比如国内某团购iOS客户端的DB缓存数据就一览无余：\n\n<img src=\"/images/article2/meituan_db_info.png\" width=\"700\" height=\"300\">\n\n<!-- more -->\n\n## SQLite加密方式\n\n对数据库加密的思路有两种：\n\n* 将内容加密后再写入数据库\n\n这种方式使用简单，在入库/出库只需要将字段做对应的加解密操作即可，一定程度上解决了将数据赤裸裸暴露的问题。\n\n不过这种方式并不是彻底的加密，因为数据库的表结构等信息还是能被查看到。另外写入数据库的内容加密后，搜索也是个问题。\n\n* 对数据库文件加密\n\n将整个数据库整个文件加密，这种方式基本上能解决数据库的信息安全问题。目前已有的SQLite加密基本都是通过这种方式实现的。\n\n## SQLite加密工具\n\n目前网上查询到iOS平台可用的SQLite加密工具有以下几种：\n\n* [SQLite Encryption Extension (SEE)](http://www.sqlite.org/index.html)\n\t\n事实上SQLite有加解密接口，只是免费版本没有实现而已。而`SQLite Encryption Extension (SEE)`是SQLite的加密版本，提供以下加密方式：\n\t\n```\nRC4\nAES-128 in OFB mode\nAES-128 in CCM mode\nAES-256 in OFB mode\n```\n\nSQLite Encryption Extension (SEE)版本是收费的。\n\n\t\n* [SQLiteEncrypt](http://www.sqlite-encrypt.com/index.htm)\n\n使用AES加密，其原理是实现了开源免费版SQLite没有实现的加密相关接口。\n\t\n`SQLiteEncrypt`是收费的。\n\n* [SQLiteCrypt](http://sqlite-crypt.com/index.htm)\n\n使用256-bit AES加密，其原理和[SQLiteEncrypt](http://www.sqlite-encrypt.com/index.htm)一样，都是实现了SQLite的加密相关接口。\n\t\n`SQLiteCrypt`也是收费的。\n\t\n* [SQLCipher](http://sqlcipher.net/)\n\t\n首先需要说明的是，`SQLCipher`是完全开源的，代码托管在[github](https://github.com/sqlcipher/sqlcipher)上。\n\t\n`SQLCipher`使用256-bit AES加密，由于其基于免费版的SQLite，主要的加密接口和SQLite是相同的，但也增加了一些自己的接口，详情见[这里](http://sqlcipher.net/sqlcipher-api/)。\n\t\n`SQLCipher`分为收费版本和免费版本，官网介绍的区别为：\n\t\n```\neasier to setup, saving many steps in project configuration\npre-built with a modern version of OpenSSL, avoiding another external dependency\nmuch faster for each build cycle because the library doesn't need to be built from scratch on each compile (build time can be up to 95% faster with the static libraries)\n```\n\n只是集成起来更简单，不用再添加`OpenSSL`依赖库，而且编译速度更快，从功能上来说没有任何区别。仅仅为了上述一点便利去花费几百美刀，对于我等苦逼RD来说太不值了，还好有一个免费版本。\n\n鉴于上述SQLite加密工具中，只有`SQLCiper`有免费版本，下面将将着重介绍下`SQLCiper`。\n\t\n## 在项目中使用SQLCipher\n\n在项目中集成免费版的`SQLCipher`略显复杂，还好官网以图文的方式介绍的非常详细，集成过程请参考[官网教程](http://sqlcipher.net/ios-tutorial)。\n\n* 使用SQLCipher初始化数据库\n\n下面这段代码来自官网，其作用是使用SQLCipher创建一个新的加密数据库，或者打开一个使用SQLCipher创建的数据库。\n\n```\nNSString *databasePath = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0]\n                              stringByAppendingPathComponent: @\"cipher.db\"];\n    sqlite3 *db;\n    if (sqlite3_open([databasePath UTF8String], &db) == SQLITE_OK) {\n        const char* key = [@\"BIGSecret\" UTF8String];\n        sqlite3_key(db, key, strlen(key));\n        int result = sqlite3_exec(db, (const char*) \"SELECT count(*) FROM sqlite_master;\", NULL, NULL, NULL);\n        if (result == SQLITE_OK) {\n            NSLog(@\"password is correct, or, database has been initialized\");\n        } else {\n            NSLog(@\"incorrect password! errCode:%d\",result);\n        }\n        \n        sqlite3_close(db);\n    }\n    \n```\n\n需要注意的是，在使用`sqlite3_open`打开或创建一个数据库，在对数据库做任何其它操作之前，都必须先使用`sqlite3_key`输入密码，否则会导致数据库操作失败，报出sqlite错误码`SQLITE_NOTADB`。\n\n在`sqlite3_open`打开数据库成功，而且用`sqlite3_key`输入密码以后，就可以正常的对数据库进行增、删、改、查等操作了。\n\n\n* 使用SQLCipher加密已存在的数据库\n\nSQLCipher提供了`sqlcipher_export()`函数，该函数可以方便的对一个普通数据库导入到SQLCipher加密加密的数据库中，操作方式如下：\n\n```\n$ ./sqlcipher plaintext.db \nsqlite> ATTACH DATABASE 'encrypted.db' AS encrypted KEY 'testkey'; \nsqlite> SELECT sqlcipher_export('encrypted'); \nsqlite> DETACH DATABASE encrypted; \n```\n\n\n* 解除使用SQLCipher加密的数据库密码\n\n`sqlcipher_export()`函数同样可以将SQLCipher加密后的数据库内容导入到未加密的数据库中，从而实现解密，操作方式如下：\n\n```\n$ ./sqlcipher encrypted.db \nsqlite> PRAGMA key = 'testkey'; \nsqlite> ATTACH DATABASE 'plaintext.db' AS plaintext KEY '';  -- empty key will disable encryption\nsqlite> SELECT sqlcipher_export('plaintext'); \nsqlite> DETACH DATABASE plaintext; \n```\n\n\n总体来说，SQLCipher是一个使用方便，灵活性高的数据库加密工具。\n\n另外，我写了个[SQLCipherDemo](http://download.csdn.net/detail/wzzvictory_tjsd/7379055)工程放到了[CSDN](http://download.csdn.net/detail/wzzvictory_tjsd/7379055)上，有需要的同学请自行下载。\n\n\n## 参考文档\n\n* [The SQLite Encryption Extension (SEE)](http://www.hwaci.com/sw/sqlite/see.html)\n\n* [SQLiteEncrypt](http://www.sqlite-encrypt.com/index.htm)\n\n* [SQLiteCrypt](http://sqlite-crypt.com/index.htm)\n\n* [SQLite with encryption/password protection](http://stackoverflow.com/questions/5669905/sqlite-with-encryption-password-protection)\n\n* [SQLCipher](http://sqlcipher.net/documentation/)\n\n\n\n","source":"_posts/2014-05-19-jia-mi-ni-de-sqlite.markdown","raw":"---\nlayout: post\ntitle: \"加密你的SQLite\"\ndate: 2014-05-19 10:19:42 +0800\ncomments: true\ncategories: Database\ntags: [SQLite, sqlcipher]\nkeywords: SQLite, sqlcipher\n---\n\n\n## 关于SQLite\n\nSQLite是一个`轻量的`、`跨平台的`、`开源的`数据库引擎，它的在`读写效率`、`消耗总量`、`延迟时间`和`整体简单性上`具有的优越性，使其成为移动平台数据库的最佳解决方案（如iOS、Android）。\n\n然而免费版的SQLite有一个致命缺点：不支持加密。这就导致存储在SQLite中的数据可以被任何人用任何文本编辑器查看到。比如国内某团购iOS客户端的DB缓存数据就一览无余：\n\n<img src=\"/images/article2/meituan_db_info.png\" width=\"700\" height=\"300\">\n\n<!-- more -->\n\n## SQLite加密方式\n\n对数据库加密的思路有两种：\n\n* 将内容加密后再写入数据库\n\n这种方式使用简单，在入库/出库只需要将字段做对应的加解密操作即可，一定程度上解决了将数据赤裸裸暴露的问题。\n\n不过这种方式并不是彻底的加密，因为数据库的表结构等信息还是能被查看到。另外写入数据库的内容加密后，搜索也是个问题。\n\n* 对数据库文件加密\n\n将整个数据库整个文件加密，这种方式基本上能解决数据库的信息安全问题。目前已有的SQLite加密基本都是通过这种方式实现的。\n\n## SQLite加密工具\n\n目前网上查询到iOS平台可用的SQLite加密工具有以下几种：\n\n* [SQLite Encryption Extension (SEE)](http://www.sqlite.org/index.html)\n\t\n事实上SQLite有加解密接口，只是免费版本没有实现而已。而`SQLite Encryption Extension (SEE)`是SQLite的加密版本，提供以下加密方式：\n\t\n```\nRC4\nAES-128 in OFB mode\nAES-128 in CCM mode\nAES-256 in OFB mode\n```\n\nSQLite Encryption Extension (SEE)版本是收费的。\n\n\t\n* [SQLiteEncrypt](http://www.sqlite-encrypt.com/index.htm)\n\n使用AES加密，其原理是实现了开源免费版SQLite没有实现的加密相关接口。\n\t\n`SQLiteEncrypt`是收费的。\n\n* [SQLiteCrypt](http://sqlite-crypt.com/index.htm)\n\n使用256-bit AES加密，其原理和[SQLiteEncrypt](http://www.sqlite-encrypt.com/index.htm)一样，都是实现了SQLite的加密相关接口。\n\t\n`SQLiteCrypt`也是收费的。\n\t\n* [SQLCipher](http://sqlcipher.net/)\n\t\n首先需要说明的是，`SQLCipher`是完全开源的，代码托管在[github](https://github.com/sqlcipher/sqlcipher)上。\n\t\n`SQLCipher`使用256-bit AES加密，由于其基于免费版的SQLite，主要的加密接口和SQLite是相同的，但也增加了一些自己的接口，详情见[这里](http://sqlcipher.net/sqlcipher-api/)。\n\t\n`SQLCipher`分为收费版本和免费版本，官网介绍的区别为：\n\t\n```\neasier to setup, saving many steps in project configuration\npre-built with a modern version of OpenSSL, avoiding another external dependency\nmuch faster for each build cycle because the library doesn't need to be built from scratch on each compile (build time can be up to 95% faster with the static libraries)\n```\n\n只是集成起来更简单，不用再添加`OpenSSL`依赖库，而且编译速度更快，从功能上来说没有任何区别。仅仅为了上述一点便利去花费几百美刀，对于我等苦逼RD来说太不值了，还好有一个免费版本。\n\n鉴于上述SQLite加密工具中，只有`SQLCiper`有免费版本，下面将将着重介绍下`SQLCiper`。\n\t\n## 在项目中使用SQLCipher\n\n在项目中集成免费版的`SQLCipher`略显复杂，还好官网以图文的方式介绍的非常详细，集成过程请参考[官网教程](http://sqlcipher.net/ios-tutorial)。\n\n* 使用SQLCipher初始化数据库\n\n下面这段代码来自官网，其作用是使用SQLCipher创建一个新的加密数据库，或者打开一个使用SQLCipher创建的数据库。\n\n```\nNSString *databasePath = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0]\n                              stringByAppendingPathComponent: @\"cipher.db\"];\n    sqlite3 *db;\n    if (sqlite3_open([databasePath UTF8String], &db) == SQLITE_OK) {\n        const char* key = [@\"BIGSecret\" UTF8String];\n        sqlite3_key(db, key, strlen(key));\n        int result = sqlite3_exec(db, (const char*) \"SELECT count(*) FROM sqlite_master;\", NULL, NULL, NULL);\n        if (result == SQLITE_OK) {\n            NSLog(@\"password is correct, or, database has been initialized\");\n        } else {\n            NSLog(@\"incorrect password! errCode:%d\",result);\n        }\n        \n        sqlite3_close(db);\n    }\n    \n```\n\n需要注意的是，在使用`sqlite3_open`打开或创建一个数据库，在对数据库做任何其它操作之前，都必须先使用`sqlite3_key`输入密码，否则会导致数据库操作失败，报出sqlite错误码`SQLITE_NOTADB`。\n\n在`sqlite3_open`打开数据库成功，而且用`sqlite3_key`输入密码以后，就可以正常的对数据库进行增、删、改、查等操作了。\n\n\n* 使用SQLCipher加密已存在的数据库\n\nSQLCipher提供了`sqlcipher_export()`函数，该函数可以方便的对一个普通数据库导入到SQLCipher加密加密的数据库中，操作方式如下：\n\n```\n$ ./sqlcipher plaintext.db \nsqlite> ATTACH DATABASE 'encrypted.db' AS encrypted KEY 'testkey'; \nsqlite> SELECT sqlcipher_export('encrypted'); \nsqlite> DETACH DATABASE encrypted; \n```\n\n\n* 解除使用SQLCipher加密的数据库密码\n\n`sqlcipher_export()`函数同样可以将SQLCipher加密后的数据库内容导入到未加密的数据库中，从而实现解密，操作方式如下：\n\n```\n$ ./sqlcipher encrypted.db \nsqlite> PRAGMA key = 'testkey'; \nsqlite> ATTACH DATABASE 'plaintext.db' AS plaintext KEY '';  -- empty key will disable encryption\nsqlite> SELECT sqlcipher_export('plaintext'); \nsqlite> DETACH DATABASE plaintext; \n```\n\n\n总体来说，SQLCipher是一个使用方便，灵活性高的数据库加密工具。\n\n另外，我写了个[SQLCipherDemo](http://download.csdn.net/detail/wzzvictory_tjsd/7379055)工程放到了[CSDN](http://download.csdn.net/detail/wzzvictory_tjsd/7379055)上，有需要的同学请自行下载。\n\n\n## 参考文档\n\n* [The SQLite Encryption Extension (SEE)](http://www.hwaci.com/sw/sqlite/see.html)\n\n* [SQLiteEncrypt](http://www.sqlite-encrypt.com/index.htm)\n\n* [SQLiteCrypt](http://sqlite-crypt.com/index.htm)\n\n* [SQLite with encryption/password protection](http://stackoverflow.com/questions/5669905/sqlite-with-encryption-password-protection)\n\n* [SQLCipher](http://sqlcipher.net/documentation/)\n\n\n\n","slug":"2014-05-19-jia-mi-ni-de-sqlite","published":1,"updated":"2019-09-23T13:01:22.000Z","photos":[],"link":"","_id":"ck0zclid60013qhtfo0cyq4sn","content":"<h2 id=\"关于SQLite\"><a href=\"#关于SQLite\" class=\"headerlink\" title=\"关于SQLite\"></a>关于SQLite</h2><p>SQLite是一个<code>轻量的</code>、<code>跨平台的</code>、<code>开源的</code>数据库引擎，它的在<code>读写效率</code>、<code>消耗总量</code>、<code>延迟时间</code>和<code>整体简单性上</code>具有的优越性，使其成为移动平台数据库的最佳解决方案（如iOS、Android）。</p>\n<p>然而免费版的SQLite有一个致命缺点：不支持加密。这就导致存储在SQLite中的数据可以被任何人用任何文本编辑器查看到。比如国内某团购iOS客户端的DB缓存数据就一览无余：</p>\n<img src=\"/images/article2/meituan_db_info.png\" width=\"700\" height=\"300\">\n\n<a id=\"more\"></a>\n\n<h2 id=\"SQLite加密方式\"><a href=\"#SQLite加密方式\" class=\"headerlink\" title=\"SQLite加密方式\"></a>SQLite加密方式</h2><p>对数据库加密的思路有两种：</p>\n<ul>\n<li>将内容加密后再写入数据库</li>\n</ul>\n<p>这种方式使用简单，在入库/出库只需要将字段做对应的加解密操作即可，一定程度上解决了将数据赤裸裸暴露的问题。</p>\n<p>不过这种方式并不是彻底的加密，因为数据库的表结构等信息还是能被查看到。另外写入数据库的内容加密后，搜索也是个问题。</p>\n<ul>\n<li>对数据库文件加密</li>\n</ul>\n<p>将整个数据库整个文件加密，这种方式基本上能解决数据库的信息安全问题。目前已有的SQLite加密基本都是通过这种方式实现的。</p>\n<h2 id=\"SQLite加密工具\"><a href=\"#SQLite加密工具\" class=\"headerlink\" title=\"SQLite加密工具\"></a>SQLite加密工具</h2><p>目前网上查询到iOS平台可用的SQLite加密工具有以下几种：</p>\n<ul>\n<li><a href=\"http://www.sqlite.org/index.html\" target=\"_blank\" rel=\"noopener\">SQLite Encryption Extension (SEE)</a></li>\n</ul>\n<p>事实上SQLite有加解密接口，只是免费版本没有实现而已。而<code>SQLite Encryption Extension (SEE)</code>是SQLite的加密版本，提供以下加密方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RC4</span><br><span class=\"line\">AES-128 in OFB mode</span><br><span class=\"line\">AES-128 in CCM mode</span><br><span class=\"line\">AES-256 in OFB mode</span><br></pre></td></tr></table></figure>\n\n<p>SQLite Encryption Extension (SEE)版本是收费的。</p>\n<ul>\n<li><a href=\"http://www.sqlite-encrypt.com/index.htm\" target=\"_blank\" rel=\"noopener\">SQLiteEncrypt</a></li>\n</ul>\n<p>使用AES加密，其原理是实现了开源免费版SQLite没有实现的加密相关接口。</p>\n<p><code>SQLiteEncrypt</code>是收费的。</p>\n<ul>\n<li><a href=\"http://sqlite-crypt.com/index.htm\" target=\"_blank\" rel=\"noopener\">SQLiteCrypt</a></li>\n</ul>\n<p>使用256-bit AES加密，其原理和<a href=\"http://www.sqlite-encrypt.com/index.htm\" target=\"_blank\" rel=\"noopener\">SQLiteEncrypt</a>一样，都是实现了SQLite的加密相关接口。</p>\n<p><code>SQLiteCrypt</code>也是收费的。</p>\n<ul>\n<li><a href=\"http://sqlcipher.net/\" target=\"_blank\" rel=\"noopener\">SQLCipher</a></li>\n</ul>\n<p>首先需要说明的是，<code>SQLCipher</code>是完全开源的，代码托管在<a href=\"https://github.com/sqlcipher/sqlcipher\" target=\"_blank\" rel=\"noopener\">github</a>上。</p>\n<p><code>SQLCipher</code>使用256-bit AES加密，由于其基于免费版的SQLite，主要的加密接口和SQLite是相同的，但也增加了一些自己的接口，详情见<a href=\"http://sqlcipher.net/sqlcipher-api/\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p><code>SQLCipher</code>分为收费版本和免费版本，官网介绍的区别为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">easier to setup, saving many steps in project configuration</span><br><span class=\"line\">pre-built with a modern version of OpenSSL, avoiding another external dependency</span><br><span class=\"line\">much faster for each build cycle because the library doesn&apos;t need to be built from scratch on each compile (build time can be up to 95% faster with the static libraries)</span><br></pre></td></tr></table></figure>\n\n<p>只是集成起来更简单，不用再添加<code>OpenSSL</code>依赖库，而且编译速度更快，从功能上来说没有任何区别。仅仅为了上述一点便利去花费几百美刀，对于我等苦逼RD来说太不值了，还好有一个免费版本。</p>\n<p>鉴于上述SQLite加密工具中，只有<code>SQLCiper</code>有免费版本，下面将将着重介绍下<code>SQLCiper</code>。</p>\n<h2 id=\"在项目中使用SQLCipher\"><a href=\"#在项目中使用SQLCipher\" class=\"headerlink\" title=\"在项目中使用SQLCipher\"></a>在项目中使用SQLCipher</h2><p>在项目中集成免费版的<code>SQLCipher</code>略显复杂，还好官网以图文的方式介绍的非常详细，集成过程请参考<a href=\"http://sqlcipher.net/ios-tutorial\" target=\"_blank\" rel=\"noopener\">官网教程</a>。</p>\n<ul>\n<li>使用SQLCipher初始化数据库</li>\n</ul>\n<p>下面这段代码来自官网，其作用是使用SQLCipher创建一个新的加密数据库，或者打开一个使用SQLCipher创建的数据库。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *databasePath = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0]</span><br><span class=\"line\">                              stringByAppendingPathComponent: @&quot;cipher.db&quot;];</span><br><span class=\"line\">    sqlite3 *db;</span><br><span class=\"line\">    if (sqlite3_open([databasePath UTF8String], &amp;db) == SQLITE_OK) &#123;</span><br><span class=\"line\">        const char* key = [@&quot;BIGSecret&quot; UTF8String];</span><br><span class=\"line\">        sqlite3_key(db, key, strlen(key));</span><br><span class=\"line\">        int result = sqlite3_exec(db, (const char*) &quot;SELECT count(*) FROM sqlite_master;&quot;, NULL, NULL, NULL);</span><br><span class=\"line\">        if (result == SQLITE_OK) &#123;</span><br><span class=\"line\">            NSLog(@&quot;password is correct, or, database has been initialized&quot;);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            NSLog(@&quot;incorrect password! errCode:%d&quot;,result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        sqlite3_close(db);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，在使用<code>sqlite3_open</code>打开或创建一个数据库，在对数据库做任何其它操作之前，都必须先使用<code>sqlite3_key</code>输入密码，否则会导致数据库操作失败，报出sqlite错误码<code>SQLITE_NOTADB</code>。</p>\n<p>在<code>sqlite3_open</code>打开数据库成功，而且用<code>sqlite3_key</code>输入密码以后，就可以正常的对数据库进行增、删、改、查等操作了。</p>\n<ul>\n<li>使用SQLCipher加密已存在的数据库</li>\n</ul>\n<p>SQLCipher提供了<code>sqlcipher_export()</code>函数，该函数可以方便的对一个普通数据库导入到SQLCipher加密加密的数据库中，操作方式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./sqlcipher plaintext.db </span><br><span class=\"line\">sqlite&gt; ATTACH DATABASE &apos;encrypted.db&apos; AS encrypted KEY &apos;testkey&apos;; </span><br><span class=\"line\">sqlite&gt; SELECT sqlcipher_export(&apos;encrypted&apos;); </span><br><span class=\"line\">sqlite&gt; DETACH DATABASE encrypted;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>解除使用SQLCipher加密的数据库密码</li>\n</ul>\n<p><code>sqlcipher_export()</code>函数同样可以将SQLCipher加密后的数据库内容导入到未加密的数据库中，从而实现解密，操作方式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./sqlcipher encrypted.db </span><br><span class=\"line\">sqlite&gt; PRAGMA key = &apos;testkey&apos;; </span><br><span class=\"line\">sqlite&gt; ATTACH DATABASE &apos;plaintext.db&apos; AS plaintext KEY &apos;&apos;;  -- empty key will disable encryption</span><br><span class=\"line\">sqlite&gt; SELECT sqlcipher_export(&apos;plaintext&apos;); </span><br><span class=\"line\">sqlite&gt; DETACH DATABASE plaintext;</span><br></pre></td></tr></table></figure>\n\n<p>总体来说，SQLCipher是一个使用方便，灵活性高的数据库加密工具。</p>\n<p>另外，我写了个<a href=\"http://download.csdn.net/detail/wzzvictory_tjsd/7379055\" target=\"_blank\" rel=\"noopener\">SQLCipherDemo</a>工程放到了<a href=\"http://download.csdn.net/detail/wzzvictory_tjsd/7379055\" target=\"_blank\" rel=\"noopener\">CSDN</a>上，有需要的同学请自行下载。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><p><a href=\"http://www.hwaci.com/sw/sqlite/see.html\" target=\"_blank\" rel=\"noopener\">The SQLite Encryption Extension (SEE)</a></p>\n</li>\n<li><p><a href=\"http://www.sqlite-encrypt.com/index.htm\" target=\"_blank\" rel=\"noopener\">SQLiteEncrypt</a></p>\n</li>\n<li><p><a href=\"http://sqlite-crypt.com/index.htm\" target=\"_blank\" rel=\"noopener\">SQLiteCrypt</a></p>\n</li>\n<li><p><a href=\"http://stackoverflow.com/questions/5669905/sqlite-with-encryption-password-protection\" target=\"_blank\" rel=\"noopener\">SQLite with encryption/password protection</a></p>\n</li>\n<li><p><a href=\"http://sqlcipher.net/documentation/\" target=\"_blank\" rel=\"noopener\">SQLCipher</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"关于SQLite\"><a href=\"#关于SQLite\" class=\"headerlink\" title=\"关于SQLite\"></a>关于SQLite</h2><p>SQLite是一个<code>轻量的</code>、<code>跨平台的</code>、<code>开源的</code>数据库引擎，它的在<code>读写效率</code>、<code>消耗总量</code>、<code>延迟时间</code>和<code>整体简单性上</code>具有的优越性，使其成为移动平台数据库的最佳解决方案（如iOS、Android）。</p>\n<p>然而免费版的SQLite有一个致命缺点：不支持加密。这就导致存储在SQLite中的数据可以被任何人用任何文本编辑器查看到。比如国内某团购iOS客户端的DB缓存数据就一览无余：</p>\n<img src=\"/images/article2/meituan_db_info.png\" width=\"700\" height=\"300\">","more":"<h2 id=\"SQLite加密方式\"><a href=\"#SQLite加密方式\" class=\"headerlink\" title=\"SQLite加密方式\"></a>SQLite加密方式</h2><p>对数据库加密的思路有两种：</p>\n<ul>\n<li>将内容加密后再写入数据库</li>\n</ul>\n<p>这种方式使用简单，在入库/出库只需要将字段做对应的加解密操作即可，一定程度上解决了将数据赤裸裸暴露的问题。</p>\n<p>不过这种方式并不是彻底的加密，因为数据库的表结构等信息还是能被查看到。另外写入数据库的内容加密后，搜索也是个问题。</p>\n<ul>\n<li>对数据库文件加密</li>\n</ul>\n<p>将整个数据库整个文件加密，这种方式基本上能解决数据库的信息安全问题。目前已有的SQLite加密基本都是通过这种方式实现的。</p>\n<h2 id=\"SQLite加密工具\"><a href=\"#SQLite加密工具\" class=\"headerlink\" title=\"SQLite加密工具\"></a>SQLite加密工具</h2><p>目前网上查询到iOS平台可用的SQLite加密工具有以下几种：</p>\n<ul>\n<li><a href=\"http://www.sqlite.org/index.html\" target=\"_blank\" rel=\"noopener\">SQLite Encryption Extension (SEE)</a></li>\n</ul>\n<p>事实上SQLite有加解密接口，只是免费版本没有实现而已。而<code>SQLite Encryption Extension (SEE)</code>是SQLite的加密版本，提供以下加密方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RC4</span><br><span class=\"line\">AES-128 in OFB mode</span><br><span class=\"line\">AES-128 in CCM mode</span><br><span class=\"line\">AES-256 in OFB mode</span><br></pre></td></tr></table></figure>\n\n<p>SQLite Encryption Extension (SEE)版本是收费的。</p>\n<ul>\n<li><a href=\"http://www.sqlite-encrypt.com/index.htm\" target=\"_blank\" rel=\"noopener\">SQLiteEncrypt</a></li>\n</ul>\n<p>使用AES加密，其原理是实现了开源免费版SQLite没有实现的加密相关接口。</p>\n<p><code>SQLiteEncrypt</code>是收费的。</p>\n<ul>\n<li><a href=\"http://sqlite-crypt.com/index.htm\" target=\"_blank\" rel=\"noopener\">SQLiteCrypt</a></li>\n</ul>\n<p>使用256-bit AES加密，其原理和<a href=\"http://www.sqlite-encrypt.com/index.htm\" target=\"_blank\" rel=\"noopener\">SQLiteEncrypt</a>一样，都是实现了SQLite的加密相关接口。</p>\n<p><code>SQLiteCrypt</code>也是收费的。</p>\n<ul>\n<li><a href=\"http://sqlcipher.net/\" target=\"_blank\" rel=\"noopener\">SQLCipher</a></li>\n</ul>\n<p>首先需要说明的是，<code>SQLCipher</code>是完全开源的，代码托管在<a href=\"https://github.com/sqlcipher/sqlcipher\" target=\"_blank\" rel=\"noopener\">github</a>上。</p>\n<p><code>SQLCipher</code>使用256-bit AES加密，由于其基于免费版的SQLite，主要的加密接口和SQLite是相同的，但也增加了一些自己的接口，详情见<a href=\"http://sqlcipher.net/sqlcipher-api/\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p><code>SQLCipher</code>分为收费版本和免费版本，官网介绍的区别为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">easier to setup, saving many steps in project configuration</span><br><span class=\"line\">pre-built with a modern version of OpenSSL, avoiding another external dependency</span><br><span class=\"line\">much faster for each build cycle because the library doesn&apos;t need to be built from scratch on each compile (build time can be up to 95% faster with the static libraries)</span><br></pre></td></tr></table></figure>\n\n<p>只是集成起来更简单，不用再添加<code>OpenSSL</code>依赖库，而且编译速度更快，从功能上来说没有任何区别。仅仅为了上述一点便利去花费几百美刀，对于我等苦逼RD来说太不值了，还好有一个免费版本。</p>\n<p>鉴于上述SQLite加密工具中，只有<code>SQLCiper</code>有免费版本，下面将将着重介绍下<code>SQLCiper</code>。</p>\n<h2 id=\"在项目中使用SQLCipher\"><a href=\"#在项目中使用SQLCipher\" class=\"headerlink\" title=\"在项目中使用SQLCipher\"></a>在项目中使用SQLCipher</h2><p>在项目中集成免费版的<code>SQLCipher</code>略显复杂，还好官网以图文的方式介绍的非常详细，集成过程请参考<a href=\"http://sqlcipher.net/ios-tutorial\" target=\"_blank\" rel=\"noopener\">官网教程</a>。</p>\n<ul>\n<li>使用SQLCipher初始化数据库</li>\n</ul>\n<p>下面这段代码来自官网，其作用是使用SQLCipher创建一个新的加密数据库，或者打开一个使用SQLCipher创建的数据库。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *databasePath = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0]</span><br><span class=\"line\">                              stringByAppendingPathComponent: @&quot;cipher.db&quot;];</span><br><span class=\"line\">    sqlite3 *db;</span><br><span class=\"line\">    if (sqlite3_open([databasePath UTF8String], &amp;db) == SQLITE_OK) &#123;</span><br><span class=\"line\">        const char* key = [@&quot;BIGSecret&quot; UTF8String];</span><br><span class=\"line\">        sqlite3_key(db, key, strlen(key));</span><br><span class=\"line\">        int result = sqlite3_exec(db, (const char*) &quot;SELECT count(*) FROM sqlite_master;&quot;, NULL, NULL, NULL);</span><br><span class=\"line\">        if (result == SQLITE_OK) &#123;</span><br><span class=\"line\">            NSLog(@&quot;password is correct, or, database has been initialized&quot;);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            NSLog(@&quot;incorrect password! errCode:%d&quot;,result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        sqlite3_close(db);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，在使用<code>sqlite3_open</code>打开或创建一个数据库，在对数据库做任何其它操作之前，都必须先使用<code>sqlite3_key</code>输入密码，否则会导致数据库操作失败，报出sqlite错误码<code>SQLITE_NOTADB</code>。</p>\n<p>在<code>sqlite3_open</code>打开数据库成功，而且用<code>sqlite3_key</code>输入密码以后，就可以正常的对数据库进行增、删、改、查等操作了。</p>\n<ul>\n<li>使用SQLCipher加密已存在的数据库</li>\n</ul>\n<p>SQLCipher提供了<code>sqlcipher_export()</code>函数，该函数可以方便的对一个普通数据库导入到SQLCipher加密加密的数据库中，操作方式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./sqlcipher plaintext.db </span><br><span class=\"line\">sqlite&gt; ATTACH DATABASE &apos;encrypted.db&apos; AS encrypted KEY &apos;testkey&apos;; </span><br><span class=\"line\">sqlite&gt; SELECT sqlcipher_export(&apos;encrypted&apos;); </span><br><span class=\"line\">sqlite&gt; DETACH DATABASE encrypted;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>解除使用SQLCipher加密的数据库密码</li>\n</ul>\n<p><code>sqlcipher_export()</code>函数同样可以将SQLCipher加密后的数据库内容导入到未加密的数据库中，从而实现解密，操作方式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./sqlcipher encrypted.db </span><br><span class=\"line\">sqlite&gt; PRAGMA key = &apos;testkey&apos;; </span><br><span class=\"line\">sqlite&gt; ATTACH DATABASE &apos;plaintext.db&apos; AS plaintext KEY &apos;&apos;;  -- empty key will disable encryption</span><br><span class=\"line\">sqlite&gt; SELECT sqlcipher_export(&apos;plaintext&apos;); </span><br><span class=\"line\">sqlite&gt; DETACH DATABASE plaintext;</span><br></pre></td></tr></table></figure>\n\n<p>总体来说，SQLCipher是一个使用方便，灵活性高的数据库加密工具。</p>\n<p>另外，我写了个<a href=\"http://download.csdn.net/detail/wzzvictory_tjsd/7379055\" target=\"_blank\" rel=\"noopener\">SQLCipherDemo</a>工程放到了<a href=\"http://download.csdn.net/detail/wzzvictory_tjsd/7379055\" target=\"_blank\" rel=\"noopener\">CSDN</a>上，有需要的同学请自行下载。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><p><a href=\"http://www.hwaci.com/sw/sqlite/see.html\" target=\"_blank\" rel=\"noopener\">The SQLite Encryption Extension (SEE)</a></p>\n</li>\n<li><p><a href=\"http://www.sqlite-encrypt.com/index.htm\" target=\"_blank\" rel=\"noopener\">SQLiteEncrypt</a></p>\n</li>\n<li><p><a href=\"http://sqlite-crypt.com/index.htm\" target=\"_blank\" rel=\"noopener\">SQLiteCrypt</a></p>\n</li>\n<li><p><a href=\"http://stackoverflow.com/questions/5669905/sqlite-with-encryption-password-protection\" target=\"_blank\" rel=\"noopener\">SQLite with encryption/password protection</a></p>\n</li>\n<li><p><a href=\"http://sqlcipher.net/documentation/\" target=\"_blank\" rel=\"noopener\">SQLCipher</a></p>\n</li>\n</ul>"},{"layout":"post","title":"iOS进程间通信之CFMessagePort","date":"2014-06-04T10:31:51.000Z","comments":1,"keywords":"iOS, 进程通信, CFMessagePort","_content":"\n\n\niOS系统是出了名的封闭，每个应用的活动范围被严格地限制在各自的沙盒中。尽管如此，iOS还是提供了若干进程间通信机制，CFMessagePort就是其中之一。\n\n从类名可以看出，CFMessagePort属于`Core Foundation`层的东西，其实现部分是开源的，代码在可以在苹果的[开源代码库](http://opensource.apple.com/source/CF/CF-855.14/CFMessagePort.c)中找到。\n\n\n## 使用方式\n\n\n#### 1、消息接收者\n\nCFMessagePort端口消息的接收者需要实现以下功能：\n\n###### 1.1 注册监听\n\n消息接收者需要通过以下方式注册消息监听：\n\n```objective-c\n-(void)startListenning\n{\n\tif (0 != mMsgPortListenner && CFMessagePortIsValid(mMsgPortListenner))\n\t{\n\t\tCFMessagePortInvalidate(mMsgPortListenner);\n\t}\n    mMsgPortListenner = CFMessagePortCreateLocal(kCFAllocatorDefault,CFSTR(LOCAL_MACH_PORT_NAME),onRecvMessageCallBack, NULL, NULL);\n    CFRunLoopSourceRef source = CFMessagePortCreateRunLoopSource(kCFAllocatorDefault, mMsgPortListenner, 0);\n    CFRunLoopAddSource(CFRunLoopGetCurrent(), source, kCFRunLoopCommonModes);\n    NSLog(@\"start listenning\");\n}\n```\n\n\n <!-- more -->\n \n \n\n其中`LOCAL_MACH_PORT_NAME`的定义为：\n\n```objective-c\n#define LOCAL_MACH_PORT_NAME    \"com.wangzz.demo\"\n```\n\n经过查看源码发现，CFMessagePort实际上是通过mach port实现的。Mach port是iOS系统提供的基于端口的输入源，可用于线程或进程间通讯。而Runloop支持的输入源类型中就包括基于端口的输入源，因此可以使用Runloop做为CFMessagePort端口源事件的监听者。\n\n上述代码有几点需要说明：\n\n* 通过CFMessagePortCreateLocal可以创建一个本地CFMessagePortRef对象\n\n* CFMessagePort对象是靠一个字符串来唯一标识的，这一点非常重要，在这里字符串是由宏`LOCAL_MACH_PORT_NAME`定义的；\n\n* 创建CFMessagePort对象的同时设置了端口源事件的回调函数onRecvMessageCallBack，用于处理端口源事件；\n\n* 将创建的对象作为输入源添加到Runloop中，从而实现对端口源事件的监听，当Runloop收到对应的端口源事件时，会调用上一步中指定的回调芳芳；\n\n\n###### 1.2 实现回调方法\n\n\n回调函数为CFMessagePortCallBack类型，其定义部分为：\n```objective-c\ntypedef CFDataRef (*CFMessagePortCallBack) (\n   CFMessagePortRef local,\n   SInt32 msgid,\n   CFDataRef data,\n   void *info\n);\n```\n各个参数的含义为：\n\n* CFMessagePortRef local\n \n\t当前接收消息的CFMessagePortRef对象。\n\n* SInt32 msgid\n\n\t这个字段非常有用，用于标识消息。如果通信双方进程约定号每个msgid对应的数据结构，即可实现较为复杂的通信。\n\n* CFDataRef data\n\n\t通信的真正数据部分。\n\n* void *info\n\t\n\t为使用CFMessagePortCreateLocal方法创建port端口时指定的CFMessagePortContext对象的info字段，通常为空。\n\n该回调方法可以返回一个CFDataRef类型的数据给port消息的发送者，以实现有效的双方通信，这一点也非常重要。\n\n我的回调函数onRecvMessageCallBack的实现：\n\n```objective-c\nCFDataRef onRecvMessageCallBack(CFMessagePortRef local,SInt32 msgid,CFDataRef cfData, void*info)\n{\n    NSLog(@\"onRecvMessageCallBack is called\");\n    NSString *strData = nil;\n    if (cfData)\n    {\n       \tconst UInt8  * recvedMsg = CFDataGetBytePtr(cfData);\n    \tstrData = [NSString stringWithCString:(char *)recvedMsg encoding:NSUTF8StringEncoding];\n        /**\n         \n         实现数据解析操作\n         \n         **/\n        \n        NSLog(@\"receive message:%@\",strData);\n    }\n    \n    //为了测试，生成返回数据\n    NSString *returnString = [NSString stringWithFormat:@\"i have receive:%@\",strData];\n    const char* cStr = [returnString UTF8String];\n\tNSUInteger ulen = [returnString lengthOfBytesUsingEncoding:NSUTF8StringEncoding];\n    CFDataRef sgReturn = CFDataCreate(NULL, (UInt8 *)cStr, ulen);\n    \n    return sgReturn;\n}\n```\n\n该方法实现的较为简单，解析约定的数据（测试代码中约定传送的是string）,为了测试，同时生成一个CFDataRef数据返回给port消息的发送者。\n\n\n###### 1.3 取消端口监听\n\n可以通过如下方式取消对port端口的监听：\n\n```objective-c\n- (void)endLisenning\n{\n    CFMessagePortInvalidate(mMsgPortListenner);\n    CFRelease(mMsgPortListenner);\n}\n```\nCFMessagePortInvalidate会停止port消息的发送和接收操作，而只有调用了CFRelease，CFMessagePortRef对象才真正的被释放掉。\n\n#### 2、消息发送者\n\n发送部分代码如下：\n\n```objective-c\n-(NSString *)sendMessageToDameonWith:(id)msgInfo msgID:(NSInteger)msgid\n{\n    // 生成Remote port\n    CFMessagePortRef bRemote = CFMessagePortCreateRemote(kCFAllocatorDefault, CFSTR(MACH_PORT_REMOTE));\n    if (nil == bRemote) {\n        NSLog(@\"bRemote create failed\");\n        return nil;\n    }\n    \n    // 构建发送数据（string）\n    NSString    *msg = [NSString stringWithFormat:@\"%@\",msgInfo];\n    NSLog(@\"send msg is :%@\",msg);\n    const char *message = [msg UTF8String];\n    CFDataRef data,recvData = nil;\n    data = CFDataCreate(NULL, (UInt8 *)message, strlen(message));\n    \n    // 执行发送操作\n    CFMessagePortSendRequest(bRemote, msgid, data, 0, 100 , kCFRunLoopDefaultMode, &recvData);\n    if (nil == recvData) {\n        NSLog(@\"recvData date is nil.\");\n        CFRelease(data);\n        CFMessagePortInvalidate(bRemote);\n        CFRelease(bRemote);\n        return nil;\n    }\n    \n    // 解析返回数据\n    const UInt8  * recvedMsg = CFDataGetBytePtr(recvData);\n    if (nil == recvedMsg) {\n        NSLog(@\"receive date err.\");\n        CFRelease(data);\n        CFMessagePortInvalidate(bRemote);\n        CFRelease(bRemote);\n        return nil;\n    }\n\n    NSString    *strMsg = [NSString stringWithCString:(char *)recvedMsg encoding:NSUTF8StringEncoding];\n    NSLog(@\"%@\",strMsg);\n    \n    CFRelease(data);\n    CFMessagePortInvalidate(bRemote);\n    CFRelease(bRemote);\n    CFRelease(recvData);\n    \n    return strMsg;\n}\n\n```\n\n其中`MACH_PORT_REMOTE`的定义为：\n\n```objective-c\n#define MACH_PORT_REMOTE    \"com.wangzz.demo\"\n```\n\n发送消息时要相对简单，首先通过CFMessagePortCreateRemote生成一个Remote的CFMessagePortRef，这里需要注意的是CFMessagePortCreateRemote时传入的字符串唯一标识`MACH_PORT_REMOTE`必须和消息接收者创建local的CFMessagePortRef时使用的字符串唯一标识是同一个！\n\n通过查看源码发现，CFMessagePortCreateRemote会根据`MACH_PORT_REMOTE`定义的字符串为唯一标识获取消息接收者通过CFMessagePortCreateLocal使用相同字符串创建的底层mach port端口，从而实现向消息接收者发送信息。\n\n如果消息接收者还没有创建或者通过CFMessagePortCreateLocal创建local端口失败时，想要通过CFMessagePortCreateRemote去创建remote端口肯定是失败的。\n\n## 说明\n\n* 很遗憾的是，在iOS7及以后系统中，CFMessagePort的通信机制不再可用。\n\n在使用CFMessagePortCreateLocal/CFMessagePortCreateRemote创建CFMessagePortRef对象时会失败，官方文档中是这么说的：\n\n```\nThis method is not available on iOS 7 and later—it will return NULL and log a sandbox violation in syslog. See Concurrency Programming Guide for possible replacement technologies.\n```\n\n* CFMessagePort只能用于本地进程通信。\n\n* CFMessagePort是基于mach port端口的通信方式，不但可以用于进程通信，也可以用于线程间通信，只是线程间通信有了GCD和Cocoa提供的原生方法，已经能很方便的实现了，没必要再使用CFMessagePort。\n\n* 进程通信使用场景\n\niOS系统多任务机制，使得进程间通信基本都只能用于越狱开发。常用的场景是前端有一个UI程序用于界面展示，后端有一个daemo精灵程序用于任务处理。\n\n## demo工程\n\n特地做了了个demo工程，以便更好地演示CFMessagePort的使用，可以到[CSDN下载](http://download.csdn.net/detail/wzzvictory_tjsd/7446745)。\n\n为了模拟进程间通信场景，我将消息接收进程CFMessagePortReceive做成了能够后台播放音乐的程序，以便其切到后台后能继续存活。\n\n由于CFMessagePort不再支持iOS7及以后系统，本demo实在iOS6系统上测试的。\n\ndemo使用方式：\n\n* CFMessagePortReceive启动后，点击Start Listenning创建CFMessagePort接口并开始监听port消息，然后将CFMessagePortReceive切到后台；\n\n* 启动CFMessagePortSend程序，在输入框中写入内容，点击发送按钮即可和CFMessagePortReceive通信。\n\n* MessagePort通信过程中会有日志输出，可以使用以下方式查看日志：\n\n\t1.真机\n\t\n\t选择：Xcode->Window->Organizer->Devices，然后选中窗口左侧当前设备的Console窗口查看。\n\t\n\t2.模拟器\n\t\n\t选择：模拟器->调试->打开系统日志，或者直接使用快捷键`⌘/`直接打开系统控制台查看日志。\n\n\n## 参考文档\n\n* [CF-855.14](http://opensource.apple.com/source/CF/CF-855.14/)\n\n* [Threading Programming Guide](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW1)\n\n* [CFMessagePort Reference](https://developer.apple.com/library/mac/documentation/corefoundation/Reference/CFMessagePortRef/Reference/reference.html#//apple_ref/doc/uid/20001437-CH203-DontLinkElementID_8)\n","source":"_posts/2014-06-04-iosjin-cheng-jian-tong-xin-zhi-cfmessageport.markdown","raw":"---\nlayout: post\ntitle: \"iOS进程间通信之CFMessagePort\"\ndate: 2014-06-04 18:31:51 +0800\ncomments: true\ncategories: iOS\ntags: [iOS, 进程通信, CFMessagePort]\nkeywords: iOS, 进程通信, CFMessagePort\n---\n\n\n\niOS系统是出了名的封闭，每个应用的活动范围被严格地限制在各自的沙盒中。尽管如此，iOS还是提供了若干进程间通信机制，CFMessagePort就是其中之一。\n\n从类名可以看出，CFMessagePort属于`Core Foundation`层的东西，其实现部分是开源的，代码在可以在苹果的[开源代码库](http://opensource.apple.com/source/CF/CF-855.14/CFMessagePort.c)中找到。\n\n\n## 使用方式\n\n\n#### 1、消息接收者\n\nCFMessagePort端口消息的接收者需要实现以下功能：\n\n###### 1.1 注册监听\n\n消息接收者需要通过以下方式注册消息监听：\n\n```objective-c\n-(void)startListenning\n{\n\tif (0 != mMsgPortListenner && CFMessagePortIsValid(mMsgPortListenner))\n\t{\n\t\tCFMessagePortInvalidate(mMsgPortListenner);\n\t}\n    mMsgPortListenner = CFMessagePortCreateLocal(kCFAllocatorDefault,CFSTR(LOCAL_MACH_PORT_NAME),onRecvMessageCallBack, NULL, NULL);\n    CFRunLoopSourceRef source = CFMessagePortCreateRunLoopSource(kCFAllocatorDefault, mMsgPortListenner, 0);\n    CFRunLoopAddSource(CFRunLoopGetCurrent(), source, kCFRunLoopCommonModes);\n    NSLog(@\"start listenning\");\n}\n```\n\n\n <!-- more -->\n \n \n\n其中`LOCAL_MACH_PORT_NAME`的定义为：\n\n```objective-c\n#define LOCAL_MACH_PORT_NAME    \"com.wangzz.demo\"\n```\n\n经过查看源码发现，CFMessagePort实际上是通过mach port实现的。Mach port是iOS系统提供的基于端口的输入源，可用于线程或进程间通讯。而Runloop支持的输入源类型中就包括基于端口的输入源，因此可以使用Runloop做为CFMessagePort端口源事件的监听者。\n\n上述代码有几点需要说明：\n\n* 通过CFMessagePortCreateLocal可以创建一个本地CFMessagePortRef对象\n\n* CFMessagePort对象是靠一个字符串来唯一标识的，这一点非常重要，在这里字符串是由宏`LOCAL_MACH_PORT_NAME`定义的；\n\n* 创建CFMessagePort对象的同时设置了端口源事件的回调函数onRecvMessageCallBack，用于处理端口源事件；\n\n* 将创建的对象作为输入源添加到Runloop中，从而实现对端口源事件的监听，当Runloop收到对应的端口源事件时，会调用上一步中指定的回调芳芳；\n\n\n###### 1.2 实现回调方法\n\n\n回调函数为CFMessagePortCallBack类型，其定义部分为：\n```objective-c\ntypedef CFDataRef (*CFMessagePortCallBack) (\n   CFMessagePortRef local,\n   SInt32 msgid,\n   CFDataRef data,\n   void *info\n);\n```\n各个参数的含义为：\n\n* CFMessagePortRef local\n \n\t当前接收消息的CFMessagePortRef对象。\n\n* SInt32 msgid\n\n\t这个字段非常有用，用于标识消息。如果通信双方进程约定号每个msgid对应的数据结构，即可实现较为复杂的通信。\n\n* CFDataRef data\n\n\t通信的真正数据部分。\n\n* void *info\n\t\n\t为使用CFMessagePortCreateLocal方法创建port端口时指定的CFMessagePortContext对象的info字段，通常为空。\n\n该回调方法可以返回一个CFDataRef类型的数据给port消息的发送者，以实现有效的双方通信，这一点也非常重要。\n\n我的回调函数onRecvMessageCallBack的实现：\n\n```objective-c\nCFDataRef onRecvMessageCallBack(CFMessagePortRef local,SInt32 msgid,CFDataRef cfData, void*info)\n{\n    NSLog(@\"onRecvMessageCallBack is called\");\n    NSString *strData = nil;\n    if (cfData)\n    {\n       \tconst UInt8  * recvedMsg = CFDataGetBytePtr(cfData);\n    \tstrData = [NSString stringWithCString:(char *)recvedMsg encoding:NSUTF8StringEncoding];\n        /**\n         \n         实现数据解析操作\n         \n         **/\n        \n        NSLog(@\"receive message:%@\",strData);\n    }\n    \n    //为了测试，生成返回数据\n    NSString *returnString = [NSString stringWithFormat:@\"i have receive:%@\",strData];\n    const char* cStr = [returnString UTF8String];\n\tNSUInteger ulen = [returnString lengthOfBytesUsingEncoding:NSUTF8StringEncoding];\n    CFDataRef sgReturn = CFDataCreate(NULL, (UInt8 *)cStr, ulen);\n    \n    return sgReturn;\n}\n```\n\n该方法实现的较为简单，解析约定的数据（测试代码中约定传送的是string）,为了测试，同时生成一个CFDataRef数据返回给port消息的发送者。\n\n\n###### 1.3 取消端口监听\n\n可以通过如下方式取消对port端口的监听：\n\n```objective-c\n- (void)endLisenning\n{\n    CFMessagePortInvalidate(mMsgPortListenner);\n    CFRelease(mMsgPortListenner);\n}\n```\nCFMessagePortInvalidate会停止port消息的发送和接收操作，而只有调用了CFRelease，CFMessagePortRef对象才真正的被释放掉。\n\n#### 2、消息发送者\n\n发送部分代码如下：\n\n```objective-c\n-(NSString *)sendMessageToDameonWith:(id)msgInfo msgID:(NSInteger)msgid\n{\n    // 生成Remote port\n    CFMessagePortRef bRemote = CFMessagePortCreateRemote(kCFAllocatorDefault, CFSTR(MACH_PORT_REMOTE));\n    if (nil == bRemote) {\n        NSLog(@\"bRemote create failed\");\n        return nil;\n    }\n    \n    // 构建发送数据（string）\n    NSString    *msg = [NSString stringWithFormat:@\"%@\",msgInfo];\n    NSLog(@\"send msg is :%@\",msg);\n    const char *message = [msg UTF8String];\n    CFDataRef data,recvData = nil;\n    data = CFDataCreate(NULL, (UInt8 *)message, strlen(message));\n    \n    // 执行发送操作\n    CFMessagePortSendRequest(bRemote, msgid, data, 0, 100 , kCFRunLoopDefaultMode, &recvData);\n    if (nil == recvData) {\n        NSLog(@\"recvData date is nil.\");\n        CFRelease(data);\n        CFMessagePortInvalidate(bRemote);\n        CFRelease(bRemote);\n        return nil;\n    }\n    \n    // 解析返回数据\n    const UInt8  * recvedMsg = CFDataGetBytePtr(recvData);\n    if (nil == recvedMsg) {\n        NSLog(@\"receive date err.\");\n        CFRelease(data);\n        CFMessagePortInvalidate(bRemote);\n        CFRelease(bRemote);\n        return nil;\n    }\n\n    NSString    *strMsg = [NSString stringWithCString:(char *)recvedMsg encoding:NSUTF8StringEncoding];\n    NSLog(@\"%@\",strMsg);\n    \n    CFRelease(data);\n    CFMessagePortInvalidate(bRemote);\n    CFRelease(bRemote);\n    CFRelease(recvData);\n    \n    return strMsg;\n}\n\n```\n\n其中`MACH_PORT_REMOTE`的定义为：\n\n```objective-c\n#define MACH_PORT_REMOTE    \"com.wangzz.demo\"\n```\n\n发送消息时要相对简单，首先通过CFMessagePortCreateRemote生成一个Remote的CFMessagePortRef，这里需要注意的是CFMessagePortCreateRemote时传入的字符串唯一标识`MACH_PORT_REMOTE`必须和消息接收者创建local的CFMessagePortRef时使用的字符串唯一标识是同一个！\n\n通过查看源码发现，CFMessagePortCreateRemote会根据`MACH_PORT_REMOTE`定义的字符串为唯一标识获取消息接收者通过CFMessagePortCreateLocal使用相同字符串创建的底层mach port端口，从而实现向消息接收者发送信息。\n\n如果消息接收者还没有创建或者通过CFMessagePortCreateLocal创建local端口失败时，想要通过CFMessagePortCreateRemote去创建remote端口肯定是失败的。\n\n## 说明\n\n* 很遗憾的是，在iOS7及以后系统中，CFMessagePort的通信机制不再可用。\n\n在使用CFMessagePortCreateLocal/CFMessagePortCreateRemote创建CFMessagePortRef对象时会失败，官方文档中是这么说的：\n\n```\nThis method is not available on iOS 7 and later—it will return NULL and log a sandbox violation in syslog. See Concurrency Programming Guide for possible replacement technologies.\n```\n\n* CFMessagePort只能用于本地进程通信。\n\n* CFMessagePort是基于mach port端口的通信方式，不但可以用于进程通信，也可以用于线程间通信，只是线程间通信有了GCD和Cocoa提供的原生方法，已经能很方便的实现了，没必要再使用CFMessagePort。\n\n* 进程通信使用场景\n\niOS系统多任务机制，使得进程间通信基本都只能用于越狱开发。常用的场景是前端有一个UI程序用于界面展示，后端有一个daemo精灵程序用于任务处理。\n\n## demo工程\n\n特地做了了个demo工程，以便更好地演示CFMessagePort的使用，可以到[CSDN下载](http://download.csdn.net/detail/wzzvictory_tjsd/7446745)。\n\n为了模拟进程间通信场景，我将消息接收进程CFMessagePortReceive做成了能够后台播放音乐的程序，以便其切到后台后能继续存活。\n\n由于CFMessagePort不再支持iOS7及以后系统，本demo实在iOS6系统上测试的。\n\ndemo使用方式：\n\n* CFMessagePortReceive启动后，点击Start Listenning创建CFMessagePort接口并开始监听port消息，然后将CFMessagePortReceive切到后台；\n\n* 启动CFMessagePortSend程序，在输入框中写入内容，点击发送按钮即可和CFMessagePortReceive通信。\n\n* MessagePort通信过程中会有日志输出，可以使用以下方式查看日志：\n\n\t1.真机\n\t\n\t选择：Xcode->Window->Organizer->Devices，然后选中窗口左侧当前设备的Console窗口查看。\n\t\n\t2.模拟器\n\t\n\t选择：模拟器->调试->打开系统日志，或者直接使用快捷键`⌘/`直接打开系统控制台查看日志。\n\n\n## 参考文档\n\n* [CF-855.14](http://opensource.apple.com/source/CF/CF-855.14/)\n\n* [Threading Programming Guide](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW1)\n\n* [CFMessagePort Reference](https://developer.apple.com/library/mac/documentation/corefoundation/Reference/CFMessagePortRef/Reference/reference.html#//apple_ref/doc/uid/20001437-CH203-DontLinkElementID_8)\n","slug":"2014-06-04-iosjin-cheng-jian-tong-xin-zhi-cfmessageport","published":1,"updated":"2019-09-23T12:59:39.000Z","photos":[],"link":"","_id":"ck0zclid70014qhtfz65z4w6g","content":"<p>iOS系统是出了名的封闭，每个应用的活动范围被严格地限制在各自的沙盒中。尽管如此，iOS还是提供了若干进程间通信机制，CFMessagePort就是其中之一。</p>\n<p>从类名可以看出，CFMessagePort属于<code>Core Foundation</code>层的东西，其实现部分是开源的，代码在可以在苹果的<a href=\"http://opensource.apple.com/source/CF/CF-855.14/CFMessagePort.c\" target=\"_blank\" rel=\"noopener\">开源代码库</a>中找到。</p>\n<h2 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h2><h4 id=\"1、消息接收者\"><a href=\"#1、消息接收者\" class=\"headerlink\" title=\"1、消息接收者\"></a>1、消息接收者</h4><p>CFMessagePort端口消息的接收者需要实现以下功能：</p>\n<h6 id=\"1-1-注册监听\"><a href=\"#1-1-注册监听\" class=\"headerlink\" title=\"1.1 注册监听\"></a>1.1 注册监听</h6><p>消息接收者需要通过以下方式注册消息监听：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(void)startListenning</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tif (0 != mMsgPortListenner &amp;&amp; CFMessagePortIsValid(mMsgPortListenner))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tCFMessagePortInvalidate(mMsgPortListenner);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    mMsgPortListenner = CFMessagePortCreateLocal(kCFAllocatorDefault,CFSTR(LOCAL_MACH_PORT_NAME),onRecvMessageCallBack, NULL, NULL);</span><br><span class=\"line\">    CFRunLoopSourceRef source = CFMessagePortCreateRunLoopSource(kCFAllocatorDefault, mMsgPortListenner, 0);</span><br><span class=\"line\">    CFRunLoopAddSource(CFRunLoopGetCurrent(), source, kCFRunLoopCommonModes);</span><br><span class=\"line\">    NSLog(@&quot;start listenning&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n <a id=\"more\"></a>\n\n\n\n<p>其中<code>LOCAL_MACH_PORT_NAME</code>的定义为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define LOCAL_MACH_PORT_NAME    &quot;com.wangzz.demo&quot;</span><br></pre></td></tr></table></figure>\n\n<p>经过查看源码发现，CFMessagePort实际上是通过mach port实现的。Mach port是iOS系统提供的基于端口的输入源，可用于线程或进程间通讯。而Runloop支持的输入源类型中就包括基于端口的输入源，因此可以使用Runloop做为CFMessagePort端口源事件的监听者。</p>\n<p>上述代码有几点需要说明：</p>\n<ul>\n<li><p>通过CFMessagePortCreateLocal可以创建一个本地CFMessagePortRef对象</p>\n</li>\n<li><p>CFMessagePort对象是靠一个字符串来唯一标识的，这一点非常重要，在这里字符串是由宏<code>LOCAL_MACH_PORT_NAME</code>定义的；</p>\n</li>\n<li><p>创建CFMessagePort对象的同时设置了端口源事件的回调函数onRecvMessageCallBack，用于处理端口源事件；</p>\n</li>\n<li><p>将创建的对象作为输入源添加到Runloop中，从而实现对端口源事件的监听，当Runloop收到对应的端口源事件时，会调用上一步中指定的回调芳芳；</p>\n</li>\n</ul>\n<h6 id=\"1-2-实现回调方法\"><a href=\"#1-2-实现回调方法\" class=\"headerlink\" title=\"1.2 实现回调方法\"></a>1.2 实现回调方法</h6><p>回调函数为CFMessagePortCallBack类型，其定义部分为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef CFDataRef (*CFMessagePortCallBack) (</span><br><span class=\"line\">   CFMessagePortRef local,</span><br><span class=\"line\">   SInt32 msgid,</span><br><span class=\"line\">   CFDataRef data,</span><br><span class=\"line\">   void *info</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>各个参数的含义为：</p>\n<ul>\n<li><p>CFMessagePortRef local</p>\n<p>  当前接收消息的CFMessagePortRef对象。</p>\n</li>\n<li><p>SInt32 msgid</p>\n<p>  这个字段非常有用，用于标识消息。如果通信双方进程约定号每个msgid对应的数据结构，即可实现较为复杂的通信。</p>\n</li>\n<li><p>CFDataRef data</p>\n<p>  通信的真正数据部分。</p>\n</li>\n<li><p>void *info</p>\n<p>  为使用CFMessagePortCreateLocal方法创建port端口时指定的CFMessagePortContext对象的info字段，通常为空。</p>\n</li>\n</ul>\n<p>该回调方法可以返回一个CFDataRef类型的数据给port消息的发送者，以实现有效的双方通信，这一点也非常重要。</p>\n<p>我的回调函数onRecvMessageCallBack的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CFDataRef onRecvMessageCallBack(CFMessagePortRef local,SInt32 msgid,CFDataRef cfData, void*info)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSLog(@&quot;onRecvMessageCallBack is called&quot;);</span><br><span class=\"line\">    NSString *strData = nil;</span><br><span class=\"line\">    if (cfData)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       \tconst UInt8  * recvedMsg = CFDataGetBytePtr(cfData);</span><br><span class=\"line\">    \tstrData = [NSString stringWithCString:(char *)recvedMsg encoding:NSUTF8StringEncoding];</span><br><span class=\"line\">        /**</span><br><span class=\"line\">         </span><br><span class=\"line\">         实现数据解析操作</span><br><span class=\"line\">         </span><br><span class=\"line\">         **/</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSLog(@&quot;receive message:%@&quot;,strData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //为了测试，生成返回数据</span><br><span class=\"line\">    NSString *returnString = [NSString stringWithFormat:@&quot;i have receive:%@&quot;,strData];</span><br><span class=\"line\">    const char* cStr = [returnString UTF8String];</span><br><span class=\"line\">\tNSUInteger ulen = [returnString lengthOfBytesUsingEncoding:NSUTF8StringEncoding];</span><br><span class=\"line\">    CFDataRef sgReturn = CFDataCreate(NULL, (UInt8 *)cStr, ulen);</span><br><span class=\"line\">    </span><br><span class=\"line\">    return sgReturn;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法实现的较为简单，解析约定的数据（测试代码中约定传送的是string）,为了测试，同时生成一个CFDataRef数据返回给port消息的发送者。</p>\n<h6 id=\"1-3-取消端口监听\"><a href=\"#1-3-取消端口监听\" class=\"headerlink\" title=\"1.3 取消端口监听\"></a>1.3 取消端口监听</h6><p>可以通过如下方式取消对port端口的监听：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)endLisenning</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    CFMessagePortInvalidate(mMsgPortListenner);</span><br><span class=\"line\">    CFRelease(mMsgPortListenner);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>CFMessagePortInvalidate会停止port消息的发送和接收操作，而只有调用了CFRelease，CFMessagePortRef对象才真正的被释放掉。</p>\n<h4 id=\"2、消息发送者\"><a href=\"#2、消息发送者\" class=\"headerlink\" title=\"2、消息发送者\"></a>2、消息发送者</h4><p>发送部分代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(NSString *)sendMessageToDameonWith:(id)msgInfo msgID:(NSInteger)msgid</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // 生成Remote port</span><br><span class=\"line\">    CFMessagePortRef bRemote = CFMessagePortCreateRemote(kCFAllocatorDefault, CFSTR(MACH_PORT_REMOTE));</span><br><span class=\"line\">    if (nil == bRemote) &#123;</span><br><span class=\"line\">        NSLog(@&quot;bRemote create failed&quot;);</span><br><span class=\"line\">        return nil;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 构建发送数据（string）</span><br><span class=\"line\">    NSString    *msg = [NSString stringWithFormat:@&quot;%@&quot;,msgInfo];</span><br><span class=\"line\">    NSLog(@&quot;send msg is :%@&quot;,msg);</span><br><span class=\"line\">    const char *message = [msg UTF8String];</span><br><span class=\"line\">    CFDataRef data,recvData = nil;</span><br><span class=\"line\">    data = CFDataCreate(NULL, (UInt8 *)message, strlen(message));</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 执行发送操作</span><br><span class=\"line\">    CFMessagePortSendRequest(bRemote, msgid, data, 0, 100 , kCFRunLoopDefaultMode, &amp;recvData);</span><br><span class=\"line\">    if (nil == recvData) &#123;</span><br><span class=\"line\">        NSLog(@&quot;recvData date is nil.&quot;);</span><br><span class=\"line\">        CFRelease(data);</span><br><span class=\"line\">        CFMessagePortInvalidate(bRemote);</span><br><span class=\"line\">        CFRelease(bRemote);</span><br><span class=\"line\">        return nil;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 解析返回数据</span><br><span class=\"line\">    const UInt8  * recvedMsg = CFDataGetBytePtr(recvData);</span><br><span class=\"line\">    if (nil == recvedMsg) &#123;</span><br><span class=\"line\">        NSLog(@&quot;receive date err.&quot;);</span><br><span class=\"line\">        CFRelease(data);</span><br><span class=\"line\">        CFMessagePortInvalidate(bRemote);</span><br><span class=\"line\">        CFRelease(bRemote);</span><br><span class=\"line\">        return nil;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    NSString    *strMsg = [NSString stringWithCString:(char *)recvedMsg encoding:NSUTF8StringEncoding];</span><br><span class=\"line\">    NSLog(@&quot;%@&quot;,strMsg);</span><br><span class=\"line\">    </span><br><span class=\"line\">    CFRelease(data);</span><br><span class=\"line\">    CFMessagePortInvalidate(bRemote);</span><br><span class=\"line\">    CFRelease(bRemote);</span><br><span class=\"line\">    CFRelease(recvData);</span><br><span class=\"line\">    </span><br><span class=\"line\">    return strMsg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>MACH_PORT_REMOTE</code>的定义为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define MACH_PORT_REMOTE    &quot;com.wangzz.demo&quot;</span><br></pre></td></tr></table></figure>\n\n<p>发送消息时要相对简单，首先通过CFMessagePortCreateRemote生成一个Remote的CFMessagePortRef，这里需要注意的是CFMessagePortCreateRemote时传入的字符串唯一标识<code>MACH_PORT_REMOTE</code>必须和消息接收者创建local的CFMessagePortRef时使用的字符串唯一标识是同一个！</p>\n<p>通过查看源码发现，CFMessagePortCreateRemote会根据<code>MACH_PORT_REMOTE</code>定义的字符串为唯一标识获取消息接收者通过CFMessagePortCreateLocal使用相同字符串创建的底层mach port端口，从而实现向消息接收者发送信息。</p>\n<p>如果消息接收者还没有创建或者通过CFMessagePortCreateLocal创建local端口失败时，想要通过CFMessagePortCreateRemote去创建remote端口肯定是失败的。</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><ul>\n<li>很遗憾的是，在iOS7及以后系统中，CFMessagePort的通信机制不再可用。</li>\n</ul>\n<p>在使用CFMessagePortCreateLocal/CFMessagePortCreateRemote创建CFMessagePortRef对象时会失败，官方文档中是这么说的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This method is not available on iOS 7 and later—it will return NULL and log a sandbox violation in syslog. See Concurrency Programming Guide for possible replacement technologies.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>CFMessagePort只能用于本地进程通信。</p>\n</li>\n<li><p>CFMessagePort是基于mach port端口的通信方式，不但可以用于进程通信，也可以用于线程间通信，只是线程间通信有了GCD和Cocoa提供的原生方法，已经能很方便的实现了，没必要再使用CFMessagePort。</p>\n</li>\n<li><p>进程通信使用场景</p>\n</li>\n</ul>\n<p>iOS系统多任务机制，使得进程间通信基本都只能用于越狱开发。常用的场景是前端有一个UI程序用于界面展示，后端有一个daemo精灵程序用于任务处理。</p>\n<h2 id=\"demo工程\"><a href=\"#demo工程\" class=\"headerlink\" title=\"demo工程\"></a>demo工程</h2><p>特地做了了个demo工程，以便更好地演示CFMessagePort的使用，可以到<a href=\"http://download.csdn.net/detail/wzzvictory_tjsd/7446745\" target=\"_blank\" rel=\"noopener\">CSDN下载</a>。</p>\n<p>为了模拟进程间通信场景，我将消息接收进程CFMessagePortReceive做成了能够后台播放音乐的程序，以便其切到后台后能继续存活。</p>\n<p>由于CFMessagePort不再支持iOS7及以后系统，本demo实在iOS6系统上测试的。</p>\n<p>demo使用方式：</p>\n<ul>\n<li><p>CFMessagePortReceive启动后，点击Start Listenning创建CFMessagePort接口并开始监听port消息，然后将CFMessagePortReceive切到后台；</p>\n</li>\n<li><p>启动CFMessagePortSend程序，在输入框中写入内容，点击发送按钮即可和CFMessagePortReceive通信。</p>\n</li>\n<li><p>MessagePort通信过程中会有日志输出，可以使用以下方式查看日志：</p>\n<p>  1.真机</p>\n<p>  选择：Xcode-&gt;Window-&gt;Organizer-&gt;Devices，然后选中窗口左侧当前设备的Console窗口查看。</p>\n<p>  2.模拟器</p>\n<p>  选择：模拟器-&gt;调试-&gt;打开系统日志，或者直接使用快捷键<code>⌘/</code>直接打开系统控制台查看日志。</p>\n</li>\n</ul>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><p><a href=\"http://opensource.apple.com/source/CF/CF-855.14/\" target=\"_blank\" rel=\"noopener\">CF-855.14</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW1\" target=\"_blank\" rel=\"noopener\">Threading Programming Guide</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/mac/documentation/corefoundation/Reference/CFMessagePortRef/Reference/reference.html#//apple_ref/doc/uid/20001437-CH203-DontLinkElementID_8\" target=\"_blank\" rel=\"noopener\">CFMessagePort Reference</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>iOS系统是出了名的封闭，每个应用的活动范围被严格地限制在各自的沙盒中。尽管如此，iOS还是提供了若干进程间通信机制，CFMessagePort就是其中之一。</p>\n<p>从类名可以看出，CFMessagePort属于<code>Core Foundation</code>层的东西，其实现部分是开源的，代码在可以在苹果的<a href=\"http://opensource.apple.com/source/CF/CF-855.14/CFMessagePort.c\" target=\"_blank\" rel=\"noopener\">开源代码库</a>中找到。</p>\n<h2 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h2><h4 id=\"1、消息接收者\"><a href=\"#1、消息接收者\" class=\"headerlink\" title=\"1、消息接收者\"></a>1、消息接收者</h4><p>CFMessagePort端口消息的接收者需要实现以下功能：</p>\n<h6 id=\"1-1-注册监听\"><a href=\"#1-1-注册监听\" class=\"headerlink\" title=\"1.1 注册监听\"></a>1.1 注册监听</h6><p>消息接收者需要通过以下方式注册消息监听：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(void)startListenning</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tif (0 != mMsgPortListenner &amp;&amp; CFMessagePortIsValid(mMsgPortListenner))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tCFMessagePortInvalidate(mMsgPortListenner);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    mMsgPortListenner = CFMessagePortCreateLocal(kCFAllocatorDefault,CFSTR(LOCAL_MACH_PORT_NAME),onRecvMessageCallBack, NULL, NULL);</span><br><span class=\"line\">    CFRunLoopSourceRef source = CFMessagePortCreateRunLoopSource(kCFAllocatorDefault, mMsgPortListenner, 0);</span><br><span class=\"line\">    CFRunLoopAddSource(CFRunLoopGetCurrent(), source, kCFRunLoopCommonModes);</span><br><span class=\"line\">    NSLog(@&quot;start listenning&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>其中<code>LOCAL_MACH_PORT_NAME</code>的定义为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define LOCAL_MACH_PORT_NAME    &quot;com.wangzz.demo&quot;</span><br></pre></td></tr></table></figure>\n\n<p>经过查看源码发现，CFMessagePort实际上是通过mach port实现的。Mach port是iOS系统提供的基于端口的输入源，可用于线程或进程间通讯。而Runloop支持的输入源类型中就包括基于端口的输入源，因此可以使用Runloop做为CFMessagePort端口源事件的监听者。</p>\n<p>上述代码有几点需要说明：</p>\n<ul>\n<li><p>通过CFMessagePortCreateLocal可以创建一个本地CFMessagePortRef对象</p>\n</li>\n<li><p>CFMessagePort对象是靠一个字符串来唯一标识的，这一点非常重要，在这里字符串是由宏<code>LOCAL_MACH_PORT_NAME</code>定义的；</p>\n</li>\n<li><p>创建CFMessagePort对象的同时设置了端口源事件的回调函数onRecvMessageCallBack，用于处理端口源事件；</p>\n</li>\n<li><p>将创建的对象作为输入源添加到Runloop中，从而实现对端口源事件的监听，当Runloop收到对应的端口源事件时，会调用上一步中指定的回调芳芳；</p>\n</li>\n</ul>\n<h6 id=\"1-2-实现回调方法\"><a href=\"#1-2-实现回调方法\" class=\"headerlink\" title=\"1.2 实现回调方法\"></a>1.2 实现回调方法</h6><p>回调函数为CFMessagePortCallBack类型，其定义部分为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef CFDataRef (*CFMessagePortCallBack) (</span><br><span class=\"line\">   CFMessagePortRef local,</span><br><span class=\"line\">   SInt32 msgid,</span><br><span class=\"line\">   CFDataRef data,</span><br><span class=\"line\">   void *info</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>各个参数的含义为：</p>\n<ul>\n<li><p>CFMessagePortRef local</p>\n<p>  当前接收消息的CFMessagePortRef对象。</p>\n</li>\n<li><p>SInt32 msgid</p>\n<p>  这个字段非常有用，用于标识消息。如果通信双方进程约定号每个msgid对应的数据结构，即可实现较为复杂的通信。</p>\n</li>\n<li><p>CFDataRef data</p>\n<p>  通信的真正数据部分。</p>\n</li>\n<li><p>void *info</p>\n<p>  为使用CFMessagePortCreateLocal方法创建port端口时指定的CFMessagePortContext对象的info字段，通常为空。</p>\n</li>\n</ul>\n<p>该回调方法可以返回一个CFDataRef类型的数据给port消息的发送者，以实现有效的双方通信，这一点也非常重要。</p>\n<p>我的回调函数onRecvMessageCallBack的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CFDataRef onRecvMessageCallBack(CFMessagePortRef local,SInt32 msgid,CFDataRef cfData, void*info)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSLog(@&quot;onRecvMessageCallBack is called&quot;);</span><br><span class=\"line\">    NSString *strData = nil;</span><br><span class=\"line\">    if (cfData)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       \tconst UInt8  * recvedMsg = CFDataGetBytePtr(cfData);</span><br><span class=\"line\">    \tstrData = [NSString stringWithCString:(char *)recvedMsg encoding:NSUTF8StringEncoding];</span><br><span class=\"line\">        /**</span><br><span class=\"line\">         </span><br><span class=\"line\">         实现数据解析操作</span><br><span class=\"line\">         </span><br><span class=\"line\">         **/</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSLog(@&quot;receive message:%@&quot;,strData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //为了测试，生成返回数据</span><br><span class=\"line\">    NSString *returnString = [NSString stringWithFormat:@&quot;i have receive:%@&quot;,strData];</span><br><span class=\"line\">    const char* cStr = [returnString UTF8String];</span><br><span class=\"line\">\tNSUInteger ulen = [returnString lengthOfBytesUsingEncoding:NSUTF8StringEncoding];</span><br><span class=\"line\">    CFDataRef sgReturn = CFDataCreate(NULL, (UInt8 *)cStr, ulen);</span><br><span class=\"line\">    </span><br><span class=\"line\">    return sgReturn;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法实现的较为简单，解析约定的数据（测试代码中约定传送的是string）,为了测试，同时生成一个CFDataRef数据返回给port消息的发送者。</p>\n<h6 id=\"1-3-取消端口监听\"><a href=\"#1-3-取消端口监听\" class=\"headerlink\" title=\"1.3 取消端口监听\"></a>1.3 取消端口监听</h6><p>可以通过如下方式取消对port端口的监听：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)endLisenning</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    CFMessagePortInvalidate(mMsgPortListenner);</span><br><span class=\"line\">    CFRelease(mMsgPortListenner);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>CFMessagePortInvalidate会停止port消息的发送和接收操作，而只有调用了CFRelease，CFMessagePortRef对象才真正的被释放掉。</p>\n<h4 id=\"2、消息发送者\"><a href=\"#2、消息发送者\" class=\"headerlink\" title=\"2、消息发送者\"></a>2、消息发送者</h4><p>发送部分代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(NSString *)sendMessageToDameonWith:(id)msgInfo msgID:(NSInteger)msgid</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // 生成Remote port</span><br><span class=\"line\">    CFMessagePortRef bRemote = CFMessagePortCreateRemote(kCFAllocatorDefault, CFSTR(MACH_PORT_REMOTE));</span><br><span class=\"line\">    if (nil == bRemote) &#123;</span><br><span class=\"line\">        NSLog(@&quot;bRemote create failed&quot;);</span><br><span class=\"line\">        return nil;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 构建发送数据（string）</span><br><span class=\"line\">    NSString    *msg = [NSString stringWithFormat:@&quot;%@&quot;,msgInfo];</span><br><span class=\"line\">    NSLog(@&quot;send msg is :%@&quot;,msg);</span><br><span class=\"line\">    const char *message = [msg UTF8String];</span><br><span class=\"line\">    CFDataRef data,recvData = nil;</span><br><span class=\"line\">    data = CFDataCreate(NULL, (UInt8 *)message, strlen(message));</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 执行发送操作</span><br><span class=\"line\">    CFMessagePortSendRequest(bRemote, msgid, data, 0, 100 , kCFRunLoopDefaultMode, &amp;recvData);</span><br><span class=\"line\">    if (nil == recvData) &#123;</span><br><span class=\"line\">        NSLog(@&quot;recvData date is nil.&quot;);</span><br><span class=\"line\">        CFRelease(data);</span><br><span class=\"line\">        CFMessagePortInvalidate(bRemote);</span><br><span class=\"line\">        CFRelease(bRemote);</span><br><span class=\"line\">        return nil;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 解析返回数据</span><br><span class=\"line\">    const UInt8  * recvedMsg = CFDataGetBytePtr(recvData);</span><br><span class=\"line\">    if (nil == recvedMsg) &#123;</span><br><span class=\"line\">        NSLog(@&quot;receive date err.&quot;);</span><br><span class=\"line\">        CFRelease(data);</span><br><span class=\"line\">        CFMessagePortInvalidate(bRemote);</span><br><span class=\"line\">        CFRelease(bRemote);</span><br><span class=\"line\">        return nil;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    NSString    *strMsg = [NSString stringWithCString:(char *)recvedMsg encoding:NSUTF8StringEncoding];</span><br><span class=\"line\">    NSLog(@&quot;%@&quot;,strMsg);</span><br><span class=\"line\">    </span><br><span class=\"line\">    CFRelease(data);</span><br><span class=\"line\">    CFMessagePortInvalidate(bRemote);</span><br><span class=\"line\">    CFRelease(bRemote);</span><br><span class=\"line\">    CFRelease(recvData);</span><br><span class=\"line\">    </span><br><span class=\"line\">    return strMsg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>MACH_PORT_REMOTE</code>的定义为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define MACH_PORT_REMOTE    &quot;com.wangzz.demo&quot;</span><br></pre></td></tr></table></figure>\n\n<p>发送消息时要相对简单，首先通过CFMessagePortCreateRemote生成一个Remote的CFMessagePortRef，这里需要注意的是CFMessagePortCreateRemote时传入的字符串唯一标识<code>MACH_PORT_REMOTE</code>必须和消息接收者创建local的CFMessagePortRef时使用的字符串唯一标识是同一个！</p>\n<p>通过查看源码发现，CFMessagePortCreateRemote会根据<code>MACH_PORT_REMOTE</code>定义的字符串为唯一标识获取消息接收者通过CFMessagePortCreateLocal使用相同字符串创建的底层mach port端口，从而实现向消息接收者发送信息。</p>\n<p>如果消息接收者还没有创建或者通过CFMessagePortCreateLocal创建local端口失败时，想要通过CFMessagePortCreateRemote去创建remote端口肯定是失败的。</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><ul>\n<li>很遗憾的是，在iOS7及以后系统中，CFMessagePort的通信机制不再可用。</li>\n</ul>\n<p>在使用CFMessagePortCreateLocal/CFMessagePortCreateRemote创建CFMessagePortRef对象时会失败，官方文档中是这么说的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This method is not available on iOS 7 and later—it will return NULL and log a sandbox violation in syslog. See Concurrency Programming Guide for possible replacement technologies.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>CFMessagePort只能用于本地进程通信。</p>\n</li>\n<li><p>CFMessagePort是基于mach port端口的通信方式，不但可以用于进程通信，也可以用于线程间通信，只是线程间通信有了GCD和Cocoa提供的原生方法，已经能很方便的实现了，没必要再使用CFMessagePort。</p>\n</li>\n<li><p>进程通信使用场景</p>\n</li>\n</ul>\n<p>iOS系统多任务机制，使得进程间通信基本都只能用于越狱开发。常用的场景是前端有一个UI程序用于界面展示，后端有一个daemo精灵程序用于任务处理。</p>\n<h2 id=\"demo工程\"><a href=\"#demo工程\" class=\"headerlink\" title=\"demo工程\"></a>demo工程</h2><p>特地做了了个demo工程，以便更好地演示CFMessagePort的使用，可以到<a href=\"http://download.csdn.net/detail/wzzvictory_tjsd/7446745\" target=\"_blank\" rel=\"noopener\">CSDN下载</a>。</p>\n<p>为了模拟进程间通信场景，我将消息接收进程CFMessagePortReceive做成了能够后台播放音乐的程序，以便其切到后台后能继续存活。</p>\n<p>由于CFMessagePort不再支持iOS7及以后系统，本demo实在iOS6系统上测试的。</p>\n<p>demo使用方式：</p>\n<ul>\n<li><p>CFMessagePortReceive启动后，点击Start Listenning创建CFMessagePort接口并开始监听port消息，然后将CFMessagePortReceive切到后台；</p>\n</li>\n<li><p>启动CFMessagePortSend程序，在输入框中写入内容，点击发送按钮即可和CFMessagePortReceive通信。</p>\n</li>\n<li><p>MessagePort通信过程中会有日志输出，可以使用以下方式查看日志：</p>\n<p>  1.真机</p>\n<p>  选择：Xcode-&gt;Window-&gt;Organizer-&gt;Devices，然后选中窗口左侧当前设备的Console窗口查看。</p>\n<p>  2.模拟器</p>\n<p>  选择：模拟器-&gt;调试-&gt;打开系统日志，或者直接使用快捷键<code>⌘/</code>直接打开系统控制台查看日志。</p>\n</li>\n</ul>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><p><a href=\"http://opensource.apple.com/source/CF/CF-855.14/\" target=\"_blank\" rel=\"noopener\">CF-855.14</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW1\" target=\"_blank\" rel=\"noopener\">Threading Programming Guide</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/mac/documentation/corefoundation/Reference/CFMessagePortRef/Reference/reference.html#//apple_ref/doc/uid/20001437-CH203-DontLinkElementID_8\" target=\"_blank\" rel=\"noopener\">CFMessagePort Reference</a></p>\n</li>\n</ul>"},{"layout":"post","title":"iOS模拟器Custom Location被重置解决方案","date":"2014-05-25T09:29:18.000Z","comments":1,"keywords":"XcodeSettings, iOS simulato, custom location","_content":"\n## 问题说明\n\n在做地图类应用时，经常需要用到位置模拟功能。iOS模拟器提供了该功能，我们可以设置指定的经纬度，选中模拟器后，按照以下菜单层次进入即可设置：\n\n```\nDebug --> Location --> Custom Location\n```\n但是该功能存在的问题是设置完经纬度每次重新run程序，或者重启模拟器的时候都有可能使之前设置的Location状态从`Custom Location`变成`None`，导致设置的经纬度信息无效。\n\n因此经常需要重新选择`Custom Location`，对于每天需要run程序n次的我们来说苦不堪言...\n\n## 解决方案\n\n好在Xcode的target设置项中提供了设置位置信息的方法，允许我们使用GPX文件来设置自定义位置信息，步骤如下：\n\n<!-- more -->\n\n* 获取GPX文件\n\nGPX（GPS eXchange Format, GPS交换格式)是一个XML格式,为应用软件设计的通用GPS数据格式。它可以用来描述路点、轨迹、路程。（来自[维基百科](http://zh.wikipedia.org/wiki/GPX)）\n\n我们可以通过第三方网站：[gpx-poi.com](http://gpx-poi.com/)来生成一个GPX文件，生成过程也很方便：\n\n在网站左上角拖动地图到指定位置，鼠标单击后会出现一个红色标注，同时地图下方会显示出标注的经纬度数据；\n\n点击地图下方的`Update`按钮就能将经纬度信息更新到界面右侧的位置信息描述表格中；\n\n然后将界面拉到底部，填写GPX文件名称，选择操作系统型号；\n\n点击`Create`按钮即可生成一个XML格式的GPX文件，再点击`Download`按钮即可将文件下载到本地。\n\n生成的GPX文件大概是这样：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n\r<gpx\rxmlns=\"http://www.topografix.com/GPX/1/1\"\rxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \rxsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd\"\rversion=\"1.1\" \rcreator=\"gpx-poi.com\">\n\r\t<wpt lat=“41.988810\" lon=\"116.474828\">\n\t\t<time>2014-05-25T07:27:53Z</time>\n\r\t\t<name>A</name>\n   \r\t</wpt>\n</gpx>\n```\n\n* 导入GPX文件\n\n在Xcode中选中指定target，按以下菜单层次进入：\n\n```\nEdite Scheme -->  Options -->  Default Location -->  Add GPX File to Project\n```\n（此时必须保证`Allow Location Simulation`选项是选中的，该设置项默认选中。）\n\n如图所示：\n\n<img src=\"/images/article3/default_location.png\" width=\"703\" height=\"475\">\n\n即可将刚才生成并下载到本地的GPX文件添加到工程里。从此以后不管是重新run程序还是重启模拟器都可以在程序启动的时候定到位。\n\n不过这种做法有个缺点，我在实际使用的时候发现设置完`Default Location`以后，真机的位置信息也会被更改成设置的位置！！！还请记得在软件发布时删除该设置项。\n\n## 2014年10月1日更新\n\n好消息，在最新版的`Xcode6.0.1`中，已经修复这个问题了，每次重新调试时`Custom Location`再也不会被更改了！\n\n\n## 参考文档\n\n* [iOS Simulator Reverts Location Setting](http://stackoverflow.com/questions/19719276/ios-simulator-reverts-location-setting)\n\n\n","source":"_posts/2014-05-25-iosmo-ni-qi-custom-locationbei-zhong-zhi-jie-jue-fang-an.markdown","raw":"---\nlayout: post\ntitle: \"iOS模拟器Custom Location被重置解决方案\"\ndate: 2014-05-25 17:29:18 +0800\ncomments: true\ncategories: XcodeSettings\ntags: [XcodeSettings, iOS simulato, custom location]\nkeywords: XcodeSettings, iOS simulato, custom location\n---\n\n## 问题说明\n\n在做地图类应用时，经常需要用到位置模拟功能。iOS模拟器提供了该功能，我们可以设置指定的经纬度，选中模拟器后，按照以下菜单层次进入即可设置：\n\n```\nDebug --> Location --> Custom Location\n```\n但是该功能存在的问题是设置完经纬度每次重新run程序，或者重启模拟器的时候都有可能使之前设置的Location状态从`Custom Location`变成`None`，导致设置的经纬度信息无效。\n\n因此经常需要重新选择`Custom Location`，对于每天需要run程序n次的我们来说苦不堪言...\n\n## 解决方案\n\n好在Xcode的target设置项中提供了设置位置信息的方法，允许我们使用GPX文件来设置自定义位置信息，步骤如下：\n\n<!-- more -->\n\n* 获取GPX文件\n\nGPX（GPS eXchange Format, GPS交换格式)是一个XML格式,为应用软件设计的通用GPS数据格式。它可以用来描述路点、轨迹、路程。（来自[维基百科](http://zh.wikipedia.org/wiki/GPX)）\n\n我们可以通过第三方网站：[gpx-poi.com](http://gpx-poi.com/)来生成一个GPX文件，生成过程也很方便：\n\n在网站左上角拖动地图到指定位置，鼠标单击后会出现一个红色标注，同时地图下方会显示出标注的经纬度数据；\n\n点击地图下方的`Update`按钮就能将经纬度信息更新到界面右侧的位置信息描述表格中；\n\n然后将界面拉到底部，填写GPX文件名称，选择操作系统型号；\n\n点击`Create`按钮即可生成一个XML格式的GPX文件，再点击`Download`按钮即可将文件下载到本地。\n\n生成的GPX文件大概是这样：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n\r<gpx\rxmlns=\"http://www.topografix.com/GPX/1/1\"\rxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \rxsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd\"\rversion=\"1.1\" \rcreator=\"gpx-poi.com\">\n\r\t<wpt lat=“41.988810\" lon=\"116.474828\">\n\t\t<time>2014-05-25T07:27:53Z</time>\n\r\t\t<name>A</name>\n   \r\t</wpt>\n</gpx>\n```\n\n* 导入GPX文件\n\n在Xcode中选中指定target，按以下菜单层次进入：\n\n```\nEdite Scheme -->  Options -->  Default Location -->  Add GPX File to Project\n```\n（此时必须保证`Allow Location Simulation`选项是选中的，该设置项默认选中。）\n\n如图所示：\n\n<img src=\"/images/article3/default_location.png\" width=\"703\" height=\"475\">\n\n即可将刚才生成并下载到本地的GPX文件添加到工程里。从此以后不管是重新run程序还是重启模拟器都可以在程序启动的时候定到位。\n\n不过这种做法有个缺点，我在实际使用的时候发现设置完`Default Location`以后，真机的位置信息也会被更改成设置的位置！！！还请记得在软件发布时删除该设置项。\n\n## 2014年10月1日更新\n\n好消息，在最新版的`Xcode6.0.1`中，已经修复这个问题了，每次重新调试时`Custom Location`再也不会被更改了！\n\n\n## 参考文档\n\n* [iOS Simulator Reverts Location Setting](http://stackoverflow.com/questions/19719276/ios-simulator-reverts-location-setting)\n\n\n","slug":"2014-05-25-iosmo-ni-qi-custom-locationbei-zhong-zhi-jie-jue-fang-an","published":1,"updated":"2019-09-23T13:00:56.000Z","photos":[],"link":"","_id":"ck0zclid80017qhtfxlvmo4xn","content":"<h2 id=\"问题说明\"><a href=\"#问题说明\" class=\"headerlink\" title=\"问题说明\"></a>问题说明</h2><p>在做地图类应用时，经常需要用到位置模拟功能。iOS模拟器提供了该功能，我们可以设置指定的经纬度，选中模拟器后，按照以下菜单层次进入即可设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Debug --&gt; Location --&gt; Custom Location</span><br></pre></td></tr></table></figure>\n\n<p>但是该功能存在的问题是设置完经纬度每次重新run程序，或者重启模拟器的时候都有可能使之前设置的Location状态从<code>Custom Location</code>变成<code>None</code>，导致设置的经纬度信息无效。</p>\n<p>因此经常需要重新选择<code>Custom Location</code>，对于每天需要run程序n次的我们来说苦不堪言…</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>好在Xcode的target设置项中提供了设置位置信息的方法，允许我们使用GPX文件来设置自定义位置信息，步骤如下：</p>\n<a id=\"more\"></a>\n\n<ul>\n<li>获取GPX文件</li>\n</ul>\n<p>GPX（GPS eXchange Format, GPS交换格式)是一个XML格式,为应用软件设计的通用GPS数据格式。它可以用来描述路点、轨迹、路程。（来自<a href=\"http://zh.wikipedia.org/wiki/GPX\" target=\"_blank\" rel=\"noopener\">维基百科</a>）</p>\n<p>我们可以通过第三方网站：<a href=\"http://gpx-poi.com/\" target=\"_blank\" rel=\"noopener\">gpx-poi.com</a>来生成一个GPX文件，生成过程也很方便：</p>\n<p>在网站左上角拖动地图到指定位置，鼠标单击后会出现一个红色标注，同时地图下方会显示出标注的经纬度数据；</p>\n<p>点击地图下方的<code>Update</code>按钮就能将经纬度信息更新到界面右侧的位置信息描述表格中；</p>\n<p>然后将界面拉到底部，填写GPX文件名称，选择操作系统型号；</p>\n<p>点击<code>Create</code>按钮即可生成一个XML格式的GPX文件，再点击<code>Download</code>按钮即可将文件下载到本地。</p>\n<p>生成的GPX文件大概是这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</span><br><span class=\"line\">\r&lt;gpx\rxmlns=&quot;http://www.topografix.com/GPX/1/1&quot;\rxmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; \rxsi:schemaLocation=&quot;http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd&quot;\rversion=&quot;1.1&quot; \rcreator=&quot;gpx-poi.com&quot;&gt;</span><br><span class=\"line\">\r\t&lt;wpt lat=“41.988810&quot; lon=&quot;116.474828&quot;&gt;</span><br><span class=\"line\">\t\t&lt;time&gt;2014-05-25T07:27:53Z&lt;/time&gt;</span><br><span class=\"line\">\r\t\t&lt;name&gt;A&lt;/name&gt;</span><br><span class=\"line\">   \r\t&lt;/wpt&gt;</span><br><span class=\"line\">&lt;/gpx&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>导入GPX文件</li>\n</ul>\n<p>在Xcode中选中指定target，按以下菜单层次进入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Edite Scheme --&gt;  Options --&gt;  Default Location --&gt;  Add GPX File to Project</span><br></pre></td></tr></table></figure>\n\n<p>（此时必须保证<code>Allow Location Simulation</code>选项是选中的，该设置项默认选中。）</p>\n<p>如图所示：</p>\n<img src=\"/images/article3/default_location.png\" width=\"703\" height=\"475\">\n\n<p>即可将刚才生成并下载到本地的GPX文件添加到工程里。从此以后不管是重新run程序还是重启模拟器都可以在程序启动的时候定到位。</p>\n<p>不过这种做法有个缺点，我在实际使用的时候发现设置完<code>Default Location</code>以后，真机的位置信息也会被更改成设置的位置！！！还请记得在软件发布时删除该设置项。</p>\n<h2 id=\"2014年10月1日更新\"><a href=\"#2014年10月1日更新\" class=\"headerlink\" title=\"2014年10月1日更新\"></a>2014年10月1日更新</h2><p>好消息，在最新版的<code>Xcode6.0.1</code>中，已经修复这个问题了，每次重新调试时<code>Custom Location</code>再也不会被更改了！</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><a href=\"http://stackoverflow.com/questions/19719276/ios-simulator-reverts-location-setting\" target=\"_blank\" rel=\"noopener\">iOS Simulator Reverts Location Setting</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"问题说明\"><a href=\"#问题说明\" class=\"headerlink\" title=\"问题说明\"></a>问题说明</h2><p>在做地图类应用时，经常需要用到位置模拟功能。iOS模拟器提供了该功能，我们可以设置指定的经纬度，选中模拟器后，按照以下菜单层次进入即可设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Debug --&gt; Location --&gt; Custom Location</span><br></pre></td></tr></table></figure>\n\n<p>但是该功能存在的问题是设置完经纬度每次重新run程序，或者重启模拟器的时候都有可能使之前设置的Location状态从<code>Custom Location</code>变成<code>None</code>，导致设置的经纬度信息无效。</p>\n<p>因此经常需要重新选择<code>Custom Location</code>，对于每天需要run程序n次的我们来说苦不堪言…</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>好在Xcode的target设置项中提供了设置位置信息的方法，允许我们使用GPX文件来设置自定义位置信息，步骤如下：</p>","more":"<ul>\n<li>获取GPX文件</li>\n</ul>\n<p>GPX（GPS eXchange Format, GPS交换格式)是一个XML格式,为应用软件设计的通用GPS数据格式。它可以用来描述路点、轨迹、路程。（来自<a href=\"http://zh.wikipedia.org/wiki/GPX\" target=\"_blank\" rel=\"noopener\">维基百科</a>）</p>\n<p>我们可以通过第三方网站：<a href=\"http://gpx-poi.com/\" target=\"_blank\" rel=\"noopener\">gpx-poi.com</a>来生成一个GPX文件，生成过程也很方便：</p>\n<p>在网站左上角拖动地图到指定位置，鼠标单击后会出现一个红色标注，同时地图下方会显示出标注的经纬度数据；</p>\n<p>点击地图下方的<code>Update</code>按钮就能将经纬度信息更新到界面右侧的位置信息描述表格中；</p>\n<p>然后将界面拉到底部，填写GPX文件名称，选择操作系统型号；</p>\n<p>点击<code>Create</code>按钮即可生成一个XML格式的GPX文件，再点击<code>Download</code>按钮即可将文件下载到本地。</p>\n<p>生成的GPX文件大概是这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</span><br><span class=\"line\">\r&lt;gpx\rxmlns=&quot;http://www.topografix.com/GPX/1/1&quot;\rxmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; \rxsi:schemaLocation=&quot;http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd&quot;\rversion=&quot;1.1&quot; \rcreator=&quot;gpx-poi.com&quot;&gt;</span><br><span class=\"line\">\r\t&lt;wpt lat=“41.988810&quot; lon=&quot;116.474828&quot;&gt;</span><br><span class=\"line\">\t\t&lt;time&gt;2014-05-25T07:27:53Z&lt;/time&gt;</span><br><span class=\"line\">\r\t\t&lt;name&gt;A&lt;/name&gt;</span><br><span class=\"line\">   \r\t&lt;/wpt&gt;</span><br><span class=\"line\">&lt;/gpx&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>导入GPX文件</li>\n</ul>\n<p>在Xcode中选中指定target，按以下菜单层次进入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Edite Scheme --&gt;  Options --&gt;  Default Location --&gt;  Add GPX File to Project</span><br></pre></td></tr></table></figure>\n\n<p>（此时必须保证<code>Allow Location Simulation</code>选项是选中的，该设置项默认选中。）</p>\n<p>如图所示：</p>\n<img src=\"/images/article3/default_location.png\" width=\"703\" height=\"475\">\n\n<p>即可将刚才生成并下载到本地的GPX文件添加到工程里。从此以后不管是重新run程序还是重启模拟器都可以在程序启动的时候定到位。</p>\n<p>不过这种做法有个缺点，我在实际使用的时候发现设置完<code>Default Location</code>以后，真机的位置信息也会被更改成设置的位置！！！还请记得在软件发布时删除该设置项。</p>\n<h2 id=\"2014年10月1日更新\"><a href=\"#2014年10月1日更新\" class=\"headerlink\" title=\"2014年10月1日更新\"></a>2014年10月1日更新</h2><p>好消息，在最新版的<code>Xcode6.0.1</code>中，已经修复这个问题了，每次重新调试时<code>Custom Location</code>再也不会被更改了！</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><a href=\"http://stackoverflow.com/questions/19719276/ios-simulator-reverts-location-setting\" target=\"_blank\" rel=\"noopener\">iOS Simulator Reverts Location Setting</a></li>\n</ul>"},{"layout":"post","title":"WWDC2014之iOS使用动态库","date":"2014-06-12T11:27:57.000Z","comments":1,"keywords":"WWDC2014, iOS, framework, 动态库","_content":"\n## 苹果的开放态度\n\nWWDC2014上发布的`Xcode6 beta`版有了不少更新，其中令我惊讶的一个是苹果在iOS上开放了动态库，在`Xcode6 Beta`版的更新文档中是这样描述的：\n\n>\nFrameworks for iOS. iOS developers can now create dynamic frameworks. Frameworks are a collection of code and resources to encapsulate functionality that is valuable across multiple projects. Frameworks work perfectly with extensions, sharing logic that can be used by both the main application, and the bundled extensions.\n>\n\n详情见官方文档[New Features in Xcode 6 Beta](https://developer.apple.com/library/prerelease/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_6_0.html)。\n\nframework是Cocoa/Cocoa Touch程序中使用的一种资源打包方式，可以将将代码文件、头文件、资源文件、说明文档等集中在一起，方便开发者使用，作为一名Cocoa/Cocoa Touch程序员每天都要跟各种各样的Framework打交道。Cocoa/Cocoa Touch开发框架本身提供了大量的Framework，比如Foundation.framework/UIKit.framework/AppKit.framework等。需要注意的是，这些framework无一例外都是动态库。\n\n<!-- more -->\n\n但残忍的是，Cocoa Touch上并不允许我们使用自己创建的framework。不过由于framework是一种优秀的资源打包方式，拥有无穷智慧的程序员们便想出了以framework的形式打包静态库的招数，因此我们平时看到的第三方发布的framework无一例外都是静态库，真正的动态库是上不了AppStore的。\n\nWWDC2014给我的一个很大感触是苹果对iOS的开放态度：允许使用动态库、允许第三方键盘、`App Extension`等等，这些在之前是想都不敢想的事。\n\n\n\n## iOS上动态库可以做什么\n\n和静态库在编译时和app代码链接并打进同一个二进制包中不同，动态库可以在运行时手动加载，这样就可以做很多事情，比如：\n\n* 共享可执行文件\n\n在其它大部分平台上，动态库都可以用于不同应用间共享，这就大大节省了内存。从目前来看，iOS仍然不允许进程间共享动态库，即iOS上的动态库只能是私有的，因为我们仍然不能将动态库文件放置在除了自身沙盒以外的其它任何地方。\n\n不过iOS8上开放了`App Extension`功能，可以为一个应用创建插件，这样主app和插件之间共享动态库还是可行的。\n\n2014-6-23修正：\n\n经[@唐巧_boy](http://weibo.com/tangqiaoboy?topnav=1&wvr=5&topsug=1)提醒，sandbox会验证动态库的签名，所以如果是动态从服务器更新的动态库，是签名不了的，因此应用插件化、软件版本实时模块升级等功能在iOS上无法实现。\n\n## 创建动态库\n\n####1、创建动态库\n\n* 创建工程文件\n\n在下图所示界面能够找到Cocoa Touch动态库的创建入口：\n\n![framework](/images/article4/cocoa_touch_framework.png)\n\n跟随指引一步步操作即可创建一个新的动态库工程，我的工程名字叫Dylib，Xcode会同时创建一个和工程target同名的.h文件，比如我的就是Dylib.h。\n\n* 向工程中添加文件\n\n接下来就可以在工程中随意添加文件了。我在其中新建了一个名为Person的测试类，提供的接口如下：\n\n```objective-c\n\n@interface Person : NSObject\n\n- (void)run;\n\n@end\n\n```\n\n对应的实现部分：\n\n```objective-c\n\n@implementation Person\n\n- (void)run\n{\n    NSLog(@\"let's run.\");\n    \n    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@\"The Second Alert\" message:nil delegate:nil cancelButtonTitle:nil otherButtonTitles:@\"done\", nil];\n    [alert show];\n}\n\n@end\n\n```\n\n* 设置开放的头文件\n\n一个库里面可以后很多的代码，但是我们需要设置能够提供给外界使用的接口，可以通过Target-->Build Phases-->Headers来设置，如下图所示：\n\n![header](/images/article4/header.png)\n\n我们只需将希望开放的头文件放到Public列表中即可，比如我开放了`Dylib.h`和`Person.h`两个头文件，在生成的framework的Header目录下就可以看到这两个头文件，如下图所示：\n\n![public_header](/images/article4/public_header.png)\n\n一切完成，Run以后就能成功生成framework文件了。\n\n\n####2、通用动态库\n\n经过第一步我们只是创建了一个动态库文件，但是和静态库类似，该动态库并同时不支持真机和模拟器，可以通过以下步骤创建通用动态库：\n\n* 创建Aggregate Target\n\n按下图所示，在动态库工程中添加一个类型为Aggregate的target:\n\n![aggregate](/images/article4/aggregate.png)\n\n按提示一步步操作即可，我给`Aggregate`的Target的命名是`CommonDylib`。\n\n* 设置Target Dependencies\n\n按以下路径设置`CommonDylib`对应的`Target Dependencies`:\n\n```\nTARGETS-->CommonDylib-->Build Phases-->Target Dependencies\n```\n将真正的动态库Dylib Target添加到其中。\n\n* 添加Run Script\n\n按以下路径为`CommonDylib`添加`Run Script`:\n\n```\nTARGETS-->CommonDylib-->Build Phases-->Run Script\n```\n\n添加的脚本为：\n\n```\n# Sets the target folders and the final framework product.\nFMK_NAME=${PROJECT_NAME}\n\n# Install dir will be the final output to the framework.\n# The following line create it in the root folder of the current project.\nINSTALL_DIR=${SRCROOT}/Products/${FMK_NAME}.framework\n\n# Working dir will be deleted after the framework creation.\nWRK_DIR=build\nDEVICE_DIR=${WRK_DIR}/Release-iphoneos/${FMK_NAME}.framework\nSIMULATOR_DIR=${WRK_DIR}/Release-iphonesimulator/${FMK_NAME}.framework\n\n# -configuration ${CONFIGURATION} \n# Clean and Building both architectures.\nxcodebuild -configuration \"Release\" -target \"${FMK_NAME}\" -sdk iphoneos clean build\nxcodebuild -configuration \"Release\" -target \"${FMK_NAME}\" -sdk iphonesimulator clean build\n\n# Cleaning the oldest.\nif [ -d \"${INSTALL_DIR}\" ]\nthen\nrm -rf \"${INSTALL_DIR}\"\nfi\n\nmkdir -p \"${INSTALL_DIR}\"\n\ncp -R \"${DEVICE_DIR}/\" \"${INSTALL_DIR}/\"\n\n# Uses the Lipo Tool to merge both binary files (i386 + armv6/armv7) into one Universal final product.\nlipo -create \"${DEVICE_DIR}/${FMK_NAME}\" \"${SIMULATOR_DIR}/${FMK_NAME}\" -output \"${INSTALL_DIR}/${FMK_NAME}\"\n\nrm -r \"${WRK_DIR}\"\n\n```\n\n添加以后的效果如图所示：\n\n![commonlib_setting](/images/article4/commonlib_setting.png)\n\n\n该脚本是我根据一篇文章中介绍的脚本改写的，感谢[原文作者](http://blog.sina.com.cn/s/blog_407fb5bc01013v6s.html)。\n\n脚本的主要功能是：\n\n1.分别编译生成真机和模拟器使用的framework；\n2.使用lipo命令将其合并成一个通用framework；\n3.最后将生成的通用framework放置在工程根目录下新建的Products目录下。\n\n如果一切顺利，对`CommonDylib` target执行run操作以后就能生成一个如图所示的通用framework文件了：\n\n![products](/images/article4/products.png)\n\n\n## 使用动态库\n\n####添加动态库到工程文件\n\n经过以上步骤的努力，生成了最终需要的framework文件，为了演示动态库的使用，新建了一个名为`FrameworkDemo`的工程。通过以下方式将刚生成的framework添加到工程中：\n\n```\nTargets-->Build Phases-->Link Binary With Libraries\n```\n\n同时设置将framework作为资源文件拷贝到Bundle中：\n\n```\nTargets-->Build Phases-->Copy Bundle Resources\n```\n\n如图所示：\n\n![framework_demo_setting](/images/article4/framework_demo_setting.png)\n\n\n仅仅这样做是不够的，还需要为动态库添加链接依赖。\n\n####自动链接动态库\n\n添加完动态库后，如果希望动态库在软件启动时自动链接，可以通过以下方式设置动态库依赖路径：\n\n```\nTargets-->Build Setting-->Linking-->Runpath Search Paths\n```\n\n由于向工程中添加动态库时，将动态库设置了Copy Bundle Resources，因此就可以将`Runpath Search Paths`路径依赖设置为main bundle，即沙盒中的FrameworkDemo.app目录，向`Runpath Search Paths`中添加下述内容：\n\n```\n@executable_path/\n```\n\n如图所示：\n\n![run_search_path](/images/article4/run_search_path.png)\n\n\n其中的`@executable_path/`表示可执行文件所在路径，即沙盒中的.app目录，注意不要漏掉最后的`/`。\n\n如果你将动态库放到了沙盒中的其他目录，只需要添加对应路径的依赖就可以了。\n\n\n####需要的时候链接动态库\n\n动态库的另一个重要特性就是`即插即用`性，我们可以选择在需要的时候再加载动态库。\n\n* 更改设置\n\n如果不希望在软件一启动就加载动态库，需要将\n\n```\nTargets-->Build Phases-->Link Binary With Libraries\n```\n\n中`Dylib.framework`对应的Status由默认的`Required`改成`Optional`；或者更干脆的，将`Dylib.framework`从`Link Binary With Libraries`列表中删除即可。\n\n* 使用dlopen加载动态库\n\n以`Dylib.framework`为例，动态库中真正的可执行代码为`Dylib.framework/Dylib`文件，因此使用dlopen时如果仅仅指定加载动态库的路径为`Dylib.framework`是没法成功加载的。\n\n示例代码如下：\n\n```objective-c\n\n- (IBAction)onDlopenLoadAtPathAction1:(id)sender\n{\n    NSString *documentsPath = [NSString stringWithFormat:@\"%@/Documents/Dylib.framework/Dylib\",NSHomeDirectory()];\n    [self dlopenLoadDylibWithPath:documentsPath];\n}\n\n- (void)dlopenLoadDylibWithPath:(NSString *)path\n{\n    libHandle = NULL;\n    libHandle = dlopen([path cStringUsingEncoding:NSUTF8StringEncoding], RTLD_NOW);\n    if (libHandle == NULL) {\n        char *error = dlerror();\n        NSLog(@\"dlopen error: %s\", error);\n    } else {\n        NSLog(@\"dlopen load framework success.\");\n    }\n}\n```\n\n以dlopen方式使用动态库不知道是否能通过苹果审核。\n\n* 使用NSBundle加载动态库\n\n也可以使用NSBundle来加载动态库，实现代码如下：\n\n```objective-c\n\n- (IBAction)onBundleLoadAtPathAction1:(id)sender\n{\n    NSString *documentsPath = [NSString stringWithFormat:@\"%@/Documents/Dylib.framework\",NSHomeDirectory()];\n    [self bundleLoadDylibWithPath:documentsPath];\n}\n\n- (void)bundleLoadDylibWithPath:(NSString *)path\n{\n    _libPath = path;\n    NSError *err = nil;\n    NSBundle *bundle = [NSBundle bundleWithPath:path];\n    if ([bundle loadAndReturnError:&err]) {\n        NSLog(@\"bundle load framework success.\");\n    } else {\n        NSLog(@\"bundle load framework err:%@\",err);\n    }\n}\n\n```\n\n####使用动态库中代码\n\n通过上述任一一种方式加载的动态库后，就可以使用动态库中的代码文件了，以`Dylib.framework`中的`Person`类的使用为例：\n\n```objective-c\n- (IBAction)onTriggerButtonAction:(id)sender\n{\n    Class rootClass = NSClassFromString(@\"Person\");\n    if (rootClass) {\n        id object = [[rootClass alloc] init];\n        [(Person *)object run];\n    }\n}\n\n```\n\n注意，如果直接通过下属方式初始化`Person`类是不成功的：\n\n```objective-c\n- (IBAction)onTriggerButtonAction:(id)sender\n{\n    Person *object = [[Person alloc] init];\n    if (object) {\n       [object run];\n    }\n}\n\n```\n\n\n## 监测动态库的加载和移除\n\n我们可以通过下述方式，为动态库的加载和移除添加监听回调：\n\n```objective-c\n\n+ (void)load\n{\n\t_dyld_register_func_for_add_image(&image_added);\n\t_dyld_register_func_for_remove_image(&image_removed);\n}\n\n```\n\ngithub上有一个完整的[示例代码](https://github.com/ddeville/ImageLogger)，\n\n从这里看出，原来就算空白工程软件启动的时候也会加载多达一百二十多个动态库，如果这些都是静态库，那该有多可怕！！\n\n\n## Demo\n\n本文使用的例子已经上传到[github](https://github.com/wangzz/Demo/tree/master/FrameworkDemo)上，需要的朋友请自取。\n\n另外，本文对某些东西可能有理解错误的地方，还请指出。\n\n##参考文档：\n\n* [Framework Programming Guide](https://developer.apple.com/library/prerelease/ios/documentation/MacOSX/Conceptual/BPFrameworks/Frameworks.html#//apple_ref/doc/uid/10000183-SW1)\n\n* [OS X Man Pages](https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/dyld.1.html)\n\n* [New Features in Xcode 6 Beta](https://developer.apple.com/library/prerelease/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_6_0.html)\n\n* [ImageLogger](https://github.com/ddeville/ImageLogger)\n\n* [Dynamic Linking](http://realmacsoftware.com/blog/dynamic-linking?utm_campaign=iOS_Dev_Weekly_Issue_140&utm_medium=email&utm_source=iOS%2BDev%2BWeekly)\n\n* [Dynamic loading](http://en.wikipedia.org/wiki/Dynamic_loading#Mac_OS_X)\n\n* [Integrating Reveal with your iOS app](http://support.revealapp.com/kb/getting-started/integrating-reveal-with-your-ios-app#dynamic-library-integration)\n\n* [IOS Framework制作全攻略](http://blog.sina.com.cn/s/blog_407fb5bc01013v6s.html)\n\n* [Build Settings中的变量@rpath,@loader_path,@executable_path](http://www.tanhao.me/pieces/1361.html)\n\n* [深入浅出Cocoa之Framework](http://www.cocoachina.com/newbie/basic/2012/0516/4255.html)\n\n* [linux中静态库和动态库的区别和汇总](http://blog.sina.com.cn/s/blog_a843a8850101rv9k.html)\n\n\n","source":"_posts/2014-06-12-wwdc2014zhi-iosshi-yong-dong-tai-ku.markdown","raw":"---\nlayout: post\ntitle: \"WWDC2014之iOS使用动态库\"\ndate: 2014-06-12 19:27:57 +0800\ncomments: true\ncategories: WWDC2014\ntags: [WWDC2014, iOS, framework, 动态库]\nkeywords: WWDC2014, iOS, framework, 动态库\n---\n\n## 苹果的开放态度\n\nWWDC2014上发布的`Xcode6 beta`版有了不少更新，其中令我惊讶的一个是苹果在iOS上开放了动态库，在`Xcode6 Beta`版的更新文档中是这样描述的：\n\n>\nFrameworks for iOS. iOS developers can now create dynamic frameworks. Frameworks are a collection of code and resources to encapsulate functionality that is valuable across multiple projects. Frameworks work perfectly with extensions, sharing logic that can be used by both the main application, and the bundled extensions.\n>\n\n详情见官方文档[New Features in Xcode 6 Beta](https://developer.apple.com/library/prerelease/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_6_0.html)。\n\nframework是Cocoa/Cocoa Touch程序中使用的一种资源打包方式，可以将将代码文件、头文件、资源文件、说明文档等集中在一起，方便开发者使用，作为一名Cocoa/Cocoa Touch程序员每天都要跟各种各样的Framework打交道。Cocoa/Cocoa Touch开发框架本身提供了大量的Framework，比如Foundation.framework/UIKit.framework/AppKit.framework等。需要注意的是，这些framework无一例外都是动态库。\n\n<!-- more -->\n\n但残忍的是，Cocoa Touch上并不允许我们使用自己创建的framework。不过由于framework是一种优秀的资源打包方式，拥有无穷智慧的程序员们便想出了以framework的形式打包静态库的招数，因此我们平时看到的第三方发布的framework无一例外都是静态库，真正的动态库是上不了AppStore的。\n\nWWDC2014给我的一个很大感触是苹果对iOS的开放态度：允许使用动态库、允许第三方键盘、`App Extension`等等，这些在之前是想都不敢想的事。\n\n\n\n## iOS上动态库可以做什么\n\n和静态库在编译时和app代码链接并打进同一个二进制包中不同，动态库可以在运行时手动加载，这样就可以做很多事情，比如：\n\n* 共享可执行文件\n\n在其它大部分平台上，动态库都可以用于不同应用间共享，这就大大节省了内存。从目前来看，iOS仍然不允许进程间共享动态库，即iOS上的动态库只能是私有的，因为我们仍然不能将动态库文件放置在除了自身沙盒以外的其它任何地方。\n\n不过iOS8上开放了`App Extension`功能，可以为一个应用创建插件，这样主app和插件之间共享动态库还是可行的。\n\n2014-6-23修正：\n\n经[@唐巧_boy](http://weibo.com/tangqiaoboy?topnav=1&wvr=5&topsug=1)提醒，sandbox会验证动态库的签名，所以如果是动态从服务器更新的动态库，是签名不了的，因此应用插件化、软件版本实时模块升级等功能在iOS上无法实现。\n\n## 创建动态库\n\n####1、创建动态库\n\n* 创建工程文件\n\n在下图所示界面能够找到Cocoa Touch动态库的创建入口：\n\n![framework](/images/article4/cocoa_touch_framework.png)\n\n跟随指引一步步操作即可创建一个新的动态库工程，我的工程名字叫Dylib，Xcode会同时创建一个和工程target同名的.h文件，比如我的就是Dylib.h。\n\n* 向工程中添加文件\n\n接下来就可以在工程中随意添加文件了。我在其中新建了一个名为Person的测试类，提供的接口如下：\n\n```objective-c\n\n@interface Person : NSObject\n\n- (void)run;\n\n@end\n\n```\n\n对应的实现部分：\n\n```objective-c\n\n@implementation Person\n\n- (void)run\n{\n    NSLog(@\"let's run.\");\n    \n    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@\"The Second Alert\" message:nil delegate:nil cancelButtonTitle:nil otherButtonTitles:@\"done\", nil];\n    [alert show];\n}\n\n@end\n\n```\n\n* 设置开放的头文件\n\n一个库里面可以后很多的代码，但是我们需要设置能够提供给外界使用的接口，可以通过Target-->Build Phases-->Headers来设置，如下图所示：\n\n![header](/images/article4/header.png)\n\n我们只需将希望开放的头文件放到Public列表中即可，比如我开放了`Dylib.h`和`Person.h`两个头文件，在生成的framework的Header目录下就可以看到这两个头文件，如下图所示：\n\n![public_header](/images/article4/public_header.png)\n\n一切完成，Run以后就能成功生成framework文件了。\n\n\n####2、通用动态库\n\n经过第一步我们只是创建了一个动态库文件，但是和静态库类似，该动态库并同时不支持真机和模拟器，可以通过以下步骤创建通用动态库：\n\n* 创建Aggregate Target\n\n按下图所示，在动态库工程中添加一个类型为Aggregate的target:\n\n![aggregate](/images/article4/aggregate.png)\n\n按提示一步步操作即可，我给`Aggregate`的Target的命名是`CommonDylib`。\n\n* 设置Target Dependencies\n\n按以下路径设置`CommonDylib`对应的`Target Dependencies`:\n\n```\nTARGETS-->CommonDylib-->Build Phases-->Target Dependencies\n```\n将真正的动态库Dylib Target添加到其中。\n\n* 添加Run Script\n\n按以下路径为`CommonDylib`添加`Run Script`:\n\n```\nTARGETS-->CommonDylib-->Build Phases-->Run Script\n```\n\n添加的脚本为：\n\n```\n# Sets the target folders and the final framework product.\nFMK_NAME=${PROJECT_NAME}\n\n# Install dir will be the final output to the framework.\n# The following line create it in the root folder of the current project.\nINSTALL_DIR=${SRCROOT}/Products/${FMK_NAME}.framework\n\n# Working dir will be deleted after the framework creation.\nWRK_DIR=build\nDEVICE_DIR=${WRK_DIR}/Release-iphoneos/${FMK_NAME}.framework\nSIMULATOR_DIR=${WRK_DIR}/Release-iphonesimulator/${FMK_NAME}.framework\n\n# -configuration ${CONFIGURATION} \n# Clean and Building both architectures.\nxcodebuild -configuration \"Release\" -target \"${FMK_NAME}\" -sdk iphoneos clean build\nxcodebuild -configuration \"Release\" -target \"${FMK_NAME}\" -sdk iphonesimulator clean build\n\n# Cleaning the oldest.\nif [ -d \"${INSTALL_DIR}\" ]\nthen\nrm -rf \"${INSTALL_DIR}\"\nfi\n\nmkdir -p \"${INSTALL_DIR}\"\n\ncp -R \"${DEVICE_DIR}/\" \"${INSTALL_DIR}/\"\n\n# Uses the Lipo Tool to merge both binary files (i386 + armv6/armv7) into one Universal final product.\nlipo -create \"${DEVICE_DIR}/${FMK_NAME}\" \"${SIMULATOR_DIR}/${FMK_NAME}\" -output \"${INSTALL_DIR}/${FMK_NAME}\"\n\nrm -r \"${WRK_DIR}\"\n\n```\n\n添加以后的效果如图所示：\n\n![commonlib_setting](/images/article4/commonlib_setting.png)\n\n\n该脚本是我根据一篇文章中介绍的脚本改写的，感谢[原文作者](http://blog.sina.com.cn/s/blog_407fb5bc01013v6s.html)。\n\n脚本的主要功能是：\n\n1.分别编译生成真机和模拟器使用的framework；\n2.使用lipo命令将其合并成一个通用framework；\n3.最后将生成的通用framework放置在工程根目录下新建的Products目录下。\n\n如果一切顺利，对`CommonDylib` target执行run操作以后就能生成一个如图所示的通用framework文件了：\n\n![products](/images/article4/products.png)\n\n\n## 使用动态库\n\n####添加动态库到工程文件\n\n经过以上步骤的努力，生成了最终需要的framework文件，为了演示动态库的使用，新建了一个名为`FrameworkDemo`的工程。通过以下方式将刚生成的framework添加到工程中：\n\n```\nTargets-->Build Phases-->Link Binary With Libraries\n```\n\n同时设置将framework作为资源文件拷贝到Bundle中：\n\n```\nTargets-->Build Phases-->Copy Bundle Resources\n```\n\n如图所示：\n\n![framework_demo_setting](/images/article4/framework_demo_setting.png)\n\n\n仅仅这样做是不够的，还需要为动态库添加链接依赖。\n\n####自动链接动态库\n\n添加完动态库后，如果希望动态库在软件启动时自动链接，可以通过以下方式设置动态库依赖路径：\n\n```\nTargets-->Build Setting-->Linking-->Runpath Search Paths\n```\n\n由于向工程中添加动态库时，将动态库设置了Copy Bundle Resources，因此就可以将`Runpath Search Paths`路径依赖设置为main bundle，即沙盒中的FrameworkDemo.app目录，向`Runpath Search Paths`中添加下述内容：\n\n```\n@executable_path/\n```\n\n如图所示：\n\n![run_search_path](/images/article4/run_search_path.png)\n\n\n其中的`@executable_path/`表示可执行文件所在路径，即沙盒中的.app目录，注意不要漏掉最后的`/`。\n\n如果你将动态库放到了沙盒中的其他目录，只需要添加对应路径的依赖就可以了。\n\n\n####需要的时候链接动态库\n\n动态库的另一个重要特性就是`即插即用`性，我们可以选择在需要的时候再加载动态库。\n\n* 更改设置\n\n如果不希望在软件一启动就加载动态库，需要将\n\n```\nTargets-->Build Phases-->Link Binary With Libraries\n```\n\n中`Dylib.framework`对应的Status由默认的`Required`改成`Optional`；或者更干脆的，将`Dylib.framework`从`Link Binary With Libraries`列表中删除即可。\n\n* 使用dlopen加载动态库\n\n以`Dylib.framework`为例，动态库中真正的可执行代码为`Dylib.framework/Dylib`文件，因此使用dlopen时如果仅仅指定加载动态库的路径为`Dylib.framework`是没法成功加载的。\n\n示例代码如下：\n\n```objective-c\n\n- (IBAction)onDlopenLoadAtPathAction1:(id)sender\n{\n    NSString *documentsPath = [NSString stringWithFormat:@\"%@/Documents/Dylib.framework/Dylib\",NSHomeDirectory()];\n    [self dlopenLoadDylibWithPath:documentsPath];\n}\n\n- (void)dlopenLoadDylibWithPath:(NSString *)path\n{\n    libHandle = NULL;\n    libHandle = dlopen([path cStringUsingEncoding:NSUTF8StringEncoding], RTLD_NOW);\n    if (libHandle == NULL) {\n        char *error = dlerror();\n        NSLog(@\"dlopen error: %s\", error);\n    } else {\n        NSLog(@\"dlopen load framework success.\");\n    }\n}\n```\n\n以dlopen方式使用动态库不知道是否能通过苹果审核。\n\n* 使用NSBundle加载动态库\n\n也可以使用NSBundle来加载动态库，实现代码如下：\n\n```objective-c\n\n- (IBAction)onBundleLoadAtPathAction1:(id)sender\n{\n    NSString *documentsPath = [NSString stringWithFormat:@\"%@/Documents/Dylib.framework\",NSHomeDirectory()];\n    [self bundleLoadDylibWithPath:documentsPath];\n}\n\n- (void)bundleLoadDylibWithPath:(NSString *)path\n{\n    _libPath = path;\n    NSError *err = nil;\n    NSBundle *bundle = [NSBundle bundleWithPath:path];\n    if ([bundle loadAndReturnError:&err]) {\n        NSLog(@\"bundle load framework success.\");\n    } else {\n        NSLog(@\"bundle load framework err:%@\",err);\n    }\n}\n\n```\n\n####使用动态库中代码\n\n通过上述任一一种方式加载的动态库后，就可以使用动态库中的代码文件了，以`Dylib.framework`中的`Person`类的使用为例：\n\n```objective-c\n- (IBAction)onTriggerButtonAction:(id)sender\n{\n    Class rootClass = NSClassFromString(@\"Person\");\n    if (rootClass) {\n        id object = [[rootClass alloc] init];\n        [(Person *)object run];\n    }\n}\n\n```\n\n注意，如果直接通过下属方式初始化`Person`类是不成功的：\n\n```objective-c\n- (IBAction)onTriggerButtonAction:(id)sender\n{\n    Person *object = [[Person alloc] init];\n    if (object) {\n       [object run];\n    }\n}\n\n```\n\n\n## 监测动态库的加载和移除\n\n我们可以通过下述方式，为动态库的加载和移除添加监听回调：\n\n```objective-c\n\n+ (void)load\n{\n\t_dyld_register_func_for_add_image(&image_added);\n\t_dyld_register_func_for_remove_image(&image_removed);\n}\n\n```\n\ngithub上有一个完整的[示例代码](https://github.com/ddeville/ImageLogger)，\n\n从这里看出，原来就算空白工程软件启动的时候也会加载多达一百二十多个动态库，如果这些都是静态库，那该有多可怕！！\n\n\n## Demo\n\n本文使用的例子已经上传到[github](https://github.com/wangzz/Demo/tree/master/FrameworkDemo)上，需要的朋友请自取。\n\n另外，本文对某些东西可能有理解错误的地方，还请指出。\n\n##参考文档：\n\n* [Framework Programming Guide](https://developer.apple.com/library/prerelease/ios/documentation/MacOSX/Conceptual/BPFrameworks/Frameworks.html#//apple_ref/doc/uid/10000183-SW1)\n\n* [OS X Man Pages](https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/dyld.1.html)\n\n* [New Features in Xcode 6 Beta](https://developer.apple.com/library/prerelease/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_6_0.html)\n\n* [ImageLogger](https://github.com/ddeville/ImageLogger)\n\n* [Dynamic Linking](http://realmacsoftware.com/blog/dynamic-linking?utm_campaign=iOS_Dev_Weekly_Issue_140&utm_medium=email&utm_source=iOS%2BDev%2BWeekly)\n\n* [Dynamic loading](http://en.wikipedia.org/wiki/Dynamic_loading#Mac_OS_X)\n\n* [Integrating Reveal with your iOS app](http://support.revealapp.com/kb/getting-started/integrating-reveal-with-your-ios-app#dynamic-library-integration)\n\n* [IOS Framework制作全攻略](http://blog.sina.com.cn/s/blog_407fb5bc01013v6s.html)\n\n* [Build Settings中的变量@rpath,@loader_path,@executable_path](http://www.tanhao.me/pieces/1361.html)\n\n* [深入浅出Cocoa之Framework](http://www.cocoachina.com/newbie/basic/2012/0516/4255.html)\n\n* [linux中静态库和动态库的区别和汇总](http://blog.sina.com.cn/s/blog_a843a8850101rv9k.html)\n\n\n","slug":"2014-06-12-wwdc2014zhi-iosshi-yong-dong-tai-ku","published":1,"updated":"2019-09-23T12:50:57.000Z","photos":[],"link":"","_id":"ck0zclid90018qhtft93p0jz5","content":"<h2 id=\"苹果的开放态度\"><a href=\"#苹果的开放态度\" class=\"headerlink\" title=\"苹果的开放态度\"></a>苹果的开放态度</h2><p>WWDC2014上发布的<code>Xcode6 beta</code>版有了不少更新，其中令我惊讶的一个是苹果在iOS上开放了动态库，在<code>Xcode6 Beta</code>版的更新文档中是这样描述的：</p>\n<blockquote>\n</blockquote>\n<p>Frameworks for iOS. iOS developers can now create dynamic frameworks. Frameworks are a collection of code and resources to encapsulate functionality that is valuable across multiple projects. Frameworks work perfectly with extensions, sharing logic that can be used by both the main application, and the bundled extensions.</p>\n<blockquote>\n</blockquote>\n<p>详情见官方文档<a href=\"https://developer.apple.com/library/prerelease/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_6_0.html\" target=\"_blank\" rel=\"noopener\">New Features in Xcode 6 Beta</a>。</p>\n<p>framework是Cocoa/Cocoa Touch程序中使用的一种资源打包方式，可以将将代码文件、头文件、资源文件、说明文档等集中在一起，方便开发者使用，作为一名Cocoa/Cocoa Touch程序员每天都要跟各种各样的Framework打交道。Cocoa/Cocoa Touch开发框架本身提供了大量的Framework，比如Foundation.framework/UIKit.framework/AppKit.framework等。需要注意的是，这些framework无一例外都是动态库。</p>\n<a id=\"more\"></a>\n\n<p>但残忍的是，Cocoa Touch上并不允许我们使用自己创建的framework。不过由于framework是一种优秀的资源打包方式，拥有无穷智慧的程序员们便想出了以framework的形式打包静态库的招数，因此我们平时看到的第三方发布的framework无一例外都是静态库，真正的动态库是上不了AppStore的。</p>\n<p>WWDC2014给我的一个很大感触是苹果对iOS的开放态度：允许使用动态库、允许第三方键盘、<code>App Extension</code>等等，这些在之前是想都不敢想的事。</p>\n<h2 id=\"iOS上动态库可以做什么\"><a href=\"#iOS上动态库可以做什么\" class=\"headerlink\" title=\"iOS上动态库可以做什么\"></a>iOS上动态库可以做什么</h2><p>和静态库在编译时和app代码链接并打进同一个二进制包中不同，动态库可以在运行时手动加载，这样就可以做很多事情，比如：</p>\n<ul>\n<li>共享可执行文件</li>\n</ul>\n<p>在其它大部分平台上，动态库都可以用于不同应用间共享，这就大大节省了内存。从目前来看，iOS仍然不允许进程间共享动态库，即iOS上的动态库只能是私有的，因为我们仍然不能将动态库文件放置在除了自身沙盒以外的其它任何地方。</p>\n<p>不过iOS8上开放了<code>App Extension</code>功能，可以为一个应用创建插件，这样主app和插件之间共享动态库还是可行的。</p>\n<p>2014-6-23修正：</p>\n<p>经<a href=\"http://weibo.com/tangqiaoboy?topnav=1&wvr=5&topsug=1\" target=\"_blank\" rel=\"noopener\">@唐巧_boy</a>提醒，sandbox会验证动态库的签名，所以如果是动态从服务器更新的动态库，是签名不了的，因此应用插件化、软件版本实时模块升级等功能在iOS上无法实现。</p>\n<h2 id=\"创建动态库\"><a href=\"#创建动态库\" class=\"headerlink\" title=\"创建动态库\"></a>创建动态库</h2><p>####1、创建动态库</p>\n<ul>\n<li>创建工程文件</li>\n</ul>\n<p>在下图所示界面能够找到Cocoa Touch动态库的创建入口：</p>\n<p><img src=\"/images/article4/cocoa_touch_framework.png\" alt=\"framework\"></p>\n<p>跟随指引一步步操作即可创建一个新的动态库工程，我的工程名字叫Dylib，Xcode会同时创建一个和工程target同名的.h文件，比如我的就是Dylib.h。</p>\n<ul>\n<li>向工程中添加文件</li>\n</ul>\n<p>接下来就可以在工程中随意添加文件了。我在其中新建了一个名为Person的测试类，提供的接口如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@interface Person : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)run;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>对应的实现部分：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@implementation Person</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)run</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSLog(@&quot;let&apos;s run.&quot;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@&quot;The Second Alert&quot; message:nil delegate:nil cancelButtonTitle:nil otherButtonTitles:@&quot;done&quot;, nil];</span><br><span class=\"line\">    [alert show];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置开放的头文件</li>\n</ul>\n<p>一个库里面可以后很多的代码，但是我们需要设置能够提供给外界使用的接口，可以通过Target–&gt;Build Phases–&gt;Headers来设置，如下图所示：</p>\n<p><img src=\"/images/article4/header.png\" alt=\"header\"></p>\n<p>我们只需将希望开放的头文件放到Public列表中即可，比如我开放了<code>Dylib.h</code>和<code>Person.h</code>两个头文件，在生成的framework的Header目录下就可以看到这两个头文件，如下图所示：</p>\n<p><img src=\"/images/article4/public_header.png\" alt=\"public_header\"></p>\n<p>一切完成，Run以后就能成功生成framework文件了。</p>\n<p>####2、通用动态库</p>\n<p>经过第一步我们只是创建了一个动态库文件，但是和静态库类似，该动态库并同时不支持真机和模拟器，可以通过以下步骤创建通用动态库：</p>\n<ul>\n<li>创建Aggregate Target</li>\n</ul>\n<p>按下图所示，在动态库工程中添加一个类型为Aggregate的target:</p>\n<p><img src=\"/images/article4/aggregate.png\" alt=\"aggregate\"></p>\n<p>按提示一步步操作即可，我给<code>Aggregate</code>的Target的命名是<code>CommonDylib</code>。</p>\n<ul>\n<li>设置Target Dependencies</li>\n</ul>\n<p>按以下路径设置<code>CommonDylib</code>对应的<code>Target Dependencies</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TARGETS--&gt;CommonDylib--&gt;Build Phases--&gt;Target Dependencies</span><br></pre></td></tr></table></figure>\n\n<p>将真正的动态库Dylib Target添加到其中。</p>\n<ul>\n<li>添加Run Script</li>\n</ul>\n<p>按以下路径为<code>CommonDylib</code>添加<code>Run Script</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TARGETS--&gt;CommonDylib--&gt;Build Phases--&gt;Run Script</span><br></pre></td></tr></table></figure>\n\n<p>添加的脚本为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Sets the target folders and the final framework product.</span><br><span class=\"line\">FMK_NAME=$&#123;PROJECT_NAME&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># Install dir will be the final output to the framework.</span><br><span class=\"line\"># The following line create it in the root folder of the current project.</span><br><span class=\"line\">INSTALL_DIR=$&#123;SRCROOT&#125;/Products/$&#123;FMK_NAME&#125;.framework</span><br><span class=\"line\"></span><br><span class=\"line\"># Working dir will be deleted after the framework creation.</span><br><span class=\"line\">WRK_DIR=build</span><br><span class=\"line\">DEVICE_DIR=$&#123;WRK_DIR&#125;/Release-iphoneos/$&#123;FMK_NAME&#125;.framework</span><br><span class=\"line\">SIMULATOR_DIR=$&#123;WRK_DIR&#125;/Release-iphonesimulator/$&#123;FMK_NAME&#125;.framework</span><br><span class=\"line\"></span><br><span class=\"line\"># -configuration $&#123;CONFIGURATION&#125; </span><br><span class=\"line\"># Clean and Building both architectures.</span><br><span class=\"line\">xcodebuild -configuration &quot;Release&quot; -target &quot;$&#123;FMK_NAME&#125;&quot; -sdk iphoneos clean build</span><br><span class=\"line\">xcodebuild -configuration &quot;Release&quot; -target &quot;$&#123;FMK_NAME&#125;&quot; -sdk iphonesimulator clean build</span><br><span class=\"line\"></span><br><span class=\"line\"># Cleaning the oldest.</span><br><span class=\"line\">if [ -d &quot;$&#123;INSTALL_DIR&#125;&quot; ]</span><br><span class=\"line\">then</span><br><span class=\"line\">rm -rf &quot;$&#123;INSTALL_DIR&#125;&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p &quot;$&#123;INSTALL_DIR&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">cp -R &quot;$&#123;DEVICE_DIR&#125;/&quot; &quot;$&#123;INSTALL_DIR&#125;/&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># Uses the Lipo Tool to merge both binary files (i386 + armv6/armv7) into one Universal final product.</span><br><span class=\"line\">lipo -create &quot;$&#123;DEVICE_DIR&#125;/$&#123;FMK_NAME&#125;&quot; &quot;$&#123;SIMULATOR_DIR&#125;/$&#123;FMK_NAME&#125;&quot; -output &quot;$&#123;INSTALL_DIR&#125;/$&#123;FMK_NAME&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">rm -r &quot;$&#123;WRK_DIR&#125;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>添加以后的效果如图所示：</p>\n<p><img src=\"/images/article4/commonlib_setting.png\" alt=\"commonlib_setting\"></p>\n<p>该脚本是我根据一篇文章中介绍的脚本改写的，感谢<a href=\"http://blog.sina.com.cn/s/blog_407fb5bc01013v6s.html\" target=\"_blank\" rel=\"noopener\">原文作者</a>。</p>\n<p>脚本的主要功能是：</p>\n<p>1.分别编译生成真机和模拟器使用的framework；<br>2.使用lipo命令将其合并成一个通用framework；<br>3.最后将生成的通用framework放置在工程根目录下新建的Products目录下。</p>\n<p>如果一切顺利，对<code>CommonDylib</code> target执行run操作以后就能生成一个如图所示的通用framework文件了：</p>\n<p><img src=\"/images/article4/products.png\" alt=\"products\"></p>\n<h2 id=\"使用动态库\"><a href=\"#使用动态库\" class=\"headerlink\" title=\"使用动态库\"></a>使用动态库</h2><p>####添加动态库到工程文件</p>\n<p>经过以上步骤的努力，生成了最终需要的framework文件，为了演示动态库的使用，新建了一个名为<code>FrameworkDemo</code>的工程。通过以下方式将刚生成的framework添加到工程中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Targets--&gt;Build Phases--&gt;Link Binary With Libraries</span><br></pre></td></tr></table></figure>\n\n<p>同时设置将framework作为资源文件拷贝到Bundle中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Targets--&gt;Build Phases--&gt;Copy Bundle Resources</span><br></pre></td></tr></table></figure>\n\n<p>如图所示：</p>\n<p><img src=\"/images/article4/framework_demo_setting.png\" alt=\"framework_demo_setting\"></p>\n<p>仅仅这样做是不够的，还需要为动态库添加链接依赖。</p>\n<p>####自动链接动态库</p>\n<p>添加完动态库后，如果希望动态库在软件启动时自动链接，可以通过以下方式设置动态库依赖路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Targets--&gt;Build Setting--&gt;Linking--&gt;Runpath Search Paths</span><br></pre></td></tr></table></figure>\n\n<p>由于向工程中添加动态库时，将动态库设置了Copy Bundle Resources，因此就可以将<code>Runpath Search Paths</code>路径依赖设置为main bundle，即沙盒中的FrameworkDemo.app目录，向<code>Runpath Search Paths</code>中添加下述内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@executable_path/</span><br></pre></td></tr></table></figure>\n\n<p>如图所示：</p>\n<p><img src=\"/images/article4/run_search_path.png\" alt=\"run_search_path\"></p>\n<p>其中的<code>@executable_path/</code>表示可执行文件所在路径，即沙盒中的.app目录，注意不要漏掉最后的<code>/</code>。</p>\n<p>如果你将动态库放到了沙盒中的其他目录，只需要添加对应路径的依赖就可以了。</p>\n<p>####需要的时候链接动态库</p>\n<p>动态库的另一个重要特性就是<code>即插即用</code>性，我们可以选择在需要的时候再加载动态库。</p>\n<ul>\n<li>更改设置</li>\n</ul>\n<p>如果不希望在软件一启动就加载动态库，需要将</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Targets--&gt;Build Phases--&gt;Link Binary With Libraries</span><br></pre></td></tr></table></figure>\n\n<p>中<code>Dylib.framework</code>对应的Status由默认的<code>Required</code>改成<code>Optional</code>；或者更干脆的，将<code>Dylib.framework</code>从<code>Link Binary With Libraries</code>列表中删除即可。</p>\n<ul>\n<li>使用dlopen加载动态库</li>\n</ul>\n<p>以<code>Dylib.framework</code>为例，动态库中真正的可执行代码为<code>Dylib.framework/Dylib</code>文件，因此使用dlopen时如果仅仅指定加载动态库的路径为<code>Dylib.framework</code>是没法成功加载的。</p>\n<p>示例代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- (IBAction)onDlopenLoadAtPathAction1:(id)sender</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSString *documentsPath = [NSString stringWithFormat:@&quot;%@/Documents/Dylib.framework/Dylib&quot;,NSHomeDirectory()];</span><br><span class=\"line\">    [self dlopenLoadDylibWithPath:documentsPath];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)dlopenLoadDylibWithPath:(NSString *)path</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    libHandle = NULL;</span><br><span class=\"line\">    libHandle = dlopen([path cStringUsingEncoding:NSUTF8StringEncoding], RTLD_NOW);</span><br><span class=\"line\">    if (libHandle == NULL) &#123;</span><br><span class=\"line\">        char *error = dlerror();</span><br><span class=\"line\">        NSLog(@&quot;dlopen error: %s&quot;, error);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        NSLog(@&quot;dlopen load framework success.&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以dlopen方式使用动态库不知道是否能通过苹果审核。</p>\n<ul>\n<li>使用NSBundle加载动态库</li>\n</ul>\n<p>也可以使用NSBundle来加载动态库，实现代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- (IBAction)onBundleLoadAtPathAction1:(id)sender</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSString *documentsPath = [NSString stringWithFormat:@&quot;%@/Documents/Dylib.framework&quot;,NSHomeDirectory()];</span><br><span class=\"line\">    [self bundleLoadDylibWithPath:documentsPath];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)bundleLoadDylibWithPath:(NSString *)path</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _libPath = path;</span><br><span class=\"line\">    NSError *err = nil;</span><br><span class=\"line\">    NSBundle *bundle = [NSBundle bundleWithPath:path];</span><br><span class=\"line\">    if ([bundle loadAndReturnError:&amp;err]) &#123;</span><br><span class=\"line\">        NSLog(@&quot;bundle load framework success.&quot;);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        NSLog(@&quot;bundle load framework err:%@&quot;,err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>####使用动态库中代码</p>\n<p>通过上述任一一种方式加载的动态库后，就可以使用动态库中的代码文件了，以<code>Dylib.framework</code>中的<code>Person</code>类的使用为例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (IBAction)onTriggerButtonAction:(id)sender</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Class rootClass = NSClassFromString(@&quot;Person&quot;);</span><br><span class=\"line\">    if (rootClass) &#123;</span><br><span class=\"line\">        id object = [[rootClass alloc] init];</span><br><span class=\"line\">        [(Person *)object run];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意，如果直接通过下属方式初始化<code>Person</code>类是不成功的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (IBAction)onTriggerButtonAction:(id)sender</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Person *object = [[Person alloc] init];</span><br><span class=\"line\">    if (object) &#123;</span><br><span class=\"line\">       [object run];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"监测动态库的加载和移除\"><a href=\"#监测动态库的加载和移除\" class=\"headerlink\" title=\"监测动态库的加载和移除\"></a>监测动态库的加载和移除</h2><p>我们可以通过下述方式，为动态库的加载和移除添加监听回调：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">+ (void)load</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_dyld_register_func_for_add_image(&amp;image_added);</span><br><span class=\"line\">\t_dyld_register_func_for_remove_image(&amp;image_removed);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>github上有一个完整的<a href=\"https://github.com/ddeville/ImageLogger\" target=\"_blank\" rel=\"noopener\">示例代码</a>，</p>\n<p>从这里看出，原来就算空白工程软件启动的时候也会加载多达一百二十多个动态库，如果这些都是静态库，那该有多可怕！！</p>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p>本文使用的例子已经上传到<a href=\"https://github.com/wangzz/Demo/tree/master/FrameworkDemo\" target=\"_blank\" rel=\"noopener\">github</a>上，需要的朋友请自取。</p>\n<p>另外，本文对某些东西可能有理解错误的地方，还请指出。</p>\n<p>##参考文档：</p>\n<ul>\n<li><p><a href=\"https://developer.apple.com/library/prerelease/ios/documentation/MacOSX/Conceptual/BPFrameworks/Frameworks.html#//apple_ref/doc/uid/10000183-SW1\" target=\"_blank\" rel=\"noopener\">Framework Programming Guide</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/dyld.1.html\" target=\"_blank\" rel=\"noopener\">OS X Man Pages</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/prerelease/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_6_0.html\" target=\"_blank\" rel=\"noopener\">New Features in Xcode 6 Beta</a></p>\n</li>\n<li><p><a href=\"https://github.com/ddeville/ImageLogger\" target=\"_blank\" rel=\"noopener\">ImageLogger</a></p>\n</li>\n<li><p><a href=\"http://realmacsoftware.com/blog/dynamic-linking?utm_campaign=iOS_Dev_Weekly_Issue_140&utm_medium=email&utm_source=iOS%2BDev%2BWeekly\" target=\"_blank\" rel=\"noopener\">Dynamic Linking</a></p>\n</li>\n<li><p><a href=\"http://en.wikipedia.org/wiki/Dynamic_loading#Mac_OS_X\" target=\"_blank\" rel=\"noopener\">Dynamic loading</a></p>\n</li>\n<li><p><a href=\"http://support.revealapp.com/kb/getting-started/integrating-reveal-with-your-ios-app#dynamic-library-integration\" target=\"_blank\" rel=\"noopener\">Integrating Reveal with your iOS app</a></p>\n</li>\n<li><p><a href=\"http://blog.sina.com.cn/s/blog_407fb5bc01013v6s.html\" target=\"_blank\" rel=\"noopener\">IOS Framework制作全攻略</a></p>\n</li>\n<li><p><a href=\"http://www.tanhao.me/pieces/1361.html\" target=\"_blank\" rel=\"noopener\">Build Settings中的变量@rpath,@loader_path,@executable_path</a></p>\n</li>\n<li><p><a href=\"http://www.cocoachina.com/newbie/basic/2012/0516/4255.html\" target=\"_blank\" rel=\"noopener\">深入浅出Cocoa之Framework</a></p>\n</li>\n<li><p><a href=\"http://blog.sina.com.cn/s/blog_a843a8850101rv9k.html\" target=\"_blank\" rel=\"noopener\">linux中静态库和动态库的区别和汇总</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"苹果的开放态度\"><a href=\"#苹果的开放态度\" class=\"headerlink\" title=\"苹果的开放态度\"></a>苹果的开放态度</h2><p>WWDC2014上发布的<code>Xcode6 beta</code>版有了不少更新，其中令我惊讶的一个是苹果在iOS上开放了动态库，在<code>Xcode6 Beta</code>版的更新文档中是这样描述的：</p>\n<blockquote>\n</blockquote>\n<p>Frameworks for iOS. iOS developers can now create dynamic frameworks. Frameworks are a collection of code and resources to encapsulate functionality that is valuable across multiple projects. Frameworks work perfectly with extensions, sharing logic that can be used by both the main application, and the bundled extensions.</p>\n<blockquote>\n</blockquote>\n<p>详情见官方文档<a href=\"https://developer.apple.com/library/prerelease/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_6_0.html\" target=\"_blank\" rel=\"noopener\">New Features in Xcode 6 Beta</a>。</p>\n<p>framework是Cocoa/Cocoa Touch程序中使用的一种资源打包方式，可以将将代码文件、头文件、资源文件、说明文档等集中在一起，方便开发者使用，作为一名Cocoa/Cocoa Touch程序员每天都要跟各种各样的Framework打交道。Cocoa/Cocoa Touch开发框架本身提供了大量的Framework，比如Foundation.framework/UIKit.framework/AppKit.framework等。需要注意的是，这些framework无一例外都是动态库。</p>","more":"<p>但残忍的是，Cocoa Touch上并不允许我们使用自己创建的framework。不过由于framework是一种优秀的资源打包方式，拥有无穷智慧的程序员们便想出了以framework的形式打包静态库的招数，因此我们平时看到的第三方发布的framework无一例外都是静态库，真正的动态库是上不了AppStore的。</p>\n<p>WWDC2014给我的一个很大感触是苹果对iOS的开放态度：允许使用动态库、允许第三方键盘、<code>App Extension</code>等等，这些在之前是想都不敢想的事。</p>\n<h2 id=\"iOS上动态库可以做什么\"><a href=\"#iOS上动态库可以做什么\" class=\"headerlink\" title=\"iOS上动态库可以做什么\"></a>iOS上动态库可以做什么</h2><p>和静态库在编译时和app代码链接并打进同一个二进制包中不同，动态库可以在运行时手动加载，这样就可以做很多事情，比如：</p>\n<ul>\n<li>共享可执行文件</li>\n</ul>\n<p>在其它大部分平台上，动态库都可以用于不同应用间共享，这就大大节省了内存。从目前来看，iOS仍然不允许进程间共享动态库，即iOS上的动态库只能是私有的，因为我们仍然不能将动态库文件放置在除了自身沙盒以外的其它任何地方。</p>\n<p>不过iOS8上开放了<code>App Extension</code>功能，可以为一个应用创建插件，这样主app和插件之间共享动态库还是可行的。</p>\n<p>2014-6-23修正：</p>\n<p>经<a href=\"http://weibo.com/tangqiaoboy?topnav=1&wvr=5&topsug=1\" target=\"_blank\" rel=\"noopener\">@唐巧_boy</a>提醒，sandbox会验证动态库的签名，所以如果是动态从服务器更新的动态库，是签名不了的，因此应用插件化、软件版本实时模块升级等功能在iOS上无法实现。</p>\n<h2 id=\"创建动态库\"><a href=\"#创建动态库\" class=\"headerlink\" title=\"创建动态库\"></a>创建动态库</h2><p>####1、创建动态库</p>\n<ul>\n<li>创建工程文件</li>\n</ul>\n<p>在下图所示界面能够找到Cocoa Touch动态库的创建入口：</p>\n<p><img src=\"/images/article4/cocoa_touch_framework.png\" alt=\"framework\"></p>\n<p>跟随指引一步步操作即可创建一个新的动态库工程，我的工程名字叫Dylib，Xcode会同时创建一个和工程target同名的.h文件，比如我的就是Dylib.h。</p>\n<ul>\n<li>向工程中添加文件</li>\n</ul>\n<p>接下来就可以在工程中随意添加文件了。我在其中新建了一个名为Person的测试类，提供的接口如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@interface Person : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)run;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>对应的实现部分：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@implementation Person</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)run</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSLog(@&quot;let&apos;s run.&quot;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@&quot;The Second Alert&quot; message:nil delegate:nil cancelButtonTitle:nil otherButtonTitles:@&quot;done&quot;, nil];</span><br><span class=\"line\">    [alert show];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置开放的头文件</li>\n</ul>\n<p>一个库里面可以后很多的代码，但是我们需要设置能够提供给外界使用的接口，可以通过Target–&gt;Build Phases–&gt;Headers来设置，如下图所示：</p>\n<p><img src=\"/images/article4/header.png\" alt=\"header\"></p>\n<p>我们只需将希望开放的头文件放到Public列表中即可，比如我开放了<code>Dylib.h</code>和<code>Person.h</code>两个头文件，在生成的framework的Header目录下就可以看到这两个头文件，如下图所示：</p>\n<p><img src=\"/images/article4/public_header.png\" alt=\"public_header\"></p>\n<p>一切完成，Run以后就能成功生成framework文件了。</p>\n<p>####2、通用动态库</p>\n<p>经过第一步我们只是创建了一个动态库文件，但是和静态库类似，该动态库并同时不支持真机和模拟器，可以通过以下步骤创建通用动态库：</p>\n<ul>\n<li>创建Aggregate Target</li>\n</ul>\n<p>按下图所示，在动态库工程中添加一个类型为Aggregate的target:</p>\n<p><img src=\"/images/article4/aggregate.png\" alt=\"aggregate\"></p>\n<p>按提示一步步操作即可，我给<code>Aggregate</code>的Target的命名是<code>CommonDylib</code>。</p>\n<ul>\n<li>设置Target Dependencies</li>\n</ul>\n<p>按以下路径设置<code>CommonDylib</code>对应的<code>Target Dependencies</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TARGETS--&gt;CommonDylib--&gt;Build Phases--&gt;Target Dependencies</span><br></pre></td></tr></table></figure>\n\n<p>将真正的动态库Dylib Target添加到其中。</p>\n<ul>\n<li>添加Run Script</li>\n</ul>\n<p>按以下路径为<code>CommonDylib</code>添加<code>Run Script</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TARGETS--&gt;CommonDylib--&gt;Build Phases--&gt;Run Script</span><br></pre></td></tr></table></figure>\n\n<p>添加的脚本为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Sets the target folders and the final framework product.</span><br><span class=\"line\">FMK_NAME=$&#123;PROJECT_NAME&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># Install dir will be the final output to the framework.</span><br><span class=\"line\"># The following line create it in the root folder of the current project.</span><br><span class=\"line\">INSTALL_DIR=$&#123;SRCROOT&#125;/Products/$&#123;FMK_NAME&#125;.framework</span><br><span class=\"line\"></span><br><span class=\"line\"># Working dir will be deleted after the framework creation.</span><br><span class=\"line\">WRK_DIR=build</span><br><span class=\"line\">DEVICE_DIR=$&#123;WRK_DIR&#125;/Release-iphoneos/$&#123;FMK_NAME&#125;.framework</span><br><span class=\"line\">SIMULATOR_DIR=$&#123;WRK_DIR&#125;/Release-iphonesimulator/$&#123;FMK_NAME&#125;.framework</span><br><span class=\"line\"></span><br><span class=\"line\"># -configuration $&#123;CONFIGURATION&#125; </span><br><span class=\"line\"># Clean and Building both architectures.</span><br><span class=\"line\">xcodebuild -configuration &quot;Release&quot; -target &quot;$&#123;FMK_NAME&#125;&quot; -sdk iphoneos clean build</span><br><span class=\"line\">xcodebuild -configuration &quot;Release&quot; -target &quot;$&#123;FMK_NAME&#125;&quot; -sdk iphonesimulator clean build</span><br><span class=\"line\"></span><br><span class=\"line\"># Cleaning the oldest.</span><br><span class=\"line\">if [ -d &quot;$&#123;INSTALL_DIR&#125;&quot; ]</span><br><span class=\"line\">then</span><br><span class=\"line\">rm -rf &quot;$&#123;INSTALL_DIR&#125;&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p &quot;$&#123;INSTALL_DIR&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">cp -R &quot;$&#123;DEVICE_DIR&#125;/&quot; &quot;$&#123;INSTALL_DIR&#125;/&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># Uses the Lipo Tool to merge both binary files (i386 + armv6/armv7) into one Universal final product.</span><br><span class=\"line\">lipo -create &quot;$&#123;DEVICE_DIR&#125;/$&#123;FMK_NAME&#125;&quot; &quot;$&#123;SIMULATOR_DIR&#125;/$&#123;FMK_NAME&#125;&quot; -output &quot;$&#123;INSTALL_DIR&#125;/$&#123;FMK_NAME&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">rm -r &quot;$&#123;WRK_DIR&#125;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>添加以后的效果如图所示：</p>\n<p><img src=\"/images/article4/commonlib_setting.png\" alt=\"commonlib_setting\"></p>\n<p>该脚本是我根据一篇文章中介绍的脚本改写的，感谢<a href=\"http://blog.sina.com.cn/s/blog_407fb5bc01013v6s.html\" target=\"_blank\" rel=\"noopener\">原文作者</a>。</p>\n<p>脚本的主要功能是：</p>\n<p>1.分别编译生成真机和模拟器使用的framework；<br>2.使用lipo命令将其合并成一个通用framework；<br>3.最后将生成的通用framework放置在工程根目录下新建的Products目录下。</p>\n<p>如果一切顺利，对<code>CommonDylib</code> target执行run操作以后就能生成一个如图所示的通用framework文件了：</p>\n<p><img src=\"/images/article4/products.png\" alt=\"products\"></p>\n<h2 id=\"使用动态库\"><a href=\"#使用动态库\" class=\"headerlink\" title=\"使用动态库\"></a>使用动态库</h2><p>####添加动态库到工程文件</p>\n<p>经过以上步骤的努力，生成了最终需要的framework文件，为了演示动态库的使用，新建了一个名为<code>FrameworkDemo</code>的工程。通过以下方式将刚生成的framework添加到工程中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Targets--&gt;Build Phases--&gt;Link Binary With Libraries</span><br></pre></td></tr></table></figure>\n\n<p>同时设置将framework作为资源文件拷贝到Bundle中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Targets--&gt;Build Phases--&gt;Copy Bundle Resources</span><br></pre></td></tr></table></figure>\n\n<p>如图所示：</p>\n<p><img src=\"/images/article4/framework_demo_setting.png\" alt=\"framework_demo_setting\"></p>\n<p>仅仅这样做是不够的，还需要为动态库添加链接依赖。</p>\n<p>####自动链接动态库</p>\n<p>添加完动态库后，如果希望动态库在软件启动时自动链接，可以通过以下方式设置动态库依赖路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Targets--&gt;Build Setting--&gt;Linking--&gt;Runpath Search Paths</span><br></pre></td></tr></table></figure>\n\n<p>由于向工程中添加动态库时，将动态库设置了Copy Bundle Resources，因此就可以将<code>Runpath Search Paths</code>路径依赖设置为main bundle，即沙盒中的FrameworkDemo.app目录，向<code>Runpath Search Paths</code>中添加下述内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@executable_path/</span><br></pre></td></tr></table></figure>\n\n<p>如图所示：</p>\n<p><img src=\"/images/article4/run_search_path.png\" alt=\"run_search_path\"></p>\n<p>其中的<code>@executable_path/</code>表示可执行文件所在路径，即沙盒中的.app目录，注意不要漏掉最后的<code>/</code>。</p>\n<p>如果你将动态库放到了沙盒中的其他目录，只需要添加对应路径的依赖就可以了。</p>\n<p>####需要的时候链接动态库</p>\n<p>动态库的另一个重要特性就是<code>即插即用</code>性，我们可以选择在需要的时候再加载动态库。</p>\n<ul>\n<li>更改设置</li>\n</ul>\n<p>如果不希望在软件一启动就加载动态库，需要将</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Targets--&gt;Build Phases--&gt;Link Binary With Libraries</span><br></pre></td></tr></table></figure>\n\n<p>中<code>Dylib.framework</code>对应的Status由默认的<code>Required</code>改成<code>Optional</code>；或者更干脆的，将<code>Dylib.framework</code>从<code>Link Binary With Libraries</code>列表中删除即可。</p>\n<ul>\n<li>使用dlopen加载动态库</li>\n</ul>\n<p>以<code>Dylib.framework</code>为例，动态库中真正的可执行代码为<code>Dylib.framework/Dylib</code>文件，因此使用dlopen时如果仅仅指定加载动态库的路径为<code>Dylib.framework</code>是没法成功加载的。</p>\n<p>示例代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- (IBAction)onDlopenLoadAtPathAction1:(id)sender</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSString *documentsPath = [NSString stringWithFormat:@&quot;%@/Documents/Dylib.framework/Dylib&quot;,NSHomeDirectory()];</span><br><span class=\"line\">    [self dlopenLoadDylibWithPath:documentsPath];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)dlopenLoadDylibWithPath:(NSString *)path</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    libHandle = NULL;</span><br><span class=\"line\">    libHandle = dlopen([path cStringUsingEncoding:NSUTF8StringEncoding], RTLD_NOW);</span><br><span class=\"line\">    if (libHandle == NULL) &#123;</span><br><span class=\"line\">        char *error = dlerror();</span><br><span class=\"line\">        NSLog(@&quot;dlopen error: %s&quot;, error);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        NSLog(@&quot;dlopen load framework success.&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以dlopen方式使用动态库不知道是否能通过苹果审核。</p>\n<ul>\n<li>使用NSBundle加载动态库</li>\n</ul>\n<p>也可以使用NSBundle来加载动态库，实现代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- (IBAction)onBundleLoadAtPathAction1:(id)sender</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSString *documentsPath = [NSString stringWithFormat:@&quot;%@/Documents/Dylib.framework&quot;,NSHomeDirectory()];</span><br><span class=\"line\">    [self bundleLoadDylibWithPath:documentsPath];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)bundleLoadDylibWithPath:(NSString *)path</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _libPath = path;</span><br><span class=\"line\">    NSError *err = nil;</span><br><span class=\"line\">    NSBundle *bundle = [NSBundle bundleWithPath:path];</span><br><span class=\"line\">    if ([bundle loadAndReturnError:&amp;err]) &#123;</span><br><span class=\"line\">        NSLog(@&quot;bundle load framework success.&quot;);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        NSLog(@&quot;bundle load framework err:%@&quot;,err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>####使用动态库中代码</p>\n<p>通过上述任一一种方式加载的动态库后，就可以使用动态库中的代码文件了，以<code>Dylib.framework</code>中的<code>Person</code>类的使用为例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (IBAction)onTriggerButtonAction:(id)sender</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Class rootClass = NSClassFromString(@&quot;Person&quot;);</span><br><span class=\"line\">    if (rootClass) &#123;</span><br><span class=\"line\">        id object = [[rootClass alloc] init];</span><br><span class=\"line\">        [(Person *)object run];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意，如果直接通过下属方式初始化<code>Person</code>类是不成功的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (IBAction)onTriggerButtonAction:(id)sender</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Person *object = [[Person alloc] init];</span><br><span class=\"line\">    if (object) &#123;</span><br><span class=\"line\">       [object run];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"监测动态库的加载和移除\"><a href=\"#监测动态库的加载和移除\" class=\"headerlink\" title=\"监测动态库的加载和移除\"></a>监测动态库的加载和移除</h2><p>我们可以通过下述方式，为动态库的加载和移除添加监听回调：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">+ (void)load</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_dyld_register_func_for_add_image(&amp;image_added);</span><br><span class=\"line\">\t_dyld_register_func_for_remove_image(&amp;image_removed);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>github上有一个完整的<a href=\"https://github.com/ddeville/ImageLogger\" target=\"_blank\" rel=\"noopener\">示例代码</a>，</p>\n<p>从这里看出，原来就算空白工程软件启动的时候也会加载多达一百二十多个动态库，如果这些都是静态库，那该有多可怕！！</p>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p>本文使用的例子已经上传到<a href=\"https://github.com/wangzz/Demo/tree/master/FrameworkDemo\" target=\"_blank\" rel=\"noopener\">github</a>上，需要的朋友请自取。</p>\n<p>另外，本文对某些东西可能有理解错误的地方，还请指出。</p>\n<p>##参考文档：</p>\n<ul>\n<li><p><a href=\"https://developer.apple.com/library/prerelease/ios/documentation/MacOSX/Conceptual/BPFrameworks/Frameworks.html#//apple_ref/doc/uid/10000183-SW1\" target=\"_blank\" rel=\"noopener\">Framework Programming Guide</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/dyld.1.html\" target=\"_blank\" rel=\"noopener\">OS X Man Pages</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/prerelease/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_6_0.html\" target=\"_blank\" rel=\"noopener\">New Features in Xcode 6 Beta</a></p>\n</li>\n<li><p><a href=\"https://github.com/ddeville/ImageLogger\" target=\"_blank\" rel=\"noopener\">ImageLogger</a></p>\n</li>\n<li><p><a href=\"http://realmacsoftware.com/blog/dynamic-linking?utm_campaign=iOS_Dev_Weekly_Issue_140&utm_medium=email&utm_source=iOS%2BDev%2BWeekly\" target=\"_blank\" rel=\"noopener\">Dynamic Linking</a></p>\n</li>\n<li><p><a href=\"http://en.wikipedia.org/wiki/Dynamic_loading#Mac_OS_X\" target=\"_blank\" rel=\"noopener\">Dynamic loading</a></p>\n</li>\n<li><p><a href=\"http://support.revealapp.com/kb/getting-started/integrating-reveal-with-your-ios-app#dynamic-library-integration\" target=\"_blank\" rel=\"noopener\">Integrating Reveal with your iOS app</a></p>\n</li>\n<li><p><a href=\"http://blog.sina.com.cn/s/blog_407fb5bc01013v6s.html\" target=\"_blank\" rel=\"noopener\">IOS Framework制作全攻略</a></p>\n</li>\n<li><p><a href=\"http://www.tanhao.me/pieces/1361.html\" target=\"_blank\" rel=\"noopener\">Build Settings中的变量@rpath,@loader_path,@executable_path</a></p>\n</li>\n<li><p><a href=\"http://www.cocoachina.com/newbie/basic/2012/0516/4255.html\" target=\"_blank\" rel=\"noopener\">深入浅出Cocoa之Framework</a></p>\n</li>\n<li><p><a href=\"http://blog.sina.com.cn/s/blog_a843a8850101rv9k.html\" target=\"_blank\" rel=\"noopener\">linux中静态库和动态库的区别和汇总</a></p>\n</li>\n</ul>"},{"layout":"post","title":"iPhone屏幕知识点解析","date":"2014-09-28T06:34:37.000Z","comments":1,"keywords":"iPhone, iOS, iPhone6, iPhone6+, 屏幕","_content":"\n![iphone5-6](/images/article7/iphone5-6.jpg)\n\n## 一、屏幕相关知识点\n\n#### 1、屏幕尺寸\n\n在显示器世界里，屏幕尺寸都是由屏幕对角线长度表示的，单位是英寸。比如iPhone4的3.5寸屏就意味着屏幕对角线的长度是3.5英寸。\n\n#### 2、分辨率\n\n分辨率是任何一款手机产品最重要的参数之一。显示屏是由一个个像素组成的，分辨率可以简单理解成屏幕像素的数目。比如iPhone4的屏幕分辨率为640×960，就表示屏幕的横向有640个像素点，纵向有960个像素点。\n\n<!-- more -->\n\n#### 3、PPI\n\nPPI（Pixels Per Inch）表示单位面积上的像素点数目。分辨率可以表示屏幕包含的像素数目，但要想描述屏幕的显示质量，还需要知道屏幕尺寸，最后算出单位面积上的像素点数目。显然PPI越高，屏幕显示效果越细腻。\n\nPPI计算公式：\n\n![PPI](/images/article7/PPI.jpg)\n\n其中，X：长度像素数；Y：宽度像素数；Z：屏幕尺寸即对角线长度\n\n#### 4、Points\n\n可以简单理解成我们使用`UIKit`或 `Core Animation`处理界面元素时所用到的逻辑坐标系统。Points是在iOS4以后引入的，出现的目的是提供一种与设备无关的一致的输出效果。\n\n苹果考虑到以后有可能推出不同分辨率屏幕的手机，如果开发者在界面布局的时候操纵像素，就会导致每种不同分辨率的设备都要有一份适配代码。比如在分辨率为320×480的iPhone3GS上，要画一条长度1英寸的线条，假设需要50个像素，即线条的长度设成50像素；但是在分辨率为640×960的iPhone4上，50像素所能表示的实际长度只有iPhone3GS的一半，即0.5英寸。因此开发者必须使用两套适配代码：在iPhone3GS上将线条长度设成50像素，在iPhone4上设成100像素。这还仅仅是两款设备，如果算上后来的iPhone5/5C/5S和iPhone6/6+，每种分辨率都来一套适配代码，开发者岂不是得疯掉？？\n\n现在苹果使用了一套逻辑坐标系统来解决多分辨率屏幕适配问题，将屏幕上的每一个点都用以屏幕左上角为原点，横向为X轴，纵向为Y轴的坐标来表示（PS：并不是所有的框架默认坐标系统都是这样，比如`APPKit`中的`NSView`；当然开发者也可以将`UIKit`和 `Core Animation`的坐标系统改成以屏幕左下角为原点，但原理都是一样的。）。以iPhone3GS/4为例，他们的坐标系统中X和Y的最大值都分别是320和480。\n\n有了逻辑坐标系统，想在分辨率不同的iPhone3GS/4画一条长度均为1英寸的线条就变成了这样：将线的长度设成50Points（假设1英寸对应那么多个Points），`UIKit`在屏幕上绘图的时候会判断屏幕分辨率，如果是iPhone3GS的320×480分辨率屏幕，会自动使用50像素绘制；如果是iPhone4的640×960分辨率，会自动使用100像素绘制。\n\n这种机制使得在4寸屏幕的iPhone5出来之前，iOS开发者在设备屏幕适配上的工作量几乎为零（当然，需要准备两套图片），对此Android同行们早就口水直下三千尺了。后来随着iPhone屏幕尺寸的变化，逻辑坐标系统的取值范围也发生了变化，这才让iOS开发者有点事情可做。\n\n\n#### 5、渲染比例（Scale）\n\n像素点数目和逻辑坐标点数目的比值，就是渲染比例（Scale）。更直观的说法是一个逻辑坐标点，需要用几个像素点来渲染。\n\niPhone3GS的逻辑坐标系统是320×480，分辨率是320×480，即每个坐标点对应一个像素，即Scale为1；iPhone4的逻辑坐标系统是320×480，分辨率是640×960，每个坐标点对应两个像素点，即Scale为2。\n\n因此，为了适配iPhone6+的屏幕，以后又得曾加一份@3x分辨率的图片了。\n\n#### 6、宽高比\n\n屏幕宽度和高度的比例，也可以是分辨率的横向像素点数目和纵向像素点数目的比例，他们通常是一致的，一般用整数表示。\n\niPhone3GS/4/4S的宽高比2:3，iPhone5/5C/5S/6/6+的宽高比都是9:16。\n\n当年iPhone5出来的时候，适配3.5寸屏幕的应用上下黑边的场景仍记忆犹新，用户体验很不好，虽然大部分应用都迅速的做了适配。还好苹果这次学聪明了，从4寸屏升级到iPhone6的4.7寸屏和iPhone6+的5.5寸屏，宽高比并没有变化。也就是说原来在iPhone5上运行的应用能够通过拉伸平滑过渡到iPhone6/6+上，可能会稍微有点模糊。不过比起3.5寸到4寸屏的升级来说已经好很多了。\n\n\n## 二、说明\n\n#### 1、历代iPhone屏幕参数\n\n下面的一张图介绍了从iPhone4到iPhone6+的几代iPhone跟屏幕相关的几个关键参数：\n\n![iPhone_display](/images/article7/iPhone_display.png)\n\n需要说明的是，iPhone6+的逻辑坐标是414×736，渲染比例是3倍，因此对应的屏幕分辨率是1242×2208。但iPhone6+的实际屏幕分辨率是1080×1920，这时系统会把整体的显示内容做一个从新采样缩放，downsampling比例为1/1.15。\n\n#### 2、老工程中的坐标系统\n\n使用Xcode6之前版本的Xcode创建的工程，在iPhone6/6+上运行，得到的逻辑坐标都是和iPhone5/5C/5S屏幕相同的320*568。这样就做到从4寸到4.7寸和5.5寸屏幕的无缝升级，即使我们什么都不做，我们的老工程也能在iPhone6/6+上几乎完美的运行。当然因为等比例放大了，图片可能会有模糊或锯齿感。\n\n要想让老工程的坐标系统恢复正常，可以通过为Target添加`LaunchImage`或者`Launch Screen File`来实现，如下图所示：\n\n![LaunchFile](/images/article7/LaunchFile.png)\n\n`LaunchImage`的方式需要在`Images.xcassets`里，删除旧的`LaunchImage`组，然后新建`LaunchImage`组，添加对应高分辨率的图片。对此，这里有一篇更详细的图文介绍：[How to Add a Launch Image for the iPhone 6](http://matthewpalmer.net/blog/2014/09/10/iphone-6-plus-launch-image-adaptive-mode/)。\n\n其中`Launch Screen File`是Xcode6和iOS8新加的功能，它用一个xib文件来作为启动画面。App在旧版iOS启动时，该属性会被自动忽略，不会造成异常。\n\n上面两种设置，只要启用任意一个即可让App进入高分辨率模式。鉴于现在不少App还需要兼容iOS5，而第一种方法在iOS5上可能有[bug](http://stackoverflow.com/questions/19220082/support-of-ios-5-0-icons-with-xcode-5)，所以这里推荐用第二种方法。\n\n\n## 三、参考文档\n\n* [Drawing and Printing Guide for iOS](https://developer.apple.com/library/ios/documentation/2DDrawing/Conceptual/DrawingPrintingios/GraphicsDrawingOverview/GraphicsDrawingOverview.html)\n* [分辨率](http://baike.baidu.com/view/7687.htm)\n* [大屏iPhone的适配](http://blog.ibireme.com/2014/09/16/adapted_to_iphone6/#rd?sukey=f3735aed1ca7f2658e86e2e18cb36d80fed889a7bdfd2d651a1aaef8f9941b691c71e4e8353e61cd57237e4cd0b3edc6#jtss-tsina)\n\n\n\n","source":"_posts/2014-09-28-iphoneping-mu-zhi-shi-dian-jie-xi.markdown","raw":"---\nlayout: post\ntitle: \"iPhone屏幕知识点解析\"\ndate: 2014-09-28 14:34:37 +0800\ncomments: true\ncategories: iOS\ntags: [iPhone, iOS, iPhone6, iPhone6+, 屏幕]\nkeywords: iPhone, iOS, iPhone6, iPhone6+, 屏幕\n---\n\n![iphone5-6](/images/article7/iphone5-6.jpg)\n\n## 一、屏幕相关知识点\n\n#### 1、屏幕尺寸\n\n在显示器世界里，屏幕尺寸都是由屏幕对角线长度表示的，单位是英寸。比如iPhone4的3.5寸屏就意味着屏幕对角线的长度是3.5英寸。\n\n#### 2、分辨率\n\n分辨率是任何一款手机产品最重要的参数之一。显示屏是由一个个像素组成的，分辨率可以简单理解成屏幕像素的数目。比如iPhone4的屏幕分辨率为640×960，就表示屏幕的横向有640个像素点，纵向有960个像素点。\n\n<!-- more -->\n\n#### 3、PPI\n\nPPI（Pixels Per Inch）表示单位面积上的像素点数目。分辨率可以表示屏幕包含的像素数目，但要想描述屏幕的显示质量，还需要知道屏幕尺寸，最后算出单位面积上的像素点数目。显然PPI越高，屏幕显示效果越细腻。\n\nPPI计算公式：\n\n![PPI](/images/article7/PPI.jpg)\n\n其中，X：长度像素数；Y：宽度像素数；Z：屏幕尺寸即对角线长度\n\n#### 4、Points\n\n可以简单理解成我们使用`UIKit`或 `Core Animation`处理界面元素时所用到的逻辑坐标系统。Points是在iOS4以后引入的，出现的目的是提供一种与设备无关的一致的输出效果。\n\n苹果考虑到以后有可能推出不同分辨率屏幕的手机，如果开发者在界面布局的时候操纵像素，就会导致每种不同分辨率的设备都要有一份适配代码。比如在分辨率为320×480的iPhone3GS上，要画一条长度1英寸的线条，假设需要50个像素，即线条的长度设成50像素；但是在分辨率为640×960的iPhone4上，50像素所能表示的实际长度只有iPhone3GS的一半，即0.5英寸。因此开发者必须使用两套适配代码：在iPhone3GS上将线条长度设成50像素，在iPhone4上设成100像素。这还仅仅是两款设备，如果算上后来的iPhone5/5C/5S和iPhone6/6+，每种分辨率都来一套适配代码，开发者岂不是得疯掉？？\n\n现在苹果使用了一套逻辑坐标系统来解决多分辨率屏幕适配问题，将屏幕上的每一个点都用以屏幕左上角为原点，横向为X轴，纵向为Y轴的坐标来表示（PS：并不是所有的框架默认坐标系统都是这样，比如`APPKit`中的`NSView`；当然开发者也可以将`UIKit`和 `Core Animation`的坐标系统改成以屏幕左下角为原点，但原理都是一样的。）。以iPhone3GS/4为例，他们的坐标系统中X和Y的最大值都分别是320和480。\n\n有了逻辑坐标系统，想在分辨率不同的iPhone3GS/4画一条长度均为1英寸的线条就变成了这样：将线的长度设成50Points（假设1英寸对应那么多个Points），`UIKit`在屏幕上绘图的时候会判断屏幕分辨率，如果是iPhone3GS的320×480分辨率屏幕，会自动使用50像素绘制；如果是iPhone4的640×960分辨率，会自动使用100像素绘制。\n\n这种机制使得在4寸屏幕的iPhone5出来之前，iOS开发者在设备屏幕适配上的工作量几乎为零（当然，需要准备两套图片），对此Android同行们早就口水直下三千尺了。后来随着iPhone屏幕尺寸的变化，逻辑坐标系统的取值范围也发生了变化，这才让iOS开发者有点事情可做。\n\n\n#### 5、渲染比例（Scale）\n\n像素点数目和逻辑坐标点数目的比值，就是渲染比例（Scale）。更直观的说法是一个逻辑坐标点，需要用几个像素点来渲染。\n\niPhone3GS的逻辑坐标系统是320×480，分辨率是320×480，即每个坐标点对应一个像素，即Scale为1；iPhone4的逻辑坐标系统是320×480，分辨率是640×960，每个坐标点对应两个像素点，即Scale为2。\n\n因此，为了适配iPhone6+的屏幕，以后又得曾加一份@3x分辨率的图片了。\n\n#### 6、宽高比\n\n屏幕宽度和高度的比例，也可以是分辨率的横向像素点数目和纵向像素点数目的比例，他们通常是一致的，一般用整数表示。\n\niPhone3GS/4/4S的宽高比2:3，iPhone5/5C/5S/6/6+的宽高比都是9:16。\n\n当年iPhone5出来的时候，适配3.5寸屏幕的应用上下黑边的场景仍记忆犹新，用户体验很不好，虽然大部分应用都迅速的做了适配。还好苹果这次学聪明了，从4寸屏升级到iPhone6的4.7寸屏和iPhone6+的5.5寸屏，宽高比并没有变化。也就是说原来在iPhone5上运行的应用能够通过拉伸平滑过渡到iPhone6/6+上，可能会稍微有点模糊。不过比起3.5寸到4寸屏的升级来说已经好很多了。\n\n\n## 二、说明\n\n#### 1、历代iPhone屏幕参数\n\n下面的一张图介绍了从iPhone4到iPhone6+的几代iPhone跟屏幕相关的几个关键参数：\n\n![iPhone_display](/images/article7/iPhone_display.png)\n\n需要说明的是，iPhone6+的逻辑坐标是414×736，渲染比例是3倍，因此对应的屏幕分辨率是1242×2208。但iPhone6+的实际屏幕分辨率是1080×1920，这时系统会把整体的显示内容做一个从新采样缩放，downsampling比例为1/1.15。\n\n#### 2、老工程中的坐标系统\n\n使用Xcode6之前版本的Xcode创建的工程，在iPhone6/6+上运行，得到的逻辑坐标都是和iPhone5/5C/5S屏幕相同的320*568。这样就做到从4寸到4.7寸和5.5寸屏幕的无缝升级，即使我们什么都不做，我们的老工程也能在iPhone6/6+上几乎完美的运行。当然因为等比例放大了，图片可能会有模糊或锯齿感。\n\n要想让老工程的坐标系统恢复正常，可以通过为Target添加`LaunchImage`或者`Launch Screen File`来实现，如下图所示：\n\n![LaunchFile](/images/article7/LaunchFile.png)\n\n`LaunchImage`的方式需要在`Images.xcassets`里，删除旧的`LaunchImage`组，然后新建`LaunchImage`组，添加对应高分辨率的图片。对此，这里有一篇更详细的图文介绍：[How to Add a Launch Image for the iPhone 6](http://matthewpalmer.net/blog/2014/09/10/iphone-6-plus-launch-image-adaptive-mode/)。\n\n其中`Launch Screen File`是Xcode6和iOS8新加的功能，它用一个xib文件来作为启动画面。App在旧版iOS启动时，该属性会被自动忽略，不会造成异常。\n\n上面两种设置，只要启用任意一个即可让App进入高分辨率模式。鉴于现在不少App还需要兼容iOS5，而第一种方法在iOS5上可能有[bug](http://stackoverflow.com/questions/19220082/support-of-ios-5-0-icons-with-xcode-5)，所以这里推荐用第二种方法。\n\n\n## 三、参考文档\n\n* [Drawing and Printing Guide for iOS](https://developer.apple.com/library/ios/documentation/2DDrawing/Conceptual/DrawingPrintingios/GraphicsDrawingOverview/GraphicsDrawingOverview.html)\n* [分辨率](http://baike.baidu.com/view/7687.htm)\n* [大屏iPhone的适配](http://blog.ibireme.com/2014/09/16/adapted_to_iphone6/#rd?sukey=f3735aed1ca7f2658e86e2e18cb36d80fed889a7bdfd2d651a1aaef8f9941b691c71e4e8353e61cd57237e4cd0b3edc6#jtss-tsina)\n\n\n\n","slug":"2014-09-28-iphoneping-mu-zhi-shi-dian-jie-xi","published":1,"updated":"2019-09-23T12:56:08.000Z","photos":[],"link":"","_id":"ck0zclida0019qhtfgvi7r6dw","content":"<p><img src=\"/images/article7/iphone5-6.jpg\" alt=\"iphone5-6\"></p>\n<h2 id=\"一、屏幕相关知识点\"><a href=\"#一、屏幕相关知识点\" class=\"headerlink\" title=\"一、屏幕相关知识点\"></a>一、屏幕相关知识点</h2><h4 id=\"1、屏幕尺寸\"><a href=\"#1、屏幕尺寸\" class=\"headerlink\" title=\"1、屏幕尺寸\"></a>1、屏幕尺寸</h4><p>在显示器世界里，屏幕尺寸都是由屏幕对角线长度表示的，单位是英寸。比如iPhone4的3.5寸屏就意味着屏幕对角线的长度是3.5英寸。</p>\n<h4 id=\"2、分辨率\"><a href=\"#2、分辨率\" class=\"headerlink\" title=\"2、分辨率\"></a>2、分辨率</h4><p>分辨率是任何一款手机产品最重要的参数之一。显示屏是由一个个像素组成的，分辨率可以简单理解成屏幕像素的数目。比如iPhone4的屏幕分辨率为640×960，就表示屏幕的横向有640个像素点，纵向有960个像素点。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"3、PPI\"><a href=\"#3、PPI\" class=\"headerlink\" title=\"3、PPI\"></a>3、PPI</h4><p>PPI（Pixels Per Inch）表示单位面积上的像素点数目。分辨率可以表示屏幕包含的像素数目，但要想描述屏幕的显示质量，还需要知道屏幕尺寸，最后算出单位面积上的像素点数目。显然PPI越高，屏幕显示效果越细腻。</p>\n<p>PPI计算公式：</p>\n<p><img src=\"/images/article7/PPI.jpg\" alt=\"PPI\"></p>\n<p>其中，X：长度像素数；Y：宽度像素数；Z：屏幕尺寸即对角线长度</p>\n<h4 id=\"4、Points\"><a href=\"#4、Points\" class=\"headerlink\" title=\"4、Points\"></a>4、Points</h4><p>可以简单理解成我们使用<code>UIKit</code>或 <code>Core Animation</code>处理界面元素时所用到的逻辑坐标系统。Points是在iOS4以后引入的，出现的目的是提供一种与设备无关的一致的输出效果。</p>\n<p>苹果考虑到以后有可能推出不同分辨率屏幕的手机，如果开发者在界面布局的时候操纵像素，就会导致每种不同分辨率的设备都要有一份适配代码。比如在分辨率为320×480的iPhone3GS上，要画一条长度1英寸的线条，假设需要50个像素，即线条的长度设成50像素；但是在分辨率为640×960的iPhone4上，50像素所能表示的实际长度只有iPhone3GS的一半，即0.5英寸。因此开发者必须使用两套适配代码：在iPhone3GS上将线条长度设成50像素，在iPhone4上设成100像素。这还仅仅是两款设备，如果算上后来的iPhone5/5C/5S和iPhone6/6+，每种分辨率都来一套适配代码，开发者岂不是得疯掉？？</p>\n<p>现在苹果使用了一套逻辑坐标系统来解决多分辨率屏幕适配问题，将屏幕上的每一个点都用以屏幕左上角为原点，横向为X轴，纵向为Y轴的坐标来表示（PS：并不是所有的框架默认坐标系统都是这样，比如<code>APPKit</code>中的<code>NSView</code>；当然开发者也可以将<code>UIKit</code>和 <code>Core Animation</code>的坐标系统改成以屏幕左下角为原点，但原理都是一样的。）。以iPhone3GS/4为例，他们的坐标系统中X和Y的最大值都分别是320和480。</p>\n<p>有了逻辑坐标系统，想在分辨率不同的iPhone3GS/4画一条长度均为1英寸的线条就变成了这样：将线的长度设成50Points（假设1英寸对应那么多个Points），<code>UIKit</code>在屏幕上绘图的时候会判断屏幕分辨率，如果是iPhone3GS的320×480分辨率屏幕，会自动使用50像素绘制；如果是iPhone4的640×960分辨率，会自动使用100像素绘制。</p>\n<p>这种机制使得在4寸屏幕的iPhone5出来之前，iOS开发者在设备屏幕适配上的工作量几乎为零（当然，需要准备两套图片），对此Android同行们早就口水直下三千尺了。后来随着iPhone屏幕尺寸的变化，逻辑坐标系统的取值范围也发生了变化，这才让iOS开发者有点事情可做。</p>\n<h4 id=\"5、渲染比例（Scale）\"><a href=\"#5、渲染比例（Scale）\" class=\"headerlink\" title=\"5、渲染比例（Scale）\"></a>5、渲染比例（Scale）</h4><p>像素点数目和逻辑坐标点数目的比值，就是渲染比例（Scale）。更直观的说法是一个逻辑坐标点，需要用几个像素点来渲染。</p>\n<p>iPhone3GS的逻辑坐标系统是320×480，分辨率是320×480，即每个坐标点对应一个像素，即Scale为1；iPhone4的逻辑坐标系统是320×480，分辨率是640×960，每个坐标点对应两个像素点，即Scale为2。</p>\n<p>因此，为了适配iPhone6+的屏幕，以后又得曾加一份@3x分辨率的图片了。</p>\n<h4 id=\"6、宽高比\"><a href=\"#6、宽高比\" class=\"headerlink\" title=\"6、宽高比\"></a>6、宽高比</h4><p>屏幕宽度和高度的比例，也可以是分辨率的横向像素点数目和纵向像素点数目的比例，他们通常是一致的，一般用整数表示。</p>\n<p>iPhone3GS/4/4S的宽高比2:3，iPhone5/5C/5S/6/6+的宽高比都是9:16。</p>\n<p>当年iPhone5出来的时候，适配3.5寸屏幕的应用上下黑边的场景仍记忆犹新，用户体验很不好，虽然大部分应用都迅速的做了适配。还好苹果这次学聪明了，从4寸屏升级到iPhone6的4.7寸屏和iPhone6+的5.5寸屏，宽高比并没有变化。也就是说原来在iPhone5上运行的应用能够通过拉伸平滑过渡到iPhone6/6+上，可能会稍微有点模糊。不过比起3.5寸到4寸屏的升级来说已经好很多了。</p>\n<h2 id=\"二、说明\"><a href=\"#二、说明\" class=\"headerlink\" title=\"二、说明\"></a>二、说明</h2><h4 id=\"1、历代iPhone屏幕参数\"><a href=\"#1、历代iPhone屏幕参数\" class=\"headerlink\" title=\"1、历代iPhone屏幕参数\"></a>1、历代iPhone屏幕参数</h4><p>下面的一张图介绍了从iPhone4到iPhone6+的几代iPhone跟屏幕相关的几个关键参数：</p>\n<p><img src=\"/images/article7/iPhone_display.png\" alt=\"iPhone_display\"></p>\n<p>需要说明的是，iPhone6+的逻辑坐标是414×736，渲染比例是3倍，因此对应的屏幕分辨率是1242×2208。但iPhone6+的实际屏幕分辨率是1080×1920，这时系统会把整体的显示内容做一个从新采样缩放，downsampling比例为1/1.15。</p>\n<h4 id=\"2、老工程中的坐标系统\"><a href=\"#2、老工程中的坐标系统\" class=\"headerlink\" title=\"2、老工程中的坐标系统\"></a>2、老工程中的坐标系统</h4><p>使用Xcode6之前版本的Xcode创建的工程，在iPhone6/6+上运行，得到的逻辑坐标都是和iPhone5/5C/5S屏幕相同的320*568。这样就做到从4寸到4.7寸和5.5寸屏幕的无缝升级，即使我们什么都不做，我们的老工程也能在iPhone6/6+上几乎完美的运行。当然因为等比例放大了，图片可能会有模糊或锯齿感。</p>\n<p>要想让老工程的坐标系统恢复正常，可以通过为Target添加<code>LaunchImage</code>或者<code>Launch Screen File</code>来实现，如下图所示：</p>\n<p><img src=\"/images/article7/LaunchFile.png\" alt=\"LaunchFile\"></p>\n<p><code>LaunchImage</code>的方式需要在<code>Images.xcassets</code>里，删除旧的<code>LaunchImage</code>组，然后新建<code>LaunchImage</code>组，添加对应高分辨率的图片。对此，这里有一篇更详细的图文介绍：<a href=\"http://matthewpalmer.net/blog/2014/09/10/iphone-6-plus-launch-image-adaptive-mode/\" target=\"_blank\" rel=\"noopener\">How to Add a Launch Image for the iPhone 6</a>。</p>\n<p>其中<code>Launch Screen File</code>是Xcode6和iOS8新加的功能，它用一个xib文件来作为启动画面。App在旧版iOS启动时，该属性会被自动忽略，不会造成异常。</p>\n<p>上面两种设置，只要启用任意一个即可让App进入高分辨率模式。鉴于现在不少App还需要兼容iOS5，而第一种方法在iOS5上可能有<a href=\"http://stackoverflow.com/questions/19220082/support-of-ios-5-0-icons-with-xcode-5\" target=\"_blank\" rel=\"noopener\">bug</a>，所以这里推荐用第二种方法。</p>\n<h2 id=\"三、参考文档\"><a href=\"#三、参考文档\" class=\"headerlink\" title=\"三、参考文档\"></a>三、参考文档</h2><ul>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/2DDrawing/Conceptual/DrawingPrintingios/GraphicsDrawingOverview/GraphicsDrawingOverview.html\" target=\"_blank\" rel=\"noopener\">Drawing and Printing Guide for iOS</a></li>\n<li><a href=\"http://baike.baidu.com/view/7687.htm\" target=\"_blank\" rel=\"noopener\">分辨率</a></li>\n<li><a href=\"http://blog.ibireme.com/2014/09/16/adapted_to_iphone6/#rd?sukey=f3735aed1ca7f2658e86e2e18cb36d80fed889a7bdfd2d651a1aaef8f9941b691c71e4e8353e61cd57237e4cd0b3edc6#jtss-tsina\" target=\"_blank\" rel=\"noopener\">大屏iPhone的适配</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/article7/iphone5-6.jpg\" alt=\"iphone5-6\"></p>\n<h2 id=\"一、屏幕相关知识点\"><a href=\"#一、屏幕相关知识点\" class=\"headerlink\" title=\"一、屏幕相关知识点\"></a>一、屏幕相关知识点</h2><h4 id=\"1、屏幕尺寸\"><a href=\"#1、屏幕尺寸\" class=\"headerlink\" title=\"1、屏幕尺寸\"></a>1、屏幕尺寸</h4><p>在显示器世界里，屏幕尺寸都是由屏幕对角线长度表示的，单位是英寸。比如iPhone4的3.5寸屏就意味着屏幕对角线的长度是3.5英寸。</p>\n<h4 id=\"2、分辨率\"><a href=\"#2、分辨率\" class=\"headerlink\" title=\"2、分辨率\"></a>2、分辨率</h4><p>分辨率是任何一款手机产品最重要的参数之一。显示屏是由一个个像素组成的，分辨率可以简单理解成屏幕像素的数目。比如iPhone4的屏幕分辨率为640×960，就表示屏幕的横向有640个像素点，纵向有960个像素点。</p>","more":"<h4 id=\"3、PPI\"><a href=\"#3、PPI\" class=\"headerlink\" title=\"3、PPI\"></a>3、PPI</h4><p>PPI（Pixels Per Inch）表示单位面积上的像素点数目。分辨率可以表示屏幕包含的像素数目，但要想描述屏幕的显示质量，还需要知道屏幕尺寸，最后算出单位面积上的像素点数目。显然PPI越高，屏幕显示效果越细腻。</p>\n<p>PPI计算公式：</p>\n<p><img src=\"/images/article7/PPI.jpg\" alt=\"PPI\"></p>\n<p>其中，X：长度像素数；Y：宽度像素数；Z：屏幕尺寸即对角线长度</p>\n<h4 id=\"4、Points\"><a href=\"#4、Points\" class=\"headerlink\" title=\"4、Points\"></a>4、Points</h4><p>可以简单理解成我们使用<code>UIKit</code>或 <code>Core Animation</code>处理界面元素时所用到的逻辑坐标系统。Points是在iOS4以后引入的，出现的目的是提供一种与设备无关的一致的输出效果。</p>\n<p>苹果考虑到以后有可能推出不同分辨率屏幕的手机，如果开发者在界面布局的时候操纵像素，就会导致每种不同分辨率的设备都要有一份适配代码。比如在分辨率为320×480的iPhone3GS上，要画一条长度1英寸的线条，假设需要50个像素，即线条的长度设成50像素；但是在分辨率为640×960的iPhone4上，50像素所能表示的实际长度只有iPhone3GS的一半，即0.5英寸。因此开发者必须使用两套适配代码：在iPhone3GS上将线条长度设成50像素，在iPhone4上设成100像素。这还仅仅是两款设备，如果算上后来的iPhone5/5C/5S和iPhone6/6+，每种分辨率都来一套适配代码，开发者岂不是得疯掉？？</p>\n<p>现在苹果使用了一套逻辑坐标系统来解决多分辨率屏幕适配问题，将屏幕上的每一个点都用以屏幕左上角为原点，横向为X轴，纵向为Y轴的坐标来表示（PS：并不是所有的框架默认坐标系统都是这样，比如<code>APPKit</code>中的<code>NSView</code>；当然开发者也可以将<code>UIKit</code>和 <code>Core Animation</code>的坐标系统改成以屏幕左下角为原点，但原理都是一样的。）。以iPhone3GS/4为例，他们的坐标系统中X和Y的最大值都分别是320和480。</p>\n<p>有了逻辑坐标系统，想在分辨率不同的iPhone3GS/4画一条长度均为1英寸的线条就变成了这样：将线的长度设成50Points（假设1英寸对应那么多个Points），<code>UIKit</code>在屏幕上绘图的时候会判断屏幕分辨率，如果是iPhone3GS的320×480分辨率屏幕，会自动使用50像素绘制；如果是iPhone4的640×960分辨率，会自动使用100像素绘制。</p>\n<p>这种机制使得在4寸屏幕的iPhone5出来之前，iOS开发者在设备屏幕适配上的工作量几乎为零（当然，需要准备两套图片），对此Android同行们早就口水直下三千尺了。后来随着iPhone屏幕尺寸的变化，逻辑坐标系统的取值范围也发生了变化，这才让iOS开发者有点事情可做。</p>\n<h4 id=\"5、渲染比例（Scale）\"><a href=\"#5、渲染比例（Scale）\" class=\"headerlink\" title=\"5、渲染比例（Scale）\"></a>5、渲染比例（Scale）</h4><p>像素点数目和逻辑坐标点数目的比值，就是渲染比例（Scale）。更直观的说法是一个逻辑坐标点，需要用几个像素点来渲染。</p>\n<p>iPhone3GS的逻辑坐标系统是320×480，分辨率是320×480，即每个坐标点对应一个像素，即Scale为1；iPhone4的逻辑坐标系统是320×480，分辨率是640×960，每个坐标点对应两个像素点，即Scale为2。</p>\n<p>因此，为了适配iPhone6+的屏幕，以后又得曾加一份@3x分辨率的图片了。</p>\n<h4 id=\"6、宽高比\"><a href=\"#6、宽高比\" class=\"headerlink\" title=\"6、宽高比\"></a>6、宽高比</h4><p>屏幕宽度和高度的比例，也可以是分辨率的横向像素点数目和纵向像素点数目的比例，他们通常是一致的，一般用整数表示。</p>\n<p>iPhone3GS/4/4S的宽高比2:3，iPhone5/5C/5S/6/6+的宽高比都是9:16。</p>\n<p>当年iPhone5出来的时候，适配3.5寸屏幕的应用上下黑边的场景仍记忆犹新，用户体验很不好，虽然大部分应用都迅速的做了适配。还好苹果这次学聪明了，从4寸屏升级到iPhone6的4.7寸屏和iPhone6+的5.5寸屏，宽高比并没有变化。也就是说原来在iPhone5上运行的应用能够通过拉伸平滑过渡到iPhone6/6+上，可能会稍微有点模糊。不过比起3.5寸到4寸屏的升级来说已经好很多了。</p>\n<h2 id=\"二、说明\"><a href=\"#二、说明\" class=\"headerlink\" title=\"二、说明\"></a>二、说明</h2><h4 id=\"1、历代iPhone屏幕参数\"><a href=\"#1、历代iPhone屏幕参数\" class=\"headerlink\" title=\"1、历代iPhone屏幕参数\"></a>1、历代iPhone屏幕参数</h4><p>下面的一张图介绍了从iPhone4到iPhone6+的几代iPhone跟屏幕相关的几个关键参数：</p>\n<p><img src=\"/images/article7/iPhone_display.png\" alt=\"iPhone_display\"></p>\n<p>需要说明的是，iPhone6+的逻辑坐标是414×736，渲染比例是3倍，因此对应的屏幕分辨率是1242×2208。但iPhone6+的实际屏幕分辨率是1080×1920，这时系统会把整体的显示内容做一个从新采样缩放，downsampling比例为1/1.15。</p>\n<h4 id=\"2、老工程中的坐标系统\"><a href=\"#2、老工程中的坐标系统\" class=\"headerlink\" title=\"2、老工程中的坐标系统\"></a>2、老工程中的坐标系统</h4><p>使用Xcode6之前版本的Xcode创建的工程，在iPhone6/6+上运行，得到的逻辑坐标都是和iPhone5/5C/5S屏幕相同的320*568。这样就做到从4寸到4.7寸和5.5寸屏幕的无缝升级，即使我们什么都不做，我们的老工程也能在iPhone6/6+上几乎完美的运行。当然因为等比例放大了，图片可能会有模糊或锯齿感。</p>\n<p>要想让老工程的坐标系统恢复正常，可以通过为Target添加<code>LaunchImage</code>或者<code>Launch Screen File</code>来实现，如下图所示：</p>\n<p><img src=\"/images/article7/LaunchFile.png\" alt=\"LaunchFile\"></p>\n<p><code>LaunchImage</code>的方式需要在<code>Images.xcassets</code>里，删除旧的<code>LaunchImage</code>组，然后新建<code>LaunchImage</code>组，添加对应高分辨率的图片。对此，这里有一篇更详细的图文介绍：<a href=\"http://matthewpalmer.net/blog/2014/09/10/iphone-6-plus-launch-image-adaptive-mode/\" target=\"_blank\" rel=\"noopener\">How to Add a Launch Image for the iPhone 6</a>。</p>\n<p>其中<code>Launch Screen File</code>是Xcode6和iOS8新加的功能，它用一个xib文件来作为启动画面。App在旧版iOS启动时，该属性会被自动忽略，不会造成异常。</p>\n<p>上面两种设置，只要启用任意一个即可让App进入高分辨率模式。鉴于现在不少App还需要兼容iOS5，而第一种方法在iOS5上可能有<a href=\"http://stackoverflow.com/questions/19220082/support-of-ios-5-0-icons-with-xcode-5\" target=\"_blank\" rel=\"noopener\">bug</a>，所以这里推荐用第二种方法。</p>\n<h2 id=\"三、参考文档\"><a href=\"#三、参考文档\" class=\"headerlink\" title=\"三、参考文档\"></a>三、参考文档</h2><ul>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/2DDrawing/Conceptual/DrawingPrintingios/GraphicsDrawingOverview/GraphicsDrawingOverview.html\" target=\"_blank\" rel=\"noopener\">Drawing and Printing Guide for iOS</a></li>\n<li><a href=\"http://baike.baidu.com/view/7687.htm\" target=\"_blank\" rel=\"noopener\">分辨率</a></li>\n<li><a href=\"http://blog.ibireme.com/2014/09/16/adapted_to_iphone6/#rd?sukey=f3735aed1ca7f2658e86e2e18cb36d80fed889a7bdfd2d651a1aaef8f9941b691c71e4e8353e61cd57237e4cd0b3edc6#jtss-tsina\" target=\"_blank\" rel=\"noopener\">大屏iPhone的适配</a></li>\n</ul>"},{"layout":"post","title":"WWDC2014之App Extensions学习笔记","date":"2014-06-23T11:55:29.000Z","comments":1,"keywords":"WWDC2014, iOS, framework, App Extensions","_content":"\n![wwdc_banner_promo](/images/article5/wwdc_banner_promo.jpg)\n\n\n## 一、关于App Extensions\n\nextension是iOS8新开放的一种对几个固定系统区域的扩展机制，它可以在一定程度上弥补iOS的沙盒机制对应用间通信的限制。\n\nextension的出现，为用户提供了在其它应用中使用我们应用提供的服务的便捷方式，比如用户可以在`Today`的`widgets`中查看应用展示的简略信息，而不用再进到我们的应用中，这将是一种全新的用户体验；但是，extension的出现可能会减少用户启动应用的次数，同时还会增大开发者的工作量。\n\n\n<!-- more -->\n\n#### 几个关键词\n\n* extension point\n\n系统中支持extension的区域，extension的类别也是据此区分的，iOS上共有`Today`、`Share`、`Action`、`Photo Editing`、`Storage Provider`、`Custom keyboard`几种，其中`Today`中的extension又被称为`widget`。\n\n每种extension point的使用方式和适合干的活都不一样，因此不存在通用的extension。\n\n* app extension\n\n即为本文所说的extension。extension并不是一个独立的app，它有一个包含在app bundle中的独立bundle，extension的bundle后缀名是`.appex`。其生命周期也和普通app不同，这些后文将会详述。\n\nextension不能单独存在，必须有一个包含它的containing app。\n\n另外，extension需要用户手动激活，不同的extension激活方式也不同，比如：\n比如Today中的widget需要在Today中激活和关闭；`Custom keyboard`需要在设置中进行相关设置；`Photo Editing`需要在使用照片时在照片管理器中激活或关闭；`Storage Provider`可以在选择文件时出现；`Share`和`Action`可以在任何应用里被激活，但前提是开发者需要设置`Activation Rules`，以确定extension需要在合适出现。\n\n* containing app\n\n尽管苹果开放了extension，但是在iOS中extension并不能单独存在，要想提交到AppStore，必须将extension包含在一个app中提交，并且app的实现部分不能为空,这个包含extension的app就叫containing app。\n\nextension会随着containing app的安装而安装，同时随着containing app的卸载而卸载。\n\n* host app\n\n能够调起extension的app被称为host app，比如`widget`的host app就是`Today`。\n\n## 二、extension和containing app、host app\n\n#### 2.1 extension和host app\n\nextension和host app之间可以通过extensionContext属性直接通信，该属性是新增加的UIViewController类别：\n\n```objective-c\n@interface UIViewController(NSExtensionAdditions) <NSExtensionRequestHandling>\n\n// Returns the extension context. Also acts as a convenience method for a view controller to check if it participating in an extension request.\n@property (nonatomic,readonly,retain) NSExtensionContext *extensionContext NS_AVAILABLE_IOS(8_0);\n\n@end\n```\n\n实际上extension和host app之间是通过IPC（interprocess communication）实现的，只是苹果把调用接口高度抽象了，我们并不需要关注那么底层的东西。\n\n#### 2.2 containing app和host app\n\n他们之间没有任何直接关系，也从来不需要通信。\n\n#### 2.3 extension和containing app \n\n这二者之间的关系最复杂，纠纠缠缠扯不清关系。\n\n* 不能直接通信\n\n首先，尽管extension的bundle是放在containing app的bundle中，但是他们是两个完全独立的进程，之间不能直接通信。不过extension可以通过openURL的方式启动containing app（当然也能启动其它app），不过必须通过extensionContext借助host app来实现：\n\n```objective-c\n//通过openURL的方式启动Containing APP\n- (void)openURLContainingAPP\n{\n    [self.extensionContext openURL:[NSURL URLWithString:@\"appextension://123\"]\n                 completionHandler:^(BOOL success) {\n                     NSLog(@\"open url result:%d\",success);\n                 }];\n}\n\n```\n\nextension中是无法直接使用openURL的。\n\n* 可以共享`Shared resources`\n\nextension和containing app可以共同读写一个被称为`Shared resources`的存储区域，这是通过App Groups实现的，后文将会详述。\n\n\n三者间的关系可以通过官网给的两张图片形象地说明：\n\n![detailed_communication](/images/article5/detailed_communication.png)\n\n![app_extensions_container_restrictions](/images/article5/app_extensions_container_restrictions.png)\n\n* containing app能够控制extension的出现和隐藏\n\n通过以下代码，containing app可以让extension出现或隐藏（当然extension也可以让自己隐藏）：\n\n```objective-c\n//让隐藏的插件重新显示\n- (void)showTodayExtension\n{\n    [[NCWidgetController widgetController] setHasContent:YES forWidgetWithBundleIdentifier:@\"com.wangzz.app.extension\"];\n}\n\n//隐藏插件\n- (void)hiddeTodayExtension\n{\n    [[NCWidgetController widgetController] setHasContent:NO forWidgetWithBundleIdentifier:@\"com.wangzz.app.extension\"];\n}\n```\n\n## 三、App Groups\n\n这是iOS8新开放的功能，在OS X上早就可用了。它主要用于同一group下的app共享同一份读写空间，以实现数据共享。\n\nextension和containing app共同读写一份数据是很合理的需求，比如系统的股市应用，widget和app中都需要展示几个公司的股票数据，这就可以通过App Groups实现。\n\n#### 3.1 功能开启\n\n为了便于后续操作，请先确保你的开发者账号在Xcode上处于登录状态。\n\n* 在app中开启\n\nApp Groups位于：\n\n```\nTARGETS-->AppExtensionDemo-->Capabilities-->App Groups\n```\n\n找到以后，将App Groups右上角的开关打开，然后选择添加groups，比如我的是group.wangzz，当然这是为了测试随便起得名字，正规点得命名规则应该是：group.com.company.app。\n\n添加成功以后如下图所示：\n\n![app_group](/images/article5/app_group.png)\n\n* 在extension中开启\n\n我创建的是widget，target名称为TodayExtension，对应的App Groups位于：\n\n```\nTARGETS-->TodayExtension-->Capabilities-->App Groups\n```\n开启方式和app中一样，需要注意的是必须保证这里地App Groups名称和app中的相同，即为group.wangzz。\n\n## 四、extension和containing app数据共享\n\nApp Groups给我们提供了同一group内app可以共同读写的区域，可以通过以下方式实现数据共享：\n\n#### 4.1 通过NSUserDefaults共享数据\n\n* 存数据\n\n通过以下方式向NSUserDefaults中保存数据：\n\n```objective-c\n- (void)saveTextByNSUserDefaults\n{\n    NSUserDefaults *shared = [[NSUserDefaults alloc] initWithSuiteName:@\"group.wangzz\"];\n    [shared setObject:_textField.text forKey:@\"wangzz\"];\n    [shared synchronize];\n}\n    \n```\n\n需要注意的是：\n\n1.保存数据的时候必须指明group id；\n\n2.而且要注意NSUserDefaults能够处理的数据只能是可plist化的对象，详情见[Property List Programming Guide](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/PropertyLists/AboutPropertyLists/AboutPropertyLists.html)。\n\n3.为了防止出现数据同步问题，不要忘记调用`[shared synchronize];`\n\n* 读数据\n\n对应的读取数据方式：\n\n```objective-c\n- (NSString *)readDataFromNSUserDefaults\n{\n    NSUserDefaults *shared = [[NSUserDefaults alloc] initWithSuiteName:@\"group.wangzz\"];\n    NSString *value = [shared valueForKey:@\"wangzz\"];\n    \n    return value;\n}\n```\n\n#### 4.2 通过NSFileManager共享数据\n\nNSFileManager在iOS7提供了containerURLForSecurityApplicationGroupIdentifier方法，可以用来实现app group共享数据。\n\n* 保存数据\n\n```objective-c\n- (BOOL)saveTextByNSFileManager\n{\n    NSError *err = nil;\n    NSURL *containerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@\"group.wangzz\"];\n    containerURL = [containerURL URLByAppendingPathComponent:@\"Library/Caches/good\"];\n\n    NSString *value = _textField.text;\n    BOOL result = [value writeToURL:containerURL atomically:YES encoding:NSUTF8StringEncoding error:&err];\n    if (!result) {\n        NSLog(@\"%@\",err);\n    } else {\n        NSLog(@\"save value:%@ success.\",value);\n    }\n    \n    return result;\n}\n\n```\n\n* 读数据\n\n```objective-c\n\n- (NSString *)readTextByNSFileManager\n{\n    NSError *err = nil;\n    NSURL *containerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@\"group.wangzz\"];\n    containerURL = [containerURL URLByAppendingPathComponent:@\"Library/Caches/good\"];\n    NSString *value = [NSString stringWithContentsOfURL:containerURL encoding:NSUTF8StringEncoding error:&err];\n    \n    return value;\n}\n```\n\n在这里我试着保存和读取的是字符串数据，但读写SQlite我相信也是没问题的。\n\n* 数据同步\n\n两个应用共同读取同一份数据，就会引发数据同步问题。WWDC2014的视频中建议使用NSFileCoordination实现普通文件的读写同步，而数据库可以使用CoreData,Sqlite也支持同步。\n\n\n## 五、extension和containing app代码共享\n\n和数据共享类似，extension和containing app很自然地会有一些业务逻辑上可以共用的代码，这时可以通过iOS8中刚开放使用的framework实现。苹果在[App Extension Programming Guide](https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html#//apple_ref/doc/uid/TP40014214-CH21-SW1)中是这样描述的：\n\n>\nIn iOS 8.0 and later, you can use an embedded framework to share code between your extension and its containing app. For example, if you develop image-processing code that you want both your Photo Editing extension and its containing app to share, you can put the code into a framework and embed it in both targets.\n>\n\n即将framework分别嵌入到extension和containing app的target中实现代码共享。但这样岂不是需要分别要将framework分别copy到extension和containing app的main bundle中？\n\n参考extension和containing app数据共享，我试想能不能将framework只保存一份放在App Groups区域？\n\n#### 5.1 copy framework到App Groups\n\n在app首次启动的时候将framework放到App Groups区域：\n\n```objective-c\n\n- (BOOL)copyFrameworkFromMainBundleToAppGroup\n{\n    NSFileManager *manager = [NSFileManager defaultManager];\n    NSError *err = nil;\n    NSURL *containerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@\"group.wangzz\"];\n    NSString *sorPath = [NSString stringWithFormat:@\"%@/Dylib.framework\",[[NSBundle mainBundle] bundlePath]];\n    NSString *desPath = [NSString stringWithFormat:@\"%@/Library/Caches/Dylib.framework\",containerURL.path];\n    \n    BOOL removeResult = [manager removeItemAtPath:desPath error:&err];\n    if (!removeResult) {\n        NSLog(@\"%@\",err);\n    } else {\n        NSLog(@\"remove success.\");\n    }\n    \n    BOOL copyResult = [[NSFileManager defaultManager] copyItemAtPath:sorPath toPath:desPath error:&err];\n    if (!copyResult) {\n        NSLog(@\"%@\",err);\n    } else {\n        NSLog(@\"copy success.\");\n    }\n\n    return copyResult;\n}\n```\n\n#### 5.2 使用framework：\n\n```objective-c\n- (BOOL)loadFrameworkInAppGroup\n{\n    NSError *err = nil;\n    NSURL *containerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@\"group.wangzz\"];\n    NSString *desPath = [NSString stringWithFormat:@\"%@/Library/Caches/Dylib.framework\",containerURL.path];\n    NSBundle *bundle = [NSBundle bundleWithPath:desPath];\n    BOOL result = [bundle loadAndReturnError:&err];\n    if (result) {\n        Class root = NSClassFromString(@\"Person\");\n        if (root) {\n            Person *person = [[root alloc] init];\n            if (person) {\n                [person run];\n            }\n        }\n    } else {\n        NSLog(@\"%@\",err);\n    }\n    \n    return result;\n}\n\n```\n\n经过测试，竟然能够加载成功。\n\n需要说明的是，这里只是说那么用是可以成功加载framework，但还面临不少问题，比如如果用户在启动app之前去使用extension，这时framework还没有copy过去，怎么处理；另外iOS的机制或者苹果的审核是否允许这样使用等。\n\n在一切确定下来之前还是乖乖按文档中的方式使用吧。\n\n## 六、生命周期\n\nextension和普通app的最大区别之一是生命周期。\n\n* 开始\n\n在用户通过host app点击extension时，系统就会实例化extension应用，这是生命周期的开始。\n\n* 执行任务\n\n在extension启动以后，开始执行它的使命。\n\n* 终止\n\n在用户取消任务，或者任务执行结束，或者开启了一个长时后台任务时，系统会将其杀掉。\n\n由此可见，extension就是为了任务而生！\n\n下图来自官方文档，它将生命周期划分的更详细：\n\n![app_extensions_lifecycle](/images/article5/app_extensions_lifecycle.png)\n\n通过打印日志发现，`Today`中的`widget`在将`Today`切换到`全部`或者`未读通知时`都会被杀掉。\n\n## 七、 调试\n\nextension和普通app的调试方式差不多，开始调试前先选中extension对应的target，点击run，就会弹出下图所示选择框：\n\n![extension_debug](/images/article5/extension_debug.png)\n\n需要选择一个host app，这里选择`Today`。\n\n然后即可和普通app一样调试了，不过我在实际使用过程中，发现有各种奇怪的事情，比如NSLog无法在控制台输出，应该是bug吧。\n\n## 八、 iOS8应用文件系统\n\n发现iOS8的文件系统发生了变化，新的文件系统将可执行文件（即原来的.app文件）从沙盒中移到了另外一个地方，这样感觉更合理。\n\n* 测试代码\n\n下述代码用于打印App Groups路径、应用的可执行文件路径、对应的Documents路径：\n\n```objective-c\n\n- (void)logAppPath\n{\n    //app group路径\n    NSURL *containerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@\"group.wangzz\"];\n    NSLog(@\"app group:\\n%@\",containerURL.path);\n    \n    //打印可执行文件路径\n    NSLog(@\"bundle:\\n%@\",[[NSBundle mainBundle] bundlePath]);\n    \n    //打印documents\n    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\n    NSString *path = [paths objectAtIndex:0];\n    NSLog(@\"documents:\\n%@\",path);\n}\n```\n\n* containing app执行结果\n\n```\n2014-06-23 19:35:03.944 AppExtensionDemo[7471:365131] app group:\n/private/var/mobile/Containers/Shared/AppGroup/89CCBFB1-CA5E-4C7F-80CB-A3EB9E841816\n2014-06-23 19:35:03.946 AppExtensionDemo[7471:365131] bundle:\n/private/var/mobile/Containers/Bundle/Application/1AC73797-A3BB-4BDE-A647-3D083DA6871A/AppExtensionDemo.app\n2014-06-23 19:35:03.948 AppExtensionDemo[7471:365131] documents:\n/var/mobile/Containers/Data/Application/E5E6E516-0163-4754-9D10-A5F6C33A6261/Documents\n```\n\n* extension执行结果\n\n```\nJun 23 19:37:49 autonavis-iPad com.foogry.AppExtensionDemo.TodayExtension[7638] <Warning>: app group:\n\t/private/var/mobile/Containers/Shared/AppGroup/89CCBFB1-CA5E-4C7F-80CB-A3EB9E841816\nJun 23 19:37:49 autonavis-iPad com.foogry.AppExtensionDemo.TodayExtension[7638] <Warning>: bundle:\n\t/private/var/mobile/Containers/Bundle/Application/596717B7-7CB8-4F53-BCD4-380F34ABD30F/AppExtensionDemo.app/PlugIns/com.foogry.AppExtensionDemo.TodayExtension.appex\nJun 23 19:37:49 autonavis-iPad com.foogry.AppExtensionDemo.TodayExtension[7638] <Warning>: documents:\n\t/var/mobile/Containers/Data/PluginKitPlugin/57581433-3DBD-4930-971F-78D30C150E8A/Documents\n```\n\n由此可见，不管是extension还是containing app，他们的可执行文件和保存数据的目录都是分开存放的，即所有app的可执行文件都放在一个大目录下，保存数据的目录保存在另一个大目录下，同样，AppGroup放在另一个大目录下。\n\n## 说明\n\n* 本文用到的demo已经上传到[github](https://github.com/wangzz/Demo/tree/master/AppExtensionsDemo)上。\n\n* 文中可能有理解有误的地方，还请指出。\n\n## 参考文档\n\n* [App Extension Programming Guide](https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/index.html#//apple_ref/doc/uid/TP40014214-CH20-SW1)\n\n* [Crash Course In iOS 8 Widgets](http://blog.waynehartman.com/)\n\n* [Notification Center Framework Reference](https://developer.apple.com/library/prerelease/ios/documentation/NotificationCenter/Reference/NotificationCenter_Framework/index.html#//apple_ref/doc/uid/TP40014443)\n\n* [iOS 8 Release Notes](https://developer.apple.com/library/prerelease/ios/releasenotes/General/RN-iOSSDK-8.0/)\n\n* [Entitlement Key Reference](https://developer.apple.com/library/prerelease/ios/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/EnablingAppSandbox.html#//apple_ref/doc/uid/TP40011195-CH4-SW19)\n\n* [苹果的插件生态系统，开发者的新世界](http://www.pingwest.com/apples-new-extension-eco-system/)\n\n* [iOS 8 Extensions: Apple’s Plan for a Powerful App Ecosystem](http://www.macstories.net/stories/ios-8-extensions-apples-plan-for-a-powerful-app-ecosystem/)\n\n* [Property List Programming Guide](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/PropertyLists/AboutPropertyLists/AboutPropertyLists.html)\n","source":"_posts/2014-06-23-wwdc2014zhi-app-extensionsxue-xi-bi-ji.markdown","raw":"---\nlayout: post\ntitle: \"WWDC2014之App Extensions学习笔记\"\ndate: 2014-06-23 19:55:29 +0800\ncomments: true \ncategories: WWDC2014\ntags: [WWDC2014, iOS, framework, App Extensions]\nkeywords: WWDC2014, iOS, framework, App Extensions\n---\n\n![wwdc_banner_promo](/images/article5/wwdc_banner_promo.jpg)\n\n\n## 一、关于App Extensions\n\nextension是iOS8新开放的一种对几个固定系统区域的扩展机制，它可以在一定程度上弥补iOS的沙盒机制对应用间通信的限制。\n\nextension的出现，为用户提供了在其它应用中使用我们应用提供的服务的便捷方式，比如用户可以在`Today`的`widgets`中查看应用展示的简略信息，而不用再进到我们的应用中，这将是一种全新的用户体验；但是，extension的出现可能会减少用户启动应用的次数，同时还会增大开发者的工作量。\n\n\n<!-- more -->\n\n#### 几个关键词\n\n* extension point\n\n系统中支持extension的区域，extension的类别也是据此区分的，iOS上共有`Today`、`Share`、`Action`、`Photo Editing`、`Storage Provider`、`Custom keyboard`几种，其中`Today`中的extension又被称为`widget`。\n\n每种extension point的使用方式和适合干的活都不一样，因此不存在通用的extension。\n\n* app extension\n\n即为本文所说的extension。extension并不是一个独立的app，它有一个包含在app bundle中的独立bundle，extension的bundle后缀名是`.appex`。其生命周期也和普通app不同，这些后文将会详述。\n\nextension不能单独存在，必须有一个包含它的containing app。\n\n另外，extension需要用户手动激活，不同的extension激活方式也不同，比如：\n比如Today中的widget需要在Today中激活和关闭；`Custom keyboard`需要在设置中进行相关设置；`Photo Editing`需要在使用照片时在照片管理器中激活或关闭；`Storage Provider`可以在选择文件时出现；`Share`和`Action`可以在任何应用里被激活，但前提是开发者需要设置`Activation Rules`，以确定extension需要在合适出现。\n\n* containing app\n\n尽管苹果开放了extension，但是在iOS中extension并不能单独存在，要想提交到AppStore，必须将extension包含在一个app中提交，并且app的实现部分不能为空,这个包含extension的app就叫containing app。\n\nextension会随着containing app的安装而安装，同时随着containing app的卸载而卸载。\n\n* host app\n\n能够调起extension的app被称为host app，比如`widget`的host app就是`Today`。\n\n## 二、extension和containing app、host app\n\n#### 2.1 extension和host app\n\nextension和host app之间可以通过extensionContext属性直接通信，该属性是新增加的UIViewController类别：\n\n```objective-c\n@interface UIViewController(NSExtensionAdditions) <NSExtensionRequestHandling>\n\n// Returns the extension context. Also acts as a convenience method for a view controller to check if it participating in an extension request.\n@property (nonatomic,readonly,retain) NSExtensionContext *extensionContext NS_AVAILABLE_IOS(8_0);\n\n@end\n```\n\n实际上extension和host app之间是通过IPC（interprocess communication）实现的，只是苹果把调用接口高度抽象了，我们并不需要关注那么底层的东西。\n\n#### 2.2 containing app和host app\n\n他们之间没有任何直接关系，也从来不需要通信。\n\n#### 2.3 extension和containing app \n\n这二者之间的关系最复杂，纠纠缠缠扯不清关系。\n\n* 不能直接通信\n\n首先，尽管extension的bundle是放在containing app的bundle中，但是他们是两个完全独立的进程，之间不能直接通信。不过extension可以通过openURL的方式启动containing app（当然也能启动其它app），不过必须通过extensionContext借助host app来实现：\n\n```objective-c\n//通过openURL的方式启动Containing APP\n- (void)openURLContainingAPP\n{\n    [self.extensionContext openURL:[NSURL URLWithString:@\"appextension://123\"]\n                 completionHandler:^(BOOL success) {\n                     NSLog(@\"open url result:%d\",success);\n                 }];\n}\n\n```\n\nextension中是无法直接使用openURL的。\n\n* 可以共享`Shared resources`\n\nextension和containing app可以共同读写一个被称为`Shared resources`的存储区域，这是通过App Groups实现的，后文将会详述。\n\n\n三者间的关系可以通过官网给的两张图片形象地说明：\n\n![detailed_communication](/images/article5/detailed_communication.png)\n\n![app_extensions_container_restrictions](/images/article5/app_extensions_container_restrictions.png)\n\n* containing app能够控制extension的出现和隐藏\n\n通过以下代码，containing app可以让extension出现或隐藏（当然extension也可以让自己隐藏）：\n\n```objective-c\n//让隐藏的插件重新显示\n- (void)showTodayExtension\n{\n    [[NCWidgetController widgetController] setHasContent:YES forWidgetWithBundleIdentifier:@\"com.wangzz.app.extension\"];\n}\n\n//隐藏插件\n- (void)hiddeTodayExtension\n{\n    [[NCWidgetController widgetController] setHasContent:NO forWidgetWithBundleIdentifier:@\"com.wangzz.app.extension\"];\n}\n```\n\n## 三、App Groups\n\n这是iOS8新开放的功能，在OS X上早就可用了。它主要用于同一group下的app共享同一份读写空间，以实现数据共享。\n\nextension和containing app共同读写一份数据是很合理的需求，比如系统的股市应用，widget和app中都需要展示几个公司的股票数据，这就可以通过App Groups实现。\n\n#### 3.1 功能开启\n\n为了便于后续操作，请先确保你的开发者账号在Xcode上处于登录状态。\n\n* 在app中开启\n\nApp Groups位于：\n\n```\nTARGETS-->AppExtensionDemo-->Capabilities-->App Groups\n```\n\n找到以后，将App Groups右上角的开关打开，然后选择添加groups，比如我的是group.wangzz，当然这是为了测试随便起得名字，正规点得命名规则应该是：group.com.company.app。\n\n添加成功以后如下图所示：\n\n![app_group](/images/article5/app_group.png)\n\n* 在extension中开启\n\n我创建的是widget，target名称为TodayExtension，对应的App Groups位于：\n\n```\nTARGETS-->TodayExtension-->Capabilities-->App Groups\n```\n开启方式和app中一样，需要注意的是必须保证这里地App Groups名称和app中的相同，即为group.wangzz。\n\n## 四、extension和containing app数据共享\n\nApp Groups给我们提供了同一group内app可以共同读写的区域，可以通过以下方式实现数据共享：\n\n#### 4.1 通过NSUserDefaults共享数据\n\n* 存数据\n\n通过以下方式向NSUserDefaults中保存数据：\n\n```objective-c\n- (void)saveTextByNSUserDefaults\n{\n    NSUserDefaults *shared = [[NSUserDefaults alloc] initWithSuiteName:@\"group.wangzz\"];\n    [shared setObject:_textField.text forKey:@\"wangzz\"];\n    [shared synchronize];\n}\n    \n```\n\n需要注意的是：\n\n1.保存数据的时候必须指明group id；\n\n2.而且要注意NSUserDefaults能够处理的数据只能是可plist化的对象，详情见[Property List Programming Guide](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/PropertyLists/AboutPropertyLists/AboutPropertyLists.html)。\n\n3.为了防止出现数据同步问题，不要忘记调用`[shared synchronize];`\n\n* 读数据\n\n对应的读取数据方式：\n\n```objective-c\n- (NSString *)readDataFromNSUserDefaults\n{\n    NSUserDefaults *shared = [[NSUserDefaults alloc] initWithSuiteName:@\"group.wangzz\"];\n    NSString *value = [shared valueForKey:@\"wangzz\"];\n    \n    return value;\n}\n```\n\n#### 4.2 通过NSFileManager共享数据\n\nNSFileManager在iOS7提供了containerURLForSecurityApplicationGroupIdentifier方法，可以用来实现app group共享数据。\n\n* 保存数据\n\n```objective-c\n- (BOOL)saveTextByNSFileManager\n{\n    NSError *err = nil;\n    NSURL *containerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@\"group.wangzz\"];\n    containerURL = [containerURL URLByAppendingPathComponent:@\"Library/Caches/good\"];\n\n    NSString *value = _textField.text;\n    BOOL result = [value writeToURL:containerURL atomically:YES encoding:NSUTF8StringEncoding error:&err];\n    if (!result) {\n        NSLog(@\"%@\",err);\n    } else {\n        NSLog(@\"save value:%@ success.\",value);\n    }\n    \n    return result;\n}\n\n```\n\n* 读数据\n\n```objective-c\n\n- (NSString *)readTextByNSFileManager\n{\n    NSError *err = nil;\n    NSURL *containerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@\"group.wangzz\"];\n    containerURL = [containerURL URLByAppendingPathComponent:@\"Library/Caches/good\"];\n    NSString *value = [NSString stringWithContentsOfURL:containerURL encoding:NSUTF8StringEncoding error:&err];\n    \n    return value;\n}\n```\n\n在这里我试着保存和读取的是字符串数据，但读写SQlite我相信也是没问题的。\n\n* 数据同步\n\n两个应用共同读取同一份数据，就会引发数据同步问题。WWDC2014的视频中建议使用NSFileCoordination实现普通文件的读写同步，而数据库可以使用CoreData,Sqlite也支持同步。\n\n\n## 五、extension和containing app代码共享\n\n和数据共享类似，extension和containing app很自然地会有一些业务逻辑上可以共用的代码，这时可以通过iOS8中刚开放使用的framework实现。苹果在[App Extension Programming Guide](https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html#//apple_ref/doc/uid/TP40014214-CH21-SW1)中是这样描述的：\n\n>\nIn iOS 8.0 and later, you can use an embedded framework to share code between your extension and its containing app. For example, if you develop image-processing code that you want both your Photo Editing extension and its containing app to share, you can put the code into a framework and embed it in both targets.\n>\n\n即将framework分别嵌入到extension和containing app的target中实现代码共享。但这样岂不是需要分别要将framework分别copy到extension和containing app的main bundle中？\n\n参考extension和containing app数据共享，我试想能不能将framework只保存一份放在App Groups区域？\n\n#### 5.1 copy framework到App Groups\n\n在app首次启动的时候将framework放到App Groups区域：\n\n```objective-c\n\n- (BOOL)copyFrameworkFromMainBundleToAppGroup\n{\n    NSFileManager *manager = [NSFileManager defaultManager];\n    NSError *err = nil;\n    NSURL *containerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@\"group.wangzz\"];\n    NSString *sorPath = [NSString stringWithFormat:@\"%@/Dylib.framework\",[[NSBundle mainBundle] bundlePath]];\n    NSString *desPath = [NSString stringWithFormat:@\"%@/Library/Caches/Dylib.framework\",containerURL.path];\n    \n    BOOL removeResult = [manager removeItemAtPath:desPath error:&err];\n    if (!removeResult) {\n        NSLog(@\"%@\",err);\n    } else {\n        NSLog(@\"remove success.\");\n    }\n    \n    BOOL copyResult = [[NSFileManager defaultManager] copyItemAtPath:sorPath toPath:desPath error:&err];\n    if (!copyResult) {\n        NSLog(@\"%@\",err);\n    } else {\n        NSLog(@\"copy success.\");\n    }\n\n    return copyResult;\n}\n```\n\n#### 5.2 使用framework：\n\n```objective-c\n- (BOOL)loadFrameworkInAppGroup\n{\n    NSError *err = nil;\n    NSURL *containerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@\"group.wangzz\"];\n    NSString *desPath = [NSString stringWithFormat:@\"%@/Library/Caches/Dylib.framework\",containerURL.path];\n    NSBundle *bundle = [NSBundle bundleWithPath:desPath];\n    BOOL result = [bundle loadAndReturnError:&err];\n    if (result) {\n        Class root = NSClassFromString(@\"Person\");\n        if (root) {\n            Person *person = [[root alloc] init];\n            if (person) {\n                [person run];\n            }\n        }\n    } else {\n        NSLog(@\"%@\",err);\n    }\n    \n    return result;\n}\n\n```\n\n经过测试，竟然能够加载成功。\n\n需要说明的是，这里只是说那么用是可以成功加载framework，但还面临不少问题，比如如果用户在启动app之前去使用extension，这时framework还没有copy过去，怎么处理；另外iOS的机制或者苹果的审核是否允许这样使用等。\n\n在一切确定下来之前还是乖乖按文档中的方式使用吧。\n\n## 六、生命周期\n\nextension和普通app的最大区别之一是生命周期。\n\n* 开始\n\n在用户通过host app点击extension时，系统就会实例化extension应用，这是生命周期的开始。\n\n* 执行任务\n\n在extension启动以后，开始执行它的使命。\n\n* 终止\n\n在用户取消任务，或者任务执行结束，或者开启了一个长时后台任务时，系统会将其杀掉。\n\n由此可见，extension就是为了任务而生！\n\n下图来自官方文档，它将生命周期划分的更详细：\n\n![app_extensions_lifecycle](/images/article5/app_extensions_lifecycle.png)\n\n通过打印日志发现，`Today`中的`widget`在将`Today`切换到`全部`或者`未读通知时`都会被杀掉。\n\n## 七、 调试\n\nextension和普通app的调试方式差不多，开始调试前先选中extension对应的target，点击run，就会弹出下图所示选择框：\n\n![extension_debug](/images/article5/extension_debug.png)\n\n需要选择一个host app，这里选择`Today`。\n\n然后即可和普通app一样调试了，不过我在实际使用过程中，发现有各种奇怪的事情，比如NSLog无法在控制台输出，应该是bug吧。\n\n## 八、 iOS8应用文件系统\n\n发现iOS8的文件系统发生了变化，新的文件系统将可执行文件（即原来的.app文件）从沙盒中移到了另外一个地方，这样感觉更合理。\n\n* 测试代码\n\n下述代码用于打印App Groups路径、应用的可执行文件路径、对应的Documents路径：\n\n```objective-c\n\n- (void)logAppPath\n{\n    //app group路径\n    NSURL *containerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@\"group.wangzz\"];\n    NSLog(@\"app group:\\n%@\",containerURL.path);\n    \n    //打印可执行文件路径\n    NSLog(@\"bundle:\\n%@\",[[NSBundle mainBundle] bundlePath]);\n    \n    //打印documents\n    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\n    NSString *path = [paths objectAtIndex:0];\n    NSLog(@\"documents:\\n%@\",path);\n}\n```\n\n* containing app执行结果\n\n```\n2014-06-23 19:35:03.944 AppExtensionDemo[7471:365131] app group:\n/private/var/mobile/Containers/Shared/AppGroup/89CCBFB1-CA5E-4C7F-80CB-A3EB9E841816\n2014-06-23 19:35:03.946 AppExtensionDemo[7471:365131] bundle:\n/private/var/mobile/Containers/Bundle/Application/1AC73797-A3BB-4BDE-A647-3D083DA6871A/AppExtensionDemo.app\n2014-06-23 19:35:03.948 AppExtensionDemo[7471:365131] documents:\n/var/mobile/Containers/Data/Application/E5E6E516-0163-4754-9D10-A5F6C33A6261/Documents\n```\n\n* extension执行结果\n\n```\nJun 23 19:37:49 autonavis-iPad com.foogry.AppExtensionDemo.TodayExtension[7638] <Warning>: app group:\n\t/private/var/mobile/Containers/Shared/AppGroup/89CCBFB1-CA5E-4C7F-80CB-A3EB9E841816\nJun 23 19:37:49 autonavis-iPad com.foogry.AppExtensionDemo.TodayExtension[7638] <Warning>: bundle:\n\t/private/var/mobile/Containers/Bundle/Application/596717B7-7CB8-4F53-BCD4-380F34ABD30F/AppExtensionDemo.app/PlugIns/com.foogry.AppExtensionDemo.TodayExtension.appex\nJun 23 19:37:49 autonavis-iPad com.foogry.AppExtensionDemo.TodayExtension[7638] <Warning>: documents:\n\t/var/mobile/Containers/Data/PluginKitPlugin/57581433-3DBD-4930-971F-78D30C150E8A/Documents\n```\n\n由此可见，不管是extension还是containing app，他们的可执行文件和保存数据的目录都是分开存放的，即所有app的可执行文件都放在一个大目录下，保存数据的目录保存在另一个大目录下，同样，AppGroup放在另一个大目录下。\n\n## 说明\n\n* 本文用到的demo已经上传到[github](https://github.com/wangzz/Demo/tree/master/AppExtensionsDemo)上。\n\n* 文中可能有理解有误的地方，还请指出。\n\n## 参考文档\n\n* [App Extension Programming Guide](https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/index.html#//apple_ref/doc/uid/TP40014214-CH20-SW1)\n\n* [Crash Course In iOS 8 Widgets](http://blog.waynehartman.com/)\n\n* [Notification Center Framework Reference](https://developer.apple.com/library/prerelease/ios/documentation/NotificationCenter/Reference/NotificationCenter_Framework/index.html#//apple_ref/doc/uid/TP40014443)\n\n* [iOS 8 Release Notes](https://developer.apple.com/library/prerelease/ios/releasenotes/General/RN-iOSSDK-8.0/)\n\n* [Entitlement Key Reference](https://developer.apple.com/library/prerelease/ios/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/EnablingAppSandbox.html#//apple_ref/doc/uid/TP40011195-CH4-SW19)\n\n* [苹果的插件生态系统，开发者的新世界](http://www.pingwest.com/apples-new-extension-eco-system/)\n\n* [iOS 8 Extensions: Apple’s Plan for a Powerful App Ecosystem](http://www.macstories.net/stories/ios-8-extensions-apples-plan-for-a-powerful-app-ecosystem/)\n\n* [Property List Programming Guide](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/PropertyLists/AboutPropertyLists/AboutPropertyLists.html)\n","slug":"2014-06-23-wwdc2014zhi-app-extensionsxue-xi-bi-ji","published":1,"updated":"2019-09-23T12:58:50.000Z","photos":[],"link":"","_id":"ck0zclidc001cqhtf3kc5k9es","content":"<p><img src=\"/images/article5/wwdc_banner_promo.jpg\" alt=\"wwdc_banner_promo\"></p>\n<h2 id=\"一、关于App-Extensions\"><a href=\"#一、关于App-Extensions\" class=\"headerlink\" title=\"一、关于App Extensions\"></a>一、关于App Extensions</h2><p>extension是iOS8新开放的一种对几个固定系统区域的扩展机制，它可以在一定程度上弥补iOS的沙盒机制对应用间通信的限制。</p>\n<p>extension的出现，为用户提供了在其它应用中使用我们应用提供的服务的便捷方式，比如用户可以在<code>Today</code>的<code>widgets</code>中查看应用展示的简略信息，而不用再进到我们的应用中，这将是一种全新的用户体验；但是，extension的出现可能会减少用户启动应用的次数，同时还会增大开发者的工作量。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"几个关键词\"><a href=\"#几个关键词\" class=\"headerlink\" title=\"几个关键词\"></a>几个关键词</h4><ul>\n<li>extension point</li>\n</ul>\n<p>系统中支持extension的区域，extension的类别也是据此区分的，iOS上共有<code>Today</code>、<code>Share</code>、<code>Action</code>、<code>Photo Editing</code>、<code>Storage Provider</code>、<code>Custom keyboard</code>几种，其中<code>Today</code>中的extension又被称为<code>widget</code>。</p>\n<p>每种extension point的使用方式和适合干的活都不一样，因此不存在通用的extension。</p>\n<ul>\n<li>app extension</li>\n</ul>\n<p>即为本文所说的extension。extension并不是一个独立的app，它有一个包含在app bundle中的独立bundle，extension的bundle后缀名是<code>.appex</code>。其生命周期也和普通app不同，这些后文将会详述。</p>\n<p>extension不能单独存在，必须有一个包含它的containing app。</p>\n<p>另外，extension需要用户手动激活，不同的extension激活方式也不同，比如：<br>比如Today中的widget需要在Today中激活和关闭；<code>Custom keyboard</code>需要在设置中进行相关设置；<code>Photo Editing</code>需要在使用照片时在照片管理器中激活或关闭；<code>Storage Provider</code>可以在选择文件时出现；<code>Share</code>和<code>Action</code>可以在任何应用里被激活，但前提是开发者需要设置<code>Activation Rules</code>，以确定extension需要在合适出现。</p>\n<ul>\n<li>containing app</li>\n</ul>\n<p>尽管苹果开放了extension，但是在iOS中extension并不能单独存在，要想提交到AppStore，必须将extension包含在一个app中提交，并且app的实现部分不能为空,这个包含extension的app就叫containing app。</p>\n<p>extension会随着containing app的安装而安装，同时随着containing app的卸载而卸载。</p>\n<ul>\n<li>host app</li>\n</ul>\n<p>能够调起extension的app被称为host app，比如<code>widget</code>的host app就是<code>Today</code>。</p>\n<h2 id=\"二、extension和containing-app、host-app\"><a href=\"#二、extension和containing-app、host-app\" class=\"headerlink\" title=\"二、extension和containing app、host app\"></a>二、extension和containing app、host app</h2><h4 id=\"2-1-extension和host-app\"><a href=\"#2-1-extension和host-app\" class=\"headerlink\" title=\"2.1 extension和host app\"></a>2.1 extension和host app</h4><p>extension和host app之间可以通过extensionContext属性直接通信，该属性是新增加的UIViewController类别：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface UIViewController(NSExtensionAdditions) &lt;NSExtensionRequestHandling&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// Returns the extension context. Also acts as a convenience method for a view controller to check if it participating in an extension request.</span><br><span class=\"line\">@property (nonatomic,readonly,retain) NSExtensionContext *extensionContext NS_AVAILABLE_IOS(8_0);</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>实际上extension和host app之间是通过IPC（interprocess communication）实现的，只是苹果把调用接口高度抽象了，我们并不需要关注那么底层的东西。</p>\n<h4 id=\"2-2-containing-app和host-app\"><a href=\"#2-2-containing-app和host-app\" class=\"headerlink\" title=\"2.2 containing app和host app\"></a>2.2 containing app和host app</h4><p>他们之间没有任何直接关系，也从来不需要通信。</p>\n<h4 id=\"2-3-extension和containing-app\"><a href=\"#2-3-extension和containing-app\" class=\"headerlink\" title=\"2.3 extension和containing app\"></a>2.3 extension和containing app</h4><p>这二者之间的关系最复杂，纠纠缠缠扯不清关系。</p>\n<ul>\n<li>不能直接通信</li>\n</ul>\n<p>首先，尽管extension的bundle是放在containing app的bundle中，但是他们是两个完全独立的进程，之间不能直接通信。不过extension可以通过openURL的方式启动containing app（当然也能启动其它app），不过必须通过extensionContext借助host app来实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//通过openURL的方式启动Containing APP</span><br><span class=\"line\">- (void)openURLContainingAPP</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [self.extensionContext openURL:[NSURL URLWithString:@&quot;appextension://123&quot;]</span><br><span class=\"line\">                 completionHandler:^(BOOL success) &#123;</span><br><span class=\"line\">                     NSLog(@&quot;open url result:%d&quot;,success);</span><br><span class=\"line\">                 &#125;];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>extension中是无法直接使用openURL的。</p>\n<ul>\n<li>可以共享<code>Shared resources</code></li>\n</ul>\n<p>extension和containing app可以共同读写一个被称为<code>Shared resources</code>的存储区域，这是通过App Groups实现的，后文将会详述。</p>\n<p>三者间的关系可以通过官网给的两张图片形象地说明：</p>\n<p><img src=\"/images/article5/detailed_communication.png\" alt=\"detailed_communication\"></p>\n<p><img src=\"/images/article5/app_extensions_container_restrictions.png\" alt=\"app_extensions_container_restrictions\"></p>\n<ul>\n<li>containing app能够控制extension的出现和隐藏</li>\n</ul>\n<p>通过以下代码，containing app可以让extension出现或隐藏（当然extension也可以让自己隐藏）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//让隐藏的插件重新显示</span><br><span class=\"line\">- (void)showTodayExtension</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [[NCWidgetController widgetController] setHasContent:YES forWidgetWithBundleIdentifier:@&quot;com.wangzz.app.extension&quot;];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//隐藏插件</span><br><span class=\"line\">- (void)hiddeTodayExtension</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [[NCWidgetController widgetController] setHasContent:NO forWidgetWithBundleIdentifier:@&quot;com.wangzz.app.extension&quot;];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、App-Groups\"><a href=\"#三、App-Groups\" class=\"headerlink\" title=\"三、App Groups\"></a>三、App Groups</h2><p>这是iOS8新开放的功能，在OS X上早就可用了。它主要用于同一group下的app共享同一份读写空间，以实现数据共享。</p>\n<p>extension和containing app共同读写一份数据是很合理的需求，比如系统的股市应用，widget和app中都需要展示几个公司的股票数据，这就可以通过App Groups实现。</p>\n<h4 id=\"3-1-功能开启\"><a href=\"#3-1-功能开启\" class=\"headerlink\" title=\"3.1 功能开启\"></a>3.1 功能开启</h4><p>为了便于后续操作，请先确保你的开发者账号在Xcode上处于登录状态。</p>\n<ul>\n<li>在app中开启</li>\n</ul>\n<p>App Groups位于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TARGETS--&gt;AppExtensionDemo--&gt;Capabilities--&gt;App Groups</span><br></pre></td></tr></table></figure>\n\n<p>找到以后，将App Groups右上角的开关打开，然后选择添加groups，比如我的是group.wangzz，当然这是为了测试随便起得名字，正规点得命名规则应该是：group.com.company.app。</p>\n<p>添加成功以后如下图所示：</p>\n<p><img src=\"/images/article5/app_group.png\" alt=\"app_group\"></p>\n<ul>\n<li>在extension中开启</li>\n</ul>\n<p>我创建的是widget，target名称为TodayExtension，对应的App Groups位于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TARGETS--&gt;TodayExtension--&gt;Capabilities--&gt;App Groups</span><br></pre></td></tr></table></figure>\n\n<p>开启方式和app中一样，需要注意的是必须保证这里地App Groups名称和app中的相同，即为group.wangzz。</p>\n<h2 id=\"四、extension和containing-app数据共享\"><a href=\"#四、extension和containing-app数据共享\" class=\"headerlink\" title=\"四、extension和containing app数据共享\"></a>四、extension和containing app数据共享</h2><p>App Groups给我们提供了同一group内app可以共同读写的区域，可以通过以下方式实现数据共享：</p>\n<h4 id=\"4-1-通过NSUserDefaults共享数据\"><a href=\"#4-1-通过NSUserDefaults共享数据\" class=\"headerlink\" title=\"4.1 通过NSUserDefaults共享数据\"></a>4.1 通过NSUserDefaults共享数据</h4><ul>\n<li>存数据</li>\n</ul>\n<p>通过以下方式向NSUserDefaults中保存数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)saveTextByNSUserDefaults</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSUserDefaults *shared = [[NSUserDefaults alloc] initWithSuiteName:@&quot;group.wangzz&quot;];</span><br><span class=\"line\">    [shared setObject:_textField.text forKey:@&quot;wangzz&quot;];</span><br><span class=\"line\">    [shared synchronize];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是：</p>\n<p>1.保存数据的时候必须指明group id；</p>\n<p>2.而且要注意NSUserDefaults能够处理的数据只能是可plist化的对象，详情见<a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/PropertyLists/AboutPropertyLists/AboutPropertyLists.html\" target=\"_blank\" rel=\"noopener\">Property List Programming Guide</a>。</p>\n<p>3.为了防止出现数据同步问题，不要忘记调用<code>[shared synchronize];</code></p>\n<ul>\n<li>读数据</li>\n</ul>\n<p>对应的读取数据方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSString *)readDataFromNSUserDefaults</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSUserDefaults *shared = [[NSUserDefaults alloc] initWithSuiteName:@&quot;group.wangzz&quot;];</span><br><span class=\"line\">    NSString *value = [shared valueForKey:@&quot;wangzz&quot;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    return value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-通过NSFileManager共享数据\"><a href=\"#4-2-通过NSFileManager共享数据\" class=\"headerlink\" title=\"4.2 通过NSFileManager共享数据\"></a>4.2 通过NSFileManager共享数据</h4><p>NSFileManager在iOS7提供了containerURLForSecurityApplicationGroupIdentifier方法，可以用来实现app group共享数据。</p>\n<ul>\n<li>保存数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (BOOL)saveTextByNSFileManager</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSError *err = nil;</span><br><span class=\"line\">    NSURL *containerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@&quot;group.wangzz&quot;];</span><br><span class=\"line\">    containerURL = [containerURL URLByAppendingPathComponent:@&quot;Library/Caches/good&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    NSString *value = _textField.text;</span><br><span class=\"line\">    BOOL result = [value writeToURL:containerURL atomically:YES encoding:NSUTF8StringEncoding error:&amp;err];</span><br><span class=\"line\">    if (!result) &#123;</span><br><span class=\"line\">        NSLog(@&quot;%@&quot;,err);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        NSLog(@&quot;save value:%@ success.&quot;,value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>读数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- (NSString *)readTextByNSFileManager</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSError *err = nil;</span><br><span class=\"line\">    NSURL *containerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@&quot;group.wangzz&quot;];</span><br><span class=\"line\">    containerURL = [containerURL URLByAppendingPathComponent:@&quot;Library/Caches/good&quot;];</span><br><span class=\"line\">    NSString *value = [NSString stringWithContentsOfURL:containerURL encoding:NSUTF8StringEncoding error:&amp;err];</span><br><span class=\"line\">    </span><br><span class=\"line\">    return value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这里我试着保存和读取的是字符串数据，但读写SQlite我相信也是没问题的。</p>\n<ul>\n<li>数据同步</li>\n</ul>\n<p>两个应用共同读取同一份数据，就会引发数据同步问题。WWDC2014的视频中建议使用NSFileCoordination实现普通文件的读写同步，而数据库可以使用CoreData,Sqlite也支持同步。</p>\n<h2 id=\"五、extension和containing-app代码共享\"><a href=\"#五、extension和containing-app代码共享\" class=\"headerlink\" title=\"五、extension和containing app代码共享\"></a>五、extension和containing app代码共享</h2><p>和数据共享类似，extension和containing app很自然地会有一些业务逻辑上可以共用的代码，这时可以通过iOS8中刚开放使用的framework实现。苹果在<a href=\"https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html#//apple_ref/doc/uid/TP40014214-CH21-SW1\" target=\"_blank\" rel=\"noopener\">App Extension Programming Guide</a>中是这样描述的：</p>\n<blockquote>\n</blockquote>\n<p>In iOS 8.0 and later, you can use an embedded framework to share code between your extension and its containing app. For example, if you develop image-processing code that you want both your Photo Editing extension and its containing app to share, you can put the code into a framework and embed it in both targets.</p>\n<blockquote>\n</blockquote>\n<p>即将framework分别嵌入到extension和containing app的target中实现代码共享。但这样岂不是需要分别要将framework分别copy到extension和containing app的main bundle中？</p>\n<p>参考extension和containing app数据共享，我试想能不能将framework只保存一份放在App Groups区域？</p>\n<h4 id=\"5-1-copy-framework到App-Groups\"><a href=\"#5-1-copy-framework到App-Groups\" class=\"headerlink\" title=\"5.1 copy framework到App Groups\"></a>5.1 copy framework到App Groups</h4><p>在app首次启动的时候将framework放到App Groups区域：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- (BOOL)copyFrameworkFromMainBundleToAppGroup</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSFileManager *manager = [NSFileManager defaultManager];</span><br><span class=\"line\">    NSError *err = nil;</span><br><span class=\"line\">    NSURL *containerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@&quot;group.wangzz&quot;];</span><br><span class=\"line\">    NSString *sorPath = [NSString stringWithFormat:@&quot;%@/Dylib.framework&quot;,[[NSBundle mainBundle] bundlePath]];</span><br><span class=\"line\">    NSString *desPath = [NSString stringWithFormat:@&quot;%@/Library/Caches/Dylib.framework&quot;,containerURL.path];</span><br><span class=\"line\">    </span><br><span class=\"line\">    BOOL removeResult = [manager removeItemAtPath:desPath error:&amp;err];</span><br><span class=\"line\">    if (!removeResult) &#123;</span><br><span class=\"line\">        NSLog(@&quot;%@&quot;,err);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        NSLog(@&quot;remove success.&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    BOOL copyResult = [[NSFileManager defaultManager] copyItemAtPath:sorPath toPath:desPath error:&amp;err];</span><br><span class=\"line\">    if (!copyResult) &#123;</span><br><span class=\"line\">        NSLog(@&quot;%@&quot;,err);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        NSLog(@&quot;copy success.&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return copyResult;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-2-使用framework：\"><a href=\"#5-2-使用framework：\" class=\"headerlink\" title=\"5.2 使用framework：\"></a>5.2 使用framework：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (BOOL)loadFrameworkInAppGroup</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSError *err = nil;</span><br><span class=\"line\">    NSURL *containerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@&quot;group.wangzz&quot;];</span><br><span class=\"line\">    NSString *desPath = [NSString stringWithFormat:@&quot;%@/Library/Caches/Dylib.framework&quot;,containerURL.path];</span><br><span class=\"line\">    NSBundle *bundle = [NSBundle bundleWithPath:desPath];</span><br><span class=\"line\">    BOOL result = [bundle loadAndReturnError:&amp;err];</span><br><span class=\"line\">    if (result) &#123;</span><br><span class=\"line\">        Class root = NSClassFromString(@&quot;Person&quot;);</span><br><span class=\"line\">        if (root) &#123;</span><br><span class=\"line\">            Person *person = [[root alloc] init];</span><br><span class=\"line\">            if (person) &#123;</span><br><span class=\"line\">                [person run];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        NSLog(@&quot;%@&quot;,err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>经过测试，竟然能够加载成功。</p>\n<p>需要说明的是，这里只是说那么用是可以成功加载framework，但还面临不少问题，比如如果用户在启动app之前去使用extension，这时framework还没有copy过去，怎么处理；另外iOS的机制或者苹果的审核是否允许这样使用等。</p>\n<p>在一切确定下来之前还是乖乖按文档中的方式使用吧。</p>\n<h2 id=\"六、生命周期\"><a href=\"#六、生命周期\" class=\"headerlink\" title=\"六、生命周期\"></a>六、生命周期</h2><p>extension和普通app的最大区别之一是生命周期。</p>\n<ul>\n<li>开始</li>\n</ul>\n<p>在用户通过host app点击extension时，系统就会实例化extension应用，这是生命周期的开始。</p>\n<ul>\n<li>执行任务</li>\n</ul>\n<p>在extension启动以后，开始执行它的使命。</p>\n<ul>\n<li>终止</li>\n</ul>\n<p>在用户取消任务，或者任务执行结束，或者开启了一个长时后台任务时，系统会将其杀掉。</p>\n<p>由此可见，extension就是为了任务而生！</p>\n<p>下图来自官方文档，它将生命周期划分的更详细：</p>\n<p><img src=\"/images/article5/app_extensions_lifecycle.png\" alt=\"app_extensions_lifecycle\"></p>\n<p>通过打印日志发现，<code>Today</code>中的<code>widget</code>在将<code>Today</code>切换到<code>全部</code>或者<code>未读通知时</code>都会被杀掉。</p>\n<h2 id=\"七、-调试\"><a href=\"#七、-调试\" class=\"headerlink\" title=\"七、 调试\"></a>七、 调试</h2><p>extension和普通app的调试方式差不多，开始调试前先选中extension对应的target，点击run，就会弹出下图所示选择框：</p>\n<p><img src=\"/images/article5/extension_debug.png\" alt=\"extension_debug\"></p>\n<p>需要选择一个host app，这里选择<code>Today</code>。</p>\n<p>然后即可和普通app一样调试了，不过我在实际使用过程中，发现有各种奇怪的事情，比如NSLog无法在控制台输出，应该是bug吧。</p>\n<h2 id=\"八、-iOS8应用文件系统\"><a href=\"#八、-iOS8应用文件系统\" class=\"headerlink\" title=\"八、 iOS8应用文件系统\"></a>八、 iOS8应用文件系统</h2><p>发现iOS8的文件系统发生了变化，新的文件系统将可执行文件（即原来的.app文件）从沙盒中移到了另外一个地方，这样感觉更合理。</p>\n<ul>\n<li>测试代码</li>\n</ul>\n<p>下述代码用于打印App Groups路径、应用的可执行文件路径、对应的Documents路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- (void)logAppPath</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //app group路径</span><br><span class=\"line\">    NSURL *containerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@&quot;group.wangzz&quot;];</span><br><span class=\"line\">    NSLog(@&quot;app group:\\n%@&quot;,containerURL.path);</span><br><span class=\"line\">    </span><br><span class=\"line\">    //打印可执行文件路径</span><br><span class=\"line\">    NSLog(@&quot;bundle:\\n%@&quot;,[[NSBundle mainBundle] bundlePath]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    //打印documents</span><br><span class=\"line\">    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);</span><br><span class=\"line\">    NSString *path = [paths objectAtIndex:0];</span><br><span class=\"line\">    NSLog(@&quot;documents:\\n%@&quot;,path);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>containing app执行结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2014-06-23 19:35:03.944 AppExtensionDemo[7471:365131] app group:</span><br><span class=\"line\">/private/var/mobile/Containers/Shared/AppGroup/89CCBFB1-CA5E-4C7F-80CB-A3EB9E841816</span><br><span class=\"line\">2014-06-23 19:35:03.946 AppExtensionDemo[7471:365131] bundle:</span><br><span class=\"line\">/private/var/mobile/Containers/Bundle/Application/1AC73797-A3BB-4BDE-A647-3D083DA6871A/AppExtensionDemo.app</span><br><span class=\"line\">2014-06-23 19:35:03.948 AppExtensionDemo[7471:365131] documents:</span><br><span class=\"line\">/var/mobile/Containers/Data/Application/E5E6E516-0163-4754-9D10-A5F6C33A6261/Documents</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>extension执行结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Jun 23 19:37:49 autonavis-iPad com.foogry.AppExtensionDemo.TodayExtension[7638] &lt;Warning&gt;: app group:</span><br><span class=\"line\">\t/private/var/mobile/Containers/Shared/AppGroup/89CCBFB1-CA5E-4C7F-80CB-A3EB9E841816</span><br><span class=\"line\">Jun 23 19:37:49 autonavis-iPad com.foogry.AppExtensionDemo.TodayExtension[7638] &lt;Warning&gt;: bundle:</span><br><span class=\"line\">\t/private/var/mobile/Containers/Bundle/Application/596717B7-7CB8-4F53-BCD4-380F34ABD30F/AppExtensionDemo.app/PlugIns/com.foogry.AppExtensionDemo.TodayExtension.appex</span><br><span class=\"line\">Jun 23 19:37:49 autonavis-iPad com.foogry.AppExtensionDemo.TodayExtension[7638] &lt;Warning&gt;: documents:</span><br><span class=\"line\">\t/var/mobile/Containers/Data/PluginKitPlugin/57581433-3DBD-4930-971F-78D30C150E8A/Documents</span><br></pre></td></tr></table></figure>\n\n<p>由此可见，不管是extension还是containing app，他们的可执行文件和保存数据的目录都是分开存放的，即所有app的可执行文件都放在一个大目录下，保存数据的目录保存在另一个大目录下，同样，AppGroup放在另一个大目录下。</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><ul>\n<li><p>本文用到的demo已经上传到<a href=\"https://github.com/wangzz/Demo/tree/master/AppExtensionsDemo\" target=\"_blank\" rel=\"noopener\">github</a>上。</p>\n</li>\n<li><p>文中可能有理解有误的地方，还请指出。</p>\n</li>\n</ul>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><p><a href=\"https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/index.html#//apple_ref/doc/uid/TP40014214-CH20-SW1\" target=\"_blank\" rel=\"noopener\">App Extension Programming Guide</a></p>\n</li>\n<li><p><a href=\"http://blog.waynehartman.com/\" target=\"_blank\" rel=\"noopener\">Crash Course In iOS 8 Widgets</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/prerelease/ios/documentation/NotificationCenter/Reference/NotificationCenter_Framework/index.html#//apple_ref/doc/uid/TP40014443\" target=\"_blank\" rel=\"noopener\">Notification Center Framework Reference</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/prerelease/ios/releasenotes/General/RN-iOSSDK-8.0/\" target=\"_blank\" rel=\"noopener\">iOS 8 Release Notes</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/prerelease/ios/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/EnablingAppSandbox.html#//apple_ref/doc/uid/TP40011195-CH4-SW19\" target=\"_blank\" rel=\"noopener\">Entitlement Key Reference</a></p>\n</li>\n<li><p><a href=\"http://www.pingwest.com/apples-new-extension-eco-system/\" target=\"_blank\" rel=\"noopener\">苹果的插件生态系统，开发者的新世界</a></p>\n</li>\n<li><p><a href=\"http://www.macstories.net/stories/ios-8-extensions-apples-plan-for-a-powerful-app-ecosystem/\" target=\"_blank\" rel=\"noopener\">iOS 8 Extensions: Apple’s Plan for a Powerful App Ecosystem</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/PropertyLists/AboutPropertyLists/AboutPropertyLists.html\" target=\"_blank\" rel=\"noopener\">Property List Programming Guide</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/article5/wwdc_banner_promo.jpg\" alt=\"wwdc_banner_promo\"></p>\n<h2 id=\"一、关于App-Extensions\"><a href=\"#一、关于App-Extensions\" class=\"headerlink\" title=\"一、关于App Extensions\"></a>一、关于App Extensions</h2><p>extension是iOS8新开放的一种对几个固定系统区域的扩展机制，它可以在一定程度上弥补iOS的沙盒机制对应用间通信的限制。</p>\n<p>extension的出现，为用户提供了在其它应用中使用我们应用提供的服务的便捷方式，比如用户可以在<code>Today</code>的<code>widgets</code>中查看应用展示的简略信息，而不用再进到我们的应用中，这将是一种全新的用户体验；但是，extension的出现可能会减少用户启动应用的次数，同时还会增大开发者的工作量。</p>","more":"<h4 id=\"几个关键词\"><a href=\"#几个关键词\" class=\"headerlink\" title=\"几个关键词\"></a>几个关键词</h4><ul>\n<li>extension point</li>\n</ul>\n<p>系统中支持extension的区域，extension的类别也是据此区分的，iOS上共有<code>Today</code>、<code>Share</code>、<code>Action</code>、<code>Photo Editing</code>、<code>Storage Provider</code>、<code>Custom keyboard</code>几种，其中<code>Today</code>中的extension又被称为<code>widget</code>。</p>\n<p>每种extension point的使用方式和适合干的活都不一样，因此不存在通用的extension。</p>\n<ul>\n<li>app extension</li>\n</ul>\n<p>即为本文所说的extension。extension并不是一个独立的app，它有一个包含在app bundle中的独立bundle，extension的bundle后缀名是<code>.appex</code>。其生命周期也和普通app不同，这些后文将会详述。</p>\n<p>extension不能单独存在，必须有一个包含它的containing app。</p>\n<p>另外，extension需要用户手动激活，不同的extension激活方式也不同，比如：<br>比如Today中的widget需要在Today中激活和关闭；<code>Custom keyboard</code>需要在设置中进行相关设置；<code>Photo Editing</code>需要在使用照片时在照片管理器中激活或关闭；<code>Storage Provider</code>可以在选择文件时出现；<code>Share</code>和<code>Action</code>可以在任何应用里被激活，但前提是开发者需要设置<code>Activation Rules</code>，以确定extension需要在合适出现。</p>\n<ul>\n<li>containing app</li>\n</ul>\n<p>尽管苹果开放了extension，但是在iOS中extension并不能单独存在，要想提交到AppStore，必须将extension包含在一个app中提交，并且app的实现部分不能为空,这个包含extension的app就叫containing app。</p>\n<p>extension会随着containing app的安装而安装，同时随着containing app的卸载而卸载。</p>\n<ul>\n<li>host app</li>\n</ul>\n<p>能够调起extension的app被称为host app，比如<code>widget</code>的host app就是<code>Today</code>。</p>\n<h2 id=\"二、extension和containing-app、host-app\"><a href=\"#二、extension和containing-app、host-app\" class=\"headerlink\" title=\"二、extension和containing app、host app\"></a>二、extension和containing app、host app</h2><h4 id=\"2-1-extension和host-app\"><a href=\"#2-1-extension和host-app\" class=\"headerlink\" title=\"2.1 extension和host app\"></a>2.1 extension和host app</h4><p>extension和host app之间可以通过extensionContext属性直接通信，该属性是新增加的UIViewController类别：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface UIViewController(NSExtensionAdditions) &lt;NSExtensionRequestHandling&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// Returns the extension context. Also acts as a convenience method for a view controller to check if it participating in an extension request.</span><br><span class=\"line\">@property (nonatomic,readonly,retain) NSExtensionContext *extensionContext NS_AVAILABLE_IOS(8_0);</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>实际上extension和host app之间是通过IPC（interprocess communication）实现的，只是苹果把调用接口高度抽象了，我们并不需要关注那么底层的东西。</p>\n<h4 id=\"2-2-containing-app和host-app\"><a href=\"#2-2-containing-app和host-app\" class=\"headerlink\" title=\"2.2 containing app和host app\"></a>2.2 containing app和host app</h4><p>他们之间没有任何直接关系，也从来不需要通信。</p>\n<h4 id=\"2-3-extension和containing-app\"><a href=\"#2-3-extension和containing-app\" class=\"headerlink\" title=\"2.3 extension和containing app\"></a>2.3 extension和containing app</h4><p>这二者之间的关系最复杂，纠纠缠缠扯不清关系。</p>\n<ul>\n<li>不能直接通信</li>\n</ul>\n<p>首先，尽管extension的bundle是放在containing app的bundle中，但是他们是两个完全独立的进程，之间不能直接通信。不过extension可以通过openURL的方式启动containing app（当然也能启动其它app），不过必须通过extensionContext借助host app来实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//通过openURL的方式启动Containing APP</span><br><span class=\"line\">- (void)openURLContainingAPP</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [self.extensionContext openURL:[NSURL URLWithString:@&quot;appextension://123&quot;]</span><br><span class=\"line\">                 completionHandler:^(BOOL success) &#123;</span><br><span class=\"line\">                     NSLog(@&quot;open url result:%d&quot;,success);</span><br><span class=\"line\">                 &#125;];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>extension中是无法直接使用openURL的。</p>\n<ul>\n<li>可以共享<code>Shared resources</code></li>\n</ul>\n<p>extension和containing app可以共同读写一个被称为<code>Shared resources</code>的存储区域，这是通过App Groups实现的，后文将会详述。</p>\n<p>三者间的关系可以通过官网给的两张图片形象地说明：</p>\n<p><img src=\"/images/article5/detailed_communication.png\" alt=\"detailed_communication\"></p>\n<p><img src=\"/images/article5/app_extensions_container_restrictions.png\" alt=\"app_extensions_container_restrictions\"></p>\n<ul>\n<li>containing app能够控制extension的出现和隐藏</li>\n</ul>\n<p>通过以下代码，containing app可以让extension出现或隐藏（当然extension也可以让自己隐藏）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//让隐藏的插件重新显示</span><br><span class=\"line\">- (void)showTodayExtension</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [[NCWidgetController widgetController] setHasContent:YES forWidgetWithBundleIdentifier:@&quot;com.wangzz.app.extension&quot;];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//隐藏插件</span><br><span class=\"line\">- (void)hiddeTodayExtension</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [[NCWidgetController widgetController] setHasContent:NO forWidgetWithBundleIdentifier:@&quot;com.wangzz.app.extension&quot;];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、App-Groups\"><a href=\"#三、App-Groups\" class=\"headerlink\" title=\"三、App Groups\"></a>三、App Groups</h2><p>这是iOS8新开放的功能，在OS X上早就可用了。它主要用于同一group下的app共享同一份读写空间，以实现数据共享。</p>\n<p>extension和containing app共同读写一份数据是很合理的需求，比如系统的股市应用，widget和app中都需要展示几个公司的股票数据，这就可以通过App Groups实现。</p>\n<h4 id=\"3-1-功能开启\"><a href=\"#3-1-功能开启\" class=\"headerlink\" title=\"3.1 功能开启\"></a>3.1 功能开启</h4><p>为了便于后续操作，请先确保你的开发者账号在Xcode上处于登录状态。</p>\n<ul>\n<li>在app中开启</li>\n</ul>\n<p>App Groups位于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TARGETS--&gt;AppExtensionDemo--&gt;Capabilities--&gt;App Groups</span><br></pre></td></tr></table></figure>\n\n<p>找到以后，将App Groups右上角的开关打开，然后选择添加groups，比如我的是group.wangzz，当然这是为了测试随便起得名字，正规点得命名规则应该是：group.com.company.app。</p>\n<p>添加成功以后如下图所示：</p>\n<p><img src=\"/images/article5/app_group.png\" alt=\"app_group\"></p>\n<ul>\n<li>在extension中开启</li>\n</ul>\n<p>我创建的是widget，target名称为TodayExtension，对应的App Groups位于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TARGETS--&gt;TodayExtension--&gt;Capabilities--&gt;App Groups</span><br></pre></td></tr></table></figure>\n\n<p>开启方式和app中一样，需要注意的是必须保证这里地App Groups名称和app中的相同，即为group.wangzz。</p>\n<h2 id=\"四、extension和containing-app数据共享\"><a href=\"#四、extension和containing-app数据共享\" class=\"headerlink\" title=\"四、extension和containing app数据共享\"></a>四、extension和containing app数据共享</h2><p>App Groups给我们提供了同一group内app可以共同读写的区域，可以通过以下方式实现数据共享：</p>\n<h4 id=\"4-1-通过NSUserDefaults共享数据\"><a href=\"#4-1-通过NSUserDefaults共享数据\" class=\"headerlink\" title=\"4.1 通过NSUserDefaults共享数据\"></a>4.1 通过NSUserDefaults共享数据</h4><ul>\n<li>存数据</li>\n</ul>\n<p>通过以下方式向NSUserDefaults中保存数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)saveTextByNSUserDefaults</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSUserDefaults *shared = [[NSUserDefaults alloc] initWithSuiteName:@&quot;group.wangzz&quot;];</span><br><span class=\"line\">    [shared setObject:_textField.text forKey:@&quot;wangzz&quot;];</span><br><span class=\"line\">    [shared synchronize];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是：</p>\n<p>1.保存数据的时候必须指明group id；</p>\n<p>2.而且要注意NSUserDefaults能够处理的数据只能是可plist化的对象，详情见<a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/PropertyLists/AboutPropertyLists/AboutPropertyLists.html\" target=\"_blank\" rel=\"noopener\">Property List Programming Guide</a>。</p>\n<p>3.为了防止出现数据同步问题，不要忘记调用<code>[shared synchronize];</code></p>\n<ul>\n<li>读数据</li>\n</ul>\n<p>对应的读取数据方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSString *)readDataFromNSUserDefaults</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSUserDefaults *shared = [[NSUserDefaults alloc] initWithSuiteName:@&quot;group.wangzz&quot;];</span><br><span class=\"line\">    NSString *value = [shared valueForKey:@&quot;wangzz&quot;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    return value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-通过NSFileManager共享数据\"><a href=\"#4-2-通过NSFileManager共享数据\" class=\"headerlink\" title=\"4.2 通过NSFileManager共享数据\"></a>4.2 通过NSFileManager共享数据</h4><p>NSFileManager在iOS7提供了containerURLForSecurityApplicationGroupIdentifier方法，可以用来实现app group共享数据。</p>\n<ul>\n<li>保存数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (BOOL)saveTextByNSFileManager</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSError *err = nil;</span><br><span class=\"line\">    NSURL *containerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@&quot;group.wangzz&quot;];</span><br><span class=\"line\">    containerURL = [containerURL URLByAppendingPathComponent:@&quot;Library/Caches/good&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    NSString *value = _textField.text;</span><br><span class=\"line\">    BOOL result = [value writeToURL:containerURL atomically:YES encoding:NSUTF8StringEncoding error:&amp;err];</span><br><span class=\"line\">    if (!result) &#123;</span><br><span class=\"line\">        NSLog(@&quot;%@&quot;,err);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        NSLog(@&quot;save value:%@ success.&quot;,value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>读数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- (NSString *)readTextByNSFileManager</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSError *err = nil;</span><br><span class=\"line\">    NSURL *containerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@&quot;group.wangzz&quot;];</span><br><span class=\"line\">    containerURL = [containerURL URLByAppendingPathComponent:@&quot;Library/Caches/good&quot;];</span><br><span class=\"line\">    NSString *value = [NSString stringWithContentsOfURL:containerURL encoding:NSUTF8StringEncoding error:&amp;err];</span><br><span class=\"line\">    </span><br><span class=\"line\">    return value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这里我试着保存和读取的是字符串数据，但读写SQlite我相信也是没问题的。</p>\n<ul>\n<li>数据同步</li>\n</ul>\n<p>两个应用共同读取同一份数据，就会引发数据同步问题。WWDC2014的视频中建议使用NSFileCoordination实现普通文件的读写同步，而数据库可以使用CoreData,Sqlite也支持同步。</p>\n<h2 id=\"五、extension和containing-app代码共享\"><a href=\"#五、extension和containing-app代码共享\" class=\"headerlink\" title=\"五、extension和containing app代码共享\"></a>五、extension和containing app代码共享</h2><p>和数据共享类似，extension和containing app很自然地会有一些业务逻辑上可以共用的代码，这时可以通过iOS8中刚开放使用的framework实现。苹果在<a href=\"https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html#//apple_ref/doc/uid/TP40014214-CH21-SW1\" target=\"_blank\" rel=\"noopener\">App Extension Programming Guide</a>中是这样描述的：</p>\n<blockquote>\n</blockquote>\n<p>In iOS 8.0 and later, you can use an embedded framework to share code between your extension and its containing app. For example, if you develop image-processing code that you want both your Photo Editing extension and its containing app to share, you can put the code into a framework and embed it in both targets.</p>\n<blockquote>\n</blockquote>\n<p>即将framework分别嵌入到extension和containing app的target中实现代码共享。但这样岂不是需要分别要将framework分别copy到extension和containing app的main bundle中？</p>\n<p>参考extension和containing app数据共享，我试想能不能将framework只保存一份放在App Groups区域？</p>\n<h4 id=\"5-1-copy-framework到App-Groups\"><a href=\"#5-1-copy-framework到App-Groups\" class=\"headerlink\" title=\"5.1 copy framework到App Groups\"></a>5.1 copy framework到App Groups</h4><p>在app首次启动的时候将framework放到App Groups区域：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- (BOOL)copyFrameworkFromMainBundleToAppGroup</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSFileManager *manager = [NSFileManager defaultManager];</span><br><span class=\"line\">    NSError *err = nil;</span><br><span class=\"line\">    NSURL *containerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@&quot;group.wangzz&quot;];</span><br><span class=\"line\">    NSString *sorPath = [NSString stringWithFormat:@&quot;%@/Dylib.framework&quot;,[[NSBundle mainBundle] bundlePath]];</span><br><span class=\"line\">    NSString *desPath = [NSString stringWithFormat:@&quot;%@/Library/Caches/Dylib.framework&quot;,containerURL.path];</span><br><span class=\"line\">    </span><br><span class=\"line\">    BOOL removeResult = [manager removeItemAtPath:desPath error:&amp;err];</span><br><span class=\"line\">    if (!removeResult) &#123;</span><br><span class=\"line\">        NSLog(@&quot;%@&quot;,err);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        NSLog(@&quot;remove success.&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    BOOL copyResult = [[NSFileManager defaultManager] copyItemAtPath:sorPath toPath:desPath error:&amp;err];</span><br><span class=\"line\">    if (!copyResult) &#123;</span><br><span class=\"line\">        NSLog(@&quot;%@&quot;,err);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        NSLog(@&quot;copy success.&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return copyResult;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-2-使用framework：\"><a href=\"#5-2-使用framework：\" class=\"headerlink\" title=\"5.2 使用framework：\"></a>5.2 使用framework：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (BOOL)loadFrameworkInAppGroup</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSError *err = nil;</span><br><span class=\"line\">    NSURL *containerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@&quot;group.wangzz&quot;];</span><br><span class=\"line\">    NSString *desPath = [NSString stringWithFormat:@&quot;%@/Library/Caches/Dylib.framework&quot;,containerURL.path];</span><br><span class=\"line\">    NSBundle *bundle = [NSBundle bundleWithPath:desPath];</span><br><span class=\"line\">    BOOL result = [bundle loadAndReturnError:&amp;err];</span><br><span class=\"line\">    if (result) &#123;</span><br><span class=\"line\">        Class root = NSClassFromString(@&quot;Person&quot;);</span><br><span class=\"line\">        if (root) &#123;</span><br><span class=\"line\">            Person *person = [[root alloc] init];</span><br><span class=\"line\">            if (person) &#123;</span><br><span class=\"line\">                [person run];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        NSLog(@&quot;%@&quot;,err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>经过测试，竟然能够加载成功。</p>\n<p>需要说明的是，这里只是说那么用是可以成功加载framework，但还面临不少问题，比如如果用户在启动app之前去使用extension，这时framework还没有copy过去，怎么处理；另外iOS的机制或者苹果的审核是否允许这样使用等。</p>\n<p>在一切确定下来之前还是乖乖按文档中的方式使用吧。</p>\n<h2 id=\"六、生命周期\"><a href=\"#六、生命周期\" class=\"headerlink\" title=\"六、生命周期\"></a>六、生命周期</h2><p>extension和普通app的最大区别之一是生命周期。</p>\n<ul>\n<li>开始</li>\n</ul>\n<p>在用户通过host app点击extension时，系统就会实例化extension应用，这是生命周期的开始。</p>\n<ul>\n<li>执行任务</li>\n</ul>\n<p>在extension启动以后，开始执行它的使命。</p>\n<ul>\n<li>终止</li>\n</ul>\n<p>在用户取消任务，或者任务执行结束，或者开启了一个长时后台任务时，系统会将其杀掉。</p>\n<p>由此可见，extension就是为了任务而生！</p>\n<p>下图来自官方文档，它将生命周期划分的更详细：</p>\n<p><img src=\"/images/article5/app_extensions_lifecycle.png\" alt=\"app_extensions_lifecycle\"></p>\n<p>通过打印日志发现，<code>Today</code>中的<code>widget</code>在将<code>Today</code>切换到<code>全部</code>或者<code>未读通知时</code>都会被杀掉。</p>\n<h2 id=\"七、-调试\"><a href=\"#七、-调试\" class=\"headerlink\" title=\"七、 调试\"></a>七、 调试</h2><p>extension和普通app的调试方式差不多，开始调试前先选中extension对应的target，点击run，就会弹出下图所示选择框：</p>\n<p><img src=\"/images/article5/extension_debug.png\" alt=\"extension_debug\"></p>\n<p>需要选择一个host app，这里选择<code>Today</code>。</p>\n<p>然后即可和普通app一样调试了，不过我在实际使用过程中，发现有各种奇怪的事情，比如NSLog无法在控制台输出，应该是bug吧。</p>\n<h2 id=\"八、-iOS8应用文件系统\"><a href=\"#八、-iOS8应用文件系统\" class=\"headerlink\" title=\"八、 iOS8应用文件系统\"></a>八、 iOS8应用文件系统</h2><p>发现iOS8的文件系统发生了变化，新的文件系统将可执行文件（即原来的.app文件）从沙盒中移到了另外一个地方，这样感觉更合理。</p>\n<ul>\n<li>测试代码</li>\n</ul>\n<p>下述代码用于打印App Groups路径、应用的可执行文件路径、对应的Documents路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- (void)logAppPath</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //app group路径</span><br><span class=\"line\">    NSURL *containerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@&quot;group.wangzz&quot;];</span><br><span class=\"line\">    NSLog(@&quot;app group:\\n%@&quot;,containerURL.path);</span><br><span class=\"line\">    </span><br><span class=\"line\">    //打印可执行文件路径</span><br><span class=\"line\">    NSLog(@&quot;bundle:\\n%@&quot;,[[NSBundle mainBundle] bundlePath]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    //打印documents</span><br><span class=\"line\">    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);</span><br><span class=\"line\">    NSString *path = [paths objectAtIndex:0];</span><br><span class=\"line\">    NSLog(@&quot;documents:\\n%@&quot;,path);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>containing app执行结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2014-06-23 19:35:03.944 AppExtensionDemo[7471:365131] app group:</span><br><span class=\"line\">/private/var/mobile/Containers/Shared/AppGroup/89CCBFB1-CA5E-4C7F-80CB-A3EB9E841816</span><br><span class=\"line\">2014-06-23 19:35:03.946 AppExtensionDemo[7471:365131] bundle:</span><br><span class=\"line\">/private/var/mobile/Containers/Bundle/Application/1AC73797-A3BB-4BDE-A647-3D083DA6871A/AppExtensionDemo.app</span><br><span class=\"line\">2014-06-23 19:35:03.948 AppExtensionDemo[7471:365131] documents:</span><br><span class=\"line\">/var/mobile/Containers/Data/Application/E5E6E516-0163-4754-9D10-A5F6C33A6261/Documents</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>extension执行结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Jun 23 19:37:49 autonavis-iPad com.foogry.AppExtensionDemo.TodayExtension[7638] &lt;Warning&gt;: app group:</span><br><span class=\"line\">\t/private/var/mobile/Containers/Shared/AppGroup/89CCBFB1-CA5E-4C7F-80CB-A3EB9E841816</span><br><span class=\"line\">Jun 23 19:37:49 autonavis-iPad com.foogry.AppExtensionDemo.TodayExtension[7638] &lt;Warning&gt;: bundle:</span><br><span class=\"line\">\t/private/var/mobile/Containers/Bundle/Application/596717B7-7CB8-4F53-BCD4-380F34ABD30F/AppExtensionDemo.app/PlugIns/com.foogry.AppExtensionDemo.TodayExtension.appex</span><br><span class=\"line\">Jun 23 19:37:49 autonavis-iPad com.foogry.AppExtensionDemo.TodayExtension[7638] &lt;Warning&gt;: documents:</span><br><span class=\"line\">\t/var/mobile/Containers/Data/PluginKitPlugin/57581433-3DBD-4930-971F-78D30C150E8A/Documents</span><br></pre></td></tr></table></figure>\n\n<p>由此可见，不管是extension还是containing app，他们的可执行文件和保存数据的目录都是分开存放的，即所有app的可执行文件都放在一个大目录下，保存数据的目录保存在另一个大目录下，同样，AppGroup放在另一个大目录下。</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><ul>\n<li><p>本文用到的demo已经上传到<a href=\"https://github.com/wangzz/Demo/tree/master/AppExtensionsDemo\" target=\"_blank\" rel=\"noopener\">github</a>上。</p>\n</li>\n<li><p>文中可能有理解有误的地方，还请指出。</p>\n</li>\n</ul>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><p><a href=\"https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/index.html#//apple_ref/doc/uid/TP40014214-CH20-SW1\" target=\"_blank\" rel=\"noopener\">App Extension Programming Guide</a></p>\n</li>\n<li><p><a href=\"http://blog.waynehartman.com/\" target=\"_blank\" rel=\"noopener\">Crash Course In iOS 8 Widgets</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/prerelease/ios/documentation/NotificationCenter/Reference/NotificationCenter_Framework/index.html#//apple_ref/doc/uid/TP40014443\" target=\"_blank\" rel=\"noopener\">Notification Center Framework Reference</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/prerelease/ios/releasenotes/General/RN-iOSSDK-8.0/\" target=\"_blank\" rel=\"noopener\">iOS 8 Release Notes</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/prerelease/ios/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/EnablingAppSandbox.html#//apple_ref/doc/uid/TP40011195-CH4-SW19\" target=\"_blank\" rel=\"noopener\">Entitlement Key Reference</a></p>\n</li>\n<li><p><a href=\"http://www.pingwest.com/apples-new-extension-eco-system/\" target=\"_blank\" rel=\"noopener\">苹果的插件生态系统，开发者的新世界</a></p>\n</li>\n<li><p><a href=\"http://www.macstories.net/stories/ios-8-extensions-apples-plan-for-a-powerful-app-ecosystem/\" target=\"_blank\" rel=\"noopener\">iOS 8 Extensions: Apple’s Plan for a Powerful App Ecosystem</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/PropertyLists/AboutPropertyLists/AboutPropertyLists.html\" target=\"_blank\" rel=\"noopener\">Property List Programming Guide</a></p>\n</li>\n</ul>"},{"layout":"post","title":"iOS屏幕旋转学习笔记","date":"2014-08-08T01:39:04.000Z","comments":1,"keywords":"device orientation, iOS, interface orientation, 屏幕旋转","_content":"\n\n## 一、两种orientation\n\n了解屏幕旋转首先需要区分两种orientation\n\n#### 1、device orientation\n\n设备的物理方向，由类型`UIDeviceOrientation`表示，当前设备方向获取方式：\n\n```objective-c\n[UIDevice currentDevice].orientation\n```\n该属性的值一般是与当前设备方向保持一致的，但须注意以下几点：\n\n①文档中对该属性的注释：\n\n```objective-c\n@property(nonatomic,readonly) UIDeviceOrientation orientation;       // return current device orientation.  this will return UIDeviceOrientationUnknown unless device orientation notifications are being generated.\n```\n所以更推荐下面这种用法：\n\n<!-- more -->\n\n```objective-c\nif (![UIDevice currentDevice].generatesDeviceOrientationNotifications) {\n        [[UIDevice currentDevice] beginGeneratingDeviceOrientationNotifications];\n }\nNSLog(@\"%d\",[UIDevice currentDevice].orientation);\n    \n[[UIDevice currentDevice] endGeneratingDeviceOrientationNotifications];\n    \n```\n\n②系统横竖屏开关关闭时\n\n如果关闭了系统的横竖屏切换开关，即系统层级只允许竖屏时，再通过上述方式获取到的设备方向将永远是`UIDeviceOrientationUnknown`。可以通过`Core Motion`中的`CMMotionManager`来获取当前设备方向。\n\n#### 2、interface orientation\n\n界面显示的方向，由类型`UIInterfaceOrientation`表示。当前界面显示方向有以下两种方式获取：\n\n```objective-c\nNSLog(@\"%d\",[UIApplication sharedApplication].statusBarOrientation);\nNSLog(@\"%d\",viewController.interfaceOrientation);\n```\n\n即可以通过系统statusBar的方向或者viewController的方向来获取当前界面方向。\n\n#### 3、二者区别\n\n通过`UIDevice`获取到的设备方向在手机旋转时是实时的，通过`UIApplication`的statusBar或者viewController获取到的界面方向在下述方法：\n\n```objective-c\n- (void)willRotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:\n```\n调用以后才会被更改成最新的值。\n\n\n## 二、相关枚举定义\n \n#### 1、UIDeviceOrientation：\n\n```objective-c\ntypedef NS_ENUM(NSInteger, UIDeviceOrientation) {\n    UIDeviceOrientationUnknown,\n    UIDeviceOrientationPortrait,            // Device oriented vertically, home button on the bottom\n    UIDeviceOrientationPortraitUpsideDown,  // Device oriented vertically, home button on the top\n    UIDeviceOrientationLandscapeLeft,       // Device oriented horizontally, home button on the right\n    UIDeviceOrientationLandscapeRight,      // Device oriented horizontally, home button on the left\n    UIDeviceOrientationFaceUp,              // Device oriented flat, face up\n    UIDeviceOrientationFaceDown             // Device oriented flat, face down\n};\n```\n\n#### 2、UIInterfaceOrientation：\n\n```objective-c\ntypedef NS_ENUM(NSInteger, UIInterfaceOrientation) {\n    UIInterfaceOrientationUnknown            = UIDeviceOrientationUnknown,\n    UIInterfaceOrientationPortrait           = UIDeviceOrientationPortrait,\n    UIInterfaceOrientationPortraitUpsideDown = UIDeviceOrientationPortraitUpsideDown,\n    UIInterfaceOrientationLandscapeLeft      = UIDeviceOrientationLandscapeRight,\n    UIInterfaceOrientationLandscapeRight     = UIDeviceOrientationLandscapeLeft\n};\n```\n\n\n从宏定义可知，device方向比interface多了两个定义：`UIDeviceOrientationFaceUp`和`UIDeviceOrientationFaceDown`，分别表示手机水平放置，屏幕向上和屏幕向下。\n\n## 三、相关方法\n\n#### 1、iOS5中控制屏幕旋转的方法：\n\n```objective-c\n// Applications should use supportedInterfaceOrientations and/or shouldAutorotate..\n- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation NS_DEPRECATED_IOS(2_0, 6_0);\n```\n如果打算支持toInterfaceOrientation对应的方向就返回YES，否则返回NO。\n\n\n#### 2、iOS6中控制屏幕旋转相关方法：\n\n```objective-c\n// New Autorotation support.\n- (BOOL)shouldAutorotate NS_AVAILABLE_IOS(6_0);\n- (NSUInteger)supportedInterfaceOrientations NS_AVAILABLE_IOS(6_0);\n// Returns interface orientation masks.\n- (UIInterfaceOrientation)preferredInterfaceOrientationForPresentation NS_AVAILABLE_IOS(6_0);\n\n```\n\n第一个方法决定是否支持多方向旋转屏，如果返回NO则后面的两个方法都不会再被调用，而且只会支持默认的UIInterfaceOrientationMaskPortrait方向；\n\n第二个方法直接返回支持的旋转方向，该方法在iPad上的默认返回值是`UIInterfaceOrientationMaskAll`，iPhone上的默认返回值是`UIInterfaceOrientationMaskAllButUpsideDown`，详情见[官方Q&A文档](https://developer.apple.com/library/ios/qa/qa1688/_index.html)；\n\n第三个方法返回最优先显示的屏幕方向，比如同时支持Portrait和Landscape方向，但想优先显示Landscape方向，那软件启动的时候就会先显示Landscape，在手机切换旋转方向的时候仍然可以在Portrait和Landscape之间切换；\n\n\n#### 3、attemptRotationToDeviceOrientation方法\n\n从iOS5开始有了这个新方法：\n\n```objective-c\n// call this method when your return value from shouldAutorotateToInterfaceOrientation: changes\n// if the current interface orientation does not match the current device orientation, a rotation may occur provided all relevant view controllers now return YES from shouldAutorotateToInterfaceOrientation:\n+ (void)attemptRotationToDeviceOrientation NS_AVAILABLE_IOS(5_0);\n```\n\n该方法的使用场景是interface orientation和device orientation不一致，但希望通过重新指定interface orientation的值，立即实现二者一致；如果这时只是更改了支持的interface orientation的值，没有调用attemptRotationToDeviceOrientation，那么下次device orientation变化的时候才会实现二者一致，关键点在于能不能立即实现。\n\n举个例子：\n\n假设当前的interface orientation只支持Portrait，如果device orientation变成Landscape，那么interface orientation仍然显示Portrait；\n\n如果这时我们希望interface orientation也变成和device orientation一致的Landscape，以iOS6为例，需要先将supportedInterfaceOrientations的返回值改成Landscape，然后调用attemptRotationToDeviceOrientation方法，系统会重新询问支持的interface orientation，已达到立即更改当前interface orientation的目的。\n\n\n## 四、如何决定interface orientation\n\n#### 1、全局控制\n\nInfo.plist文件中，有一个`Supported interface orientations`，可以配置整个应用的屏幕方向，此处为全局控制。\n\n\n#### 2、UIWindow\n\niOS6的UIApplicationDelegate提供了下述方法，能够指定 UIWindow 中的界面的屏幕方向：\n\n```objective-c\n- (NSUInteger)application:(UIApplication *)application supportedInterfaceOrientationsForWindow:(UIWindow *)window  NS_AVAILABLE_IOS(6_0);\n```\n该方法默认值为Info.plist中配置的`Supported interface orientations`项的值。\n\niOS中通常只有一个window，所以此处的控制也可以视为全局控制。\n\n#### 3、controller\n\n只有以下两种情况：\n\n* 当前controller是window的rootViewController\n* 当前controller是modal模式的\n\n时，orientations相关方法才会起作用（才会被调用），当前controller及其所有的childViewController都在此作用范围内。\n\n#### 4、最终支持的屏幕方向\n\n前面所述的3种控制规则的交集就是一个controller的最终支持的方向；\n\n如果最终的交集为空，在iOS6以后会抛出`UIApplicationInvalidInterfaceOrientationException`崩溃异常。\n\n\n## 四、强制屏幕旋转\n\n如果interface和device方向不一样，想强制将interface旋转成device的方向，可以通过attemptRotationToDeviceOrientation实现，但是如果想将interface强制旋转成任一指定方向，该方式就无能为力了。\n\n不过聪明的开发者们总能想到解决方式：\n\n#### 1、私有方法\n\n```objective-c\n[[UIDevice currentDevice] setOrientation:UIInterfaceOrientationPortrait];\n```\n但是现在苹果已经将该方法私有化了，越狱开发的同学可以试试，或者自己想法子骗过苹果审核吧。\n\n\n#### 2、旋转view的transform\n\n也可以通过旋转view的transform属性达到强制旋转屏幕方向的目的，但个人感觉这不是靠谱的思路，可能会带来某些诡异的问题。\n\n\n#### 3、主动触发orientation机制\n\n\n要是能主动触发系统的orientation机制，调用orientation相关方法，使新设置的orientation值起作用就好了。这样只要提前设置好想要支持的orientation，然后主动触发orientation机制，便能实现将interface orientation旋转至任意方向的目的。\n\n万能的[stackoverflow](http://stackoverflow.com/a/14445888/2293677)上提供了一种主动触发的方式：\n\n在iOS4和iOS6以后：\n\n```objective-c\nUIViewController *vc = [[UIViewController alloc]init];\n[self presentModalViewController:vc animated:NO];\n[self dismissModalViewControllerAnimated:NO];\n[vc release];\n```\n\niOS5中：\n\n```objective-c\nUIWindow *window = [[UIApplication sharedApplication] keyWindow];\nUIView *view = [window.subviews objectAtIndex:0];\n[view removeFromSuperview];\n[window addSubview:view];\n```\n这种方式会触发UIKit重新调用controller的orientation相关方法，以达到在device方向不变的情况下改变interface方向的目的。\n\n虽然不优雅，但却能解决问题，凑合吧。。\n\n\nPS：\n\n话说iOS8中的屏幕旋转相关方法又变化了，表示适配起来很蛋疼。。。\n\n\n## 五、参考文档\n\n* [Why won't my UIViewController rotate with the device?](https://developer.apple.com/library/ios/qa/qa1688/_index.html)；\n* [How to force a UIViewController to Portait orientation in iOS 6](http://stackoverflow.com/a/14445888/2293677)\n* [IOS Orientation, 想怎么转就怎么转](http://www.cnblogs.com/jhzhu/p/3480885.html)\n* [iOS 屏幕方向那点事儿](http://zhenby.com/blog/2013/08/20/talk-ios-orientation/)\n","source":"_posts/2014-08-08-ping-mu-xuan-zhuan-xue-xi-bi-ji.markdown","raw":"---\nlayout: post\ntitle: \"iOS屏幕旋转学习笔记\"\ndate: 2014-08-08 09:39:04 +0800\ncomments: true\ncategories: iOS\ntags: [device orientation, iOS, interface orientation, 屏幕旋转]\nkeywords: device orientation, iOS, interface orientation, 屏幕旋转\n---\n\n\n## 一、两种orientation\n\n了解屏幕旋转首先需要区分两种orientation\n\n#### 1、device orientation\n\n设备的物理方向，由类型`UIDeviceOrientation`表示，当前设备方向获取方式：\n\n```objective-c\n[UIDevice currentDevice].orientation\n```\n该属性的值一般是与当前设备方向保持一致的，但须注意以下几点：\n\n①文档中对该属性的注释：\n\n```objective-c\n@property(nonatomic,readonly) UIDeviceOrientation orientation;       // return current device orientation.  this will return UIDeviceOrientationUnknown unless device orientation notifications are being generated.\n```\n所以更推荐下面这种用法：\n\n<!-- more -->\n\n```objective-c\nif (![UIDevice currentDevice].generatesDeviceOrientationNotifications) {\n        [[UIDevice currentDevice] beginGeneratingDeviceOrientationNotifications];\n }\nNSLog(@\"%d\",[UIDevice currentDevice].orientation);\n    \n[[UIDevice currentDevice] endGeneratingDeviceOrientationNotifications];\n    \n```\n\n②系统横竖屏开关关闭时\n\n如果关闭了系统的横竖屏切换开关，即系统层级只允许竖屏时，再通过上述方式获取到的设备方向将永远是`UIDeviceOrientationUnknown`。可以通过`Core Motion`中的`CMMotionManager`来获取当前设备方向。\n\n#### 2、interface orientation\n\n界面显示的方向，由类型`UIInterfaceOrientation`表示。当前界面显示方向有以下两种方式获取：\n\n```objective-c\nNSLog(@\"%d\",[UIApplication sharedApplication].statusBarOrientation);\nNSLog(@\"%d\",viewController.interfaceOrientation);\n```\n\n即可以通过系统statusBar的方向或者viewController的方向来获取当前界面方向。\n\n#### 3、二者区别\n\n通过`UIDevice`获取到的设备方向在手机旋转时是实时的，通过`UIApplication`的statusBar或者viewController获取到的界面方向在下述方法：\n\n```objective-c\n- (void)willRotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:\n```\n调用以后才会被更改成最新的值。\n\n\n## 二、相关枚举定义\n \n#### 1、UIDeviceOrientation：\n\n```objective-c\ntypedef NS_ENUM(NSInteger, UIDeviceOrientation) {\n    UIDeviceOrientationUnknown,\n    UIDeviceOrientationPortrait,            // Device oriented vertically, home button on the bottom\n    UIDeviceOrientationPortraitUpsideDown,  // Device oriented vertically, home button on the top\n    UIDeviceOrientationLandscapeLeft,       // Device oriented horizontally, home button on the right\n    UIDeviceOrientationLandscapeRight,      // Device oriented horizontally, home button on the left\n    UIDeviceOrientationFaceUp,              // Device oriented flat, face up\n    UIDeviceOrientationFaceDown             // Device oriented flat, face down\n};\n```\n\n#### 2、UIInterfaceOrientation：\n\n```objective-c\ntypedef NS_ENUM(NSInteger, UIInterfaceOrientation) {\n    UIInterfaceOrientationUnknown            = UIDeviceOrientationUnknown,\n    UIInterfaceOrientationPortrait           = UIDeviceOrientationPortrait,\n    UIInterfaceOrientationPortraitUpsideDown = UIDeviceOrientationPortraitUpsideDown,\n    UIInterfaceOrientationLandscapeLeft      = UIDeviceOrientationLandscapeRight,\n    UIInterfaceOrientationLandscapeRight     = UIDeviceOrientationLandscapeLeft\n};\n```\n\n\n从宏定义可知，device方向比interface多了两个定义：`UIDeviceOrientationFaceUp`和`UIDeviceOrientationFaceDown`，分别表示手机水平放置，屏幕向上和屏幕向下。\n\n## 三、相关方法\n\n#### 1、iOS5中控制屏幕旋转的方法：\n\n```objective-c\n// Applications should use supportedInterfaceOrientations and/or shouldAutorotate..\n- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation NS_DEPRECATED_IOS(2_0, 6_0);\n```\n如果打算支持toInterfaceOrientation对应的方向就返回YES，否则返回NO。\n\n\n#### 2、iOS6中控制屏幕旋转相关方法：\n\n```objective-c\n// New Autorotation support.\n- (BOOL)shouldAutorotate NS_AVAILABLE_IOS(6_0);\n- (NSUInteger)supportedInterfaceOrientations NS_AVAILABLE_IOS(6_0);\n// Returns interface orientation masks.\n- (UIInterfaceOrientation)preferredInterfaceOrientationForPresentation NS_AVAILABLE_IOS(6_0);\n\n```\n\n第一个方法决定是否支持多方向旋转屏，如果返回NO则后面的两个方法都不会再被调用，而且只会支持默认的UIInterfaceOrientationMaskPortrait方向；\n\n第二个方法直接返回支持的旋转方向，该方法在iPad上的默认返回值是`UIInterfaceOrientationMaskAll`，iPhone上的默认返回值是`UIInterfaceOrientationMaskAllButUpsideDown`，详情见[官方Q&A文档](https://developer.apple.com/library/ios/qa/qa1688/_index.html)；\n\n第三个方法返回最优先显示的屏幕方向，比如同时支持Portrait和Landscape方向，但想优先显示Landscape方向，那软件启动的时候就会先显示Landscape，在手机切换旋转方向的时候仍然可以在Portrait和Landscape之间切换；\n\n\n#### 3、attemptRotationToDeviceOrientation方法\n\n从iOS5开始有了这个新方法：\n\n```objective-c\n// call this method when your return value from shouldAutorotateToInterfaceOrientation: changes\n// if the current interface orientation does not match the current device orientation, a rotation may occur provided all relevant view controllers now return YES from shouldAutorotateToInterfaceOrientation:\n+ (void)attemptRotationToDeviceOrientation NS_AVAILABLE_IOS(5_0);\n```\n\n该方法的使用场景是interface orientation和device orientation不一致，但希望通过重新指定interface orientation的值，立即实现二者一致；如果这时只是更改了支持的interface orientation的值，没有调用attemptRotationToDeviceOrientation，那么下次device orientation变化的时候才会实现二者一致，关键点在于能不能立即实现。\n\n举个例子：\n\n假设当前的interface orientation只支持Portrait，如果device orientation变成Landscape，那么interface orientation仍然显示Portrait；\n\n如果这时我们希望interface orientation也变成和device orientation一致的Landscape，以iOS6为例，需要先将supportedInterfaceOrientations的返回值改成Landscape，然后调用attemptRotationToDeviceOrientation方法，系统会重新询问支持的interface orientation，已达到立即更改当前interface orientation的目的。\n\n\n## 四、如何决定interface orientation\n\n#### 1、全局控制\n\nInfo.plist文件中，有一个`Supported interface orientations`，可以配置整个应用的屏幕方向，此处为全局控制。\n\n\n#### 2、UIWindow\n\niOS6的UIApplicationDelegate提供了下述方法，能够指定 UIWindow 中的界面的屏幕方向：\n\n```objective-c\n- (NSUInteger)application:(UIApplication *)application supportedInterfaceOrientationsForWindow:(UIWindow *)window  NS_AVAILABLE_IOS(6_0);\n```\n该方法默认值为Info.plist中配置的`Supported interface orientations`项的值。\n\niOS中通常只有一个window，所以此处的控制也可以视为全局控制。\n\n#### 3、controller\n\n只有以下两种情况：\n\n* 当前controller是window的rootViewController\n* 当前controller是modal模式的\n\n时，orientations相关方法才会起作用（才会被调用），当前controller及其所有的childViewController都在此作用范围内。\n\n#### 4、最终支持的屏幕方向\n\n前面所述的3种控制规则的交集就是一个controller的最终支持的方向；\n\n如果最终的交集为空，在iOS6以后会抛出`UIApplicationInvalidInterfaceOrientationException`崩溃异常。\n\n\n## 四、强制屏幕旋转\n\n如果interface和device方向不一样，想强制将interface旋转成device的方向，可以通过attemptRotationToDeviceOrientation实现，但是如果想将interface强制旋转成任一指定方向，该方式就无能为力了。\n\n不过聪明的开发者们总能想到解决方式：\n\n#### 1、私有方法\n\n```objective-c\n[[UIDevice currentDevice] setOrientation:UIInterfaceOrientationPortrait];\n```\n但是现在苹果已经将该方法私有化了，越狱开发的同学可以试试，或者自己想法子骗过苹果审核吧。\n\n\n#### 2、旋转view的transform\n\n也可以通过旋转view的transform属性达到强制旋转屏幕方向的目的，但个人感觉这不是靠谱的思路，可能会带来某些诡异的问题。\n\n\n#### 3、主动触发orientation机制\n\n\n要是能主动触发系统的orientation机制，调用orientation相关方法，使新设置的orientation值起作用就好了。这样只要提前设置好想要支持的orientation，然后主动触发orientation机制，便能实现将interface orientation旋转至任意方向的目的。\n\n万能的[stackoverflow](http://stackoverflow.com/a/14445888/2293677)上提供了一种主动触发的方式：\n\n在iOS4和iOS6以后：\n\n```objective-c\nUIViewController *vc = [[UIViewController alloc]init];\n[self presentModalViewController:vc animated:NO];\n[self dismissModalViewControllerAnimated:NO];\n[vc release];\n```\n\niOS5中：\n\n```objective-c\nUIWindow *window = [[UIApplication sharedApplication] keyWindow];\nUIView *view = [window.subviews objectAtIndex:0];\n[view removeFromSuperview];\n[window addSubview:view];\n```\n这种方式会触发UIKit重新调用controller的orientation相关方法，以达到在device方向不变的情况下改变interface方向的目的。\n\n虽然不优雅，但却能解决问题，凑合吧。。\n\n\nPS：\n\n话说iOS8中的屏幕旋转相关方法又变化了，表示适配起来很蛋疼。。。\n\n\n## 五、参考文档\n\n* [Why won't my UIViewController rotate with the device?](https://developer.apple.com/library/ios/qa/qa1688/_index.html)；\n* [How to force a UIViewController to Portait orientation in iOS 6](http://stackoverflow.com/a/14445888/2293677)\n* [IOS Orientation, 想怎么转就怎么转](http://www.cnblogs.com/jhzhu/p/3480885.html)\n* [iOS 屏幕方向那点事儿](http://zhenby.com/blog/2013/08/20/talk-ios-orientation/)\n","slug":"2014-08-08-ping-mu-xuan-zhuan-xue-xi-bi-ji","published":1,"updated":"2019-09-23T12:57:15.000Z","photos":[],"link":"","_id":"ck0zclidd001dqhtf5zq925ep","content":"<h2 id=\"一、两种orientation\"><a href=\"#一、两种orientation\" class=\"headerlink\" title=\"一、两种orientation\"></a>一、两种orientation</h2><p>了解屏幕旋转首先需要区分两种orientation</p>\n<h4 id=\"1、device-orientation\"><a href=\"#1、device-orientation\" class=\"headerlink\" title=\"1、device orientation\"></a>1、device orientation</h4><p>设备的物理方向，由类型<code>UIDeviceOrientation</code>表示，当前设备方向获取方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[UIDevice currentDevice].orientation</span><br></pre></td></tr></table></figure>\n\n<p>该属性的值一般是与当前设备方向保持一致的，但须注意以下几点：</p>\n<p>①文档中对该属性的注释：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property(nonatomic,readonly) UIDeviceOrientation orientation;       // return current device orientation.  this will return UIDeviceOrientationUnknown unless device orientation notifications are being generated.</span><br></pre></td></tr></table></figure>\n\n<p>所以更推荐下面这种用法：</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (![UIDevice currentDevice].generatesDeviceOrientationNotifications) &#123;</span><br><span class=\"line\">        [[UIDevice currentDevice] beginGeneratingDeviceOrientationNotifications];</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">NSLog(@&quot;%d&quot;,[UIDevice currentDevice].orientation);</span><br><span class=\"line\">    </span><br><span class=\"line\">[[UIDevice currentDevice] endGeneratingDeviceOrientationNotifications];</span><br></pre></td></tr></table></figure>\n\n<p>②系统横竖屏开关关闭时</p>\n<p>如果关闭了系统的横竖屏切换开关，即系统层级只允许竖屏时，再通过上述方式获取到的设备方向将永远是<code>UIDeviceOrientationUnknown</code>。可以通过<code>Core Motion</code>中的<code>CMMotionManager</code>来获取当前设备方向。</p>\n<h4 id=\"2、interface-orientation\"><a href=\"#2、interface-orientation\" class=\"headerlink\" title=\"2、interface orientation\"></a>2、interface orientation</h4><p>界面显示的方向，由类型<code>UIInterfaceOrientation</code>表示。当前界面显示方向有以下两种方式获取：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSLog(@&quot;%d&quot;,[UIApplication sharedApplication].statusBarOrientation);</span><br><span class=\"line\">NSLog(@&quot;%d&quot;,viewController.interfaceOrientation);</span><br></pre></td></tr></table></figure>\n\n<p>即可以通过系统statusBar的方向或者viewController的方向来获取当前界面方向。</p>\n<h4 id=\"3、二者区别\"><a href=\"#3、二者区别\" class=\"headerlink\" title=\"3、二者区别\"></a>3、二者区别</h4><p>通过<code>UIDevice</code>获取到的设备方向在手机旋转时是实时的，通过<code>UIApplication</code>的statusBar或者viewController获取到的界面方向在下述方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)willRotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:</span><br></pre></td></tr></table></figure>\n\n<p>调用以后才会被更改成最新的值。</p>\n<h2 id=\"二、相关枚举定义\"><a href=\"#二、相关枚举定义\" class=\"headerlink\" title=\"二、相关枚举定义\"></a>二、相关枚举定义</h2><h4 id=\"1、UIDeviceOrientation：\"><a href=\"#1、UIDeviceOrientation：\" class=\"headerlink\" title=\"1、UIDeviceOrientation：\"></a>1、UIDeviceOrientation：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef NS_ENUM(NSInteger, UIDeviceOrientation) &#123;</span><br><span class=\"line\">    UIDeviceOrientationUnknown,</span><br><span class=\"line\">    UIDeviceOrientationPortrait,            // Device oriented vertically, home button on the bottom</span><br><span class=\"line\">    UIDeviceOrientationPortraitUpsideDown,  // Device oriented vertically, home button on the top</span><br><span class=\"line\">    UIDeviceOrientationLandscapeLeft,       // Device oriented horizontally, home button on the right</span><br><span class=\"line\">    UIDeviceOrientationLandscapeRight,      // Device oriented horizontally, home button on the left</span><br><span class=\"line\">    UIDeviceOrientationFaceUp,              // Device oriented flat, face up</span><br><span class=\"line\">    UIDeviceOrientationFaceDown             // Device oriented flat, face down</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、UIInterfaceOrientation：\"><a href=\"#2、UIInterfaceOrientation：\" class=\"headerlink\" title=\"2、UIInterfaceOrientation：\"></a>2、UIInterfaceOrientation：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef NS_ENUM(NSInteger, UIInterfaceOrientation) &#123;</span><br><span class=\"line\">    UIInterfaceOrientationUnknown            = UIDeviceOrientationUnknown,</span><br><span class=\"line\">    UIInterfaceOrientationPortrait           = UIDeviceOrientationPortrait,</span><br><span class=\"line\">    UIInterfaceOrientationPortraitUpsideDown = UIDeviceOrientationPortraitUpsideDown,</span><br><span class=\"line\">    UIInterfaceOrientationLandscapeLeft      = UIDeviceOrientationLandscapeRight,</span><br><span class=\"line\">    UIInterfaceOrientationLandscapeRight     = UIDeviceOrientationLandscapeLeft</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>从宏定义可知，device方向比interface多了两个定义：<code>UIDeviceOrientationFaceUp</code>和<code>UIDeviceOrientationFaceDown</code>，分别表示手机水平放置，屏幕向上和屏幕向下。</p>\n<h2 id=\"三、相关方法\"><a href=\"#三、相关方法\" class=\"headerlink\" title=\"三、相关方法\"></a>三、相关方法</h2><h4 id=\"1、iOS5中控制屏幕旋转的方法：\"><a href=\"#1、iOS5中控制屏幕旋转的方法：\" class=\"headerlink\" title=\"1、iOS5中控制屏幕旋转的方法：\"></a>1、iOS5中控制屏幕旋转的方法：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Applications should use supportedInterfaceOrientations and/or shouldAutorotate..</span><br><span class=\"line\">- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation NS_DEPRECATED_IOS(2_0, 6_0);</span><br></pre></td></tr></table></figure>\n\n<p>如果打算支持toInterfaceOrientation对应的方向就返回YES，否则返回NO。</p>\n<h4 id=\"2、iOS6中控制屏幕旋转相关方法：\"><a href=\"#2、iOS6中控制屏幕旋转相关方法：\" class=\"headerlink\" title=\"2、iOS6中控制屏幕旋转相关方法：\"></a>2、iOS6中控制屏幕旋转相关方法：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// New Autorotation support.</span><br><span class=\"line\">- (BOOL)shouldAutorotate NS_AVAILABLE_IOS(6_0);</span><br><span class=\"line\">- (NSUInteger)supportedInterfaceOrientations NS_AVAILABLE_IOS(6_0);</span><br><span class=\"line\">// Returns interface orientation masks.</span><br><span class=\"line\">- (UIInterfaceOrientation)preferredInterfaceOrientationForPresentation NS_AVAILABLE_IOS(6_0);</span><br></pre></td></tr></table></figure>\n\n<p>第一个方法决定是否支持多方向旋转屏，如果返回NO则后面的两个方法都不会再被调用，而且只会支持默认的UIInterfaceOrientationMaskPortrait方向；</p>\n<p>第二个方法直接返回支持的旋转方向，该方法在iPad上的默认返回值是<code>UIInterfaceOrientationMaskAll</code>，iPhone上的默认返回值是<code>UIInterfaceOrientationMaskAllButUpsideDown</code>，详情见<a href=\"https://developer.apple.com/library/ios/qa/qa1688/_index.html\" target=\"_blank\" rel=\"noopener\">官方Q&amp;A文档</a>；</p>\n<p>第三个方法返回最优先显示的屏幕方向，比如同时支持Portrait和Landscape方向，但想优先显示Landscape方向，那软件启动的时候就会先显示Landscape，在手机切换旋转方向的时候仍然可以在Portrait和Landscape之间切换；</p>\n<h4 id=\"3、attemptRotationToDeviceOrientation方法\"><a href=\"#3、attemptRotationToDeviceOrientation方法\" class=\"headerlink\" title=\"3、attemptRotationToDeviceOrientation方法\"></a>3、attemptRotationToDeviceOrientation方法</h4><p>从iOS5开始有了这个新方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// call this method when your return value from shouldAutorotateToInterfaceOrientation: changes</span><br><span class=\"line\">// if the current interface orientation does not match the current device orientation, a rotation may occur provided all relevant view controllers now return YES from shouldAutorotateToInterfaceOrientation:</span><br><span class=\"line\">+ (void)attemptRotationToDeviceOrientation NS_AVAILABLE_IOS(5_0);</span><br></pre></td></tr></table></figure>\n\n<p>该方法的使用场景是interface orientation和device orientation不一致，但希望通过重新指定interface orientation的值，立即实现二者一致；如果这时只是更改了支持的interface orientation的值，没有调用attemptRotationToDeviceOrientation，那么下次device orientation变化的时候才会实现二者一致，关键点在于能不能立即实现。</p>\n<p>举个例子：</p>\n<p>假设当前的interface orientation只支持Portrait，如果device orientation变成Landscape，那么interface orientation仍然显示Portrait；</p>\n<p>如果这时我们希望interface orientation也变成和device orientation一致的Landscape，以iOS6为例，需要先将supportedInterfaceOrientations的返回值改成Landscape，然后调用attemptRotationToDeviceOrientation方法，系统会重新询问支持的interface orientation，已达到立即更改当前interface orientation的目的。</p>\n<h2 id=\"四、如何决定interface-orientation\"><a href=\"#四、如何决定interface-orientation\" class=\"headerlink\" title=\"四、如何决定interface orientation\"></a>四、如何决定interface orientation</h2><h4 id=\"1、全局控制\"><a href=\"#1、全局控制\" class=\"headerlink\" title=\"1、全局控制\"></a>1、全局控制</h4><p>Info.plist文件中，有一个<code>Supported interface orientations</code>，可以配置整个应用的屏幕方向，此处为全局控制。</p>\n<h4 id=\"2、UIWindow\"><a href=\"#2、UIWindow\" class=\"headerlink\" title=\"2、UIWindow\"></a>2、UIWindow</h4><p>iOS6的UIApplicationDelegate提供了下述方法，能够指定 UIWindow 中的界面的屏幕方向：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSUInteger)application:(UIApplication *)application supportedInterfaceOrientationsForWindow:(UIWindow *)window  NS_AVAILABLE_IOS(6_0);</span><br></pre></td></tr></table></figure>\n\n<p>该方法默认值为Info.plist中配置的<code>Supported interface orientations</code>项的值。</p>\n<p>iOS中通常只有一个window，所以此处的控制也可以视为全局控制。</p>\n<h4 id=\"3、controller\"><a href=\"#3、controller\" class=\"headerlink\" title=\"3、controller\"></a>3、controller</h4><p>只有以下两种情况：</p>\n<ul>\n<li>当前controller是window的rootViewController</li>\n<li>当前controller是modal模式的</li>\n</ul>\n<p>时，orientations相关方法才会起作用（才会被调用），当前controller及其所有的childViewController都在此作用范围内。</p>\n<h4 id=\"4、最终支持的屏幕方向\"><a href=\"#4、最终支持的屏幕方向\" class=\"headerlink\" title=\"4、最终支持的屏幕方向\"></a>4、最终支持的屏幕方向</h4><p>前面所述的3种控制规则的交集就是一个controller的最终支持的方向；</p>\n<p>如果最终的交集为空，在iOS6以后会抛出<code>UIApplicationInvalidInterfaceOrientationException</code>崩溃异常。</p>\n<h2 id=\"四、强制屏幕旋转\"><a href=\"#四、强制屏幕旋转\" class=\"headerlink\" title=\"四、强制屏幕旋转\"></a>四、强制屏幕旋转</h2><p>如果interface和device方向不一样，想强制将interface旋转成device的方向，可以通过attemptRotationToDeviceOrientation实现，但是如果想将interface强制旋转成任一指定方向，该方式就无能为力了。</p>\n<p>不过聪明的开发者们总能想到解决方式：</p>\n<h4 id=\"1、私有方法\"><a href=\"#1、私有方法\" class=\"headerlink\" title=\"1、私有方法\"></a>1、私有方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[UIDevice currentDevice] setOrientation:UIInterfaceOrientationPortrait];</span><br></pre></td></tr></table></figure>\n\n<p>但是现在苹果已经将该方法私有化了，越狱开发的同学可以试试，或者自己想法子骗过苹果审核吧。</p>\n<h4 id=\"2、旋转view的transform\"><a href=\"#2、旋转view的transform\" class=\"headerlink\" title=\"2、旋转view的transform\"></a>2、旋转view的transform</h4><p>也可以通过旋转view的transform属性达到强制旋转屏幕方向的目的，但个人感觉这不是靠谱的思路，可能会带来某些诡异的问题。</p>\n<h4 id=\"3、主动触发orientation机制\"><a href=\"#3、主动触发orientation机制\" class=\"headerlink\" title=\"3、主动触发orientation机制\"></a>3、主动触发orientation机制</h4><p>要是能主动触发系统的orientation机制，调用orientation相关方法，使新设置的orientation值起作用就好了。这样只要提前设置好想要支持的orientation，然后主动触发orientation机制，便能实现将interface orientation旋转至任意方向的目的。</p>\n<p>万能的<a href=\"http://stackoverflow.com/a/14445888/2293677\" target=\"_blank\" rel=\"noopener\">stackoverflow</a>上提供了一种主动触发的方式：</p>\n<p>在iOS4和iOS6以后：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIViewController *vc = [[UIViewController alloc]init];</span><br><span class=\"line\">[self presentModalViewController:vc animated:NO];</span><br><span class=\"line\">[self dismissModalViewControllerAnimated:NO];</span><br><span class=\"line\">[vc release];</span><br></pre></td></tr></table></figure>\n\n<p>iOS5中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIWindow *window = [[UIApplication sharedApplication] keyWindow];</span><br><span class=\"line\">UIView *view = [window.subviews objectAtIndex:0];</span><br><span class=\"line\">[view removeFromSuperview];</span><br><span class=\"line\">[window addSubview:view];</span><br></pre></td></tr></table></figure>\n\n<p>这种方式会触发UIKit重新调用controller的orientation相关方法，以达到在device方向不变的情况下改变interface方向的目的。</p>\n<p>虽然不优雅，但却能解决问题，凑合吧。。</p>\n<p>PS：</p>\n<p>话说iOS8中的屏幕旋转相关方法又变化了，表示适配起来很蛋疼。。。</p>\n<h2 id=\"五、参考文档\"><a href=\"#五、参考文档\" class=\"headerlink\" title=\"五、参考文档\"></a>五、参考文档</h2><ul>\n<li><a href=\"https://developer.apple.com/library/ios/qa/qa1688/_index.html\" target=\"_blank\" rel=\"noopener\">Why won’t my UIViewController rotate with the device?</a>；</li>\n<li><a href=\"http://stackoverflow.com/a/14445888/2293677\" target=\"_blank\" rel=\"noopener\">How to force a UIViewController to Portait orientation in iOS 6</a></li>\n<li><a href=\"http://www.cnblogs.com/jhzhu/p/3480885.html\" target=\"_blank\" rel=\"noopener\">IOS Orientation, 想怎么转就怎么转</a></li>\n<li><a href=\"http://zhenby.com/blog/2013/08/20/talk-ios-orientation/\" target=\"_blank\" rel=\"noopener\">iOS 屏幕方向那点事儿</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、两种orientation\"><a href=\"#一、两种orientation\" class=\"headerlink\" title=\"一、两种orientation\"></a>一、两种orientation</h2><p>了解屏幕旋转首先需要区分两种orientation</p>\n<h4 id=\"1、device-orientation\"><a href=\"#1、device-orientation\" class=\"headerlink\" title=\"1、device orientation\"></a>1、device orientation</h4><p>设备的物理方向，由类型<code>UIDeviceOrientation</code>表示，当前设备方向获取方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[UIDevice currentDevice].orientation</span><br></pre></td></tr></table></figure>\n\n<p>该属性的值一般是与当前设备方向保持一致的，但须注意以下几点：</p>\n<p>①文档中对该属性的注释：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property(nonatomic,readonly) UIDeviceOrientation orientation;       // return current device orientation.  this will return UIDeviceOrientationUnknown unless device orientation notifications are being generated.</span><br></pre></td></tr></table></figure>\n\n<p>所以更推荐下面这种用法：</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (![UIDevice currentDevice].generatesDeviceOrientationNotifications) &#123;</span><br><span class=\"line\">        [[UIDevice currentDevice] beginGeneratingDeviceOrientationNotifications];</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">NSLog(@&quot;%d&quot;,[UIDevice currentDevice].orientation);</span><br><span class=\"line\">    </span><br><span class=\"line\">[[UIDevice currentDevice] endGeneratingDeviceOrientationNotifications];</span><br></pre></td></tr></table></figure>\n\n<p>②系统横竖屏开关关闭时</p>\n<p>如果关闭了系统的横竖屏切换开关，即系统层级只允许竖屏时，再通过上述方式获取到的设备方向将永远是<code>UIDeviceOrientationUnknown</code>。可以通过<code>Core Motion</code>中的<code>CMMotionManager</code>来获取当前设备方向。</p>\n<h4 id=\"2、interface-orientation\"><a href=\"#2、interface-orientation\" class=\"headerlink\" title=\"2、interface orientation\"></a>2、interface orientation</h4><p>界面显示的方向，由类型<code>UIInterfaceOrientation</code>表示。当前界面显示方向有以下两种方式获取：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSLog(@&quot;%d&quot;,[UIApplication sharedApplication].statusBarOrientation);</span><br><span class=\"line\">NSLog(@&quot;%d&quot;,viewController.interfaceOrientation);</span><br></pre></td></tr></table></figure>\n\n<p>即可以通过系统statusBar的方向或者viewController的方向来获取当前界面方向。</p>\n<h4 id=\"3、二者区别\"><a href=\"#3、二者区别\" class=\"headerlink\" title=\"3、二者区别\"></a>3、二者区别</h4><p>通过<code>UIDevice</code>获取到的设备方向在手机旋转时是实时的，通过<code>UIApplication</code>的statusBar或者viewController获取到的界面方向在下述方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)willRotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:</span><br></pre></td></tr></table></figure>\n\n<p>调用以后才会被更改成最新的值。</p>\n<h2 id=\"二、相关枚举定义\"><a href=\"#二、相关枚举定义\" class=\"headerlink\" title=\"二、相关枚举定义\"></a>二、相关枚举定义</h2><h4 id=\"1、UIDeviceOrientation：\"><a href=\"#1、UIDeviceOrientation：\" class=\"headerlink\" title=\"1、UIDeviceOrientation：\"></a>1、UIDeviceOrientation：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef NS_ENUM(NSInteger, UIDeviceOrientation) &#123;</span><br><span class=\"line\">    UIDeviceOrientationUnknown,</span><br><span class=\"line\">    UIDeviceOrientationPortrait,            // Device oriented vertically, home button on the bottom</span><br><span class=\"line\">    UIDeviceOrientationPortraitUpsideDown,  // Device oriented vertically, home button on the top</span><br><span class=\"line\">    UIDeviceOrientationLandscapeLeft,       // Device oriented horizontally, home button on the right</span><br><span class=\"line\">    UIDeviceOrientationLandscapeRight,      // Device oriented horizontally, home button on the left</span><br><span class=\"line\">    UIDeviceOrientationFaceUp,              // Device oriented flat, face up</span><br><span class=\"line\">    UIDeviceOrientationFaceDown             // Device oriented flat, face down</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、UIInterfaceOrientation：\"><a href=\"#2、UIInterfaceOrientation：\" class=\"headerlink\" title=\"2、UIInterfaceOrientation：\"></a>2、UIInterfaceOrientation：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef NS_ENUM(NSInteger, UIInterfaceOrientation) &#123;</span><br><span class=\"line\">    UIInterfaceOrientationUnknown            = UIDeviceOrientationUnknown,</span><br><span class=\"line\">    UIInterfaceOrientationPortrait           = UIDeviceOrientationPortrait,</span><br><span class=\"line\">    UIInterfaceOrientationPortraitUpsideDown = UIDeviceOrientationPortraitUpsideDown,</span><br><span class=\"line\">    UIInterfaceOrientationLandscapeLeft      = UIDeviceOrientationLandscapeRight,</span><br><span class=\"line\">    UIInterfaceOrientationLandscapeRight     = UIDeviceOrientationLandscapeLeft</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>从宏定义可知，device方向比interface多了两个定义：<code>UIDeviceOrientationFaceUp</code>和<code>UIDeviceOrientationFaceDown</code>，分别表示手机水平放置，屏幕向上和屏幕向下。</p>\n<h2 id=\"三、相关方法\"><a href=\"#三、相关方法\" class=\"headerlink\" title=\"三、相关方法\"></a>三、相关方法</h2><h4 id=\"1、iOS5中控制屏幕旋转的方法：\"><a href=\"#1、iOS5中控制屏幕旋转的方法：\" class=\"headerlink\" title=\"1、iOS5中控制屏幕旋转的方法：\"></a>1、iOS5中控制屏幕旋转的方法：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Applications should use supportedInterfaceOrientations and/or shouldAutorotate..</span><br><span class=\"line\">- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation NS_DEPRECATED_IOS(2_0, 6_0);</span><br></pre></td></tr></table></figure>\n\n<p>如果打算支持toInterfaceOrientation对应的方向就返回YES，否则返回NO。</p>\n<h4 id=\"2、iOS6中控制屏幕旋转相关方法：\"><a href=\"#2、iOS6中控制屏幕旋转相关方法：\" class=\"headerlink\" title=\"2、iOS6中控制屏幕旋转相关方法：\"></a>2、iOS6中控制屏幕旋转相关方法：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// New Autorotation support.</span><br><span class=\"line\">- (BOOL)shouldAutorotate NS_AVAILABLE_IOS(6_0);</span><br><span class=\"line\">- (NSUInteger)supportedInterfaceOrientations NS_AVAILABLE_IOS(6_0);</span><br><span class=\"line\">// Returns interface orientation masks.</span><br><span class=\"line\">- (UIInterfaceOrientation)preferredInterfaceOrientationForPresentation NS_AVAILABLE_IOS(6_0);</span><br></pre></td></tr></table></figure>\n\n<p>第一个方法决定是否支持多方向旋转屏，如果返回NO则后面的两个方法都不会再被调用，而且只会支持默认的UIInterfaceOrientationMaskPortrait方向；</p>\n<p>第二个方法直接返回支持的旋转方向，该方法在iPad上的默认返回值是<code>UIInterfaceOrientationMaskAll</code>，iPhone上的默认返回值是<code>UIInterfaceOrientationMaskAllButUpsideDown</code>，详情见<a href=\"https://developer.apple.com/library/ios/qa/qa1688/_index.html\" target=\"_blank\" rel=\"noopener\">官方Q&amp;A文档</a>；</p>\n<p>第三个方法返回最优先显示的屏幕方向，比如同时支持Portrait和Landscape方向，但想优先显示Landscape方向，那软件启动的时候就会先显示Landscape，在手机切换旋转方向的时候仍然可以在Portrait和Landscape之间切换；</p>\n<h4 id=\"3、attemptRotationToDeviceOrientation方法\"><a href=\"#3、attemptRotationToDeviceOrientation方法\" class=\"headerlink\" title=\"3、attemptRotationToDeviceOrientation方法\"></a>3、attemptRotationToDeviceOrientation方法</h4><p>从iOS5开始有了这个新方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// call this method when your return value from shouldAutorotateToInterfaceOrientation: changes</span><br><span class=\"line\">// if the current interface orientation does not match the current device orientation, a rotation may occur provided all relevant view controllers now return YES from shouldAutorotateToInterfaceOrientation:</span><br><span class=\"line\">+ (void)attemptRotationToDeviceOrientation NS_AVAILABLE_IOS(5_0);</span><br></pre></td></tr></table></figure>\n\n<p>该方法的使用场景是interface orientation和device orientation不一致，但希望通过重新指定interface orientation的值，立即实现二者一致；如果这时只是更改了支持的interface orientation的值，没有调用attemptRotationToDeviceOrientation，那么下次device orientation变化的时候才会实现二者一致，关键点在于能不能立即实现。</p>\n<p>举个例子：</p>\n<p>假设当前的interface orientation只支持Portrait，如果device orientation变成Landscape，那么interface orientation仍然显示Portrait；</p>\n<p>如果这时我们希望interface orientation也变成和device orientation一致的Landscape，以iOS6为例，需要先将supportedInterfaceOrientations的返回值改成Landscape，然后调用attemptRotationToDeviceOrientation方法，系统会重新询问支持的interface orientation，已达到立即更改当前interface orientation的目的。</p>\n<h2 id=\"四、如何决定interface-orientation\"><a href=\"#四、如何决定interface-orientation\" class=\"headerlink\" title=\"四、如何决定interface orientation\"></a>四、如何决定interface orientation</h2><h4 id=\"1、全局控制\"><a href=\"#1、全局控制\" class=\"headerlink\" title=\"1、全局控制\"></a>1、全局控制</h4><p>Info.plist文件中，有一个<code>Supported interface orientations</code>，可以配置整个应用的屏幕方向，此处为全局控制。</p>\n<h4 id=\"2、UIWindow\"><a href=\"#2、UIWindow\" class=\"headerlink\" title=\"2、UIWindow\"></a>2、UIWindow</h4><p>iOS6的UIApplicationDelegate提供了下述方法，能够指定 UIWindow 中的界面的屏幕方向：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSUInteger)application:(UIApplication *)application supportedInterfaceOrientationsForWindow:(UIWindow *)window  NS_AVAILABLE_IOS(6_0);</span><br></pre></td></tr></table></figure>\n\n<p>该方法默认值为Info.plist中配置的<code>Supported interface orientations</code>项的值。</p>\n<p>iOS中通常只有一个window，所以此处的控制也可以视为全局控制。</p>\n<h4 id=\"3、controller\"><a href=\"#3、controller\" class=\"headerlink\" title=\"3、controller\"></a>3、controller</h4><p>只有以下两种情况：</p>\n<ul>\n<li>当前controller是window的rootViewController</li>\n<li>当前controller是modal模式的</li>\n</ul>\n<p>时，orientations相关方法才会起作用（才会被调用），当前controller及其所有的childViewController都在此作用范围内。</p>\n<h4 id=\"4、最终支持的屏幕方向\"><a href=\"#4、最终支持的屏幕方向\" class=\"headerlink\" title=\"4、最终支持的屏幕方向\"></a>4、最终支持的屏幕方向</h4><p>前面所述的3种控制规则的交集就是一个controller的最终支持的方向；</p>\n<p>如果最终的交集为空，在iOS6以后会抛出<code>UIApplicationInvalidInterfaceOrientationException</code>崩溃异常。</p>\n<h2 id=\"四、强制屏幕旋转\"><a href=\"#四、强制屏幕旋转\" class=\"headerlink\" title=\"四、强制屏幕旋转\"></a>四、强制屏幕旋转</h2><p>如果interface和device方向不一样，想强制将interface旋转成device的方向，可以通过attemptRotationToDeviceOrientation实现，但是如果想将interface强制旋转成任一指定方向，该方式就无能为力了。</p>\n<p>不过聪明的开发者们总能想到解决方式：</p>\n<h4 id=\"1、私有方法\"><a href=\"#1、私有方法\" class=\"headerlink\" title=\"1、私有方法\"></a>1、私有方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[UIDevice currentDevice] setOrientation:UIInterfaceOrientationPortrait];</span><br></pre></td></tr></table></figure>\n\n<p>但是现在苹果已经将该方法私有化了，越狱开发的同学可以试试，或者自己想法子骗过苹果审核吧。</p>\n<h4 id=\"2、旋转view的transform\"><a href=\"#2、旋转view的transform\" class=\"headerlink\" title=\"2、旋转view的transform\"></a>2、旋转view的transform</h4><p>也可以通过旋转view的transform属性达到强制旋转屏幕方向的目的，但个人感觉这不是靠谱的思路，可能会带来某些诡异的问题。</p>\n<h4 id=\"3、主动触发orientation机制\"><a href=\"#3、主动触发orientation机制\" class=\"headerlink\" title=\"3、主动触发orientation机制\"></a>3、主动触发orientation机制</h4><p>要是能主动触发系统的orientation机制，调用orientation相关方法，使新设置的orientation值起作用就好了。这样只要提前设置好想要支持的orientation，然后主动触发orientation机制，便能实现将interface orientation旋转至任意方向的目的。</p>\n<p>万能的<a href=\"http://stackoverflow.com/a/14445888/2293677\" target=\"_blank\" rel=\"noopener\">stackoverflow</a>上提供了一种主动触发的方式：</p>\n<p>在iOS4和iOS6以后：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIViewController *vc = [[UIViewController alloc]init];</span><br><span class=\"line\">[self presentModalViewController:vc animated:NO];</span><br><span class=\"line\">[self dismissModalViewControllerAnimated:NO];</span><br><span class=\"line\">[vc release];</span><br></pre></td></tr></table></figure>\n\n<p>iOS5中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIWindow *window = [[UIApplication sharedApplication] keyWindow];</span><br><span class=\"line\">UIView *view = [window.subviews objectAtIndex:0];</span><br><span class=\"line\">[view removeFromSuperview];</span><br><span class=\"line\">[window addSubview:view];</span><br></pre></td></tr></table></figure>\n\n<p>这种方式会触发UIKit重新调用controller的orientation相关方法，以达到在device方向不变的情况下改变interface方向的目的。</p>\n<p>虽然不优雅，但却能解决问题，凑合吧。。</p>\n<p>PS：</p>\n<p>话说iOS8中的屏幕旋转相关方法又变化了，表示适配起来很蛋疼。。。</p>\n<h2 id=\"五、参考文档\"><a href=\"#五、参考文档\" class=\"headerlink\" title=\"五、参考文档\"></a>五、参考文档</h2><ul>\n<li><a href=\"https://developer.apple.com/library/ios/qa/qa1688/_index.html\" target=\"_blank\" rel=\"noopener\">Why won’t my UIViewController rotate with the device?</a>；</li>\n<li><a href=\"http://stackoverflow.com/a/14445888/2293677\" target=\"_blank\" rel=\"noopener\">How to force a UIViewController to Portait orientation in iOS 6</a></li>\n<li><a href=\"http://www.cnblogs.com/jhzhu/p/3480885.html\" target=\"_blank\" rel=\"noopener\">IOS Orientation, 想怎么转就怎么转</a></li>\n<li><a href=\"http://zhenby.com/blog/2013/08/20/talk-ios-orientation/\" target=\"_blank\" rel=\"noopener\">iOS 屏幕方向那点事儿</a></li>\n</ul>"},{"layout":"post","title":"手动解析CrashLog之----方法篇","date":"2015-07-27T10:59:27.000Z","comments":1,"keywords":"CrashLog, iOS","_content":"\n解决崩溃问题是移动应用开发者最日常的工作之一。如果是开发过程中遇到的崩溃，可以根据重现步骤调试，但线上版本就无能为力了。好在目前已经有很多不错的第三方CrashLog搜集平台（如友盟、Crashlytics等）为我们做好了解析工作，甚至在Xcode7里苹果也跟进了解析线上版本崩溃日志的功能，为开发者减轻了不少负担。尽管通常已经不需要我们手工处理CrashLog，了解CrashLog的还原原理和方法还是有必要的。\n\n## 一、.dSYM\n\n`.dSYM`(debugging SYMbols)又称为调试符号表，是苹果为了方便调试和定位问题而使用的一种调试方案，本质上使用的是起源于贝尔实验室的`DWARF`（Debugging With Attributed Record Formats），其在.xcarchive目录中的层次结构为：\n\n```\n.xcarchive\n--dSYMs\n  |--Your.app.dSYM\n    |--Contents\n      |--Resources\n        |--DWARF\n```\n关于DWARF的具体内容以后有机会再说。我们能解析CrashLog全靠.dSYM文件，解析方式见后文。\n\n## 二、确定符号表和崩溃日志的一致性\n\n有了符号表文件，有了崩溃日志文件，在解析之前一定要确保二者的对应关系，否则就算按照下述步骤解析出内容也肯定是不准确的。二者的对应关系可以通过UUID来确定。\n\n <!-- more -->\n\n#### 1、从崩溃日志中获取UUID\n\n崩溃日志比较靠下的位置有个`Binary Images`模块，其第一行内容如下：\n\n```\nBinary Images:\n0xa2000 - 0x541fff Your armv7  <a5c8d3cfda65396689e4370bf3a0ac64> /var/mobile/Containers/Bundle/Application/645D3184-4C20-4161-924B-BDE170FA64CC/Your.app/Your\n```\n从中可以看到关于你应用的若干信息：\n\n* 代码段的起终地址为：0xa2000 - 0x541fff\n* 运行你应用的CPU指令集为：armv7\n* 应用的UUID为：a5c8d3cfda65396689e4370bf3a0ac64（不区分大小写）\n\n#### 2、从符号表中获取UUID\n\n执行以下命令从符号表中提取UUID：\n\n```\n$ dwarfdump --uuid Your.app.dSYM\n```\n或者：\n\n```\n$ dwarfdump --uuid Your.app.dSYM/Contents/Resources/DWARF/Your\n```\n\n执行结果为：\n\n```\nUUID: A5C8D3CF-DA65-3966-89E4-370BF3A0AC64 (armv7) Your.app.dSYM/Contents/Resources/DWARF/Your\n```\n由此得到armv7指令集的UUID为：A5C8D3CF-DA65-3966-89E4-370BF3A0AC64（如果你的二进制文件支持多个指令集，这里会列出每个指令集对应符号表的UUID），通过和崩溃日志中的对比发现二者一致，才可进行进一步的解析操作。\n\n## 三、计算崩溃符号表地址\n\n以下面的崩溃堆栈为例：\n```\nThread 0:\n0   libobjc.A.dylib               \t0x33f10f60 0x33efe000 + 77664\n1   Foundation                    \t0x273526ac 0x2734a000 + 34476\n2   Foundation                    \t0x27355c3e 0x2734a000 + 48190\n3   UIKit                         \t0x29ef9d1c 0x29bbc000 + 3398940\n4   UIKit                         \t0x29ef9c9a 0x29bbc000 + 3398810\n5   UIKit                         \t0x29ef954c 0x29bbc000 + 3396940\n6   UIKit                         \t0x29c3a16a 0x29bbc000 + 516458\n7   UIKit                         \t0x29e4b8e6 0x29bbc000 + 2685158\n8   UIKit                         \t0x29c3a128 0x29bbc000 + 516392\n9   Your                          \t0x000f0846 0xa2000 + 321606\n10  UIKit                         \t0x29e90fb2 0x29bbc000 + 2969522\n11  UIKit                         \t0x29e91076 0x29bbc000 + 2969718\n12  UIKit                         \t0x29e867cc 0x29bbc000 + 2926540\n13  UIKit                         \t0x29c9e8ea 0x29bbc000 + 927978\n14  UIKit                         \t0x29bc8a6a 0x29bbc000 + 51818\n15  QuartzCore                    \t0x295f0a08 0x295e4000 + 51720\n16  QuartzCore                    \t0x295ec3e0 0x295e4000 + 33760\n17  QuartzCore                    \t0x295ec268 0x295e4000 + 33384\n18  QuartzCore                    \t0x295ebc4c 0x295e4000 + 31820\n19  QuartzCore                    \t0x295eba50 0x295e4000 + 31312\n20  QuartzCore                    \t0x295e5928 0x295e4000 + 6440\n21  CoreFoundation                \t0x266d0d92 0x26604000 + 839058\n22  CoreFoundation                \t0x266ce44e 0x26604000 + 828494\n23  CoreFoundation                \t0x266ce856 0x26604000 + 829526\n24  CoreFoundation                \t0x2661c3bc 0x26604000 + 99260\n25  CoreFoundation                \t0x2661c1ce 0x26604000 + 98766\n26  GraphicsServices              \t0x2da1a0a4 0x2da11000 + 37028\n27  UIKit                         \t0x29c2a7ac 0x29bbc000 + 452524\n28  Your                          \t0x0024643a 0xa2000 + 1721402\n29  libdyld.dylib                 \t0x34484aac 0x34483000 + 6828\n```\n\n#### 1、 符号表堆栈地址计算方式\n\n要想利用符号表解析出崩溃对应位置，需要计算出符号表中对应的崩溃堆栈地址。而从上述堆栈中第9行可以看到，应用崩溃发生在运行时地址`0x000f0846`，该进程的运行时起始地址是`0xa2000`，崩溃处距离进程起始地址的偏移量为十进制的`321606`(对应十六进制为0x4E846)。三者对应关系：\n\n```\n0x000f0846 = 0xa2000 + 0x4E846\n```\n对应的公式为：\n\n```\n运行时堆栈地址 = 运行时起始地址 + 偏移量\n```\n\n崩溃堆栈中的起始地址和崩溃地址均为运行时地址，根据虚拟内存偏移量不变原理，只要提供了符号表TEXT段的起始地址，再加上偏移量（这里为0x4E846）就能得到符号表中的堆栈地址，即：\n\n```\n符号表堆栈地址 = 符号表起始地址 + 偏移量\n```\n\n#### 2、获取符号表中的TEXT段起始地址\n\n符号表中TEXT段的起始地址可以通过以下命令获得：\n\n```\n$ otool -l Your.app.dSYM/Contents/Resources/DWARF/Your\n```\n\n运行结果中的片段如下：\n\n```\nLoad command 3\n      cmd LC_SEGMENT\n  cmdsize 736\n  segname __TEXT\n   vmaddr 0x00004000\n   vmsize 0x00700000\n  fileoff 0\n filesize 0\n  maxprot 0x00000005\n initprot 0x00000005\n   nsects 10\n    flags 0x0\n```\n\n其中的`vmaddr 0x00004000`字段即为TEXT段的起始地址。\n\n#### 3、计算符号表地址\n\n由公式：\n\n```\n符号表堆栈地址 = 符号表起始地址 + 偏移量\n```\n可得：\n\n```\n0x52846 = 0x4E846 + 0x4000\n```\n即符号表中的崩溃地址为`0x52846 `，接下来就可以根据这个地址解析出崩溃位置了。\n\n## 四、崩溃信息还原\n\n有了符号表的崩溃地址，有以下几种方式解析崩溃信息：\n\n#### 1、dwarfdump\n\n命令如下：\n\n```\n$ dwarfdump --arch armv7 Your.app.dSYM --lookup 0x52846 | grep 'Line table'\n```\n需要注意的是：\n\n* 这里的armv7是运行设备的CPU指令集，而不是二进制文件的指令集\n\n比如armv7指令集的二进制文件运行在arm64指令集的设备上，这个地方应该写arm64。\n\n* --lookup后面跟的一定是经过准确计算的符号表中的崩溃地址\n* 使用dwarfdump解析的结果较杂乱，因此使用`grep `命令抓取其中关键点展示出来\n\n运行结果如下：\n\n```\nLine table dir : '/data/.../Src/OBDConnectSetting/Controller'\nLine table file: 'OBDFirstConnectViewController.m' line 882, column 5 with start address 0x000000000052768\n```\n其中第一行是编译时文件目录，第二行包含了崩溃发生的文件名称以及文件中具体行号等信息，有了这些信息就能准确定位崩溃原因啦。\n\n#### 2、atos\n\natos是另一种更加简洁的崩溃日志解析方法，使用方式如下：\n\n```\n $ atos -o LuBao -arch armv7 0x52846\n```\n\n其执行结果如下：\n\n```\n-[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)\n```\n相对`dwarfdump`命令的解析结果，更加简洁直观的指出了崩溃发生的位置。\n\n#### 3、无需符号表崩溃地址的解析方式\n\n实际上，`atos`还提供了另外一种无需计算崩溃地址对应的符号表地址的方式，命令格式如下：\n\n```\n$ atos -o Your.app.dSYM/Contents/Resources/DWARF/Your -arch armv7 -l 0xa2000 0x000f0846\n```\n\n其中`-l`选项指定了二进制文件在运行时的起始地址`0xa2000`（获取方式见`Binary Images`相关内容）,后面跟的是崩溃发生的运行时地址`0x000f0846 `，解析结果和使用计算得到的符号表中崩溃地址一致：\n\n```\n-[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)\n```\n\n## 五、参考文档\n\n* [How to Match a Crash Report to a Build](https://developer.apple.com/library/mac/qa/qa1765/_index.html)\n* [CrashReporter](https://developer.apple.com/library/mac/technotes/tn2004/tn2123.html)\n* [Understanding and Analyzing iOS Application Crash Reports](https://developer.apple.com/library/ios/technotes/tn2151/_index.html)\n* [atos and dwarfdump won't symbolicate my address](http://stackoverflow.com/a/12464678/2293677)\n","source":"_posts/2015-07-27-ru-he-shou-dong-jie-xi-crashlog.markdown","raw":"---\nlayout: post\ntitle: \"手动解析CrashLog之----方法篇\"\ndate: 2015-07-27 18:59:27 +0800\ncomments: true\ncategories: iOS\ntags: [CrashLog, iOS]\nkeywords: CrashLog, iOS\n---\n\n解决崩溃问题是移动应用开发者最日常的工作之一。如果是开发过程中遇到的崩溃，可以根据重现步骤调试，但线上版本就无能为力了。好在目前已经有很多不错的第三方CrashLog搜集平台（如友盟、Crashlytics等）为我们做好了解析工作，甚至在Xcode7里苹果也跟进了解析线上版本崩溃日志的功能，为开发者减轻了不少负担。尽管通常已经不需要我们手工处理CrashLog，了解CrashLog的还原原理和方法还是有必要的。\n\n## 一、.dSYM\n\n`.dSYM`(debugging SYMbols)又称为调试符号表，是苹果为了方便调试和定位问题而使用的一种调试方案，本质上使用的是起源于贝尔实验室的`DWARF`（Debugging With Attributed Record Formats），其在.xcarchive目录中的层次结构为：\n\n```\n.xcarchive\n--dSYMs\n  |--Your.app.dSYM\n    |--Contents\n      |--Resources\n        |--DWARF\n```\n关于DWARF的具体内容以后有机会再说。我们能解析CrashLog全靠.dSYM文件，解析方式见后文。\n\n## 二、确定符号表和崩溃日志的一致性\n\n有了符号表文件，有了崩溃日志文件，在解析之前一定要确保二者的对应关系，否则就算按照下述步骤解析出内容也肯定是不准确的。二者的对应关系可以通过UUID来确定。\n\n <!-- more -->\n\n#### 1、从崩溃日志中获取UUID\n\n崩溃日志比较靠下的位置有个`Binary Images`模块，其第一行内容如下：\n\n```\nBinary Images:\n0xa2000 - 0x541fff Your armv7  <a5c8d3cfda65396689e4370bf3a0ac64> /var/mobile/Containers/Bundle/Application/645D3184-4C20-4161-924B-BDE170FA64CC/Your.app/Your\n```\n从中可以看到关于你应用的若干信息：\n\n* 代码段的起终地址为：0xa2000 - 0x541fff\n* 运行你应用的CPU指令集为：armv7\n* 应用的UUID为：a5c8d3cfda65396689e4370bf3a0ac64（不区分大小写）\n\n#### 2、从符号表中获取UUID\n\n执行以下命令从符号表中提取UUID：\n\n```\n$ dwarfdump --uuid Your.app.dSYM\n```\n或者：\n\n```\n$ dwarfdump --uuid Your.app.dSYM/Contents/Resources/DWARF/Your\n```\n\n执行结果为：\n\n```\nUUID: A5C8D3CF-DA65-3966-89E4-370BF3A0AC64 (armv7) Your.app.dSYM/Contents/Resources/DWARF/Your\n```\n由此得到armv7指令集的UUID为：A5C8D3CF-DA65-3966-89E4-370BF3A0AC64（如果你的二进制文件支持多个指令集，这里会列出每个指令集对应符号表的UUID），通过和崩溃日志中的对比发现二者一致，才可进行进一步的解析操作。\n\n## 三、计算崩溃符号表地址\n\n以下面的崩溃堆栈为例：\n```\nThread 0:\n0   libobjc.A.dylib               \t0x33f10f60 0x33efe000 + 77664\n1   Foundation                    \t0x273526ac 0x2734a000 + 34476\n2   Foundation                    \t0x27355c3e 0x2734a000 + 48190\n3   UIKit                         \t0x29ef9d1c 0x29bbc000 + 3398940\n4   UIKit                         \t0x29ef9c9a 0x29bbc000 + 3398810\n5   UIKit                         \t0x29ef954c 0x29bbc000 + 3396940\n6   UIKit                         \t0x29c3a16a 0x29bbc000 + 516458\n7   UIKit                         \t0x29e4b8e6 0x29bbc000 + 2685158\n8   UIKit                         \t0x29c3a128 0x29bbc000 + 516392\n9   Your                          \t0x000f0846 0xa2000 + 321606\n10  UIKit                         \t0x29e90fb2 0x29bbc000 + 2969522\n11  UIKit                         \t0x29e91076 0x29bbc000 + 2969718\n12  UIKit                         \t0x29e867cc 0x29bbc000 + 2926540\n13  UIKit                         \t0x29c9e8ea 0x29bbc000 + 927978\n14  UIKit                         \t0x29bc8a6a 0x29bbc000 + 51818\n15  QuartzCore                    \t0x295f0a08 0x295e4000 + 51720\n16  QuartzCore                    \t0x295ec3e0 0x295e4000 + 33760\n17  QuartzCore                    \t0x295ec268 0x295e4000 + 33384\n18  QuartzCore                    \t0x295ebc4c 0x295e4000 + 31820\n19  QuartzCore                    \t0x295eba50 0x295e4000 + 31312\n20  QuartzCore                    \t0x295e5928 0x295e4000 + 6440\n21  CoreFoundation                \t0x266d0d92 0x26604000 + 839058\n22  CoreFoundation                \t0x266ce44e 0x26604000 + 828494\n23  CoreFoundation                \t0x266ce856 0x26604000 + 829526\n24  CoreFoundation                \t0x2661c3bc 0x26604000 + 99260\n25  CoreFoundation                \t0x2661c1ce 0x26604000 + 98766\n26  GraphicsServices              \t0x2da1a0a4 0x2da11000 + 37028\n27  UIKit                         \t0x29c2a7ac 0x29bbc000 + 452524\n28  Your                          \t0x0024643a 0xa2000 + 1721402\n29  libdyld.dylib                 \t0x34484aac 0x34483000 + 6828\n```\n\n#### 1、 符号表堆栈地址计算方式\n\n要想利用符号表解析出崩溃对应位置，需要计算出符号表中对应的崩溃堆栈地址。而从上述堆栈中第9行可以看到，应用崩溃发生在运行时地址`0x000f0846`，该进程的运行时起始地址是`0xa2000`，崩溃处距离进程起始地址的偏移量为十进制的`321606`(对应十六进制为0x4E846)。三者对应关系：\n\n```\n0x000f0846 = 0xa2000 + 0x4E846\n```\n对应的公式为：\n\n```\n运行时堆栈地址 = 运行时起始地址 + 偏移量\n```\n\n崩溃堆栈中的起始地址和崩溃地址均为运行时地址，根据虚拟内存偏移量不变原理，只要提供了符号表TEXT段的起始地址，再加上偏移量（这里为0x4E846）就能得到符号表中的堆栈地址，即：\n\n```\n符号表堆栈地址 = 符号表起始地址 + 偏移量\n```\n\n#### 2、获取符号表中的TEXT段起始地址\n\n符号表中TEXT段的起始地址可以通过以下命令获得：\n\n```\n$ otool -l Your.app.dSYM/Contents/Resources/DWARF/Your\n```\n\n运行结果中的片段如下：\n\n```\nLoad command 3\n      cmd LC_SEGMENT\n  cmdsize 736\n  segname __TEXT\n   vmaddr 0x00004000\n   vmsize 0x00700000\n  fileoff 0\n filesize 0\n  maxprot 0x00000005\n initprot 0x00000005\n   nsects 10\n    flags 0x0\n```\n\n其中的`vmaddr 0x00004000`字段即为TEXT段的起始地址。\n\n#### 3、计算符号表地址\n\n由公式：\n\n```\n符号表堆栈地址 = 符号表起始地址 + 偏移量\n```\n可得：\n\n```\n0x52846 = 0x4E846 + 0x4000\n```\n即符号表中的崩溃地址为`0x52846 `，接下来就可以根据这个地址解析出崩溃位置了。\n\n## 四、崩溃信息还原\n\n有了符号表的崩溃地址，有以下几种方式解析崩溃信息：\n\n#### 1、dwarfdump\n\n命令如下：\n\n```\n$ dwarfdump --arch armv7 Your.app.dSYM --lookup 0x52846 | grep 'Line table'\n```\n需要注意的是：\n\n* 这里的armv7是运行设备的CPU指令集，而不是二进制文件的指令集\n\n比如armv7指令集的二进制文件运行在arm64指令集的设备上，这个地方应该写arm64。\n\n* --lookup后面跟的一定是经过准确计算的符号表中的崩溃地址\n* 使用dwarfdump解析的结果较杂乱，因此使用`grep `命令抓取其中关键点展示出来\n\n运行结果如下：\n\n```\nLine table dir : '/data/.../Src/OBDConnectSetting/Controller'\nLine table file: 'OBDFirstConnectViewController.m' line 882, column 5 with start address 0x000000000052768\n```\n其中第一行是编译时文件目录，第二行包含了崩溃发生的文件名称以及文件中具体行号等信息，有了这些信息就能准确定位崩溃原因啦。\n\n#### 2、atos\n\natos是另一种更加简洁的崩溃日志解析方法，使用方式如下：\n\n```\n $ atos -o LuBao -arch armv7 0x52846\n```\n\n其执行结果如下：\n\n```\n-[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)\n```\n相对`dwarfdump`命令的解析结果，更加简洁直观的指出了崩溃发生的位置。\n\n#### 3、无需符号表崩溃地址的解析方式\n\n实际上，`atos`还提供了另外一种无需计算崩溃地址对应的符号表地址的方式，命令格式如下：\n\n```\n$ atos -o Your.app.dSYM/Contents/Resources/DWARF/Your -arch armv7 -l 0xa2000 0x000f0846\n```\n\n其中`-l`选项指定了二进制文件在运行时的起始地址`0xa2000`（获取方式见`Binary Images`相关内容）,后面跟的是崩溃发生的运行时地址`0x000f0846 `，解析结果和使用计算得到的符号表中崩溃地址一致：\n\n```\n-[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)\n```\n\n## 五、参考文档\n\n* [How to Match a Crash Report to a Build](https://developer.apple.com/library/mac/qa/qa1765/_index.html)\n* [CrashReporter](https://developer.apple.com/library/mac/technotes/tn2004/tn2123.html)\n* [Understanding and Analyzing iOS Application Crash Reports](https://developer.apple.com/library/ios/technotes/tn2151/_index.html)\n* [atos and dwarfdump won't symbolicate my address](http://stackoverflow.com/a/12464678/2293677)\n","slug":"2015-07-27-ru-he-shou-dong-jie-xi-crashlog","published":1,"updated":"2019-09-25T14:12:27.000Z","photos":[],"link":"","_id":"ck0zclide001hqhtfafaki9bz","content":"<p>解决崩溃问题是移动应用开发者最日常的工作之一。如果是开发过程中遇到的崩溃，可以根据重现步骤调试，但线上版本就无能为力了。好在目前已经有很多不错的第三方CrashLog搜集平台（如友盟、Crashlytics等）为我们做好了解析工作，甚至在Xcode7里苹果也跟进了解析线上版本崩溃日志的功能，为开发者减轻了不少负担。尽管通常已经不需要我们手工处理CrashLog，了解CrashLog的还原原理和方法还是有必要的。</p>\n<h2 id=\"一、-dSYM\"><a href=\"#一、-dSYM\" class=\"headerlink\" title=\"一、.dSYM\"></a>一、.dSYM</h2><p><code>.dSYM</code>(debugging SYMbols)又称为调试符号表，是苹果为了方便调试和定位问题而使用的一种调试方案，本质上使用的是起源于贝尔实验室的<code>DWARF</code>（Debugging With Attributed Record Formats），其在.xcarchive目录中的层次结构为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.xcarchive</span><br><span class=\"line\">--dSYMs</span><br><span class=\"line\">  |--Your.app.dSYM</span><br><span class=\"line\">    |--Contents</span><br><span class=\"line\">      |--Resources</span><br><span class=\"line\">        |--DWARF</span><br></pre></td></tr></table></figure>\n\n<p>关于DWARF的具体内容以后有机会再说。我们能解析CrashLog全靠.dSYM文件，解析方式见后文。</p>\n<h2 id=\"二、确定符号表和崩溃日志的一致性\"><a href=\"#二、确定符号表和崩溃日志的一致性\" class=\"headerlink\" title=\"二、确定符号表和崩溃日志的一致性\"></a>二、确定符号表和崩溃日志的一致性</h2><p>有了符号表文件，有了崩溃日志文件，在解析之前一定要确保二者的对应关系，否则就算按照下述步骤解析出内容也肯定是不准确的。二者的对应关系可以通过UUID来确定。</p>\n <a id=\"more\"></a>\n\n<h4 id=\"1、从崩溃日志中获取UUID\"><a href=\"#1、从崩溃日志中获取UUID\" class=\"headerlink\" title=\"1、从崩溃日志中获取UUID\"></a>1、从崩溃日志中获取UUID</h4><p>崩溃日志比较靠下的位置有个<code>Binary Images</code>模块，其第一行内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Binary Images:</span><br><span class=\"line\">0xa2000 - 0x541fff Your armv7  &lt;a5c8d3cfda65396689e4370bf3a0ac64&gt; /var/mobile/Containers/Bundle/Application/645D3184-4C20-4161-924B-BDE170FA64CC/Your.app/Your</span><br></pre></td></tr></table></figure>\n\n<p>从中可以看到关于你应用的若干信息：</p>\n<ul>\n<li>代码段的起终地址为：0xa2000 - 0x541fff</li>\n<li>运行你应用的CPU指令集为：armv7</li>\n<li>应用的UUID为：a5c8d3cfda65396689e4370bf3a0ac64（不区分大小写）</li>\n</ul>\n<h4 id=\"2、从符号表中获取UUID\"><a href=\"#2、从符号表中获取UUID\" class=\"headerlink\" title=\"2、从符号表中获取UUID\"></a>2、从符号表中获取UUID</h4><p>执行以下命令从符号表中提取UUID：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dwarfdump --uuid Your.app.dSYM</span><br></pre></td></tr></table></figure>\n\n<p>或者：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dwarfdump --uuid Your.app.dSYM/Contents/Resources/DWARF/Your</span><br></pre></td></tr></table></figure>\n\n<p>执行结果为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UUID: A5C8D3CF-DA65-3966-89E4-370BF3A0AC64 (armv7) Your.app.dSYM/Contents/Resources/DWARF/Your</span><br></pre></td></tr></table></figure>\n\n<p>由此得到armv7指令集的UUID为：A5C8D3CF-DA65-3966-89E4-370BF3A0AC64（如果你的二进制文件支持多个指令集，这里会列出每个指令集对应符号表的UUID），通过和崩溃日志中的对比发现二者一致，才可进行进一步的解析操作。</p>\n<h2 id=\"三、计算崩溃符号表地址\"><a href=\"#三、计算崩溃符号表地址\" class=\"headerlink\" title=\"三、计算崩溃符号表地址\"></a>三、计算崩溃符号表地址</h2><p>以下面的崩溃堆栈为例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread 0:</span><br><span class=\"line\">0   libobjc.A.dylib               \t0x33f10f60 0x33efe000 + 77664</span><br><span class=\"line\">1   Foundation                    \t0x273526ac 0x2734a000 + 34476</span><br><span class=\"line\">2   Foundation                    \t0x27355c3e 0x2734a000 + 48190</span><br><span class=\"line\">3   UIKit                         \t0x29ef9d1c 0x29bbc000 + 3398940</span><br><span class=\"line\">4   UIKit                         \t0x29ef9c9a 0x29bbc000 + 3398810</span><br><span class=\"line\">5   UIKit                         \t0x29ef954c 0x29bbc000 + 3396940</span><br><span class=\"line\">6   UIKit                         \t0x29c3a16a 0x29bbc000 + 516458</span><br><span class=\"line\">7   UIKit                         \t0x29e4b8e6 0x29bbc000 + 2685158</span><br><span class=\"line\">8   UIKit                         \t0x29c3a128 0x29bbc000 + 516392</span><br><span class=\"line\">9   Your                          \t0x000f0846 0xa2000 + 321606</span><br><span class=\"line\">10  UIKit                         \t0x29e90fb2 0x29bbc000 + 2969522</span><br><span class=\"line\">11  UIKit                         \t0x29e91076 0x29bbc000 + 2969718</span><br><span class=\"line\">12  UIKit                         \t0x29e867cc 0x29bbc000 + 2926540</span><br><span class=\"line\">13  UIKit                         \t0x29c9e8ea 0x29bbc000 + 927978</span><br><span class=\"line\">14  UIKit                         \t0x29bc8a6a 0x29bbc000 + 51818</span><br><span class=\"line\">15  QuartzCore                    \t0x295f0a08 0x295e4000 + 51720</span><br><span class=\"line\">16  QuartzCore                    \t0x295ec3e0 0x295e4000 + 33760</span><br><span class=\"line\">17  QuartzCore                    \t0x295ec268 0x295e4000 + 33384</span><br><span class=\"line\">18  QuartzCore                    \t0x295ebc4c 0x295e4000 + 31820</span><br><span class=\"line\">19  QuartzCore                    \t0x295eba50 0x295e4000 + 31312</span><br><span class=\"line\">20  QuartzCore                    \t0x295e5928 0x295e4000 + 6440</span><br><span class=\"line\">21  CoreFoundation                \t0x266d0d92 0x26604000 + 839058</span><br><span class=\"line\">22  CoreFoundation                \t0x266ce44e 0x26604000 + 828494</span><br><span class=\"line\">23  CoreFoundation                \t0x266ce856 0x26604000 + 829526</span><br><span class=\"line\">24  CoreFoundation                \t0x2661c3bc 0x26604000 + 99260</span><br><span class=\"line\">25  CoreFoundation                \t0x2661c1ce 0x26604000 + 98766</span><br><span class=\"line\">26  GraphicsServices              \t0x2da1a0a4 0x2da11000 + 37028</span><br><span class=\"line\">27  UIKit                         \t0x29c2a7ac 0x29bbc000 + 452524</span><br><span class=\"line\">28  Your                          \t0x0024643a 0xa2000 + 1721402</span><br><span class=\"line\">29  libdyld.dylib                 \t0x34484aac 0x34483000 + 6828</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1、-符号表堆栈地址计算方式\"><a href=\"#1、-符号表堆栈地址计算方式\" class=\"headerlink\" title=\"1、 符号表堆栈地址计算方式\"></a>1、 符号表堆栈地址计算方式</h4><p>要想利用符号表解析出崩溃对应位置，需要计算出符号表中对应的崩溃堆栈地址。而从上述堆栈中第9行可以看到，应用崩溃发生在运行时地址<code>0x000f0846</code>，该进程的运行时起始地址是<code>0xa2000</code>，崩溃处距离进程起始地址的偏移量为十进制的<code>321606</code>(对应十六进制为0x4E846)。三者对应关系：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x000f0846 = 0xa2000 + 0x4E846</span><br></pre></td></tr></table></figure>\n\n<p>对应的公式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行时堆栈地址 = 运行时起始地址 + 偏移量</span><br></pre></td></tr></table></figure>\n\n<p>崩溃堆栈中的起始地址和崩溃地址均为运行时地址，根据虚拟内存偏移量不变原理，只要提供了符号表TEXT段的起始地址，再加上偏移量（这里为0x4E846）就能得到符号表中的堆栈地址，即：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">符号表堆栈地址 = 符号表起始地址 + 偏移量</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、获取符号表中的TEXT段起始地址\"><a href=\"#2、获取符号表中的TEXT段起始地址\" class=\"headerlink\" title=\"2、获取符号表中的TEXT段起始地址\"></a>2、获取符号表中的TEXT段起始地址</h4><p>符号表中TEXT段的起始地址可以通过以下命令获得：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ otool -l Your.app.dSYM/Contents/Resources/DWARF/Your</span><br></pre></td></tr></table></figure>\n\n<p>运行结果中的片段如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Load command 3</span><br><span class=\"line\">      cmd LC_SEGMENT</span><br><span class=\"line\">  cmdsize 736</span><br><span class=\"line\">  segname __TEXT</span><br><span class=\"line\">   vmaddr 0x00004000</span><br><span class=\"line\">   vmsize 0x00700000</span><br><span class=\"line\">  fileoff 0</span><br><span class=\"line\"> filesize 0</span><br><span class=\"line\">  maxprot 0x00000005</span><br><span class=\"line\"> initprot 0x00000005</span><br><span class=\"line\">   nsects 10</span><br><span class=\"line\">    flags 0x0</span><br></pre></td></tr></table></figure>\n\n<p>其中的<code>vmaddr 0x00004000</code>字段即为TEXT段的起始地址。</p>\n<h4 id=\"3、计算符号表地址\"><a href=\"#3、计算符号表地址\" class=\"headerlink\" title=\"3、计算符号表地址\"></a>3、计算符号表地址</h4><p>由公式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">符号表堆栈地址 = 符号表起始地址 + 偏移量</span><br></pre></td></tr></table></figure>\n\n<p>可得：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x52846 = 0x4E846 + 0x4000</span><br></pre></td></tr></table></figure>\n\n<p>即符号表中的崩溃地址为<code>0x52846</code>，接下来就可以根据这个地址解析出崩溃位置了。</p>\n<h2 id=\"四、崩溃信息还原\"><a href=\"#四、崩溃信息还原\" class=\"headerlink\" title=\"四、崩溃信息还原\"></a>四、崩溃信息还原</h2><p>有了符号表的崩溃地址，有以下几种方式解析崩溃信息：</p>\n<h4 id=\"1、dwarfdump\"><a href=\"#1、dwarfdump\" class=\"headerlink\" title=\"1、dwarfdump\"></a>1、dwarfdump</h4><p>命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dwarfdump --arch armv7 Your.app.dSYM --lookup 0x52846 | grep &apos;Line table&apos;</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是：</p>\n<ul>\n<li>这里的armv7是运行设备的CPU指令集，而不是二进制文件的指令集</li>\n</ul>\n<p>比如armv7指令集的二进制文件运行在arm64指令集的设备上，这个地方应该写arm64。</p>\n<ul>\n<li>–lookup后面跟的一定是经过准确计算的符号表中的崩溃地址</li>\n<li>使用dwarfdump解析的结果较杂乱，因此使用<code>grep</code>命令抓取其中关键点展示出来</li>\n</ul>\n<p>运行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Line table dir : &apos;/data/.../Src/OBDConnectSetting/Controller&apos;</span><br><span class=\"line\">Line table file: &apos;OBDFirstConnectViewController.m&apos; line 882, column 5 with start address 0x000000000052768</span><br></pre></td></tr></table></figure>\n\n<p>其中第一行是编译时文件目录，第二行包含了崩溃发生的文件名称以及文件中具体行号等信息，有了这些信息就能准确定位崩溃原因啦。</p>\n<h4 id=\"2、atos\"><a href=\"#2、atos\" class=\"headerlink\" title=\"2、atos\"></a>2、atos</h4><p>atos是另一种更加简洁的崩溃日志解析方法，使用方式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ atos -o LuBao -arch armv7 0x52846</span><br></pre></td></tr></table></figure>\n\n<p>其执行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)</span><br></pre></td></tr></table></figure>\n\n<p>相对<code>dwarfdump</code>命令的解析结果，更加简洁直观的指出了崩溃发生的位置。</p>\n<h4 id=\"3、无需符号表崩溃地址的解析方式\"><a href=\"#3、无需符号表崩溃地址的解析方式\" class=\"headerlink\" title=\"3、无需符号表崩溃地址的解析方式\"></a>3、无需符号表崩溃地址的解析方式</h4><p>实际上，<code>atos</code>还提供了另外一种无需计算崩溃地址对应的符号表地址的方式，命令格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ atos -o Your.app.dSYM/Contents/Resources/DWARF/Your -arch armv7 -l 0xa2000 0x000f0846</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>-l</code>选项指定了二进制文件在运行时的起始地址<code>0xa2000</code>（获取方式见<code>Binary Images</code>相关内容）,后面跟的是崩溃发生的运行时地址<code>0x000f0846</code>，解析结果和使用计算得到的符号表中崩溃地址一致：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五、参考文档\"><a href=\"#五、参考文档\" class=\"headerlink\" title=\"五、参考文档\"></a>五、参考文档</h2><ul>\n<li><a href=\"https://developer.apple.com/library/mac/qa/qa1765/_index.html\" target=\"_blank\" rel=\"noopener\">How to Match a Crash Report to a Build</a></li>\n<li><a href=\"https://developer.apple.com/library/mac/technotes/tn2004/tn2123.html\" target=\"_blank\" rel=\"noopener\">CrashReporter</a></li>\n<li><a href=\"https://developer.apple.com/library/ios/technotes/tn2151/_index.html\" target=\"_blank\" rel=\"noopener\">Understanding and Analyzing iOS Application Crash Reports</a></li>\n<li><a href=\"http://stackoverflow.com/a/12464678/2293677\" target=\"_blank\" rel=\"noopener\">atos and dwarfdump won’t symbolicate my address</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>解决崩溃问题是移动应用开发者最日常的工作之一。如果是开发过程中遇到的崩溃，可以根据重现步骤调试，但线上版本就无能为力了。好在目前已经有很多不错的第三方CrashLog搜集平台（如友盟、Crashlytics等）为我们做好了解析工作，甚至在Xcode7里苹果也跟进了解析线上版本崩溃日志的功能，为开发者减轻了不少负担。尽管通常已经不需要我们手工处理CrashLog，了解CrashLog的还原原理和方法还是有必要的。</p>\n<h2 id=\"一、-dSYM\"><a href=\"#一、-dSYM\" class=\"headerlink\" title=\"一、.dSYM\"></a>一、.dSYM</h2><p><code>.dSYM</code>(debugging SYMbols)又称为调试符号表，是苹果为了方便调试和定位问题而使用的一种调试方案，本质上使用的是起源于贝尔实验室的<code>DWARF</code>（Debugging With Attributed Record Formats），其在.xcarchive目录中的层次结构为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.xcarchive</span><br><span class=\"line\">--dSYMs</span><br><span class=\"line\">  |--Your.app.dSYM</span><br><span class=\"line\">    |--Contents</span><br><span class=\"line\">      |--Resources</span><br><span class=\"line\">        |--DWARF</span><br></pre></td></tr></table></figure>\n\n<p>关于DWARF的具体内容以后有机会再说。我们能解析CrashLog全靠.dSYM文件，解析方式见后文。</p>\n<h2 id=\"二、确定符号表和崩溃日志的一致性\"><a href=\"#二、确定符号表和崩溃日志的一致性\" class=\"headerlink\" title=\"二、确定符号表和崩溃日志的一致性\"></a>二、确定符号表和崩溃日志的一致性</h2><p>有了符号表文件，有了崩溃日志文件，在解析之前一定要确保二者的对应关系，否则就算按照下述步骤解析出内容也肯定是不准确的。二者的对应关系可以通过UUID来确定。</p>","more":"<h4 id=\"1、从崩溃日志中获取UUID\"><a href=\"#1、从崩溃日志中获取UUID\" class=\"headerlink\" title=\"1、从崩溃日志中获取UUID\"></a>1、从崩溃日志中获取UUID</h4><p>崩溃日志比较靠下的位置有个<code>Binary Images</code>模块，其第一行内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Binary Images:</span><br><span class=\"line\">0xa2000 - 0x541fff Your armv7  &lt;a5c8d3cfda65396689e4370bf3a0ac64&gt; /var/mobile/Containers/Bundle/Application/645D3184-4C20-4161-924B-BDE170FA64CC/Your.app/Your</span><br></pre></td></tr></table></figure>\n\n<p>从中可以看到关于你应用的若干信息：</p>\n<ul>\n<li>代码段的起终地址为：0xa2000 - 0x541fff</li>\n<li>运行你应用的CPU指令集为：armv7</li>\n<li>应用的UUID为：a5c8d3cfda65396689e4370bf3a0ac64（不区分大小写）</li>\n</ul>\n<h4 id=\"2、从符号表中获取UUID\"><a href=\"#2、从符号表中获取UUID\" class=\"headerlink\" title=\"2、从符号表中获取UUID\"></a>2、从符号表中获取UUID</h4><p>执行以下命令从符号表中提取UUID：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dwarfdump --uuid Your.app.dSYM</span><br></pre></td></tr></table></figure>\n\n<p>或者：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dwarfdump --uuid Your.app.dSYM/Contents/Resources/DWARF/Your</span><br></pre></td></tr></table></figure>\n\n<p>执行结果为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UUID: A5C8D3CF-DA65-3966-89E4-370BF3A0AC64 (armv7) Your.app.dSYM/Contents/Resources/DWARF/Your</span><br></pre></td></tr></table></figure>\n\n<p>由此得到armv7指令集的UUID为：A5C8D3CF-DA65-3966-89E4-370BF3A0AC64（如果你的二进制文件支持多个指令集，这里会列出每个指令集对应符号表的UUID），通过和崩溃日志中的对比发现二者一致，才可进行进一步的解析操作。</p>\n<h2 id=\"三、计算崩溃符号表地址\"><a href=\"#三、计算崩溃符号表地址\" class=\"headerlink\" title=\"三、计算崩溃符号表地址\"></a>三、计算崩溃符号表地址</h2><p>以下面的崩溃堆栈为例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread 0:</span><br><span class=\"line\">0   libobjc.A.dylib               \t0x33f10f60 0x33efe000 + 77664</span><br><span class=\"line\">1   Foundation                    \t0x273526ac 0x2734a000 + 34476</span><br><span class=\"line\">2   Foundation                    \t0x27355c3e 0x2734a000 + 48190</span><br><span class=\"line\">3   UIKit                         \t0x29ef9d1c 0x29bbc000 + 3398940</span><br><span class=\"line\">4   UIKit                         \t0x29ef9c9a 0x29bbc000 + 3398810</span><br><span class=\"line\">5   UIKit                         \t0x29ef954c 0x29bbc000 + 3396940</span><br><span class=\"line\">6   UIKit                         \t0x29c3a16a 0x29bbc000 + 516458</span><br><span class=\"line\">7   UIKit                         \t0x29e4b8e6 0x29bbc000 + 2685158</span><br><span class=\"line\">8   UIKit                         \t0x29c3a128 0x29bbc000 + 516392</span><br><span class=\"line\">9   Your                          \t0x000f0846 0xa2000 + 321606</span><br><span class=\"line\">10  UIKit                         \t0x29e90fb2 0x29bbc000 + 2969522</span><br><span class=\"line\">11  UIKit                         \t0x29e91076 0x29bbc000 + 2969718</span><br><span class=\"line\">12  UIKit                         \t0x29e867cc 0x29bbc000 + 2926540</span><br><span class=\"line\">13  UIKit                         \t0x29c9e8ea 0x29bbc000 + 927978</span><br><span class=\"line\">14  UIKit                         \t0x29bc8a6a 0x29bbc000 + 51818</span><br><span class=\"line\">15  QuartzCore                    \t0x295f0a08 0x295e4000 + 51720</span><br><span class=\"line\">16  QuartzCore                    \t0x295ec3e0 0x295e4000 + 33760</span><br><span class=\"line\">17  QuartzCore                    \t0x295ec268 0x295e4000 + 33384</span><br><span class=\"line\">18  QuartzCore                    \t0x295ebc4c 0x295e4000 + 31820</span><br><span class=\"line\">19  QuartzCore                    \t0x295eba50 0x295e4000 + 31312</span><br><span class=\"line\">20  QuartzCore                    \t0x295e5928 0x295e4000 + 6440</span><br><span class=\"line\">21  CoreFoundation                \t0x266d0d92 0x26604000 + 839058</span><br><span class=\"line\">22  CoreFoundation                \t0x266ce44e 0x26604000 + 828494</span><br><span class=\"line\">23  CoreFoundation                \t0x266ce856 0x26604000 + 829526</span><br><span class=\"line\">24  CoreFoundation                \t0x2661c3bc 0x26604000 + 99260</span><br><span class=\"line\">25  CoreFoundation                \t0x2661c1ce 0x26604000 + 98766</span><br><span class=\"line\">26  GraphicsServices              \t0x2da1a0a4 0x2da11000 + 37028</span><br><span class=\"line\">27  UIKit                         \t0x29c2a7ac 0x29bbc000 + 452524</span><br><span class=\"line\">28  Your                          \t0x0024643a 0xa2000 + 1721402</span><br><span class=\"line\">29  libdyld.dylib                 \t0x34484aac 0x34483000 + 6828</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1、-符号表堆栈地址计算方式\"><a href=\"#1、-符号表堆栈地址计算方式\" class=\"headerlink\" title=\"1、 符号表堆栈地址计算方式\"></a>1、 符号表堆栈地址计算方式</h4><p>要想利用符号表解析出崩溃对应位置，需要计算出符号表中对应的崩溃堆栈地址。而从上述堆栈中第9行可以看到，应用崩溃发生在运行时地址<code>0x000f0846</code>，该进程的运行时起始地址是<code>0xa2000</code>，崩溃处距离进程起始地址的偏移量为十进制的<code>321606</code>(对应十六进制为0x4E846)。三者对应关系：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x000f0846 = 0xa2000 + 0x4E846</span><br></pre></td></tr></table></figure>\n\n<p>对应的公式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行时堆栈地址 = 运行时起始地址 + 偏移量</span><br></pre></td></tr></table></figure>\n\n<p>崩溃堆栈中的起始地址和崩溃地址均为运行时地址，根据虚拟内存偏移量不变原理，只要提供了符号表TEXT段的起始地址，再加上偏移量（这里为0x4E846）就能得到符号表中的堆栈地址，即：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">符号表堆栈地址 = 符号表起始地址 + 偏移量</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、获取符号表中的TEXT段起始地址\"><a href=\"#2、获取符号表中的TEXT段起始地址\" class=\"headerlink\" title=\"2、获取符号表中的TEXT段起始地址\"></a>2、获取符号表中的TEXT段起始地址</h4><p>符号表中TEXT段的起始地址可以通过以下命令获得：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ otool -l Your.app.dSYM/Contents/Resources/DWARF/Your</span><br></pre></td></tr></table></figure>\n\n<p>运行结果中的片段如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Load command 3</span><br><span class=\"line\">      cmd LC_SEGMENT</span><br><span class=\"line\">  cmdsize 736</span><br><span class=\"line\">  segname __TEXT</span><br><span class=\"line\">   vmaddr 0x00004000</span><br><span class=\"line\">   vmsize 0x00700000</span><br><span class=\"line\">  fileoff 0</span><br><span class=\"line\"> filesize 0</span><br><span class=\"line\">  maxprot 0x00000005</span><br><span class=\"line\"> initprot 0x00000005</span><br><span class=\"line\">   nsects 10</span><br><span class=\"line\">    flags 0x0</span><br></pre></td></tr></table></figure>\n\n<p>其中的<code>vmaddr 0x00004000</code>字段即为TEXT段的起始地址。</p>\n<h4 id=\"3、计算符号表地址\"><a href=\"#3、计算符号表地址\" class=\"headerlink\" title=\"3、计算符号表地址\"></a>3、计算符号表地址</h4><p>由公式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">符号表堆栈地址 = 符号表起始地址 + 偏移量</span><br></pre></td></tr></table></figure>\n\n<p>可得：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x52846 = 0x4E846 + 0x4000</span><br></pre></td></tr></table></figure>\n\n<p>即符号表中的崩溃地址为<code>0x52846</code>，接下来就可以根据这个地址解析出崩溃位置了。</p>\n<h2 id=\"四、崩溃信息还原\"><a href=\"#四、崩溃信息还原\" class=\"headerlink\" title=\"四、崩溃信息还原\"></a>四、崩溃信息还原</h2><p>有了符号表的崩溃地址，有以下几种方式解析崩溃信息：</p>\n<h4 id=\"1、dwarfdump\"><a href=\"#1、dwarfdump\" class=\"headerlink\" title=\"1、dwarfdump\"></a>1、dwarfdump</h4><p>命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dwarfdump --arch armv7 Your.app.dSYM --lookup 0x52846 | grep &apos;Line table&apos;</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是：</p>\n<ul>\n<li>这里的armv7是运行设备的CPU指令集，而不是二进制文件的指令集</li>\n</ul>\n<p>比如armv7指令集的二进制文件运行在arm64指令集的设备上，这个地方应该写arm64。</p>\n<ul>\n<li>–lookup后面跟的一定是经过准确计算的符号表中的崩溃地址</li>\n<li>使用dwarfdump解析的结果较杂乱，因此使用<code>grep</code>命令抓取其中关键点展示出来</li>\n</ul>\n<p>运行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Line table dir : &apos;/data/.../Src/OBDConnectSetting/Controller&apos;</span><br><span class=\"line\">Line table file: &apos;OBDFirstConnectViewController.m&apos; line 882, column 5 with start address 0x000000000052768</span><br></pre></td></tr></table></figure>\n\n<p>其中第一行是编译时文件目录，第二行包含了崩溃发生的文件名称以及文件中具体行号等信息，有了这些信息就能准确定位崩溃原因啦。</p>\n<h4 id=\"2、atos\"><a href=\"#2、atos\" class=\"headerlink\" title=\"2、atos\"></a>2、atos</h4><p>atos是另一种更加简洁的崩溃日志解析方法，使用方式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ atos -o LuBao -arch armv7 0x52846</span><br></pre></td></tr></table></figure>\n\n<p>其执行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)</span><br></pre></td></tr></table></figure>\n\n<p>相对<code>dwarfdump</code>命令的解析结果，更加简洁直观的指出了崩溃发生的位置。</p>\n<h4 id=\"3、无需符号表崩溃地址的解析方式\"><a href=\"#3、无需符号表崩溃地址的解析方式\" class=\"headerlink\" title=\"3、无需符号表崩溃地址的解析方式\"></a>3、无需符号表崩溃地址的解析方式</h4><p>实际上，<code>atos</code>还提供了另外一种无需计算崩溃地址对应的符号表地址的方式，命令格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ atos -o Your.app.dSYM/Contents/Resources/DWARF/Your -arch armv7 -l 0xa2000 0x000f0846</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>-l</code>选项指定了二进制文件在运行时的起始地址<code>0xa2000</code>（获取方式见<code>Binary Images</code>相关内容）,后面跟的是崩溃发生的运行时地址<code>0x000f0846</code>，解析结果和使用计算得到的符号表中崩溃地址一致：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五、参考文档\"><a href=\"#五、参考文档\" class=\"headerlink\" title=\"五、参考文档\"></a>五、参考文档</h2><ul>\n<li><a href=\"https://developer.apple.com/library/mac/qa/qa1765/_index.html\" target=\"_blank\" rel=\"noopener\">How to Match a Crash Report to a Build</a></li>\n<li><a href=\"https://developer.apple.com/library/mac/technotes/tn2004/tn2123.html\" target=\"_blank\" rel=\"noopener\">CrashReporter</a></li>\n<li><a href=\"https://developer.apple.com/library/ios/technotes/tn2151/_index.html\" target=\"_blank\" rel=\"noopener\">Understanding and Analyzing iOS Application Crash Reports</a></li>\n<li><a href=\"http://stackoverflow.com/a/12464678/2293677\" target=\"_blank\" rel=\"noopener\">atos and dwarfdump won’t symbolicate my address</a></li>\n</ul>"},{"layout":"post","title":"手动内存管理转ARC项目实战","date":"2014-10-13T08:10:05.000Z","comments":1,"keywords":"ARC, iOS, MRC, 手动内存管理","_content":"\n在ARC之前，iOS内存管理无论对资深级还是菜鸟级开发者来说都是一件很头疼的事。我参加过几个使用手动内存管理的项目，印象最深刻的是一个地图类应用，由于应用本身就非常耗内存，当时为了解决内存泄露问题，每周都安排有人值班用Instruments挨个跑功能，关键是每次都总能检查出来不少。其实不管是菜鸟级还是资深级开发者都避免不了写出内存泄露的代码，规则大家都懂，可是天知道什么时候手一抖就少写了个release？\n\n好在项目决定转成ARC了，下面将自己转换的过程和中间遇到的问题写出来和大家共享，希望能减少大家解决同类问题的时间。\n\n<!-- more -->\n\n## 一、前言\n\n#### 项目简介\n\n需要转换的Objective-C文件数量：1000个左右。\n\n开发工具：Xcode 6.0.1\n\n#### 转换方式\n\n我使用的是Xcode本身提供的ARC转换功能。当然你也可以手动手动转换，那不属于本文范畴，而且其工作量绝对能让你崩溃。\n\n## 二、转换过程\n\n#### 代码备份\n\n在进行如此大规模的更改之前，一定要先进行代码备份：直接在本地将代码复制一份，或者记住更改前代码在VCS上的版本号。\n\n#### 过滤无需转换的文件\n\n找出项目中引用的仍使用手动内存管理的第三方库，或者某些你不希望转换的文件，对其添加`-fno-objc-arc`标记。\n\nXcode自动转换工具只针对Objective-C对象，只会处理`Objective-C/Objective-C++`即后缀名为`.m/.mm`的两种文件，因此其他的`C/C++`对应的`.c/.cpp`都无需理会。\n\n#### 执行检查操作\n\n使用Xcode转换工具入口如图所示：\n\n![refactor](/images/article8/refactor.png)\n\n点击`Convert to Objective-C ARC`后会进入检查操作入口，如图：\n\n![check](/images/article8/check.png)\n\n该步骤要选择哪些文件需要转换，如果前面将无需转换的文件都添加了`-fno-objc-arc`标记后，这里可以全选。\n\n点击check按钮后Xcode会帮助我们检查代码中存在的不符合ARC使用规则的错误或警告，只有所有的错误都解决以后才能执行真正的转换操作。\n\n#### 解决错误/告警\n\n执行完check操作后，会给出提示：\n\n![error](/images/article8/error.png)\n\n三百多个错误，同时还有一千两百多个警告信息，都要哭了。。。\n\n错误和警告的解决内容较多，后面会单独介绍。\n\n#### 执行转换操作\n\n解决完所有的error后，会弹出下述提示界面：\n\n![notice](/images/article8/notice.png)\n\n大意是Xcode将要将你的工程转换成使用ARC管理内存，所有更改的代码在真正更改之前会在一个review界面展示。同时所有的更改完成以后，Xcode会讲项目Target对应的工程设置的使用ARC设置（`Objective-C Automatic Reference Counting`）会被置成YES（上图右上角的警告标识就是在告诉我们项目已经支持ARC了，但工程中有文件还不支持）：\n\n![use_arc](/images/article8/use_arc.png)\n\n这时离成功就不远了，胜利在望！\n\n点击next按钮后跳转到review界面，样式类似于使用Xcode提交SVN的确认提交界面，如下图所示：\n\n![review](/images/article8/review.png)\n\n该界面列出了所有需要有代码更改的文件，同时能够直接对比转换前和转换后的代码变化。为了稳妥起见，我选择了每个文件都点进去扫了一眼，这也给我们一次机会检查是否漏掉了不能转换的文件。\r\r确定一切无误以后，点击右下角的save按钮，一切就大功告成了！\n\n\n## 错误/警告解决\n\n\n#### 错误 \n\n* ARC forbids synthesizing a property of an Objective-C object with unspecified ownership or storage attribute\n\n![readonly_error](/images/article8/readonly_error.png)\n\nproperty属性必须指定一个内存管理关键字，在属性定义处增加strong关键字即可。\n\n* ARC forbids explicit message send of 'release'\n\n![release_error](/images/article8/release_error.png)\n\n这种情况通常是使用包含release的宏定义，将该宏和使用该宏的地方删除即可。\n\n* Init methods must return a type related to the receiver type\n\n![init_return_type](/images/article8/init_return_type.png)\n\n错误原因是A类里的一个方法以init开头，而且返回的是B类型，好吧，乖乖改方法名。\n\n* Cast of C pointer type 'ivPointer' (aka 'void *') to Objective-C pointer type 'iFlyTTSManager_old *' requires a bridged cast\n\n![cast_pointer_objective-c](/images/article8/cast_pointer_objective-c.png)\n\n这是`Toll-Free Bridging`转换问题，在ARC下根据情况使用对应的转换关键字就行了，后文会专门介绍。\n\n\n#### 警告\n\n解决警告的目的是消除警告处代码存在的隐患，既然Xcode给了提示，那么每一个警告信息都值得我们认真对待。\n\n* Capturing `self` in this block is likely to lead to a retain cycle\n\n![block_capturing_self](/images/article8/block_capturing_self.png)\n\n这是典型的block循环引用问题，将block中的self改成使用指向self的weak指针即可。\n\n\n* Using 'initWithArray:' with a literal is redundant\n\n![literal_is_redundant](/images/article8/literal_is_redundant.png)\n\n好吧，原来是没必要的alloc操作，直接按Xcode提示将alloc删除即可：\n\n![literal_is_redundant_fix.png](/images/article8/literal_is_redundant_fix.png)\n\n* Init methods must return a type related to the receiver type\n\n![init_methods.png](/images/article8/init_methods.png)\n\n原来是A类里的一个方法以init开头，而且返回的是B类型，好吧，乖乖改方法名。\n\n* Property follows Cocoa naming convention for returning ‘owned’ objects\n\n![property_follows.png](/images/article8/property_follows.png)\n\n这是因为@property属性的命名以new开头了，可恶。。。修改方法是将对应的getter方法改成非new开头命名的：\n\n![property_follows_fix.png](/images/article8/property_follows_fix.png)\n\nARC下方法名如果是以new/alloc/init等开头的，而且还不是类的初始化方法，就该小心了，要么报错，要么警告，原因你懂的。\n\n* Block implicitly retains 'self'; explicitly mention 'self' to indicate this is intended behavior\n\n![block_implicitly_retains.png](/images/article8/block_implicitly_retains.png)\n\n意思是block中使用了self的实例变量_selectedModeMarkerView，因此block会隐式的retain住self。Xcode认为这可能会给开发者造成困惑，或者因此而因袭循环引用，所以警告我们要显示的在block中使用self，以达到block显示retain住self的目的。\n\n该警告有两种改法：\n\r①按照Xcode提示，改成self->_selectedModeMarkerView：\n\n![block_implicitly_retains_fix1.png](/images/article8/block_implicitly_retains_fix1.png)\n\n②直接将该警告关闭\n\r警告名称为：`Implicit retain of ‘self’ within blocks`\n\r对应的Clang关键字是：`-Wimplicit-retain-self`\n\n![block_implicitly_retains_fix2.png](/images/article8/block_implicitly_retains_fix2.png)\n\n* Weak property may be unpredictably set to nil 和 Weak property 'delegate' is accessed multiple times in this method but may be unpredictably set to nil; assign to a strong variable to keep the object alive\n\n![weak_property_unpredictably.png](/images/article8/weak_property_unpredictably.png)\n\n这是工程中数目最多的警告，这是因为所有的delegate属性都是weak的，Xcode默认开启了下图中的两个警告设置，将其关闭即可：\n\n![weak_property_unpredictably_fix.png](/images/article8/weak_property_unpredictably_fix.png)\n\n* Capturing 'self' strongly in this block is likely to lead to a retain cycle\n\n![retain_cycle.png](/images/article8/retain_cycle.png)\n\n这是明显的block导致循环引用内存泄露的情况，之前代码中坑啊！修改方案：\n\n![retain_cycle_fix.png](/images/article8/retain_cycle_fix.png)\n\n* Method parameter of type 'NSError *__autoreleasing *' with no explicit ownership\n\n![autorelease_error.png](/images/article8/autorelease_error.png)\n\n这种就不用说了，按警告中的提示添加`__autoreleasing`关键字即可。\n\n\n以上列出的错误和警告只是数量较多的，还有很多其他就不在这里一一列举了。\n\n另外，推荐  [Mattt Thompson](https://twitter.com/mattt) 大神关于Clang中几乎所有warning的名称和对应报错提示语的网站：[http://fuckingclangwarnings.com/](http://fuckingclangwarnings.com/)，以后解决warning类问题就简单多了！\n\n## Xcode自动转换\n\n#### 关键字转换\n\nXcode会自动将某些关键字自动转换成ARC的对应版本。\n\n* retain自动转成strong，如图：\n\n![retain_strong.png](/images/article8/retain_strong.png)\n\n* assign关键字转成weak\n\n修饰Objective-C对象或者id类型对象的assign关键字会被转成weak，如图：\n\n![assign_weak.png](/images/article8/assign_weak.png)\n\n但是修饰Int/bool等数值型变量的assign不会自动转换成weak，如图：\n\n![assign_not_weak.png](/images/article8/assign_not_weak.png)\n\n\n#### 关键字删除\n\n和手动内存管理相关的几个关键字，比如：`release/retain/autorelease/super dealloc`等会被删除；\n\ndealloc方法中如果除了release/super dealloc语句外，如果别的代码，dealloc方法会保留,如图：\n\n![retain_dealloc.png](/images/article8/retain_dealloc.png)\n\n如果没有整个方法都会被删除：\n\n![delete_dealloc.png](/images/article8/delete_dealloc.png)\n\n#### 关键字替换\n\n* 在转换时__block关键字会被自动替换成__weak：\n\n![block_weak.png](/images/article8/block_weak.png)\n\n* @autoreleasepool\n\nNSAutoreleasePool不支持ARC，会被替换成@autoreleasepool：\n\n![autoreleasepool.png](/images/article8/autoreleasepool.png)\n\n\n#### 关于被宏注释代码\n\n* 使用宏定义的对象释放代码\n\n宏定义如下所示：\n\n```objective-c\n#define RELEASE_SAFELY(__POINTER) { \\\n[(__POINTER) release]; (__POINTER) = nil; }\n```\n在执行ARC转换检查操作时，Xcode会在使用该宏的地方报错：\n\n![release_error.png](/images/article8/release_error.png)\n\n将该宏和使用该宏的地方删除即可。\n\n\n* 被宏注释掉的代码，Xcode在转换时是不会处理的，如图：\n\n![marco_arc.png](/images/article8/marco_arc.png)\n\nPS：这是相当坑的一点，因为你根本预料不到工程中使用了多少宏，注释掉了多少代码。当你执行完转换操作，以为就大功告成的时候，却在某天因为一个宏的开启遇到了一堆新的转ARC不彻底的问题。这种问题也没招，只能遇到一个改一个了。\n\n\n## ARC和block\n\n不管是手动内存管理还是ARC，block循环引用导致的内存泄露都是一个令人头疼的问题。在MRC中，解决block循环引用只需要使用__block关键字，在ARC下解决与block的使用就略显复杂了：\n\n#### __block关键字\n\n* block内修改外部定义变量\n\n和手动内存管理一样，ARC如果在block中需要修改block之外定义的变量需要使用`__block`关键字修饰，比如：\n\n```objective-c\n__block NSString *name = @\"foggry\";\nself.expireCostLabel.completionBlock = ^(){\n    name = @\"wangzz\";\n};\n```\n\n上例中name变量需要在block中修改，因此必须使用__block关键字。\n\n* __block在MRC和ARC中的区别\n\n在ARC下的block中使用__block关键字修饰的对象时，block会retain该对象；而在MRC下却不会retain。关于这点在官方文档[Transitioning to ARC Release Notes](https://developer.apple.com/library/ios/releasenotes/objectivec/rn-transitioningtoarc/introduction/introduction.html)中有详细的描述：\n\n>\nIn manual reference counting mode, __block id x; has the effect of not retaining x. \nIn ARC mode, __block id x; defaults to retaining x (just like all other values). \n>\n\n下面的代码不管在MRC还是ARC中`myController`对象都是有内存泄露的：\n\n```objective-c\nMyViewController *myController = [[MyViewController alloc] init…];\n// ...\nmyController.completionHandler =  ^(NSInteger result) {\n   [myController dismissViewControllerAnimated:YES completion:nil];\n};\n```\n\n内存泄露问题在MRC中可以按如下方式更改：\n\n```objective-c\nMyViewController * __block myController = [[MyViewController alloc] init…];  \n// ...  \nmyController.completionHandler =  ^(NSInteger result) {  \n    [myController dismissViewControllerAnimated:YES completion:nil];  \n}; \n```\n\n然而在ARC中这么改就不行了。正如开始所说的那样，在ARC中`myController.completionHandler`的block会retain`myController`对象，使得内存泄露问题仍然存在！！\n\n在ARC中该问题有两种解决方案，第一种：\n\n```objective-c\nMyViewController * __block myController = [[MyViewController alloc] init…];  \n// ...  \nmyController.completionHandler =  ^(NSInteger result) {  \n    [myController dismissViewControllerAnimated:YES completion:nil];  \n    myController = nil;  \n}; \n```\n该方法在block中使用完myController时，是它指向nil。没有strong类型的指针指向myController指向的对象时，对象会被释放掉。\n\n第二种种解决方案，直接使用__weak代替__block关键字：\n\n```objective-c\nMyViewController *myController = [[MyViewController alloc] init…];  \n// ...  \nMyViewController * __weak weakMyViewController = myController;  \nmyController.completionHandler =  ^(NSInteger result) {  \n    [weakMyViewController dismissViewControllerAnimated:YES completion:nil];  \n};\n```\n该方法直接避免了对block对myController对象的retain。\n\n#### 存在循环引用关系\n\n如果self直接或者间接的对block存在强引用，在block中又需要使用self关键字，此时self和block就存在循环引用的关系。此时必须使用__weak关键字定义一个指针指向self，在block中使用该指针来引用self：\n\n```objective-c\nMessageListController * __weak weakSelf = self;\nself.messageLogic.loadMoreBlock = ^(IcarMessage * theMessage) {\n    [weakSelf.tableView setPullTableIsLoadingMore:YES];\n};\n```\n\n需要说明的是，尽管上例中weakSelf指针对self只是弱引用，但是self对block却是强引用，self的生命周期一定是长于block的，因此不用担心在block中使用weakSelf指针时，其指向的self会被释放掉。\n\n\n#### 不存在循环引用关系\n\n下面的例子：\n\n```objective-c\nMyViewController *myController = [[MyViewController alloc] init…];\n// ...\nMyViewController * __weak weakMyController = myController;\nmyController.completionHandler =  ^(NSInteger result) {\n    MyViewController *strongMyController = weakMyController;\n    if (strongMyController) {\n        // ...\n        [strongMyController dismissViewControllerAnimated:YES completion:nil];\n        // ...\n    }\n    else {\n        // Probably nothing...\n    }\n};\n```\n\n如前面所说，`myController.completionHandler`的block中不能直接使用`myController`对象，会造成内存泄露，因此需要先用一个weak的指针指向`myController`对象，然后在block中使用该weak指针。但是为了确保在block执行的时候`myController`对象没有被释放掉，就在block一开始的地方定义了一个临时的strong类型的指针`strongMyController`指向weak指针`weakMyController`，其实最终的结果就是block中对`myController`对象强引用了。在block执行完被销毁的时候，`strongMyController`指针变量会被销毁，其最终指向的`myController`对象因此也会被销毁。这样在使用一个对象的时候做就保证了该对象是存在的，使用完了再放弃该对象的所有权。\n\n\n## ARC和Toll-Free Bridging\n\nMRC下的`Toll-FreeBridging`不涉及内存管理的转移，Objective-C（后文简称OC）和Core Foundation（后文简称CF）各自管理各自的内存,相互之间可以直接交换使用，比如：\n\n```objective-c\nNSLocale *gbNSLocale = [[NSLocale alloc] initWithLocaleIdentifier:@\"en_GB\"];\nCFLocaleRef gbCFLocale = (CFLocaleRef)gbNSLocale;\n```\n\n而在ARC下,事情就会变得复杂一些。因为ARC能够管理OC对象的内存,却不能管理CF对象,CF对象依然需要我们手动管理内存。在CF和OC之间bridge对象的时候,问题就出现了,编译器不知道该如何处理这个同时有OC指针和CF指针指向的对象。\r这时候,需要使用`__bridge`, `__bridge_retained`, `__bridge_transfer`等修饰符来告诉编译器该如何去做。\n\n* __bridge\n\n该关键字在桥接过程中不会增加被桥接对象的引用计数，比如：\n\n```objective-c\nCFStringRef cfString = CFStringCreateWithCString(kCFAllocatorDefault, \"CFString\", kCFStringEncodingUTF8);\nNSString *ocString = (__bridge NSString *)cfString;\nCFRelease(cfString);\nNSLog(@\"%@\",ocString);\n```\n\n由于ARC下`NSString *ocString`定义的对象指针默认是strong的，所以在执行`CFRelease(cfString);`后`ocString `指针还持有桥接过来的对象，`ocString`指针仍能正常使用。但如果做出如下改动：\n\n```objective-c\nCFStringRef cfString = CFStringCreateWithCString(kCFAllocatorDefault, \"CFString\", kCFStringEncodingUTF8);\n__weak NSString *ocString = (__bridge NSString *)cfString;\nCFRelease(cfString);\nNSLog(@\"###%@\",ocString);\n```\n\n即将定义方式改成`__weak NSString *ocString`，在执行`CFRelease(cfString);`后`ocString`将因不再持有被桥接对象所有权而无法正常使用。\n\n反之从OC对象桥接到CF对象也是一个道理，该关键字有点像`__weak`关键字的作用。\n\n* __bridge_retained 或 CFBridgingRetain\n\n二者作用是一样的，只是用法不同。\n\n该关键字在桥接的过程中会retain被桥接对象，相当于桥接方也持有了被桥接对象。需要注意的是，如果是CF对象桥接到OC对象，编译器会做好OC对象的内存管理工作；但如果是OC对象桥接到CF对象，那么CF需要执行内存释放操作，如下例所示：\n\n```objective-c\nNSArray *ocArray = [[NSArray alloc] initWithObjects:@\"foggry\", nil];\nCFArrayRef cfArray = (__bridge_retained CFArrayRef)ocArray;\n/**\n 使用cfArray\n **/\nCFRelease(cfArray);\n```\n\n* __bridge_transfer 或 CFBridgingRelease\n\n二者作用也是一样的，只是用法不同。\n\n该关键字将对象所有权由被桥接对象转移给了桥接对象，比如：\n\n```objective-c\nCFStringRef cfString = CFStringCreateWithCString(kCFAllocatorDefault, \"CFString\", kCFStringEncodingUTF8);\nNSString *ocString = (__bridge_transfer NSString *)cfString;\n//CFRelease(cfString); //不再需要释放操作\nNSLog(@\"%@\",ocString);\n```\n\n此例中被桥接对象cfString的所有权就转移给了桥接对象ocString。\n\n总之，理解了桥接关键字的作用，桥接转换过程中大家只需要根据具体需求选用适当的关键字即可。\n\n另外，在ARC中`id`和`void *`也不能直接相互转换了，必须通过`Toll-FreeBridging`使用适当的关键字修饰。\n\n## ARC和IBOutLet\n\n对于IBOutLet属性应该用strong还是weak一直都有疑惑。关于这一点[官方文档](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/LoadingResources/CocoaNibs/CocoaNibs.html#//apple_ref/doc/uid/10000051i-CH4-SW6)是这么介绍的：\n\n>\nFrom a practical perspective, in iOS and OS X outlets should be defined as declared properties. Outlets should generally be weak, except for those from File’s Owner to top-level objects in a nib >>>file (or, in iOS, a storyboard scene) which should be strong. Outlets that you create should therefore typically be weak.\n>\n\n那么长的一段英文想说的是：\n\n如果nib文件构建的view是直接被Controller引用的顶层view，对应的IBOutLet属性应该是strong；\n\n如果view是顶层view上的一个子view，那么该view的属性应该是weak，因为顶层view被Controller使用strong属性引用了，而顶层view本身又持有该view；\n\n如果Controller对某个view需要单独引用，或者Controller没有引用某个view的父view，那么其属性也应该是strong。\n\n\n好吧，其实我能说如果你实在懒得区分什么时候用strong，什么时候用weak，那就将所以后的IBOutLet属性都设成strong吧！在Controller销毁的时候，对应的IBOutLet实例变量也会被销毁，strong指针会被置成nil，因此也不会有内存问题。\n\n\n## 参考文档\n\n* [Transitioning to ARC Release Notes](https://developer.apple.com/library/ios/releasenotes/objectivec/rn-transitioningtoarc/introduction/introduction.html)\n* [Managing the Lifetimes of Objects from Nib Files](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/LoadingResources/CocoaNibs/CocoaNibs.html#//apple_ref/doc/uid/10000051i-CH4-SW6)\n* [Nib Memory Management](https://mikeash.com/pyblog/friday-qa-2012-04-13-nib-memory-management.html)\n\n\n","source":"_posts/2014-10-13-shou-dong-nei-cun-guan-li-zhuan-arcxiang-mu-shi-zhan.markdown","raw":"---\nlayout: post\ntitle: \"手动内存管理转ARC项目实战\"\ndate: 2014-10-13 16:10:05 +0800\ncomments: true\ncategories: iOS\ntags: [ARC, iOS, MRC, 手动内存管理]\nkeywords: ARC, iOS, MRC, 手动内存管理\n---\n\n在ARC之前，iOS内存管理无论对资深级还是菜鸟级开发者来说都是一件很头疼的事。我参加过几个使用手动内存管理的项目，印象最深刻的是一个地图类应用，由于应用本身就非常耗内存，当时为了解决内存泄露问题，每周都安排有人值班用Instruments挨个跑功能，关键是每次都总能检查出来不少。其实不管是菜鸟级还是资深级开发者都避免不了写出内存泄露的代码，规则大家都懂，可是天知道什么时候手一抖就少写了个release？\n\n好在项目决定转成ARC了，下面将自己转换的过程和中间遇到的问题写出来和大家共享，希望能减少大家解决同类问题的时间。\n\n<!-- more -->\n\n## 一、前言\n\n#### 项目简介\n\n需要转换的Objective-C文件数量：1000个左右。\n\n开发工具：Xcode 6.0.1\n\n#### 转换方式\n\n我使用的是Xcode本身提供的ARC转换功能。当然你也可以手动手动转换，那不属于本文范畴，而且其工作量绝对能让你崩溃。\n\n## 二、转换过程\n\n#### 代码备份\n\n在进行如此大规模的更改之前，一定要先进行代码备份：直接在本地将代码复制一份，或者记住更改前代码在VCS上的版本号。\n\n#### 过滤无需转换的文件\n\n找出项目中引用的仍使用手动内存管理的第三方库，或者某些你不希望转换的文件，对其添加`-fno-objc-arc`标记。\n\nXcode自动转换工具只针对Objective-C对象，只会处理`Objective-C/Objective-C++`即后缀名为`.m/.mm`的两种文件，因此其他的`C/C++`对应的`.c/.cpp`都无需理会。\n\n#### 执行检查操作\n\n使用Xcode转换工具入口如图所示：\n\n![refactor](/images/article8/refactor.png)\n\n点击`Convert to Objective-C ARC`后会进入检查操作入口，如图：\n\n![check](/images/article8/check.png)\n\n该步骤要选择哪些文件需要转换，如果前面将无需转换的文件都添加了`-fno-objc-arc`标记后，这里可以全选。\n\n点击check按钮后Xcode会帮助我们检查代码中存在的不符合ARC使用规则的错误或警告，只有所有的错误都解决以后才能执行真正的转换操作。\n\n#### 解决错误/告警\n\n执行完check操作后，会给出提示：\n\n![error](/images/article8/error.png)\n\n三百多个错误，同时还有一千两百多个警告信息，都要哭了。。。\n\n错误和警告的解决内容较多，后面会单独介绍。\n\n#### 执行转换操作\n\n解决完所有的error后，会弹出下述提示界面：\n\n![notice](/images/article8/notice.png)\n\n大意是Xcode将要将你的工程转换成使用ARC管理内存，所有更改的代码在真正更改之前会在一个review界面展示。同时所有的更改完成以后，Xcode会讲项目Target对应的工程设置的使用ARC设置（`Objective-C Automatic Reference Counting`）会被置成YES（上图右上角的警告标识就是在告诉我们项目已经支持ARC了，但工程中有文件还不支持）：\n\n![use_arc](/images/article8/use_arc.png)\n\n这时离成功就不远了，胜利在望！\n\n点击next按钮后跳转到review界面，样式类似于使用Xcode提交SVN的确认提交界面，如下图所示：\n\n![review](/images/article8/review.png)\n\n该界面列出了所有需要有代码更改的文件，同时能够直接对比转换前和转换后的代码变化。为了稳妥起见，我选择了每个文件都点进去扫了一眼，这也给我们一次机会检查是否漏掉了不能转换的文件。\r\r确定一切无误以后，点击右下角的save按钮，一切就大功告成了！\n\n\n## 错误/警告解决\n\n\n#### 错误 \n\n* ARC forbids synthesizing a property of an Objective-C object with unspecified ownership or storage attribute\n\n![readonly_error](/images/article8/readonly_error.png)\n\nproperty属性必须指定一个内存管理关键字，在属性定义处增加strong关键字即可。\n\n* ARC forbids explicit message send of 'release'\n\n![release_error](/images/article8/release_error.png)\n\n这种情况通常是使用包含release的宏定义，将该宏和使用该宏的地方删除即可。\n\n* Init methods must return a type related to the receiver type\n\n![init_return_type](/images/article8/init_return_type.png)\n\n错误原因是A类里的一个方法以init开头，而且返回的是B类型，好吧，乖乖改方法名。\n\n* Cast of C pointer type 'ivPointer' (aka 'void *') to Objective-C pointer type 'iFlyTTSManager_old *' requires a bridged cast\n\n![cast_pointer_objective-c](/images/article8/cast_pointer_objective-c.png)\n\n这是`Toll-Free Bridging`转换问题，在ARC下根据情况使用对应的转换关键字就行了，后文会专门介绍。\n\n\n#### 警告\n\n解决警告的目的是消除警告处代码存在的隐患，既然Xcode给了提示，那么每一个警告信息都值得我们认真对待。\n\n* Capturing `self` in this block is likely to lead to a retain cycle\n\n![block_capturing_self](/images/article8/block_capturing_self.png)\n\n这是典型的block循环引用问题，将block中的self改成使用指向self的weak指针即可。\n\n\n* Using 'initWithArray:' with a literal is redundant\n\n![literal_is_redundant](/images/article8/literal_is_redundant.png)\n\n好吧，原来是没必要的alloc操作，直接按Xcode提示将alloc删除即可：\n\n![literal_is_redundant_fix.png](/images/article8/literal_is_redundant_fix.png)\n\n* Init methods must return a type related to the receiver type\n\n![init_methods.png](/images/article8/init_methods.png)\n\n原来是A类里的一个方法以init开头，而且返回的是B类型，好吧，乖乖改方法名。\n\n* Property follows Cocoa naming convention for returning ‘owned’ objects\n\n![property_follows.png](/images/article8/property_follows.png)\n\n这是因为@property属性的命名以new开头了，可恶。。。修改方法是将对应的getter方法改成非new开头命名的：\n\n![property_follows_fix.png](/images/article8/property_follows_fix.png)\n\nARC下方法名如果是以new/alloc/init等开头的，而且还不是类的初始化方法，就该小心了，要么报错，要么警告，原因你懂的。\n\n* Block implicitly retains 'self'; explicitly mention 'self' to indicate this is intended behavior\n\n![block_implicitly_retains.png](/images/article8/block_implicitly_retains.png)\n\n意思是block中使用了self的实例变量_selectedModeMarkerView，因此block会隐式的retain住self。Xcode认为这可能会给开发者造成困惑，或者因此而因袭循环引用，所以警告我们要显示的在block中使用self，以达到block显示retain住self的目的。\n\n该警告有两种改法：\n\r①按照Xcode提示，改成self->_selectedModeMarkerView：\n\n![block_implicitly_retains_fix1.png](/images/article8/block_implicitly_retains_fix1.png)\n\n②直接将该警告关闭\n\r警告名称为：`Implicit retain of ‘self’ within blocks`\n\r对应的Clang关键字是：`-Wimplicit-retain-self`\n\n![block_implicitly_retains_fix2.png](/images/article8/block_implicitly_retains_fix2.png)\n\n* Weak property may be unpredictably set to nil 和 Weak property 'delegate' is accessed multiple times in this method but may be unpredictably set to nil; assign to a strong variable to keep the object alive\n\n![weak_property_unpredictably.png](/images/article8/weak_property_unpredictably.png)\n\n这是工程中数目最多的警告，这是因为所有的delegate属性都是weak的，Xcode默认开启了下图中的两个警告设置，将其关闭即可：\n\n![weak_property_unpredictably_fix.png](/images/article8/weak_property_unpredictably_fix.png)\n\n* Capturing 'self' strongly in this block is likely to lead to a retain cycle\n\n![retain_cycle.png](/images/article8/retain_cycle.png)\n\n这是明显的block导致循环引用内存泄露的情况，之前代码中坑啊！修改方案：\n\n![retain_cycle_fix.png](/images/article8/retain_cycle_fix.png)\n\n* Method parameter of type 'NSError *__autoreleasing *' with no explicit ownership\n\n![autorelease_error.png](/images/article8/autorelease_error.png)\n\n这种就不用说了，按警告中的提示添加`__autoreleasing`关键字即可。\n\n\n以上列出的错误和警告只是数量较多的，还有很多其他就不在这里一一列举了。\n\n另外，推荐  [Mattt Thompson](https://twitter.com/mattt) 大神关于Clang中几乎所有warning的名称和对应报错提示语的网站：[http://fuckingclangwarnings.com/](http://fuckingclangwarnings.com/)，以后解决warning类问题就简单多了！\n\n## Xcode自动转换\n\n#### 关键字转换\n\nXcode会自动将某些关键字自动转换成ARC的对应版本。\n\n* retain自动转成strong，如图：\n\n![retain_strong.png](/images/article8/retain_strong.png)\n\n* assign关键字转成weak\n\n修饰Objective-C对象或者id类型对象的assign关键字会被转成weak，如图：\n\n![assign_weak.png](/images/article8/assign_weak.png)\n\n但是修饰Int/bool等数值型变量的assign不会自动转换成weak，如图：\n\n![assign_not_weak.png](/images/article8/assign_not_weak.png)\n\n\n#### 关键字删除\n\n和手动内存管理相关的几个关键字，比如：`release/retain/autorelease/super dealloc`等会被删除；\n\ndealloc方法中如果除了release/super dealloc语句外，如果别的代码，dealloc方法会保留,如图：\n\n![retain_dealloc.png](/images/article8/retain_dealloc.png)\n\n如果没有整个方法都会被删除：\n\n![delete_dealloc.png](/images/article8/delete_dealloc.png)\n\n#### 关键字替换\n\n* 在转换时__block关键字会被自动替换成__weak：\n\n![block_weak.png](/images/article8/block_weak.png)\n\n* @autoreleasepool\n\nNSAutoreleasePool不支持ARC，会被替换成@autoreleasepool：\n\n![autoreleasepool.png](/images/article8/autoreleasepool.png)\n\n\n#### 关于被宏注释代码\n\n* 使用宏定义的对象释放代码\n\n宏定义如下所示：\n\n```objective-c\n#define RELEASE_SAFELY(__POINTER) { \\\n[(__POINTER) release]; (__POINTER) = nil; }\n```\n在执行ARC转换检查操作时，Xcode会在使用该宏的地方报错：\n\n![release_error.png](/images/article8/release_error.png)\n\n将该宏和使用该宏的地方删除即可。\n\n\n* 被宏注释掉的代码，Xcode在转换时是不会处理的，如图：\n\n![marco_arc.png](/images/article8/marco_arc.png)\n\nPS：这是相当坑的一点，因为你根本预料不到工程中使用了多少宏，注释掉了多少代码。当你执行完转换操作，以为就大功告成的时候，却在某天因为一个宏的开启遇到了一堆新的转ARC不彻底的问题。这种问题也没招，只能遇到一个改一个了。\n\n\n## ARC和block\n\n不管是手动内存管理还是ARC，block循环引用导致的内存泄露都是一个令人头疼的问题。在MRC中，解决block循环引用只需要使用__block关键字，在ARC下解决与block的使用就略显复杂了：\n\n#### __block关键字\n\n* block内修改外部定义变量\n\n和手动内存管理一样，ARC如果在block中需要修改block之外定义的变量需要使用`__block`关键字修饰，比如：\n\n```objective-c\n__block NSString *name = @\"foggry\";\nself.expireCostLabel.completionBlock = ^(){\n    name = @\"wangzz\";\n};\n```\n\n上例中name变量需要在block中修改，因此必须使用__block关键字。\n\n* __block在MRC和ARC中的区别\n\n在ARC下的block中使用__block关键字修饰的对象时，block会retain该对象；而在MRC下却不会retain。关于这点在官方文档[Transitioning to ARC Release Notes](https://developer.apple.com/library/ios/releasenotes/objectivec/rn-transitioningtoarc/introduction/introduction.html)中有详细的描述：\n\n>\nIn manual reference counting mode, __block id x; has the effect of not retaining x. \nIn ARC mode, __block id x; defaults to retaining x (just like all other values). \n>\n\n下面的代码不管在MRC还是ARC中`myController`对象都是有内存泄露的：\n\n```objective-c\nMyViewController *myController = [[MyViewController alloc] init…];\n// ...\nmyController.completionHandler =  ^(NSInteger result) {\n   [myController dismissViewControllerAnimated:YES completion:nil];\n};\n```\n\n内存泄露问题在MRC中可以按如下方式更改：\n\n```objective-c\nMyViewController * __block myController = [[MyViewController alloc] init…];  \n// ...  \nmyController.completionHandler =  ^(NSInteger result) {  \n    [myController dismissViewControllerAnimated:YES completion:nil];  \n}; \n```\n\n然而在ARC中这么改就不行了。正如开始所说的那样，在ARC中`myController.completionHandler`的block会retain`myController`对象，使得内存泄露问题仍然存在！！\n\n在ARC中该问题有两种解决方案，第一种：\n\n```objective-c\nMyViewController * __block myController = [[MyViewController alloc] init…];  \n// ...  \nmyController.completionHandler =  ^(NSInteger result) {  \n    [myController dismissViewControllerAnimated:YES completion:nil];  \n    myController = nil;  \n}; \n```\n该方法在block中使用完myController时，是它指向nil。没有strong类型的指针指向myController指向的对象时，对象会被释放掉。\n\n第二种种解决方案，直接使用__weak代替__block关键字：\n\n```objective-c\nMyViewController *myController = [[MyViewController alloc] init…];  \n// ...  \nMyViewController * __weak weakMyViewController = myController;  \nmyController.completionHandler =  ^(NSInteger result) {  \n    [weakMyViewController dismissViewControllerAnimated:YES completion:nil];  \n};\n```\n该方法直接避免了对block对myController对象的retain。\n\n#### 存在循环引用关系\n\n如果self直接或者间接的对block存在强引用，在block中又需要使用self关键字，此时self和block就存在循环引用的关系。此时必须使用__weak关键字定义一个指针指向self，在block中使用该指针来引用self：\n\n```objective-c\nMessageListController * __weak weakSelf = self;\nself.messageLogic.loadMoreBlock = ^(IcarMessage * theMessage) {\n    [weakSelf.tableView setPullTableIsLoadingMore:YES];\n};\n```\n\n需要说明的是，尽管上例中weakSelf指针对self只是弱引用，但是self对block却是强引用，self的生命周期一定是长于block的，因此不用担心在block中使用weakSelf指针时，其指向的self会被释放掉。\n\n\n#### 不存在循环引用关系\n\n下面的例子：\n\n```objective-c\nMyViewController *myController = [[MyViewController alloc] init…];\n// ...\nMyViewController * __weak weakMyController = myController;\nmyController.completionHandler =  ^(NSInteger result) {\n    MyViewController *strongMyController = weakMyController;\n    if (strongMyController) {\n        // ...\n        [strongMyController dismissViewControllerAnimated:YES completion:nil];\n        // ...\n    }\n    else {\n        // Probably nothing...\n    }\n};\n```\n\n如前面所说，`myController.completionHandler`的block中不能直接使用`myController`对象，会造成内存泄露，因此需要先用一个weak的指针指向`myController`对象，然后在block中使用该weak指针。但是为了确保在block执行的时候`myController`对象没有被释放掉，就在block一开始的地方定义了一个临时的strong类型的指针`strongMyController`指向weak指针`weakMyController`，其实最终的结果就是block中对`myController`对象强引用了。在block执行完被销毁的时候，`strongMyController`指针变量会被销毁，其最终指向的`myController`对象因此也会被销毁。这样在使用一个对象的时候做就保证了该对象是存在的，使用完了再放弃该对象的所有权。\n\n\n## ARC和Toll-Free Bridging\n\nMRC下的`Toll-FreeBridging`不涉及内存管理的转移，Objective-C（后文简称OC）和Core Foundation（后文简称CF）各自管理各自的内存,相互之间可以直接交换使用，比如：\n\n```objective-c\nNSLocale *gbNSLocale = [[NSLocale alloc] initWithLocaleIdentifier:@\"en_GB\"];\nCFLocaleRef gbCFLocale = (CFLocaleRef)gbNSLocale;\n```\n\n而在ARC下,事情就会变得复杂一些。因为ARC能够管理OC对象的内存,却不能管理CF对象,CF对象依然需要我们手动管理内存。在CF和OC之间bridge对象的时候,问题就出现了,编译器不知道该如何处理这个同时有OC指针和CF指针指向的对象。\r这时候,需要使用`__bridge`, `__bridge_retained`, `__bridge_transfer`等修饰符来告诉编译器该如何去做。\n\n* __bridge\n\n该关键字在桥接过程中不会增加被桥接对象的引用计数，比如：\n\n```objective-c\nCFStringRef cfString = CFStringCreateWithCString(kCFAllocatorDefault, \"CFString\", kCFStringEncodingUTF8);\nNSString *ocString = (__bridge NSString *)cfString;\nCFRelease(cfString);\nNSLog(@\"%@\",ocString);\n```\n\n由于ARC下`NSString *ocString`定义的对象指针默认是strong的，所以在执行`CFRelease(cfString);`后`ocString `指针还持有桥接过来的对象，`ocString`指针仍能正常使用。但如果做出如下改动：\n\n```objective-c\nCFStringRef cfString = CFStringCreateWithCString(kCFAllocatorDefault, \"CFString\", kCFStringEncodingUTF8);\n__weak NSString *ocString = (__bridge NSString *)cfString;\nCFRelease(cfString);\nNSLog(@\"###%@\",ocString);\n```\n\n即将定义方式改成`__weak NSString *ocString`，在执行`CFRelease(cfString);`后`ocString`将因不再持有被桥接对象所有权而无法正常使用。\n\n反之从OC对象桥接到CF对象也是一个道理，该关键字有点像`__weak`关键字的作用。\n\n* __bridge_retained 或 CFBridgingRetain\n\n二者作用是一样的，只是用法不同。\n\n该关键字在桥接的过程中会retain被桥接对象，相当于桥接方也持有了被桥接对象。需要注意的是，如果是CF对象桥接到OC对象，编译器会做好OC对象的内存管理工作；但如果是OC对象桥接到CF对象，那么CF需要执行内存释放操作，如下例所示：\n\n```objective-c\nNSArray *ocArray = [[NSArray alloc] initWithObjects:@\"foggry\", nil];\nCFArrayRef cfArray = (__bridge_retained CFArrayRef)ocArray;\n/**\n 使用cfArray\n **/\nCFRelease(cfArray);\n```\n\n* __bridge_transfer 或 CFBridgingRelease\n\n二者作用也是一样的，只是用法不同。\n\n该关键字将对象所有权由被桥接对象转移给了桥接对象，比如：\n\n```objective-c\nCFStringRef cfString = CFStringCreateWithCString(kCFAllocatorDefault, \"CFString\", kCFStringEncodingUTF8);\nNSString *ocString = (__bridge_transfer NSString *)cfString;\n//CFRelease(cfString); //不再需要释放操作\nNSLog(@\"%@\",ocString);\n```\n\n此例中被桥接对象cfString的所有权就转移给了桥接对象ocString。\n\n总之，理解了桥接关键字的作用，桥接转换过程中大家只需要根据具体需求选用适当的关键字即可。\n\n另外，在ARC中`id`和`void *`也不能直接相互转换了，必须通过`Toll-FreeBridging`使用适当的关键字修饰。\n\n## ARC和IBOutLet\n\n对于IBOutLet属性应该用strong还是weak一直都有疑惑。关于这一点[官方文档](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/LoadingResources/CocoaNibs/CocoaNibs.html#//apple_ref/doc/uid/10000051i-CH4-SW6)是这么介绍的：\n\n>\nFrom a practical perspective, in iOS and OS X outlets should be defined as declared properties. Outlets should generally be weak, except for those from File’s Owner to top-level objects in a nib >>>file (or, in iOS, a storyboard scene) which should be strong. Outlets that you create should therefore typically be weak.\n>\n\n那么长的一段英文想说的是：\n\n如果nib文件构建的view是直接被Controller引用的顶层view，对应的IBOutLet属性应该是strong；\n\n如果view是顶层view上的一个子view，那么该view的属性应该是weak，因为顶层view被Controller使用strong属性引用了，而顶层view本身又持有该view；\n\n如果Controller对某个view需要单独引用，或者Controller没有引用某个view的父view，那么其属性也应该是strong。\n\n\n好吧，其实我能说如果你实在懒得区分什么时候用strong，什么时候用weak，那就将所以后的IBOutLet属性都设成strong吧！在Controller销毁的时候，对应的IBOutLet实例变量也会被销毁，strong指针会被置成nil，因此也不会有内存问题。\n\n\n## 参考文档\n\n* [Transitioning to ARC Release Notes](https://developer.apple.com/library/ios/releasenotes/objectivec/rn-transitioningtoarc/introduction/introduction.html)\n* [Managing the Lifetimes of Objects from Nib Files](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/LoadingResources/CocoaNibs/CocoaNibs.html#//apple_ref/doc/uid/10000051i-CH4-SW6)\n* [Nib Memory Management](https://mikeash.com/pyblog/friday-qa-2012-04-13-nib-memory-management.html)\n\n\n","slug":"2014-10-13-shou-dong-nei-cun-guan-li-zhuan-arcxiang-mu-shi-zhan","published":1,"updated":"2019-09-23T12:50:39.000Z","photos":[],"link":"","_id":"ck0zclidf001jqhtfnfks0oe2","content":"<p>在ARC之前，iOS内存管理无论对资深级还是菜鸟级开发者来说都是一件很头疼的事。我参加过几个使用手动内存管理的项目，印象最深刻的是一个地图类应用，由于应用本身就非常耗内存，当时为了解决内存泄露问题，每周都安排有人值班用Instruments挨个跑功能，关键是每次都总能检查出来不少。其实不管是菜鸟级还是资深级开发者都避免不了写出内存泄露的代码，规则大家都懂，可是天知道什么时候手一抖就少写了个release？</p>\n<p>好在项目决定转成ARC了，下面将自己转换的过程和中间遇到的问题写出来和大家共享，希望能减少大家解决同类问题的时间。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><h4 id=\"项目简介\"><a href=\"#项目简介\" class=\"headerlink\" title=\"项目简介\"></a>项目简介</h4><p>需要转换的Objective-C文件数量：1000个左右。</p>\n<p>开发工具：Xcode 6.0.1</p>\n<h4 id=\"转换方式\"><a href=\"#转换方式\" class=\"headerlink\" title=\"转换方式\"></a>转换方式</h4><p>我使用的是Xcode本身提供的ARC转换功能。当然你也可以手动手动转换，那不属于本文范畴，而且其工作量绝对能让你崩溃。</p>\n<h2 id=\"二、转换过程\"><a href=\"#二、转换过程\" class=\"headerlink\" title=\"二、转换过程\"></a>二、转换过程</h2><h4 id=\"代码备份\"><a href=\"#代码备份\" class=\"headerlink\" title=\"代码备份\"></a>代码备份</h4><p>在进行如此大规模的更改之前，一定要先进行代码备份：直接在本地将代码复制一份，或者记住更改前代码在VCS上的版本号。</p>\n<h4 id=\"过滤无需转换的文件\"><a href=\"#过滤无需转换的文件\" class=\"headerlink\" title=\"过滤无需转换的文件\"></a>过滤无需转换的文件</h4><p>找出项目中引用的仍使用手动内存管理的第三方库，或者某些你不希望转换的文件，对其添加<code>-fno-objc-arc</code>标记。</p>\n<p>Xcode自动转换工具只针对Objective-C对象，只会处理<code>Objective-C/Objective-C++</code>即后缀名为<code>.m/.mm</code>的两种文件，因此其他的<code>C/C++</code>对应的<code>.c/.cpp</code>都无需理会。</p>\n<h4 id=\"执行检查操作\"><a href=\"#执行检查操作\" class=\"headerlink\" title=\"执行检查操作\"></a>执行检查操作</h4><p>使用Xcode转换工具入口如图所示：</p>\n<p><img src=\"/images/article8/refactor.png\" alt=\"refactor\"></p>\n<p>点击<code>Convert to Objective-C ARC</code>后会进入检查操作入口，如图：</p>\n<p><img src=\"/images/article8/check.png\" alt=\"check\"></p>\n<p>该步骤要选择哪些文件需要转换，如果前面将无需转换的文件都添加了<code>-fno-objc-arc</code>标记后，这里可以全选。</p>\n<p>点击check按钮后Xcode会帮助我们检查代码中存在的不符合ARC使用规则的错误或警告，只有所有的错误都解决以后才能执行真正的转换操作。</p>\n<h4 id=\"解决错误-告警\"><a href=\"#解决错误-告警\" class=\"headerlink\" title=\"解决错误/告警\"></a>解决错误/告警</h4><p>执行完check操作后，会给出提示：</p>\n<p><img src=\"/images/article8/error.png\" alt=\"error\"></p>\n<p>三百多个错误，同时还有一千两百多个警告信息，都要哭了。。。</p>\n<p>错误和警告的解决内容较多，后面会单独介绍。</p>\n<h4 id=\"执行转换操作\"><a href=\"#执行转换操作\" class=\"headerlink\" title=\"执行转换操作\"></a>执行转换操作</h4><p>解决完所有的error后，会弹出下述提示界面：</p>\n<p><img src=\"/images/article8/notice.png\" alt=\"notice\"></p>\n<p>大意是Xcode将要将你的工程转换成使用ARC管理内存，所有更改的代码在真正更改之前会在一个review界面展示。同时所有的更改完成以后，Xcode会讲项目Target对应的工程设置的使用ARC设置（<code>Objective-C Automatic Reference Counting</code>）会被置成YES（上图右上角的警告标识就是在告诉我们项目已经支持ARC了，但工程中有文件还不支持）：</p>\n<p><img src=\"/images/article8/use_arc.png\" alt=\"use_arc\"></p>\n<p>这时离成功就不远了，胜利在望！</p>\n<p>点击next按钮后跳转到review界面，样式类似于使用Xcode提交SVN的确认提交界面，如下图所示：</p>\n<p><img src=\"/images/article8/review.png\" alt=\"review\"></p>\n<p>该界面列出了所有需要有代码更改的文件，同时能够直接对比转换前和转换后的代码变化。为了稳妥起见，我选择了每个文件都点进去扫了一眼，这也给我们一次机会检查是否漏掉了不能转换的文件。</p>\n<p>确定一切无误以后，点击右下角的save按钮，一切就大功告成了！</p>\n<h2 id=\"错误-警告解决\"><a href=\"#错误-警告解决\" class=\"headerlink\" title=\"错误/警告解决\"></a>错误/警告解决</h2><h4 id=\"错误\"><a href=\"#错误\" class=\"headerlink\" title=\"错误\"></a>错误</h4><ul>\n<li>ARC forbids synthesizing a property of an Objective-C object with unspecified ownership or storage attribute</li>\n</ul>\n<p><img src=\"/images/article8/readonly_error.png\" alt=\"readonly_error\"></p>\n<p>property属性必须指定一个内存管理关键字，在属性定义处增加strong关键字即可。</p>\n<ul>\n<li>ARC forbids explicit message send of ‘release’</li>\n</ul>\n<p><img src=\"/images/article8/release_error.png\" alt=\"release_error\"></p>\n<p>这种情况通常是使用包含release的宏定义，将该宏和使用该宏的地方删除即可。</p>\n<ul>\n<li>Init methods must return a type related to the receiver type</li>\n</ul>\n<p><img src=\"/images/article8/init_return_type.png\" alt=\"init_return_type\"></p>\n<p>错误原因是A类里的一个方法以init开头，而且返回的是B类型，好吧，乖乖改方法名。</p>\n<ul>\n<li>Cast of C pointer type ‘ivPointer’ (aka ‘void *’) to Objective-C pointer type ‘iFlyTTSManager_old *’ requires a bridged cast</li>\n</ul>\n<p><img src=\"/images/article8/cast_pointer_objective-c.png\" alt=\"cast_pointer_objective-c\"></p>\n<p>这是<code>Toll-Free Bridging</code>转换问题，在ARC下根据情况使用对应的转换关键字就行了，后文会专门介绍。</p>\n<h4 id=\"警告\"><a href=\"#警告\" class=\"headerlink\" title=\"警告\"></a>警告</h4><p>解决警告的目的是消除警告处代码存在的隐患，既然Xcode给了提示，那么每一个警告信息都值得我们认真对待。</p>\n<ul>\n<li>Capturing <code>self</code> in this block is likely to lead to a retain cycle</li>\n</ul>\n<p><img src=\"/images/article8/block_capturing_self.png\" alt=\"block_capturing_self\"></p>\n<p>这是典型的block循环引用问题，将block中的self改成使用指向self的weak指针即可。</p>\n<ul>\n<li>Using ‘initWithArray:’ with a literal is redundant</li>\n</ul>\n<p><img src=\"/images/article8/literal_is_redundant.png\" alt=\"literal_is_redundant\"></p>\n<p>好吧，原来是没必要的alloc操作，直接按Xcode提示将alloc删除即可：</p>\n<p><img src=\"/images/article8/literal_is_redundant_fix.png\" alt=\"literal_is_redundant_fix.png\"></p>\n<ul>\n<li>Init methods must return a type related to the receiver type</li>\n</ul>\n<p><img src=\"/images/article8/init_methods.png\" alt=\"init_methods.png\"></p>\n<p>原来是A类里的一个方法以init开头，而且返回的是B类型，好吧，乖乖改方法名。</p>\n<ul>\n<li>Property follows Cocoa naming convention for returning ‘owned’ objects</li>\n</ul>\n<p><img src=\"/images/article8/property_follows.png\" alt=\"property_follows.png\"></p>\n<p>这是因为@property属性的命名以new开头了，可恶。。。修改方法是将对应的getter方法改成非new开头命名的：</p>\n<p><img src=\"/images/article8/property_follows_fix.png\" alt=\"property_follows_fix.png\"></p>\n<p>ARC下方法名如果是以new/alloc/init等开头的，而且还不是类的初始化方法，就该小心了，要么报错，要么警告，原因你懂的。</p>\n<ul>\n<li>Block implicitly retains ‘self’; explicitly mention ‘self’ to indicate this is intended behavior</li>\n</ul>\n<p><img src=\"/images/article8/block_implicitly_retains.png\" alt=\"block_implicitly_retains.png\"></p>\n<p>意思是block中使用了self的实例变量_selectedModeMarkerView，因此block会隐式的retain住self。Xcode认为这可能会给开发者造成困惑，或者因此而因袭循环引用，所以警告我们要显示的在block中使用self，以达到block显示retain住self的目的。</p>\n<p>该警告有两种改法：</p>\n<p>①按照Xcode提示，改成self-&gt;_selectedModeMarkerView：</p>\n<p><img src=\"/images/article8/block_implicitly_retains_fix1.png\" alt=\"block_implicitly_retains_fix1.png\"></p>\n<p>②直接将该警告关闭</p>\n<p>警告名称为：<code>Implicit retain of ‘self’ within blocks</code></p>\n<p>对应的Clang关键字是：<code>-Wimplicit-retain-self</code></p>\n<p><img src=\"/images/article8/block_implicitly_retains_fix2.png\" alt=\"block_implicitly_retains_fix2.png\"></p>\n<ul>\n<li>Weak property may be unpredictably set to nil 和 Weak property ‘delegate’ is accessed multiple times in this method but may be unpredictably set to nil; assign to a strong variable to keep the object alive</li>\n</ul>\n<p><img src=\"/images/article8/weak_property_unpredictably.png\" alt=\"weak_property_unpredictably.png\"></p>\n<p>这是工程中数目最多的警告，这是因为所有的delegate属性都是weak的，Xcode默认开启了下图中的两个警告设置，将其关闭即可：</p>\n<p><img src=\"/images/article8/weak_property_unpredictably_fix.png\" alt=\"weak_property_unpredictably_fix.png\"></p>\n<ul>\n<li>Capturing ‘self’ strongly in this block is likely to lead to a retain cycle</li>\n</ul>\n<p><img src=\"/images/article8/retain_cycle.png\" alt=\"retain_cycle.png\"></p>\n<p>这是明显的block导致循环引用内存泄露的情况，之前代码中坑啊！修改方案：</p>\n<p><img src=\"/images/article8/retain_cycle_fix.png\" alt=\"retain_cycle_fix.png\"></p>\n<ul>\n<li>Method parameter of type ‘NSError *__autoreleasing *’ with no explicit ownership</li>\n</ul>\n<p><img src=\"/images/article8/autorelease_error.png\" alt=\"autorelease_error.png\"></p>\n<p>这种就不用说了，按警告中的提示添加<code>__autoreleasing</code>关键字即可。</p>\n<p>以上列出的错误和警告只是数量较多的，还有很多其他就不在这里一一列举了。</p>\n<p>另外，推荐  <a href=\"https://twitter.com/mattt\" target=\"_blank\" rel=\"noopener\">Mattt Thompson</a> 大神关于Clang中几乎所有warning的名称和对应报错提示语的网站：<a href=\"http://fuckingclangwarnings.com/\" target=\"_blank\" rel=\"noopener\">http://fuckingclangwarnings.com/</a>，以后解决warning类问题就简单多了！</p>\n<h2 id=\"Xcode自动转换\"><a href=\"#Xcode自动转换\" class=\"headerlink\" title=\"Xcode自动转换\"></a>Xcode自动转换</h2><h4 id=\"关键字转换\"><a href=\"#关键字转换\" class=\"headerlink\" title=\"关键字转换\"></a>关键字转换</h4><p>Xcode会自动将某些关键字自动转换成ARC的对应版本。</p>\n<ul>\n<li>retain自动转成strong，如图：</li>\n</ul>\n<p><img src=\"/images/article8/retain_strong.png\" alt=\"retain_strong.png\"></p>\n<ul>\n<li>assign关键字转成weak</li>\n</ul>\n<p>修饰Objective-C对象或者id类型对象的assign关键字会被转成weak，如图：</p>\n<p><img src=\"/images/article8/assign_weak.png\" alt=\"assign_weak.png\"></p>\n<p>但是修饰Int/bool等数值型变量的assign不会自动转换成weak，如图：</p>\n<p><img src=\"/images/article8/assign_not_weak.png\" alt=\"assign_not_weak.png\"></p>\n<h4 id=\"关键字删除\"><a href=\"#关键字删除\" class=\"headerlink\" title=\"关键字删除\"></a>关键字删除</h4><p>和手动内存管理相关的几个关键字，比如：<code>release/retain/autorelease/super dealloc</code>等会被删除；</p>\n<p>dealloc方法中如果除了release/super dealloc语句外，如果别的代码，dealloc方法会保留,如图：</p>\n<p><img src=\"/images/article8/retain_dealloc.png\" alt=\"retain_dealloc.png\"></p>\n<p>如果没有整个方法都会被删除：</p>\n<p><img src=\"/images/article8/delete_dealloc.png\" alt=\"delete_dealloc.png\"></p>\n<h4 id=\"关键字替换\"><a href=\"#关键字替换\" class=\"headerlink\" title=\"关键字替换\"></a>关键字替换</h4><ul>\n<li>在转换时<strong>block关键字会被自动替换成</strong>weak：</li>\n</ul>\n<p><img src=\"/images/article8/block_weak.png\" alt=\"block_weak.png\"></p>\n<ul>\n<li>@autoreleasepool</li>\n</ul>\n<p>NSAutoreleasePool不支持ARC，会被替换成@autoreleasepool：</p>\n<p><img src=\"/images/article8/autoreleasepool.png\" alt=\"autoreleasepool.png\"></p>\n<h4 id=\"关于被宏注释代码\"><a href=\"#关于被宏注释代码\" class=\"headerlink\" title=\"关于被宏注释代码\"></a>关于被宏注释代码</h4><ul>\n<li>使用宏定义的对象释放代码</li>\n</ul>\n<p>宏定义如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define RELEASE_SAFELY(__POINTER) &#123; \\</span><br><span class=\"line\">[(__POINTER) release]; (__POINTER) = nil; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在执行ARC转换检查操作时，Xcode会在使用该宏的地方报错：</p>\n<p><img src=\"/images/article8/release_error.png\" alt=\"release_error.png\"></p>\n<p>将该宏和使用该宏的地方删除即可。</p>\n<ul>\n<li>被宏注释掉的代码，Xcode在转换时是不会处理的，如图：</li>\n</ul>\n<p><img src=\"/images/article8/marco_arc.png\" alt=\"marco_arc.png\"></p>\n<p>PS：这是相当坑的一点，因为你根本预料不到工程中使用了多少宏，注释掉了多少代码。当你执行完转换操作，以为就大功告成的时候，却在某天因为一个宏的开启遇到了一堆新的转ARC不彻底的问题。这种问题也没招，只能遇到一个改一个了。</p>\n<h2 id=\"ARC和block\"><a href=\"#ARC和block\" class=\"headerlink\" title=\"ARC和block\"></a>ARC和block</h2><p>不管是手动内存管理还是ARC，block循环引用导致的内存泄露都是一个令人头疼的问题。在MRC中，解决block循环引用只需要使用__block关键字，在ARC下解决与block的使用就略显复杂了：</p>\n<h4 id=\"block关键字\"><a href=\"#block关键字\" class=\"headerlink\" title=\"__block关键字\"></a>__block关键字</h4><ul>\n<li>block内修改外部定义变量</li>\n</ul>\n<p>和手动内存管理一样，ARC如果在block中需要修改block之外定义的变量需要使用<code>__block</code>关键字修饰，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__block NSString *name = @&quot;foggry&quot;;</span><br><span class=\"line\">self.expireCostLabel.completionBlock = ^()&#123;</span><br><span class=\"line\">    name = @&quot;wangzz&quot;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上例中name变量需要在block中修改，因此必须使用__block关键字。</p>\n<ul>\n<li>__block在MRC和ARC中的区别</li>\n</ul>\n<p>在ARC下的block中使用__block关键字修饰的对象时，block会retain该对象；而在MRC下却不会retain。关于这点在官方文档<a href=\"https://developer.apple.com/library/ios/releasenotes/objectivec/rn-transitioningtoarc/introduction/introduction.html\" target=\"_blank\" rel=\"noopener\">Transitioning to ARC Release Notes</a>中有详细的描述：</p>\n<blockquote>\n</blockquote>\n<p>In manual reference counting mode, __block id x; has the effect of not retaining x.<br>In ARC mode, __block id x; defaults to retaining x (just like all other values). </p>\n<blockquote>\n</blockquote>\n<p>下面的代码不管在MRC还是ARC中<code>myController</code>对象都是有内存泄露的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyViewController *myController = [[MyViewController alloc] init…];</span><br><span class=\"line\">// ...</span><br><span class=\"line\">myController.completionHandler =  ^(NSInteger result) &#123;</span><br><span class=\"line\">   [myController dismissViewControllerAnimated:YES completion:nil];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>内存泄露问题在MRC中可以按如下方式更改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyViewController * __block myController = [[MyViewController alloc] init…];  </span><br><span class=\"line\">// ...  </span><br><span class=\"line\">myController.completionHandler =  ^(NSInteger result) &#123;  </span><br><span class=\"line\">    [myController dismissViewControllerAnimated:YES completion:nil];  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>然而在ARC中这么改就不行了。正如开始所说的那样，在ARC中<code>myController.completionHandler</code>的block会retain<code>myController</code>对象，使得内存泄露问题仍然存在！！</p>\n<p>在ARC中该问题有两种解决方案，第一种：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyViewController * __block myController = [[MyViewController alloc] init…];  </span><br><span class=\"line\">// ...  </span><br><span class=\"line\">myController.completionHandler =  ^(NSInteger result) &#123;  </span><br><span class=\"line\">    [myController dismissViewControllerAnimated:YES completion:nil];  </span><br><span class=\"line\">    myController = nil;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>该方法在block中使用完myController时，是它指向nil。没有strong类型的指针指向myController指向的对象时，对象会被释放掉。</p>\n<p>第二种种解决方案，直接使用<strong>weak代替</strong>block关键字：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyViewController *myController = [[MyViewController alloc] init…];  </span><br><span class=\"line\">// ...  </span><br><span class=\"line\">MyViewController * __weak weakMyViewController = myController;  </span><br><span class=\"line\">myController.completionHandler =  ^(NSInteger result) &#123;  </span><br><span class=\"line\">    [weakMyViewController dismissViewControllerAnimated:YES completion:nil];  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>该方法直接避免了对block对myController对象的retain。</p>\n<h4 id=\"存在循环引用关系\"><a href=\"#存在循环引用关系\" class=\"headerlink\" title=\"存在循环引用关系\"></a>存在循环引用关系</h4><p>如果self直接或者间接的对block存在强引用，在block中又需要使用self关键字，此时self和block就存在循环引用的关系。此时必须使用__weak关键字定义一个指针指向self，在block中使用该指针来引用self：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MessageListController * __weak weakSelf = self;</span><br><span class=\"line\">self.messageLogic.loadMoreBlock = ^(IcarMessage * theMessage) &#123;</span><br><span class=\"line\">    [weakSelf.tableView setPullTableIsLoadingMore:YES];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>需要说明的是，尽管上例中weakSelf指针对self只是弱引用，但是self对block却是强引用，self的生命周期一定是长于block的，因此不用担心在block中使用weakSelf指针时，其指向的self会被释放掉。</p>\n<h4 id=\"不存在循环引用关系\"><a href=\"#不存在循环引用关系\" class=\"headerlink\" title=\"不存在循环引用关系\"></a>不存在循环引用关系</h4><p>下面的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyViewController *myController = [[MyViewController alloc] init…];</span><br><span class=\"line\">// ...</span><br><span class=\"line\">MyViewController * __weak weakMyController = myController;</span><br><span class=\"line\">myController.completionHandler =  ^(NSInteger result) &#123;</span><br><span class=\"line\">    MyViewController *strongMyController = weakMyController;</span><br><span class=\"line\">    if (strongMyController) &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">        [strongMyController dismissViewControllerAnimated:YES completion:nil];</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else &#123;</span><br><span class=\"line\">        // Probably nothing...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>如前面所说，<code>myController.completionHandler</code>的block中不能直接使用<code>myController</code>对象，会造成内存泄露，因此需要先用一个weak的指针指向<code>myController</code>对象，然后在block中使用该weak指针。但是为了确保在block执行的时候<code>myController</code>对象没有被释放掉，就在block一开始的地方定义了一个临时的strong类型的指针<code>strongMyController</code>指向weak指针<code>weakMyController</code>，其实最终的结果就是block中对<code>myController</code>对象强引用了。在block执行完被销毁的时候，<code>strongMyController</code>指针变量会被销毁，其最终指向的<code>myController</code>对象因此也会被销毁。这样在使用一个对象的时候做就保证了该对象是存在的，使用完了再放弃该对象的所有权。</p>\n<h2 id=\"ARC和Toll-Free-Bridging\"><a href=\"#ARC和Toll-Free-Bridging\" class=\"headerlink\" title=\"ARC和Toll-Free Bridging\"></a>ARC和Toll-Free Bridging</h2><p>MRC下的<code>Toll-FreeBridging</code>不涉及内存管理的转移，Objective-C（后文简称OC）和Core Foundation（后文简称CF）各自管理各自的内存,相互之间可以直接交换使用，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSLocale *gbNSLocale = [[NSLocale alloc] initWithLocaleIdentifier:@&quot;en_GB&quot;];</span><br><span class=\"line\">CFLocaleRef gbCFLocale = (CFLocaleRef)gbNSLocale;</span><br></pre></td></tr></table></figure>\n\n<p>而在ARC下,事情就会变得复杂一些。因为ARC能够管理OC对象的内存,却不能管理CF对象,CF对象依然需要我们手动管理内存。在CF和OC之间bridge对象的时候,问题就出现了,编译器不知道该如何处理这个同时有OC指针和CF指针指向的对象。<br>这时候,需要使用<code>__bridge</code>, <code>__bridge_retained</code>, <code>__bridge_transfer</code>等修饰符来告诉编译器该如何去做。</p>\n<ul>\n<li>__bridge</li>\n</ul>\n<p>该关键字在桥接过程中不会增加被桥接对象的引用计数，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CFStringRef cfString = CFStringCreateWithCString(kCFAllocatorDefault, &quot;CFString&quot;, kCFStringEncodingUTF8);</span><br><span class=\"line\">NSString *ocString = (__bridge NSString *)cfString;</span><br><span class=\"line\">CFRelease(cfString);</span><br><span class=\"line\">NSLog(@&quot;%@&quot;,ocString);</span><br></pre></td></tr></table></figure>\n\n<p>由于ARC下<code>NSString *ocString</code>定义的对象指针默认是strong的，所以在执行<code>CFRelease(cfString);</code>后<code>ocString</code>指针还持有桥接过来的对象，<code>ocString</code>指针仍能正常使用。但如果做出如下改动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CFStringRef cfString = CFStringCreateWithCString(kCFAllocatorDefault, &quot;CFString&quot;, kCFStringEncodingUTF8);</span><br><span class=\"line\">__weak NSString *ocString = (__bridge NSString *)cfString;</span><br><span class=\"line\">CFRelease(cfString);</span><br><span class=\"line\">NSLog(@&quot;###%@&quot;,ocString);</span><br></pre></td></tr></table></figure>\n\n<p>即将定义方式改成<code>__weak NSString *ocString</code>，在执行<code>CFRelease(cfString);</code>后<code>ocString</code>将因不再持有被桥接对象所有权而无法正常使用。</p>\n<p>反之从OC对象桥接到CF对象也是一个道理，该关键字有点像<code>__weak</code>关键字的作用。</p>\n<ul>\n<li>__bridge_retained 或 CFBridgingRetain</li>\n</ul>\n<p>二者作用是一样的，只是用法不同。</p>\n<p>该关键字在桥接的过程中会retain被桥接对象，相当于桥接方也持有了被桥接对象。需要注意的是，如果是CF对象桥接到OC对象，编译器会做好OC对象的内存管理工作；但如果是OC对象桥接到CF对象，那么CF需要执行内存释放操作，如下例所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray *ocArray = [[NSArray alloc] initWithObjects:@&quot;foggry&quot;, nil];</span><br><span class=\"line\">CFArrayRef cfArray = (__bridge_retained CFArrayRef)ocArray;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> 使用cfArray</span><br><span class=\"line\"> **/</span><br><span class=\"line\">CFRelease(cfArray);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>__bridge_transfer 或 CFBridgingRelease</li>\n</ul>\n<p>二者作用也是一样的，只是用法不同。</p>\n<p>该关键字将对象所有权由被桥接对象转移给了桥接对象，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CFStringRef cfString = CFStringCreateWithCString(kCFAllocatorDefault, &quot;CFString&quot;, kCFStringEncodingUTF8);</span><br><span class=\"line\">NSString *ocString = (__bridge_transfer NSString *)cfString;</span><br><span class=\"line\">//CFRelease(cfString); //不再需要释放操作</span><br><span class=\"line\">NSLog(@&quot;%@&quot;,ocString);</span><br></pre></td></tr></table></figure>\n\n<p>此例中被桥接对象cfString的所有权就转移给了桥接对象ocString。</p>\n<p>总之，理解了桥接关键字的作用，桥接转换过程中大家只需要根据具体需求选用适当的关键字即可。</p>\n<p>另外，在ARC中<code>id</code>和<code>void *</code>也不能直接相互转换了，必须通过<code>Toll-FreeBridging</code>使用适当的关键字修饰。</p>\n<h2 id=\"ARC和IBOutLet\"><a href=\"#ARC和IBOutLet\" class=\"headerlink\" title=\"ARC和IBOutLet\"></a>ARC和IBOutLet</h2><p>对于IBOutLet属性应该用strong还是weak一直都有疑惑。关于这一点<a href=\"https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/LoadingResources/CocoaNibs/CocoaNibs.html#//apple_ref/doc/uid/10000051i-CH4-SW6\" target=\"_blank\" rel=\"noopener\">官方文档</a>是这么介绍的：</p>\n<blockquote>\n</blockquote>\n<p>From a practical perspective, in iOS and OS X outlets should be defined as declared properties. Outlets should generally be weak, except for those from File’s Owner to top-level objects in a nib &gt;&gt;&gt;file (or, in iOS, a storyboard scene) which should be strong. Outlets that you create should therefore typically be weak.</p>\n<blockquote>\n</blockquote>\n<p>那么长的一段英文想说的是：</p>\n<p>如果nib文件构建的view是直接被Controller引用的顶层view，对应的IBOutLet属性应该是strong；</p>\n<p>如果view是顶层view上的一个子view，那么该view的属性应该是weak，因为顶层view被Controller使用strong属性引用了，而顶层view本身又持有该view；</p>\n<p>如果Controller对某个view需要单独引用，或者Controller没有引用某个view的父view，那么其属性也应该是strong。</p>\n<p>好吧，其实我能说如果你实在懒得区分什么时候用strong，什么时候用weak，那就将所以后的IBOutLet属性都设成strong吧！在Controller销毁的时候，对应的IBOutLet实例变量也会被销毁，strong指针会被置成nil，因此也不会有内存问题。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><a href=\"https://developer.apple.com/library/ios/releasenotes/objectivec/rn-transitioningtoarc/introduction/introduction.html\" target=\"_blank\" rel=\"noopener\">Transitioning to ARC Release Notes</a></li>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/LoadingResources/CocoaNibs/CocoaNibs.html#//apple_ref/doc/uid/10000051i-CH4-SW6\" target=\"_blank\" rel=\"noopener\">Managing the Lifetimes of Objects from Nib Files</a></li>\n<li><a href=\"https://mikeash.com/pyblog/friday-qa-2012-04-13-nib-memory-management.html\" target=\"_blank\" rel=\"noopener\">Nib Memory Management</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在ARC之前，iOS内存管理无论对资深级还是菜鸟级开发者来说都是一件很头疼的事。我参加过几个使用手动内存管理的项目，印象最深刻的是一个地图类应用，由于应用本身就非常耗内存，当时为了解决内存泄露问题，每周都安排有人值班用Instruments挨个跑功能，关键是每次都总能检查出来不少。其实不管是菜鸟级还是资深级开发者都避免不了写出内存泄露的代码，规则大家都懂，可是天知道什么时候手一抖就少写了个release？</p>\n<p>好在项目决定转成ARC了，下面将自己转换的过程和中间遇到的问题写出来和大家共享，希望能减少大家解决同类问题的时间。</p>","more":"<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><h4 id=\"项目简介\"><a href=\"#项目简介\" class=\"headerlink\" title=\"项目简介\"></a>项目简介</h4><p>需要转换的Objective-C文件数量：1000个左右。</p>\n<p>开发工具：Xcode 6.0.1</p>\n<h4 id=\"转换方式\"><a href=\"#转换方式\" class=\"headerlink\" title=\"转换方式\"></a>转换方式</h4><p>我使用的是Xcode本身提供的ARC转换功能。当然你也可以手动手动转换，那不属于本文范畴，而且其工作量绝对能让你崩溃。</p>\n<h2 id=\"二、转换过程\"><a href=\"#二、转换过程\" class=\"headerlink\" title=\"二、转换过程\"></a>二、转换过程</h2><h4 id=\"代码备份\"><a href=\"#代码备份\" class=\"headerlink\" title=\"代码备份\"></a>代码备份</h4><p>在进行如此大规模的更改之前，一定要先进行代码备份：直接在本地将代码复制一份，或者记住更改前代码在VCS上的版本号。</p>\n<h4 id=\"过滤无需转换的文件\"><a href=\"#过滤无需转换的文件\" class=\"headerlink\" title=\"过滤无需转换的文件\"></a>过滤无需转换的文件</h4><p>找出项目中引用的仍使用手动内存管理的第三方库，或者某些你不希望转换的文件，对其添加<code>-fno-objc-arc</code>标记。</p>\n<p>Xcode自动转换工具只针对Objective-C对象，只会处理<code>Objective-C/Objective-C++</code>即后缀名为<code>.m/.mm</code>的两种文件，因此其他的<code>C/C++</code>对应的<code>.c/.cpp</code>都无需理会。</p>\n<h4 id=\"执行检查操作\"><a href=\"#执行检查操作\" class=\"headerlink\" title=\"执行检查操作\"></a>执行检查操作</h4><p>使用Xcode转换工具入口如图所示：</p>\n<p><img src=\"/images/article8/refactor.png\" alt=\"refactor\"></p>\n<p>点击<code>Convert to Objective-C ARC</code>后会进入检查操作入口，如图：</p>\n<p><img src=\"/images/article8/check.png\" alt=\"check\"></p>\n<p>该步骤要选择哪些文件需要转换，如果前面将无需转换的文件都添加了<code>-fno-objc-arc</code>标记后，这里可以全选。</p>\n<p>点击check按钮后Xcode会帮助我们检查代码中存在的不符合ARC使用规则的错误或警告，只有所有的错误都解决以后才能执行真正的转换操作。</p>\n<h4 id=\"解决错误-告警\"><a href=\"#解决错误-告警\" class=\"headerlink\" title=\"解决错误/告警\"></a>解决错误/告警</h4><p>执行完check操作后，会给出提示：</p>\n<p><img src=\"/images/article8/error.png\" alt=\"error\"></p>\n<p>三百多个错误，同时还有一千两百多个警告信息，都要哭了。。。</p>\n<p>错误和警告的解决内容较多，后面会单独介绍。</p>\n<h4 id=\"执行转换操作\"><a href=\"#执行转换操作\" class=\"headerlink\" title=\"执行转换操作\"></a>执行转换操作</h4><p>解决完所有的error后，会弹出下述提示界面：</p>\n<p><img src=\"/images/article8/notice.png\" alt=\"notice\"></p>\n<p>大意是Xcode将要将你的工程转换成使用ARC管理内存，所有更改的代码在真正更改之前会在一个review界面展示。同时所有的更改完成以后，Xcode会讲项目Target对应的工程设置的使用ARC设置（<code>Objective-C Automatic Reference Counting</code>）会被置成YES（上图右上角的警告标识就是在告诉我们项目已经支持ARC了，但工程中有文件还不支持）：</p>\n<p><img src=\"/images/article8/use_arc.png\" alt=\"use_arc\"></p>\n<p>这时离成功就不远了，胜利在望！</p>\n<p>点击next按钮后跳转到review界面，样式类似于使用Xcode提交SVN的确认提交界面，如下图所示：</p>\n<p><img src=\"/images/article8/review.png\" alt=\"review\"></p>\n<p>该界面列出了所有需要有代码更改的文件，同时能够直接对比转换前和转换后的代码变化。为了稳妥起见，我选择了每个文件都点进去扫了一眼，这也给我们一次机会检查是否漏掉了不能转换的文件。</p>\n<p>确定一切无误以后，点击右下角的save按钮，一切就大功告成了！</p>\n<h2 id=\"错误-警告解决\"><a href=\"#错误-警告解决\" class=\"headerlink\" title=\"错误/警告解决\"></a>错误/警告解决</h2><h4 id=\"错误\"><a href=\"#错误\" class=\"headerlink\" title=\"错误\"></a>错误</h4><ul>\n<li>ARC forbids synthesizing a property of an Objective-C object with unspecified ownership or storage attribute</li>\n</ul>\n<p><img src=\"/images/article8/readonly_error.png\" alt=\"readonly_error\"></p>\n<p>property属性必须指定一个内存管理关键字，在属性定义处增加strong关键字即可。</p>\n<ul>\n<li>ARC forbids explicit message send of ‘release’</li>\n</ul>\n<p><img src=\"/images/article8/release_error.png\" alt=\"release_error\"></p>\n<p>这种情况通常是使用包含release的宏定义，将该宏和使用该宏的地方删除即可。</p>\n<ul>\n<li>Init methods must return a type related to the receiver type</li>\n</ul>\n<p><img src=\"/images/article8/init_return_type.png\" alt=\"init_return_type\"></p>\n<p>错误原因是A类里的一个方法以init开头，而且返回的是B类型，好吧，乖乖改方法名。</p>\n<ul>\n<li>Cast of C pointer type ‘ivPointer’ (aka ‘void *’) to Objective-C pointer type ‘iFlyTTSManager_old *’ requires a bridged cast</li>\n</ul>\n<p><img src=\"/images/article8/cast_pointer_objective-c.png\" alt=\"cast_pointer_objective-c\"></p>\n<p>这是<code>Toll-Free Bridging</code>转换问题，在ARC下根据情况使用对应的转换关键字就行了，后文会专门介绍。</p>\n<h4 id=\"警告\"><a href=\"#警告\" class=\"headerlink\" title=\"警告\"></a>警告</h4><p>解决警告的目的是消除警告处代码存在的隐患，既然Xcode给了提示，那么每一个警告信息都值得我们认真对待。</p>\n<ul>\n<li>Capturing <code>self</code> in this block is likely to lead to a retain cycle</li>\n</ul>\n<p><img src=\"/images/article8/block_capturing_self.png\" alt=\"block_capturing_self\"></p>\n<p>这是典型的block循环引用问题，将block中的self改成使用指向self的weak指针即可。</p>\n<ul>\n<li>Using ‘initWithArray:’ with a literal is redundant</li>\n</ul>\n<p><img src=\"/images/article8/literal_is_redundant.png\" alt=\"literal_is_redundant\"></p>\n<p>好吧，原来是没必要的alloc操作，直接按Xcode提示将alloc删除即可：</p>\n<p><img src=\"/images/article8/literal_is_redundant_fix.png\" alt=\"literal_is_redundant_fix.png\"></p>\n<ul>\n<li>Init methods must return a type related to the receiver type</li>\n</ul>\n<p><img src=\"/images/article8/init_methods.png\" alt=\"init_methods.png\"></p>\n<p>原来是A类里的一个方法以init开头，而且返回的是B类型，好吧，乖乖改方法名。</p>\n<ul>\n<li>Property follows Cocoa naming convention for returning ‘owned’ objects</li>\n</ul>\n<p><img src=\"/images/article8/property_follows.png\" alt=\"property_follows.png\"></p>\n<p>这是因为@property属性的命名以new开头了，可恶。。。修改方法是将对应的getter方法改成非new开头命名的：</p>\n<p><img src=\"/images/article8/property_follows_fix.png\" alt=\"property_follows_fix.png\"></p>\n<p>ARC下方法名如果是以new/alloc/init等开头的，而且还不是类的初始化方法，就该小心了，要么报错，要么警告，原因你懂的。</p>\n<ul>\n<li>Block implicitly retains ‘self’; explicitly mention ‘self’ to indicate this is intended behavior</li>\n</ul>\n<p><img src=\"/images/article8/block_implicitly_retains.png\" alt=\"block_implicitly_retains.png\"></p>\n<p>意思是block中使用了self的实例变量_selectedModeMarkerView，因此block会隐式的retain住self。Xcode认为这可能会给开发者造成困惑，或者因此而因袭循环引用，所以警告我们要显示的在block中使用self，以达到block显示retain住self的目的。</p>\n<p>该警告有两种改法：</p>\n<p>①按照Xcode提示，改成self-&gt;_selectedModeMarkerView：</p>\n<p><img src=\"/images/article8/block_implicitly_retains_fix1.png\" alt=\"block_implicitly_retains_fix1.png\"></p>\n<p>②直接将该警告关闭</p>\n<p>警告名称为：<code>Implicit retain of ‘self’ within blocks</code></p>\n<p>对应的Clang关键字是：<code>-Wimplicit-retain-self</code></p>\n<p><img src=\"/images/article8/block_implicitly_retains_fix2.png\" alt=\"block_implicitly_retains_fix2.png\"></p>\n<ul>\n<li>Weak property may be unpredictably set to nil 和 Weak property ‘delegate’ is accessed multiple times in this method but may be unpredictably set to nil; assign to a strong variable to keep the object alive</li>\n</ul>\n<p><img src=\"/images/article8/weak_property_unpredictably.png\" alt=\"weak_property_unpredictably.png\"></p>\n<p>这是工程中数目最多的警告，这是因为所有的delegate属性都是weak的，Xcode默认开启了下图中的两个警告设置，将其关闭即可：</p>\n<p><img src=\"/images/article8/weak_property_unpredictably_fix.png\" alt=\"weak_property_unpredictably_fix.png\"></p>\n<ul>\n<li>Capturing ‘self’ strongly in this block is likely to lead to a retain cycle</li>\n</ul>\n<p><img src=\"/images/article8/retain_cycle.png\" alt=\"retain_cycle.png\"></p>\n<p>这是明显的block导致循环引用内存泄露的情况，之前代码中坑啊！修改方案：</p>\n<p><img src=\"/images/article8/retain_cycle_fix.png\" alt=\"retain_cycle_fix.png\"></p>\n<ul>\n<li>Method parameter of type ‘NSError *__autoreleasing *’ with no explicit ownership</li>\n</ul>\n<p><img src=\"/images/article8/autorelease_error.png\" alt=\"autorelease_error.png\"></p>\n<p>这种就不用说了，按警告中的提示添加<code>__autoreleasing</code>关键字即可。</p>\n<p>以上列出的错误和警告只是数量较多的，还有很多其他就不在这里一一列举了。</p>\n<p>另外，推荐  <a href=\"https://twitter.com/mattt\" target=\"_blank\" rel=\"noopener\">Mattt Thompson</a> 大神关于Clang中几乎所有warning的名称和对应报错提示语的网站：<a href=\"http://fuckingclangwarnings.com/\" target=\"_blank\" rel=\"noopener\">http://fuckingclangwarnings.com/</a>，以后解决warning类问题就简单多了！</p>\n<h2 id=\"Xcode自动转换\"><a href=\"#Xcode自动转换\" class=\"headerlink\" title=\"Xcode自动转换\"></a>Xcode自动转换</h2><h4 id=\"关键字转换\"><a href=\"#关键字转换\" class=\"headerlink\" title=\"关键字转换\"></a>关键字转换</h4><p>Xcode会自动将某些关键字自动转换成ARC的对应版本。</p>\n<ul>\n<li>retain自动转成strong，如图：</li>\n</ul>\n<p><img src=\"/images/article8/retain_strong.png\" alt=\"retain_strong.png\"></p>\n<ul>\n<li>assign关键字转成weak</li>\n</ul>\n<p>修饰Objective-C对象或者id类型对象的assign关键字会被转成weak，如图：</p>\n<p><img src=\"/images/article8/assign_weak.png\" alt=\"assign_weak.png\"></p>\n<p>但是修饰Int/bool等数值型变量的assign不会自动转换成weak，如图：</p>\n<p><img src=\"/images/article8/assign_not_weak.png\" alt=\"assign_not_weak.png\"></p>\n<h4 id=\"关键字删除\"><a href=\"#关键字删除\" class=\"headerlink\" title=\"关键字删除\"></a>关键字删除</h4><p>和手动内存管理相关的几个关键字，比如：<code>release/retain/autorelease/super dealloc</code>等会被删除；</p>\n<p>dealloc方法中如果除了release/super dealloc语句外，如果别的代码，dealloc方法会保留,如图：</p>\n<p><img src=\"/images/article8/retain_dealloc.png\" alt=\"retain_dealloc.png\"></p>\n<p>如果没有整个方法都会被删除：</p>\n<p><img src=\"/images/article8/delete_dealloc.png\" alt=\"delete_dealloc.png\"></p>\n<h4 id=\"关键字替换\"><a href=\"#关键字替换\" class=\"headerlink\" title=\"关键字替换\"></a>关键字替换</h4><ul>\n<li>在转换时<strong>block关键字会被自动替换成</strong>weak：</li>\n</ul>\n<p><img src=\"/images/article8/block_weak.png\" alt=\"block_weak.png\"></p>\n<ul>\n<li>@autoreleasepool</li>\n</ul>\n<p>NSAutoreleasePool不支持ARC，会被替换成@autoreleasepool：</p>\n<p><img src=\"/images/article8/autoreleasepool.png\" alt=\"autoreleasepool.png\"></p>\n<h4 id=\"关于被宏注释代码\"><a href=\"#关于被宏注释代码\" class=\"headerlink\" title=\"关于被宏注释代码\"></a>关于被宏注释代码</h4><ul>\n<li>使用宏定义的对象释放代码</li>\n</ul>\n<p>宏定义如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define RELEASE_SAFELY(__POINTER) &#123; \\</span><br><span class=\"line\">[(__POINTER) release]; (__POINTER) = nil; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在执行ARC转换检查操作时，Xcode会在使用该宏的地方报错：</p>\n<p><img src=\"/images/article8/release_error.png\" alt=\"release_error.png\"></p>\n<p>将该宏和使用该宏的地方删除即可。</p>\n<ul>\n<li>被宏注释掉的代码，Xcode在转换时是不会处理的，如图：</li>\n</ul>\n<p><img src=\"/images/article8/marco_arc.png\" alt=\"marco_arc.png\"></p>\n<p>PS：这是相当坑的一点，因为你根本预料不到工程中使用了多少宏，注释掉了多少代码。当你执行完转换操作，以为就大功告成的时候，却在某天因为一个宏的开启遇到了一堆新的转ARC不彻底的问题。这种问题也没招，只能遇到一个改一个了。</p>\n<h2 id=\"ARC和block\"><a href=\"#ARC和block\" class=\"headerlink\" title=\"ARC和block\"></a>ARC和block</h2><p>不管是手动内存管理还是ARC，block循环引用导致的内存泄露都是一个令人头疼的问题。在MRC中，解决block循环引用只需要使用__block关键字，在ARC下解决与block的使用就略显复杂了：</p>\n<h4 id=\"block关键字\"><a href=\"#block关键字\" class=\"headerlink\" title=\"__block关键字\"></a>__block关键字</h4><ul>\n<li>block内修改外部定义变量</li>\n</ul>\n<p>和手动内存管理一样，ARC如果在block中需要修改block之外定义的变量需要使用<code>__block</code>关键字修饰，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__block NSString *name = @&quot;foggry&quot;;</span><br><span class=\"line\">self.expireCostLabel.completionBlock = ^()&#123;</span><br><span class=\"line\">    name = @&quot;wangzz&quot;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上例中name变量需要在block中修改，因此必须使用__block关键字。</p>\n<ul>\n<li>__block在MRC和ARC中的区别</li>\n</ul>\n<p>在ARC下的block中使用__block关键字修饰的对象时，block会retain该对象；而在MRC下却不会retain。关于这点在官方文档<a href=\"https://developer.apple.com/library/ios/releasenotes/objectivec/rn-transitioningtoarc/introduction/introduction.html\" target=\"_blank\" rel=\"noopener\">Transitioning to ARC Release Notes</a>中有详细的描述：</p>\n<blockquote>\n</blockquote>\n<p>In manual reference counting mode, __block id x; has the effect of not retaining x.<br>In ARC mode, __block id x; defaults to retaining x (just like all other values). </p>\n<blockquote>\n</blockquote>\n<p>下面的代码不管在MRC还是ARC中<code>myController</code>对象都是有内存泄露的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyViewController *myController = [[MyViewController alloc] init…];</span><br><span class=\"line\">// ...</span><br><span class=\"line\">myController.completionHandler =  ^(NSInteger result) &#123;</span><br><span class=\"line\">   [myController dismissViewControllerAnimated:YES completion:nil];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>内存泄露问题在MRC中可以按如下方式更改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyViewController * __block myController = [[MyViewController alloc] init…];  </span><br><span class=\"line\">// ...  </span><br><span class=\"line\">myController.completionHandler =  ^(NSInteger result) &#123;  </span><br><span class=\"line\">    [myController dismissViewControllerAnimated:YES completion:nil];  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>然而在ARC中这么改就不行了。正如开始所说的那样，在ARC中<code>myController.completionHandler</code>的block会retain<code>myController</code>对象，使得内存泄露问题仍然存在！！</p>\n<p>在ARC中该问题有两种解决方案，第一种：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyViewController * __block myController = [[MyViewController alloc] init…];  </span><br><span class=\"line\">// ...  </span><br><span class=\"line\">myController.completionHandler =  ^(NSInteger result) &#123;  </span><br><span class=\"line\">    [myController dismissViewControllerAnimated:YES completion:nil];  </span><br><span class=\"line\">    myController = nil;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>该方法在block中使用完myController时，是它指向nil。没有strong类型的指针指向myController指向的对象时，对象会被释放掉。</p>\n<p>第二种种解决方案，直接使用<strong>weak代替</strong>block关键字：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyViewController *myController = [[MyViewController alloc] init…];  </span><br><span class=\"line\">// ...  </span><br><span class=\"line\">MyViewController * __weak weakMyViewController = myController;  </span><br><span class=\"line\">myController.completionHandler =  ^(NSInteger result) &#123;  </span><br><span class=\"line\">    [weakMyViewController dismissViewControllerAnimated:YES completion:nil];  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>该方法直接避免了对block对myController对象的retain。</p>\n<h4 id=\"存在循环引用关系\"><a href=\"#存在循环引用关系\" class=\"headerlink\" title=\"存在循环引用关系\"></a>存在循环引用关系</h4><p>如果self直接或者间接的对block存在强引用，在block中又需要使用self关键字，此时self和block就存在循环引用的关系。此时必须使用__weak关键字定义一个指针指向self，在block中使用该指针来引用self：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MessageListController * __weak weakSelf = self;</span><br><span class=\"line\">self.messageLogic.loadMoreBlock = ^(IcarMessage * theMessage) &#123;</span><br><span class=\"line\">    [weakSelf.tableView setPullTableIsLoadingMore:YES];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>需要说明的是，尽管上例中weakSelf指针对self只是弱引用，但是self对block却是强引用，self的生命周期一定是长于block的，因此不用担心在block中使用weakSelf指针时，其指向的self会被释放掉。</p>\n<h4 id=\"不存在循环引用关系\"><a href=\"#不存在循环引用关系\" class=\"headerlink\" title=\"不存在循环引用关系\"></a>不存在循环引用关系</h4><p>下面的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyViewController *myController = [[MyViewController alloc] init…];</span><br><span class=\"line\">// ...</span><br><span class=\"line\">MyViewController * __weak weakMyController = myController;</span><br><span class=\"line\">myController.completionHandler =  ^(NSInteger result) &#123;</span><br><span class=\"line\">    MyViewController *strongMyController = weakMyController;</span><br><span class=\"line\">    if (strongMyController) &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">        [strongMyController dismissViewControllerAnimated:YES completion:nil];</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else &#123;</span><br><span class=\"line\">        // Probably nothing...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>如前面所说，<code>myController.completionHandler</code>的block中不能直接使用<code>myController</code>对象，会造成内存泄露，因此需要先用一个weak的指针指向<code>myController</code>对象，然后在block中使用该weak指针。但是为了确保在block执行的时候<code>myController</code>对象没有被释放掉，就在block一开始的地方定义了一个临时的strong类型的指针<code>strongMyController</code>指向weak指针<code>weakMyController</code>，其实最终的结果就是block中对<code>myController</code>对象强引用了。在block执行完被销毁的时候，<code>strongMyController</code>指针变量会被销毁，其最终指向的<code>myController</code>对象因此也会被销毁。这样在使用一个对象的时候做就保证了该对象是存在的，使用完了再放弃该对象的所有权。</p>\n<h2 id=\"ARC和Toll-Free-Bridging\"><a href=\"#ARC和Toll-Free-Bridging\" class=\"headerlink\" title=\"ARC和Toll-Free Bridging\"></a>ARC和Toll-Free Bridging</h2><p>MRC下的<code>Toll-FreeBridging</code>不涉及内存管理的转移，Objective-C（后文简称OC）和Core Foundation（后文简称CF）各自管理各自的内存,相互之间可以直接交换使用，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSLocale *gbNSLocale = [[NSLocale alloc] initWithLocaleIdentifier:@&quot;en_GB&quot;];</span><br><span class=\"line\">CFLocaleRef gbCFLocale = (CFLocaleRef)gbNSLocale;</span><br></pre></td></tr></table></figure>\n\n<p>而在ARC下,事情就会变得复杂一些。因为ARC能够管理OC对象的内存,却不能管理CF对象,CF对象依然需要我们手动管理内存。在CF和OC之间bridge对象的时候,问题就出现了,编译器不知道该如何处理这个同时有OC指针和CF指针指向的对象。<br>这时候,需要使用<code>__bridge</code>, <code>__bridge_retained</code>, <code>__bridge_transfer</code>等修饰符来告诉编译器该如何去做。</p>\n<ul>\n<li>__bridge</li>\n</ul>\n<p>该关键字在桥接过程中不会增加被桥接对象的引用计数，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CFStringRef cfString = CFStringCreateWithCString(kCFAllocatorDefault, &quot;CFString&quot;, kCFStringEncodingUTF8);</span><br><span class=\"line\">NSString *ocString = (__bridge NSString *)cfString;</span><br><span class=\"line\">CFRelease(cfString);</span><br><span class=\"line\">NSLog(@&quot;%@&quot;,ocString);</span><br></pre></td></tr></table></figure>\n\n<p>由于ARC下<code>NSString *ocString</code>定义的对象指针默认是strong的，所以在执行<code>CFRelease(cfString);</code>后<code>ocString</code>指针还持有桥接过来的对象，<code>ocString</code>指针仍能正常使用。但如果做出如下改动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CFStringRef cfString = CFStringCreateWithCString(kCFAllocatorDefault, &quot;CFString&quot;, kCFStringEncodingUTF8);</span><br><span class=\"line\">__weak NSString *ocString = (__bridge NSString *)cfString;</span><br><span class=\"line\">CFRelease(cfString);</span><br><span class=\"line\">NSLog(@&quot;###%@&quot;,ocString);</span><br></pre></td></tr></table></figure>\n\n<p>即将定义方式改成<code>__weak NSString *ocString</code>，在执行<code>CFRelease(cfString);</code>后<code>ocString</code>将因不再持有被桥接对象所有权而无法正常使用。</p>\n<p>反之从OC对象桥接到CF对象也是一个道理，该关键字有点像<code>__weak</code>关键字的作用。</p>\n<ul>\n<li>__bridge_retained 或 CFBridgingRetain</li>\n</ul>\n<p>二者作用是一样的，只是用法不同。</p>\n<p>该关键字在桥接的过程中会retain被桥接对象，相当于桥接方也持有了被桥接对象。需要注意的是，如果是CF对象桥接到OC对象，编译器会做好OC对象的内存管理工作；但如果是OC对象桥接到CF对象，那么CF需要执行内存释放操作，如下例所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray *ocArray = [[NSArray alloc] initWithObjects:@&quot;foggry&quot;, nil];</span><br><span class=\"line\">CFArrayRef cfArray = (__bridge_retained CFArrayRef)ocArray;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> 使用cfArray</span><br><span class=\"line\"> **/</span><br><span class=\"line\">CFRelease(cfArray);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>__bridge_transfer 或 CFBridgingRelease</li>\n</ul>\n<p>二者作用也是一样的，只是用法不同。</p>\n<p>该关键字将对象所有权由被桥接对象转移给了桥接对象，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CFStringRef cfString = CFStringCreateWithCString(kCFAllocatorDefault, &quot;CFString&quot;, kCFStringEncodingUTF8);</span><br><span class=\"line\">NSString *ocString = (__bridge_transfer NSString *)cfString;</span><br><span class=\"line\">//CFRelease(cfString); //不再需要释放操作</span><br><span class=\"line\">NSLog(@&quot;%@&quot;,ocString);</span><br></pre></td></tr></table></figure>\n\n<p>此例中被桥接对象cfString的所有权就转移给了桥接对象ocString。</p>\n<p>总之，理解了桥接关键字的作用，桥接转换过程中大家只需要根据具体需求选用适当的关键字即可。</p>\n<p>另外，在ARC中<code>id</code>和<code>void *</code>也不能直接相互转换了，必须通过<code>Toll-FreeBridging</code>使用适当的关键字修饰。</p>\n<h2 id=\"ARC和IBOutLet\"><a href=\"#ARC和IBOutLet\" class=\"headerlink\" title=\"ARC和IBOutLet\"></a>ARC和IBOutLet</h2><p>对于IBOutLet属性应该用strong还是weak一直都有疑惑。关于这一点<a href=\"https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/LoadingResources/CocoaNibs/CocoaNibs.html#//apple_ref/doc/uid/10000051i-CH4-SW6\" target=\"_blank\" rel=\"noopener\">官方文档</a>是这么介绍的：</p>\n<blockquote>\n</blockquote>\n<p>From a practical perspective, in iOS and OS X outlets should be defined as declared properties. Outlets should generally be weak, except for those from File’s Owner to top-level objects in a nib &gt;&gt;&gt;file (or, in iOS, a storyboard scene) which should be strong. Outlets that you create should therefore typically be weak.</p>\n<blockquote>\n</blockquote>\n<p>那么长的一段英文想说的是：</p>\n<p>如果nib文件构建的view是直接被Controller引用的顶层view，对应的IBOutLet属性应该是strong；</p>\n<p>如果view是顶层view上的一个子view，那么该view的属性应该是weak，因为顶层view被Controller使用strong属性引用了，而顶层view本身又持有该view；</p>\n<p>如果Controller对某个view需要单独引用，或者Controller没有引用某个view的父view，那么其属性也应该是strong。</p>\n<p>好吧，其实我能说如果你实在懒得区分什么时候用strong，什么时候用weak，那就将所以后的IBOutLet属性都设成strong吧！在Controller销毁的时候，对应的IBOutLet实例变量也会被销毁，strong指针会被置成nil，因此也不会有内存问题。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><a href=\"https://developer.apple.com/library/ios/releasenotes/objectivec/rn-transitioningtoarc/introduction/introduction.html\" target=\"_blank\" rel=\"noopener\">Transitioning to ARC Release Notes</a></li>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/LoadingResources/CocoaNibs/CocoaNibs.html#//apple_ref/doc/uid/10000051i-CH4-SW6\" target=\"_blank\" rel=\"noopener\">Managing the Lifetimes of Objects from Nib Files</a></li>\n<li><a href=\"https://mikeash.com/pyblog/friday-qa-2012-04-13-nib-memory-management.html\" target=\"_blank\" rel=\"noopener\">Nib Memory Management</a></li>\n</ul>"},{"layout":"post","title":"iOS Code Signing 学习笔记","date":"2014-10-16T11:09:38.000Z","comments":1,"keywords":"iPhone, iOS, 代码签名, Code Signing","_content":"\n最近看了objc.io上第17期中的文章[《Inside Code Signing》](http://www.objc.io/issue-17/inside-code-signing.html)对应的中文翻译版[《代码签名探析》](http://objccn.io/issue-17-2/)，收益颇深，对iOS代码签名机制有了进一步的认识。想了解详细内容建议大家还是去看原文好了。\n\n下面是对此文章的理解再结合自己之前对该部分的认识写出的学习笔记。本文的前提是已经对非对称加密有了一定的了解。\n\n## 一、数字签名（digital signature）\n\n对指定信息使用哈希算法，得到一个固定长度的信息摘要，然后再使用`私钥`（注意必须是私钥）对该摘要加密，就得到了数字签名。所谓的代码签名就是这个意思。\n\n<!-- more -->\n\n## 二、数字证书（digital certificate）\n\n#### 证书生成\n\n开发者在申请iOS开发证书时，需要通过keychain生成一个CSR文件（Certificate Signing Request），提交给苹果的`Apple Worldwide Developer Relations Certification Authority`(WWDR)证书认证中心进行签名，最后从苹果官网下载并安装使用。这个过程中还会产生一个私钥，证书和私钥在keychain中得位置如图：\n\n![cer_private_key](http://img.objccn.io/issue-17/iphone-developer-keychain.png)\n\n#### 证书组成\n\n经过`WWDR`数字签名后的数字证书长这个样子：\n\n![digital certificate](http://img.blog.csdn.net/20130603170838968)\n\n其中包含两大部分：\n\n* 证书本身\n\n包含用户的公钥、用户个人信息、证书颁发机构信息、证书有效期等信息。\n\n* 证书签名\n\n`WWDR`将上述证书本身内容的使用哈希算法得到一个固定长度的信息摘要，然后使用自己的`私钥`对该信息摘要加密生成数字签名，整个过程如图所示：\n\n![digital signature](http://img.blog.csdn.net/20130603170752859)\n\n#### 证书使用\n\niOS系统原本就持有`WWDR`的公钥，系统首先会对证书内容通过指定的哈希算法计算得到一个信息摘要；然后使用`WWDR`的公钥对证书中包含的数字签名解密，从而得到经过`WWDR`的私钥加密过的信息摘要；最后对比两个信息摘要，如果内容相同就说明该证书可信。整个过程如图所示：\n\n![verify](http://img.blog.csdn.net/20130603170924312)\n\n在验证了证书是可信的以后，iOS系统就可以获取到证书中包含的开发者的公钥，并使用该公钥来判断代码签名的可用性了。\n\n#### 证书存在的意义\n\n通过证书使用过程可以看出，证书本身只是一个中间媒介，iOS系统对证书并不关心，它其实只想要证书中包含的开发者的公钥！！\n\n但是开发者怎么才能证明公钥是自己的呢？iOS安全系统怎么才能相信这个公钥就是这个开发者的呢？\n\n不管是哪一个开发者对iOS的安全系统说，这个公钥就是我的，系统是都不相信的，即系统对开发者有着百分之百的不信任感。但是iOS安全系统对自家的`WWDR`是可信任的，苹果将`WWDR`的公钥内置在了iOS系统中。有了证书，iOS安全系统只需要通过`WWDR`的公钥就可以获取到任何一个开发者的可信任的公钥了，这就是证书存在的意义！！\n\n## 三、公钥（public key）\n\n公钥被包含在数字证书里，数字证书又被包含在`描述文件`(Provisioning File)中，`描述文件`在应用被安装的时候会被拷贝到iOS设备中。\n\niOS安全系统通过证书就能够确定开发者身份，就能够通过从证书中获取到的公钥来验证开发者用该公钥对应的私钥签名后的代码、资源文件等有没有被更改破坏，最终确定应用能否合法的在iOS设备上合法运行。\n\n## 四、私钥（private key）\n\n每个证书（其实是公钥）都对应有一个私钥，\n\n私钥会被用来对代码、资源文件等签名。只有开发证书和描述文件是没办法正常调试的，因为没有私钥根本无法签名。\n\n\n此后的内容基本都是从[《代码签名探析》](http://objccn.io/issue-17-2/)摘抄过来的笔记，建议大家看原文好了。\n\n\n## 五、签名相关命令\n\n#### 快捷查看系统中能用来对代码进行签名的证书\n\n可以使用如下命令：\n\n```\n$security find-identity -v -p codesigning  \n  1) F10B42FFDE18DF28BA21190121439F2E04BEE4B8 \"iPhone Developer: weizheng li (P7QJ74LFSA)\"\n     1 valid identities found\n```\n\n这就说明当前有一个同时有公钥和私钥的可用证书。\n\n#### 对未签名app手动签名\n\n使用如下命令：\n\n```\n$ codesign -s 'iPhone Developer: Thomas Kollbach (7TPNXN7G6K)' Example.app\n```\n\n#### 对已签名app重新签名\n\n为了重新设置签名，你必须带上 -f 参数，有了这个参数，codesign 会用你选择的签名替换掉已经存在的那一个：：\n\n```\n$ codesign -f -s 'iPhone Developer: Thomas Kollbach (7TPNXN7G6K)' Example.app\n```\n\n#### 查看指定app的签名信息\n\ncodesign 还可以为你提供有关一个可执行文件签名状态的信息，这些信息在出现不明错误时会提供巨大的帮助：\n\n```\n$ codesign -vv -d Example.app\n```\n会列出以下有关 Example.app 的签名信息：\n\n```\nExecutable=/Users/toto/Library/Developer/Xcode/DerivedData/Example-cfsbhbvmswdivqhekxfykvkpngkg/Build/Products/Debug-iphoneos/Example.app/Example  \nIdentifier=ch.kollba.example  \nFormat=bundle with Mach-O thin (arm64)  \nCodeDirectory v=20200 size=26663 flags=0x0(none) hashes=1324+5 location=embedded  \nSignature size=4336  \nAuthority=iPhone Developer: Thomas Kollbach (7TPNXN7G6K)  \nAuthority=Apple Worldwide Developer Relations Certification Authority  \nAuthority=Apple Root CA  \nSigned Time=29.09.2014 22:29:07  \nInfo.plist entries=33  \nTeamIdentifier=DZM8538E3E  \nSealed Resources version=2 rules=4 files=120  \nInternal requirements count=1 size=184  \n```\n\n#### 验证签名文件的完整性\n\n检查已签名的文件是否完整可以使用如下命令：\n\n```\n$ codesign --verify Example.app\n```\n\n就像大多数 UNIX 工具一样，没有任何输出代表签名是完好的。如果修改一下这个二进制文件：\n\n```\n$ echo 'lol' >> Example.app/Example\n$ codesign --verify Example.app\nExample.app: main executable failed strict validation  \n```\n\n和预料中的一样，修改已经签名的应用会导致数字签名验证不通过。\n\n\n## 六、资源文件签名\n\niOS 和 OS X 的应用和框架则是包含了它们所需要的资源在其中的。这些资源包括图片和不同的语言文件，资源中也包括很重要的应用组成部分例如 XIB/NIB 文件，存档文件(archives)，甚至是证书文件。所以为一个程序包设置签名时，这个包中的所有资源文件也都会被设置签名。\n\n为了达到为所有文件设置签名的目的，签名的过程中会在程序包（即Example.app）中新建一个叫做 `_CodeSignatue/CodeResources` 的文件，这个文件中存储了被签名的程序包中所有文件的签名。你可以自己去查看这个签名列表文件，它仅仅是一个 plist 格式文件。\n\n这个列表文件中不光包含了文件和它们的签名的列表，还包含了一系列规则，这些规则决定了哪些资源文件应当被设置签名。伴随 OS X 10.10 DP 5 和 10.9.5 版本的发布，苹果改变了代码签名的格式，也改变了有关资源的规则。如果你使用10.9.5或者更高版本的 codesign 工具，在 CodeResources 文件中会有4个不同区域，其中的 `rules` 和 `files` 是为老版本准备的，而 `files2` 和 `rules2` 是为新的第二版的代码签名准备的。最主要的区别是在新版本中你无法再将某些资源文件排除在代码签名之外，在过去你是可以的，只要在被设置签名的程序包中添加一个名为 `ResourceRules.plist` 的文件，这个文件会规定哪些资源文件在检查代码签名是否完好时应该被忽略。但是在新版本的代码签名中，这种做法不再有效。所有的代码文件和资源文件都必须设置签名，不再可以有例外。在新版本的代码签名规定中，一个程序包中的可执行程序包，例如扩展 (extension)，是一个独立的需要设置签名的个体，在检查签名是否完整时应当被单独对待。\n\n\n## 七、授权文件（entitlements）\n\n在 iOS 上你的应用能做什么依然是沙盒限制的，这些限制大多情况下都由授权文件（entitlements）来决定。授权机制决定了哪些系统资源在什么情况下允许被一个应用使用，简单的说它就是一个沙盒的配置列表。\n\n运行如下命令：\n\n```\n$ codesign -d --entitlements - Example.app\n```\n\n会得到类似的结果：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">  \n<plist version=\"1.0\">  \n<dict>  \n        <key>application-identifier</key>\n        <string>7TPNXN7G6K.ch.kollba.example</string>\n        <key>aps-environment</key>\n        <string>development</string>\n        <key>com.apple.developer.team-identifier</key>\n        <string>7TPNXN7G6K</string>\n        <key>com.apple.developer.ubiquity-container-identifiers</key>\n        <array>\n                <string>7TPNXN7G6K.ch.kollba.example</string>\n        </array>\n        <key>com.apple.developer.ubiquity-kvstore-identifier</key>\n        <string>7TPNXN7G6K.ch.kollba.example</string>\n        <key>com.apple.security.application-groups</key>\n        <array>\n                <string>group.ch.kollba.example</string>\n        </array>\n        <key>get-task-allow</key>\n        <true/>\n</dict>  \n</plist>  \n```\n在 Xcode 的 `Capabilities` 选项卡下选择一些选项之后，Xcode 就会生成这样一段 XML。 Xcode 会自动生成一个 `.entitlements` 文件，然后在需要的时候往里面添加条目。当构建整个应用时，这个文件也会提交给 codesign 作为应用所需要拥有哪些授权的参考。这些授权信息必须都在开发者中心的 App ID 中启用，并且包含在后文介绍的描述文件中。在构建应用时需要使用的授权文件可以在 Xcode build setting 中的 `code signing entitlements`中设置。\n\n在新版本的 Xcode 6 之后，授权信息列表会以 Example.app.xcent 这样的名字的文件形式包含在应用包中。这么做或许是为了在出现配置错误时提供更加有用的错误信息。\n\n## 八、描述文件（provisioning file）\n\n在整个代码签名和沙盒机制中有一个组成部分将签名，授权和沙盒联系了起来，那就是描述文件 (provisioning profiles)。\n\n#### OS X中保存目录\n\nXcode 将从开发者中心下载的全部配置文件都放在了这里：\n\n```\n~/Library/MobileDevice/Provisioning Profiles\n```\n\n#### 文件格式\n\n描述文件并不是一个普通的plist文件，它是一个根据密码讯息语法 (Cryptographic Message Syntax) 加密的文件。\n\n以XML格式查看该文件的命令：\n\n```\n$ security cms -D -i example.mobileprovision\n```\n\n#### 文件内容\n\n描述文件主要包含以下内容：\n\n* UUID\n\n每一个配置文件都有它自己的 UUID 。Xcode 会用这个 UUID 来作为标识，记录你在 build settings 中选择了哪一个配置文件。\n\n* ProvisionedDevices\n\n记录所有可用于调试的设备ID。\n\n* DeveloperCertificates\n\n包含了可以为使用这个配置文件的应用签名的所有证书。所有的证书都是基于 Base64 编码符合 PEM (Privacy Enhanced Mail, RFC 1848) 格式的。\n\n* Entitlements\n\n有关前面讲到的配置文件的所有内容都会被保存在这里。\n\n\n\n## 参考文档\n\n* [Inside Code Signing](http://www.objc.io/issue-17/inside-code-signing.html)\n\n* [iOS Code Signing Troubleshooting](https://developer.apple.com/legacy/library/technotes/tn2250/_index.html#//apple_ref/doc/uid/DTS40009933-CH1-CODE_SIGNING_IN_A_NUTSHELL)\n\n* [代码签名探析](http://objccn.io/issue-17-2/)\n\n* [数字签名是什么？](http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html)\n\n* [非对称加密原理解析](http://blog.csdn.net/wzzvictory/article/details/9015155)\n\n* [数字证书原理](http://www.2cto.com/Article/201203/122095.html)\n\n\n","source":"_posts/2014-10-16-ios-code-signing-xue-xi-bi-ji.markdown","raw":"---\nlayout: post\ntitle: \"iOS Code Signing 学习笔记\"\ndate: 2014-10-16 19:09:38 +0800\ncomments: true\ncategories: iOS\ntags: [iPhone, iOS, 代码签名, Code Signing]\nkeywords: iPhone, iOS, 代码签名, Code Signing\n---\n\n最近看了objc.io上第17期中的文章[《Inside Code Signing》](http://www.objc.io/issue-17/inside-code-signing.html)对应的中文翻译版[《代码签名探析》](http://objccn.io/issue-17-2/)，收益颇深，对iOS代码签名机制有了进一步的认识。想了解详细内容建议大家还是去看原文好了。\n\n下面是对此文章的理解再结合自己之前对该部分的认识写出的学习笔记。本文的前提是已经对非对称加密有了一定的了解。\n\n## 一、数字签名（digital signature）\n\n对指定信息使用哈希算法，得到一个固定长度的信息摘要，然后再使用`私钥`（注意必须是私钥）对该摘要加密，就得到了数字签名。所谓的代码签名就是这个意思。\n\n<!-- more -->\n\n## 二、数字证书（digital certificate）\n\n#### 证书生成\n\n开发者在申请iOS开发证书时，需要通过keychain生成一个CSR文件（Certificate Signing Request），提交给苹果的`Apple Worldwide Developer Relations Certification Authority`(WWDR)证书认证中心进行签名，最后从苹果官网下载并安装使用。这个过程中还会产生一个私钥，证书和私钥在keychain中得位置如图：\n\n![cer_private_key](http://img.objccn.io/issue-17/iphone-developer-keychain.png)\n\n#### 证书组成\n\n经过`WWDR`数字签名后的数字证书长这个样子：\n\n![digital certificate](http://img.blog.csdn.net/20130603170838968)\n\n其中包含两大部分：\n\n* 证书本身\n\n包含用户的公钥、用户个人信息、证书颁发机构信息、证书有效期等信息。\n\n* 证书签名\n\n`WWDR`将上述证书本身内容的使用哈希算法得到一个固定长度的信息摘要，然后使用自己的`私钥`对该信息摘要加密生成数字签名，整个过程如图所示：\n\n![digital signature](http://img.blog.csdn.net/20130603170752859)\n\n#### 证书使用\n\niOS系统原本就持有`WWDR`的公钥，系统首先会对证书内容通过指定的哈希算法计算得到一个信息摘要；然后使用`WWDR`的公钥对证书中包含的数字签名解密，从而得到经过`WWDR`的私钥加密过的信息摘要；最后对比两个信息摘要，如果内容相同就说明该证书可信。整个过程如图所示：\n\n![verify](http://img.blog.csdn.net/20130603170924312)\n\n在验证了证书是可信的以后，iOS系统就可以获取到证书中包含的开发者的公钥，并使用该公钥来判断代码签名的可用性了。\n\n#### 证书存在的意义\n\n通过证书使用过程可以看出，证书本身只是一个中间媒介，iOS系统对证书并不关心，它其实只想要证书中包含的开发者的公钥！！\n\n但是开发者怎么才能证明公钥是自己的呢？iOS安全系统怎么才能相信这个公钥就是这个开发者的呢？\n\n不管是哪一个开发者对iOS的安全系统说，这个公钥就是我的，系统是都不相信的，即系统对开发者有着百分之百的不信任感。但是iOS安全系统对自家的`WWDR`是可信任的，苹果将`WWDR`的公钥内置在了iOS系统中。有了证书，iOS安全系统只需要通过`WWDR`的公钥就可以获取到任何一个开发者的可信任的公钥了，这就是证书存在的意义！！\n\n## 三、公钥（public key）\n\n公钥被包含在数字证书里，数字证书又被包含在`描述文件`(Provisioning File)中，`描述文件`在应用被安装的时候会被拷贝到iOS设备中。\n\niOS安全系统通过证书就能够确定开发者身份，就能够通过从证书中获取到的公钥来验证开发者用该公钥对应的私钥签名后的代码、资源文件等有没有被更改破坏，最终确定应用能否合法的在iOS设备上合法运行。\n\n## 四、私钥（private key）\n\n每个证书（其实是公钥）都对应有一个私钥，\n\n私钥会被用来对代码、资源文件等签名。只有开发证书和描述文件是没办法正常调试的，因为没有私钥根本无法签名。\n\n\n此后的内容基本都是从[《代码签名探析》](http://objccn.io/issue-17-2/)摘抄过来的笔记，建议大家看原文好了。\n\n\n## 五、签名相关命令\n\n#### 快捷查看系统中能用来对代码进行签名的证书\n\n可以使用如下命令：\n\n```\n$security find-identity -v -p codesigning  \n  1) F10B42FFDE18DF28BA21190121439F2E04BEE4B8 \"iPhone Developer: weizheng li (P7QJ74LFSA)\"\n     1 valid identities found\n```\n\n这就说明当前有一个同时有公钥和私钥的可用证书。\n\n#### 对未签名app手动签名\n\n使用如下命令：\n\n```\n$ codesign -s 'iPhone Developer: Thomas Kollbach (7TPNXN7G6K)' Example.app\n```\n\n#### 对已签名app重新签名\n\n为了重新设置签名，你必须带上 -f 参数，有了这个参数，codesign 会用你选择的签名替换掉已经存在的那一个：：\n\n```\n$ codesign -f -s 'iPhone Developer: Thomas Kollbach (7TPNXN7G6K)' Example.app\n```\n\n#### 查看指定app的签名信息\n\ncodesign 还可以为你提供有关一个可执行文件签名状态的信息，这些信息在出现不明错误时会提供巨大的帮助：\n\n```\n$ codesign -vv -d Example.app\n```\n会列出以下有关 Example.app 的签名信息：\n\n```\nExecutable=/Users/toto/Library/Developer/Xcode/DerivedData/Example-cfsbhbvmswdivqhekxfykvkpngkg/Build/Products/Debug-iphoneos/Example.app/Example  \nIdentifier=ch.kollba.example  \nFormat=bundle with Mach-O thin (arm64)  \nCodeDirectory v=20200 size=26663 flags=0x0(none) hashes=1324+5 location=embedded  \nSignature size=4336  \nAuthority=iPhone Developer: Thomas Kollbach (7TPNXN7G6K)  \nAuthority=Apple Worldwide Developer Relations Certification Authority  \nAuthority=Apple Root CA  \nSigned Time=29.09.2014 22:29:07  \nInfo.plist entries=33  \nTeamIdentifier=DZM8538E3E  \nSealed Resources version=2 rules=4 files=120  \nInternal requirements count=1 size=184  \n```\n\n#### 验证签名文件的完整性\n\n检查已签名的文件是否完整可以使用如下命令：\n\n```\n$ codesign --verify Example.app\n```\n\n就像大多数 UNIX 工具一样，没有任何输出代表签名是完好的。如果修改一下这个二进制文件：\n\n```\n$ echo 'lol' >> Example.app/Example\n$ codesign --verify Example.app\nExample.app: main executable failed strict validation  \n```\n\n和预料中的一样，修改已经签名的应用会导致数字签名验证不通过。\n\n\n## 六、资源文件签名\n\niOS 和 OS X 的应用和框架则是包含了它们所需要的资源在其中的。这些资源包括图片和不同的语言文件，资源中也包括很重要的应用组成部分例如 XIB/NIB 文件，存档文件(archives)，甚至是证书文件。所以为一个程序包设置签名时，这个包中的所有资源文件也都会被设置签名。\n\n为了达到为所有文件设置签名的目的，签名的过程中会在程序包（即Example.app）中新建一个叫做 `_CodeSignatue/CodeResources` 的文件，这个文件中存储了被签名的程序包中所有文件的签名。你可以自己去查看这个签名列表文件，它仅仅是一个 plist 格式文件。\n\n这个列表文件中不光包含了文件和它们的签名的列表，还包含了一系列规则，这些规则决定了哪些资源文件应当被设置签名。伴随 OS X 10.10 DP 5 和 10.9.5 版本的发布，苹果改变了代码签名的格式，也改变了有关资源的规则。如果你使用10.9.5或者更高版本的 codesign 工具，在 CodeResources 文件中会有4个不同区域，其中的 `rules` 和 `files` 是为老版本准备的，而 `files2` 和 `rules2` 是为新的第二版的代码签名准备的。最主要的区别是在新版本中你无法再将某些资源文件排除在代码签名之外，在过去你是可以的，只要在被设置签名的程序包中添加一个名为 `ResourceRules.plist` 的文件，这个文件会规定哪些资源文件在检查代码签名是否完好时应该被忽略。但是在新版本的代码签名中，这种做法不再有效。所有的代码文件和资源文件都必须设置签名，不再可以有例外。在新版本的代码签名规定中，一个程序包中的可执行程序包，例如扩展 (extension)，是一个独立的需要设置签名的个体，在检查签名是否完整时应当被单独对待。\n\n\n## 七、授权文件（entitlements）\n\n在 iOS 上你的应用能做什么依然是沙盒限制的，这些限制大多情况下都由授权文件（entitlements）来决定。授权机制决定了哪些系统资源在什么情况下允许被一个应用使用，简单的说它就是一个沙盒的配置列表。\n\n运行如下命令：\n\n```\n$ codesign -d --entitlements - Example.app\n```\n\n会得到类似的结果：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">  \n<plist version=\"1.0\">  \n<dict>  \n        <key>application-identifier</key>\n        <string>7TPNXN7G6K.ch.kollba.example</string>\n        <key>aps-environment</key>\n        <string>development</string>\n        <key>com.apple.developer.team-identifier</key>\n        <string>7TPNXN7G6K</string>\n        <key>com.apple.developer.ubiquity-container-identifiers</key>\n        <array>\n                <string>7TPNXN7G6K.ch.kollba.example</string>\n        </array>\n        <key>com.apple.developer.ubiquity-kvstore-identifier</key>\n        <string>7TPNXN7G6K.ch.kollba.example</string>\n        <key>com.apple.security.application-groups</key>\n        <array>\n                <string>group.ch.kollba.example</string>\n        </array>\n        <key>get-task-allow</key>\n        <true/>\n</dict>  \n</plist>  \n```\n在 Xcode 的 `Capabilities` 选项卡下选择一些选项之后，Xcode 就会生成这样一段 XML。 Xcode 会自动生成一个 `.entitlements` 文件，然后在需要的时候往里面添加条目。当构建整个应用时，这个文件也会提交给 codesign 作为应用所需要拥有哪些授权的参考。这些授权信息必须都在开发者中心的 App ID 中启用，并且包含在后文介绍的描述文件中。在构建应用时需要使用的授权文件可以在 Xcode build setting 中的 `code signing entitlements`中设置。\n\n在新版本的 Xcode 6 之后，授权信息列表会以 Example.app.xcent 这样的名字的文件形式包含在应用包中。这么做或许是为了在出现配置错误时提供更加有用的错误信息。\n\n## 八、描述文件（provisioning file）\n\n在整个代码签名和沙盒机制中有一个组成部分将签名，授权和沙盒联系了起来，那就是描述文件 (provisioning profiles)。\n\n#### OS X中保存目录\n\nXcode 将从开发者中心下载的全部配置文件都放在了这里：\n\n```\n~/Library/MobileDevice/Provisioning Profiles\n```\n\n#### 文件格式\n\n描述文件并不是一个普通的plist文件，它是一个根据密码讯息语法 (Cryptographic Message Syntax) 加密的文件。\n\n以XML格式查看该文件的命令：\n\n```\n$ security cms -D -i example.mobileprovision\n```\n\n#### 文件内容\n\n描述文件主要包含以下内容：\n\n* UUID\n\n每一个配置文件都有它自己的 UUID 。Xcode 会用这个 UUID 来作为标识，记录你在 build settings 中选择了哪一个配置文件。\n\n* ProvisionedDevices\n\n记录所有可用于调试的设备ID。\n\n* DeveloperCertificates\n\n包含了可以为使用这个配置文件的应用签名的所有证书。所有的证书都是基于 Base64 编码符合 PEM (Privacy Enhanced Mail, RFC 1848) 格式的。\n\n* Entitlements\n\n有关前面讲到的配置文件的所有内容都会被保存在这里。\n\n\n\n## 参考文档\n\n* [Inside Code Signing](http://www.objc.io/issue-17/inside-code-signing.html)\n\n* [iOS Code Signing Troubleshooting](https://developer.apple.com/legacy/library/technotes/tn2250/_index.html#//apple_ref/doc/uid/DTS40009933-CH1-CODE_SIGNING_IN_A_NUTSHELL)\n\n* [代码签名探析](http://objccn.io/issue-17-2/)\n\n* [数字签名是什么？](http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html)\n\n* [非对称加密原理解析](http://blog.csdn.net/wzzvictory/article/details/9015155)\n\n* [数字证书原理](http://www.2cto.com/Article/201203/122095.html)\n\n\n","slug":"2014-10-16-ios-code-signing-xue-xi-bi-ji","published":1,"updated":"2019-09-23T12:50:35.000Z","photos":[],"link":"","_id":"ck0zclidg001oqhtf58d2kfoh","content":"<p>最近看了objc.io上第17期中的文章<a href=\"http://www.objc.io/issue-17/inside-code-signing.html\" target=\"_blank\" rel=\"noopener\">《Inside Code Signing》</a>对应的中文翻译版<a href=\"http://objccn.io/issue-17-2/\" target=\"_blank\" rel=\"noopener\">《代码签名探析》</a>，收益颇深，对iOS代码签名机制有了进一步的认识。想了解详细内容建议大家还是去看原文好了。</p>\n<p>下面是对此文章的理解再结合自己之前对该部分的认识写出的学习笔记。本文的前提是已经对非对称加密有了一定的了解。</p>\n<h2 id=\"一、数字签名（digital-signature）\"><a href=\"#一、数字签名（digital-signature）\" class=\"headerlink\" title=\"一、数字签名（digital signature）\"></a>一、数字签名（digital signature）</h2><p>对指定信息使用哈希算法，得到一个固定长度的信息摘要，然后再使用<code>私钥</code>（注意必须是私钥）对该摘要加密，就得到了数字签名。所谓的代码签名就是这个意思。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"二、数字证书（digital-certificate）\"><a href=\"#二、数字证书（digital-certificate）\" class=\"headerlink\" title=\"二、数字证书（digital certificate）\"></a>二、数字证书（digital certificate）</h2><h4 id=\"证书生成\"><a href=\"#证书生成\" class=\"headerlink\" title=\"证书生成\"></a>证书生成</h4><p>开发者在申请iOS开发证书时，需要通过keychain生成一个CSR文件（Certificate Signing Request），提交给苹果的<code>Apple Worldwide Developer Relations Certification Authority</code>(WWDR)证书认证中心进行签名，最后从苹果官网下载并安装使用。这个过程中还会产生一个私钥，证书和私钥在keychain中得位置如图：</p>\n<p><img src=\"http://img.objccn.io/issue-17/iphone-developer-keychain.png\" alt=\"cer_private_key\"></p>\n<h4 id=\"证书组成\"><a href=\"#证书组成\" class=\"headerlink\" title=\"证书组成\"></a>证书组成</h4><p>经过<code>WWDR</code>数字签名后的数字证书长这个样子：</p>\n<p><img src=\"http://img.blog.csdn.net/20130603170838968\" alt=\"digital certificate\"></p>\n<p>其中包含两大部分：</p>\n<ul>\n<li>证书本身</li>\n</ul>\n<p>包含用户的公钥、用户个人信息、证书颁发机构信息、证书有效期等信息。</p>\n<ul>\n<li>证书签名</li>\n</ul>\n<p><code>WWDR</code>将上述证书本身内容的使用哈希算法得到一个固定长度的信息摘要，然后使用自己的<code>私钥</code>对该信息摘要加密生成数字签名，整个过程如图所示：</p>\n<p><img src=\"http://img.blog.csdn.net/20130603170752859\" alt=\"digital signature\"></p>\n<h4 id=\"证书使用\"><a href=\"#证书使用\" class=\"headerlink\" title=\"证书使用\"></a>证书使用</h4><p>iOS系统原本就持有<code>WWDR</code>的公钥，系统首先会对证书内容通过指定的哈希算法计算得到一个信息摘要；然后使用<code>WWDR</code>的公钥对证书中包含的数字签名解密，从而得到经过<code>WWDR</code>的私钥加密过的信息摘要；最后对比两个信息摘要，如果内容相同就说明该证书可信。整个过程如图所示：</p>\n<p><img src=\"http://img.blog.csdn.net/20130603170924312\" alt=\"verify\"></p>\n<p>在验证了证书是可信的以后，iOS系统就可以获取到证书中包含的开发者的公钥，并使用该公钥来判断代码签名的可用性了。</p>\n<h4 id=\"证书存在的意义\"><a href=\"#证书存在的意义\" class=\"headerlink\" title=\"证书存在的意义\"></a>证书存在的意义</h4><p>通过证书使用过程可以看出，证书本身只是一个中间媒介，iOS系统对证书并不关心，它其实只想要证书中包含的开发者的公钥！！</p>\n<p>但是开发者怎么才能证明公钥是自己的呢？iOS安全系统怎么才能相信这个公钥就是这个开发者的呢？</p>\n<p>不管是哪一个开发者对iOS的安全系统说，这个公钥就是我的，系统是都不相信的，即系统对开发者有着百分之百的不信任感。但是iOS安全系统对自家的<code>WWDR</code>是可信任的，苹果将<code>WWDR</code>的公钥内置在了iOS系统中。有了证书，iOS安全系统只需要通过<code>WWDR</code>的公钥就可以获取到任何一个开发者的可信任的公钥了，这就是证书存在的意义！！</p>\n<h2 id=\"三、公钥（public-key）\"><a href=\"#三、公钥（public-key）\" class=\"headerlink\" title=\"三、公钥（public key）\"></a>三、公钥（public key）</h2><p>公钥被包含在数字证书里，数字证书又被包含在<code>描述文件</code>(Provisioning File)中，<code>描述文件</code>在应用被安装的时候会被拷贝到iOS设备中。</p>\n<p>iOS安全系统通过证书就能够确定开发者身份，就能够通过从证书中获取到的公钥来验证开发者用该公钥对应的私钥签名后的代码、资源文件等有没有被更改破坏，最终确定应用能否合法的在iOS设备上合法运行。</p>\n<h2 id=\"四、私钥（private-key）\"><a href=\"#四、私钥（private-key）\" class=\"headerlink\" title=\"四、私钥（private key）\"></a>四、私钥（private key）</h2><p>每个证书（其实是公钥）都对应有一个私钥，</p>\n<p>私钥会被用来对代码、资源文件等签名。只有开发证书和描述文件是没办法正常调试的，因为没有私钥根本无法签名。</p>\n<p>此后的内容基本都是从<a href=\"http://objccn.io/issue-17-2/\" target=\"_blank\" rel=\"noopener\">《代码签名探析》</a>摘抄过来的笔记，建议大家看原文好了。</p>\n<h2 id=\"五、签名相关命令\"><a href=\"#五、签名相关命令\" class=\"headerlink\" title=\"五、签名相关命令\"></a>五、签名相关命令</h2><h4 id=\"快捷查看系统中能用来对代码进行签名的证书\"><a href=\"#快捷查看系统中能用来对代码进行签名的证书\" class=\"headerlink\" title=\"快捷查看系统中能用来对代码进行签名的证书\"></a>快捷查看系统中能用来对代码进行签名的证书</h4><p>可以使用如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$security find-identity -v -p codesigning  </span><br><span class=\"line\">  1) F10B42FFDE18DF28BA21190121439F2E04BEE4B8 &quot;iPhone Developer: weizheng li (P7QJ74LFSA)&quot;</span><br><span class=\"line\">     1 valid identities found</span><br></pre></td></tr></table></figure>\n\n<p>这就说明当前有一个同时有公钥和私钥的可用证书。</p>\n<h4 id=\"对未签名app手动签名\"><a href=\"#对未签名app手动签名\" class=\"headerlink\" title=\"对未签名app手动签名\"></a>对未签名app手动签名</h4><p>使用如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ codesign -s &apos;iPhone Developer: Thomas Kollbach (7TPNXN7G6K)&apos; Example.app</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"对已签名app重新签名\"><a href=\"#对已签名app重新签名\" class=\"headerlink\" title=\"对已签名app重新签名\"></a>对已签名app重新签名</h4><p>为了重新设置签名，你必须带上 -f 参数，有了这个参数，codesign 会用你选择的签名替换掉已经存在的那一个：：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ codesign -f -s &apos;iPhone Developer: Thomas Kollbach (7TPNXN7G6K)&apos; Example.app</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看指定app的签名信息\"><a href=\"#查看指定app的签名信息\" class=\"headerlink\" title=\"查看指定app的签名信息\"></a>查看指定app的签名信息</h4><p>codesign 还可以为你提供有关一个可执行文件签名状态的信息，这些信息在出现不明错误时会提供巨大的帮助：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ codesign -vv -d Example.app</span><br></pre></td></tr></table></figure>\n\n<p>会列出以下有关 Example.app 的签名信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Executable=/Users/toto/Library/Developer/Xcode/DerivedData/Example-cfsbhbvmswdivqhekxfykvkpngkg/Build/Products/Debug-iphoneos/Example.app/Example  </span><br><span class=\"line\">Identifier=ch.kollba.example  </span><br><span class=\"line\">Format=bundle with Mach-O thin (arm64)  </span><br><span class=\"line\">CodeDirectory v=20200 size=26663 flags=0x0(none) hashes=1324+5 location=embedded  </span><br><span class=\"line\">Signature size=4336  </span><br><span class=\"line\">Authority=iPhone Developer: Thomas Kollbach (7TPNXN7G6K)  </span><br><span class=\"line\">Authority=Apple Worldwide Developer Relations Certification Authority  </span><br><span class=\"line\">Authority=Apple Root CA  </span><br><span class=\"line\">Signed Time=29.09.2014 22:29:07  </span><br><span class=\"line\">Info.plist entries=33  </span><br><span class=\"line\">TeamIdentifier=DZM8538E3E  </span><br><span class=\"line\">Sealed Resources version=2 rules=4 files=120  </span><br><span class=\"line\">Internal requirements count=1 size=184</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"验证签名文件的完整性\"><a href=\"#验证签名文件的完整性\" class=\"headerlink\" title=\"验证签名文件的完整性\"></a>验证签名文件的完整性</h4><p>检查已签名的文件是否完整可以使用如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ codesign --verify Example.app</span><br></pre></td></tr></table></figure>\n\n<p>就像大多数 UNIX 工具一样，没有任何输出代表签名是完好的。如果修改一下这个二进制文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &apos;lol&apos; &gt;&gt; Example.app/Example</span><br><span class=\"line\">$ codesign --verify Example.app</span><br><span class=\"line\">Example.app: main executable failed strict validation</span><br></pre></td></tr></table></figure>\n\n<p>和预料中的一样，修改已经签名的应用会导致数字签名验证不通过。</p>\n<h2 id=\"六、资源文件签名\"><a href=\"#六、资源文件签名\" class=\"headerlink\" title=\"六、资源文件签名\"></a>六、资源文件签名</h2><p>iOS 和 OS X 的应用和框架则是包含了它们所需要的资源在其中的。这些资源包括图片和不同的语言文件，资源中也包括很重要的应用组成部分例如 XIB/NIB 文件，存档文件(archives)，甚至是证书文件。所以为一个程序包设置签名时，这个包中的所有资源文件也都会被设置签名。</p>\n<p>为了达到为所有文件设置签名的目的，签名的过程中会在程序包（即Example.app）中新建一个叫做 <code>_CodeSignatue/CodeResources</code> 的文件，这个文件中存储了被签名的程序包中所有文件的签名。你可以自己去查看这个签名列表文件，它仅仅是一个 plist 格式文件。</p>\n<p>这个列表文件中不光包含了文件和它们的签名的列表，还包含了一系列规则，这些规则决定了哪些资源文件应当被设置签名。伴随 OS X 10.10 DP 5 和 10.9.5 版本的发布，苹果改变了代码签名的格式，也改变了有关资源的规则。如果你使用10.9.5或者更高版本的 codesign 工具，在 CodeResources 文件中会有4个不同区域，其中的 <code>rules</code> 和 <code>files</code> 是为老版本准备的，而 <code>files2</code> 和 <code>rules2</code> 是为新的第二版的代码签名准备的。最主要的区别是在新版本中你无法再将某些资源文件排除在代码签名之外，在过去你是可以的，只要在被设置签名的程序包中添加一个名为 <code>ResourceRules.plist</code> 的文件，这个文件会规定哪些资源文件在检查代码签名是否完好时应该被忽略。但是在新版本的代码签名中，这种做法不再有效。所有的代码文件和资源文件都必须设置签名，不再可以有例外。在新版本的代码签名规定中，一个程序包中的可执行程序包，例如扩展 (extension)，是一个独立的需要设置签名的个体，在检查签名是否完整时应当被单独对待。</p>\n<h2 id=\"七、授权文件（entitlements）\"><a href=\"#七、授权文件（entitlements）\" class=\"headerlink\" title=\"七、授权文件（entitlements）\"></a>七、授权文件（entitlements）</h2><p>在 iOS 上你的应用能做什么依然是沙盒限制的，这些限制大多情况下都由授权文件（entitlements）来决定。授权机制决定了哪些系统资源在什么情况下允许被一个应用使用，简单的说它就是一个沙盒的配置列表。</p>\n<p>运行如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ codesign -d --entitlements - Example.app</span><br></pre></td></tr></table></figure>\n\n<p>会得到类似的结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  </span><br><span class=\"line\">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;  </span><br><span class=\"line\">&lt;plist version=&quot;1.0&quot;&gt;  </span><br><span class=\"line\">&lt;dict&gt;  </span><br><span class=\"line\">        &lt;key&gt;application-identifier&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;7TPNXN7G6K.ch.kollba.example&lt;/string&gt;</span><br><span class=\"line\">        &lt;key&gt;aps-environment&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;development&lt;/string&gt;</span><br><span class=\"line\">        &lt;key&gt;com.apple.developer.team-identifier&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;7TPNXN7G6K&lt;/string&gt;</span><br><span class=\"line\">        &lt;key&gt;com.apple.developer.ubiquity-container-identifiers&lt;/key&gt;</span><br><span class=\"line\">        &lt;array&gt;</span><br><span class=\"line\">                &lt;string&gt;7TPNXN7G6K.ch.kollba.example&lt;/string&gt;</span><br><span class=\"line\">        &lt;/array&gt;</span><br><span class=\"line\">        &lt;key&gt;com.apple.developer.ubiquity-kvstore-identifier&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;7TPNXN7G6K.ch.kollba.example&lt;/string&gt;</span><br><span class=\"line\">        &lt;key&gt;com.apple.security.application-groups&lt;/key&gt;</span><br><span class=\"line\">        &lt;array&gt;</span><br><span class=\"line\">                &lt;string&gt;group.ch.kollba.example&lt;/string&gt;</span><br><span class=\"line\">        &lt;/array&gt;</span><br><span class=\"line\">        &lt;key&gt;get-task-allow&lt;/key&gt;</span><br><span class=\"line\">        &lt;true/&gt;</span><br><span class=\"line\">&lt;/dict&gt;  </span><br><span class=\"line\">&lt;/plist&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在 Xcode 的 <code>Capabilities</code> 选项卡下选择一些选项之后，Xcode 就会生成这样一段 XML。 Xcode 会自动生成一个 <code>.entitlements</code> 文件，然后在需要的时候往里面添加条目。当构建整个应用时，这个文件也会提交给 codesign 作为应用所需要拥有哪些授权的参考。这些授权信息必须都在开发者中心的 App ID 中启用，并且包含在后文介绍的描述文件中。在构建应用时需要使用的授权文件可以在 Xcode build setting 中的 <code>code signing entitlements</code>中设置。</p>\n<p>在新版本的 Xcode 6 之后，授权信息列表会以 Example.app.xcent 这样的名字的文件形式包含在应用包中。这么做或许是为了在出现配置错误时提供更加有用的错误信息。</p>\n<h2 id=\"八、描述文件（provisioning-file）\"><a href=\"#八、描述文件（provisioning-file）\" class=\"headerlink\" title=\"八、描述文件（provisioning file）\"></a>八、描述文件（provisioning file）</h2><p>在整个代码签名和沙盒机制中有一个组成部分将签名，授权和沙盒联系了起来，那就是描述文件 (provisioning profiles)。</p>\n<h4 id=\"OS-X中保存目录\"><a href=\"#OS-X中保存目录\" class=\"headerlink\" title=\"OS X中保存目录\"></a>OS X中保存目录</h4><p>Xcode 将从开发者中心下载的全部配置文件都放在了这里：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/Library/MobileDevice/Provisioning Profiles</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"文件格式\"><a href=\"#文件格式\" class=\"headerlink\" title=\"文件格式\"></a>文件格式</h4><p>描述文件并不是一个普通的plist文件，它是一个根据密码讯息语法 (Cryptographic Message Syntax) 加密的文件。</p>\n<p>以XML格式查看该文件的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ security cms -D -i example.mobileprovision</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"文件内容\"><a href=\"#文件内容\" class=\"headerlink\" title=\"文件内容\"></a>文件内容</h4><p>描述文件主要包含以下内容：</p>\n<ul>\n<li>UUID</li>\n</ul>\n<p>每一个配置文件都有它自己的 UUID 。Xcode 会用这个 UUID 来作为标识，记录你在 build settings 中选择了哪一个配置文件。</p>\n<ul>\n<li>ProvisionedDevices</li>\n</ul>\n<p>记录所有可用于调试的设备ID。</p>\n<ul>\n<li>DeveloperCertificates</li>\n</ul>\n<p>包含了可以为使用这个配置文件的应用签名的所有证书。所有的证书都是基于 Base64 编码符合 PEM (Privacy Enhanced Mail, RFC 1848) 格式的。</p>\n<ul>\n<li>Entitlements</li>\n</ul>\n<p>有关前面讲到的配置文件的所有内容都会被保存在这里。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><p><a href=\"http://www.objc.io/issue-17/inside-code-signing.html\" target=\"_blank\" rel=\"noopener\">Inside Code Signing</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/legacy/library/technotes/tn2250/_index.html#//apple_ref/doc/uid/DTS40009933-CH1-CODE_SIGNING_IN_A_NUTSHELL\" target=\"_blank\" rel=\"noopener\">iOS Code Signing Troubleshooting</a></p>\n</li>\n<li><p><a href=\"http://objccn.io/issue-17-2/\" target=\"_blank\" rel=\"noopener\">代码签名探析</a></p>\n</li>\n<li><p><a href=\"http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html\" target=\"_blank\" rel=\"noopener\">数字签名是什么？</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/wzzvictory/article/details/9015155\" target=\"_blank\" rel=\"noopener\">非对称加密原理解析</a></p>\n</li>\n<li><p><a href=\"http://www.2cto.com/Article/201203/122095.html\" target=\"_blank\" rel=\"noopener\">数字证书原理</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>最近看了objc.io上第17期中的文章<a href=\"http://www.objc.io/issue-17/inside-code-signing.html\" target=\"_blank\" rel=\"noopener\">《Inside Code Signing》</a>对应的中文翻译版<a href=\"http://objccn.io/issue-17-2/\" target=\"_blank\" rel=\"noopener\">《代码签名探析》</a>，收益颇深，对iOS代码签名机制有了进一步的认识。想了解详细内容建议大家还是去看原文好了。</p>\n<p>下面是对此文章的理解再结合自己之前对该部分的认识写出的学习笔记。本文的前提是已经对非对称加密有了一定的了解。</p>\n<h2 id=\"一、数字签名（digital-signature）\"><a href=\"#一、数字签名（digital-signature）\" class=\"headerlink\" title=\"一、数字签名（digital signature）\"></a>一、数字签名（digital signature）</h2><p>对指定信息使用哈希算法，得到一个固定长度的信息摘要，然后再使用<code>私钥</code>（注意必须是私钥）对该摘要加密，就得到了数字签名。所谓的代码签名就是这个意思。</p>","more":"<h2 id=\"二、数字证书（digital-certificate）\"><a href=\"#二、数字证书（digital-certificate）\" class=\"headerlink\" title=\"二、数字证书（digital certificate）\"></a>二、数字证书（digital certificate）</h2><h4 id=\"证书生成\"><a href=\"#证书生成\" class=\"headerlink\" title=\"证书生成\"></a>证书生成</h4><p>开发者在申请iOS开发证书时，需要通过keychain生成一个CSR文件（Certificate Signing Request），提交给苹果的<code>Apple Worldwide Developer Relations Certification Authority</code>(WWDR)证书认证中心进行签名，最后从苹果官网下载并安装使用。这个过程中还会产生一个私钥，证书和私钥在keychain中得位置如图：</p>\n<p><img src=\"http://img.objccn.io/issue-17/iphone-developer-keychain.png\" alt=\"cer_private_key\"></p>\n<h4 id=\"证书组成\"><a href=\"#证书组成\" class=\"headerlink\" title=\"证书组成\"></a>证书组成</h4><p>经过<code>WWDR</code>数字签名后的数字证书长这个样子：</p>\n<p><img src=\"http://img.blog.csdn.net/20130603170838968\" alt=\"digital certificate\"></p>\n<p>其中包含两大部分：</p>\n<ul>\n<li>证书本身</li>\n</ul>\n<p>包含用户的公钥、用户个人信息、证书颁发机构信息、证书有效期等信息。</p>\n<ul>\n<li>证书签名</li>\n</ul>\n<p><code>WWDR</code>将上述证书本身内容的使用哈希算法得到一个固定长度的信息摘要，然后使用自己的<code>私钥</code>对该信息摘要加密生成数字签名，整个过程如图所示：</p>\n<p><img src=\"http://img.blog.csdn.net/20130603170752859\" alt=\"digital signature\"></p>\n<h4 id=\"证书使用\"><a href=\"#证书使用\" class=\"headerlink\" title=\"证书使用\"></a>证书使用</h4><p>iOS系统原本就持有<code>WWDR</code>的公钥，系统首先会对证书内容通过指定的哈希算法计算得到一个信息摘要；然后使用<code>WWDR</code>的公钥对证书中包含的数字签名解密，从而得到经过<code>WWDR</code>的私钥加密过的信息摘要；最后对比两个信息摘要，如果内容相同就说明该证书可信。整个过程如图所示：</p>\n<p><img src=\"http://img.blog.csdn.net/20130603170924312\" alt=\"verify\"></p>\n<p>在验证了证书是可信的以后，iOS系统就可以获取到证书中包含的开发者的公钥，并使用该公钥来判断代码签名的可用性了。</p>\n<h4 id=\"证书存在的意义\"><a href=\"#证书存在的意义\" class=\"headerlink\" title=\"证书存在的意义\"></a>证书存在的意义</h4><p>通过证书使用过程可以看出，证书本身只是一个中间媒介，iOS系统对证书并不关心，它其实只想要证书中包含的开发者的公钥！！</p>\n<p>但是开发者怎么才能证明公钥是自己的呢？iOS安全系统怎么才能相信这个公钥就是这个开发者的呢？</p>\n<p>不管是哪一个开发者对iOS的安全系统说，这个公钥就是我的，系统是都不相信的，即系统对开发者有着百分之百的不信任感。但是iOS安全系统对自家的<code>WWDR</code>是可信任的，苹果将<code>WWDR</code>的公钥内置在了iOS系统中。有了证书，iOS安全系统只需要通过<code>WWDR</code>的公钥就可以获取到任何一个开发者的可信任的公钥了，这就是证书存在的意义！！</p>\n<h2 id=\"三、公钥（public-key）\"><a href=\"#三、公钥（public-key）\" class=\"headerlink\" title=\"三、公钥（public key）\"></a>三、公钥（public key）</h2><p>公钥被包含在数字证书里，数字证书又被包含在<code>描述文件</code>(Provisioning File)中，<code>描述文件</code>在应用被安装的时候会被拷贝到iOS设备中。</p>\n<p>iOS安全系统通过证书就能够确定开发者身份，就能够通过从证书中获取到的公钥来验证开发者用该公钥对应的私钥签名后的代码、资源文件等有没有被更改破坏，最终确定应用能否合法的在iOS设备上合法运行。</p>\n<h2 id=\"四、私钥（private-key）\"><a href=\"#四、私钥（private-key）\" class=\"headerlink\" title=\"四、私钥（private key）\"></a>四、私钥（private key）</h2><p>每个证书（其实是公钥）都对应有一个私钥，</p>\n<p>私钥会被用来对代码、资源文件等签名。只有开发证书和描述文件是没办法正常调试的，因为没有私钥根本无法签名。</p>\n<p>此后的内容基本都是从<a href=\"http://objccn.io/issue-17-2/\" target=\"_blank\" rel=\"noopener\">《代码签名探析》</a>摘抄过来的笔记，建议大家看原文好了。</p>\n<h2 id=\"五、签名相关命令\"><a href=\"#五、签名相关命令\" class=\"headerlink\" title=\"五、签名相关命令\"></a>五、签名相关命令</h2><h4 id=\"快捷查看系统中能用来对代码进行签名的证书\"><a href=\"#快捷查看系统中能用来对代码进行签名的证书\" class=\"headerlink\" title=\"快捷查看系统中能用来对代码进行签名的证书\"></a>快捷查看系统中能用来对代码进行签名的证书</h4><p>可以使用如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$security find-identity -v -p codesigning  </span><br><span class=\"line\">  1) F10B42FFDE18DF28BA21190121439F2E04BEE4B8 &quot;iPhone Developer: weizheng li (P7QJ74LFSA)&quot;</span><br><span class=\"line\">     1 valid identities found</span><br></pre></td></tr></table></figure>\n\n<p>这就说明当前有一个同时有公钥和私钥的可用证书。</p>\n<h4 id=\"对未签名app手动签名\"><a href=\"#对未签名app手动签名\" class=\"headerlink\" title=\"对未签名app手动签名\"></a>对未签名app手动签名</h4><p>使用如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ codesign -s &apos;iPhone Developer: Thomas Kollbach (7TPNXN7G6K)&apos; Example.app</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"对已签名app重新签名\"><a href=\"#对已签名app重新签名\" class=\"headerlink\" title=\"对已签名app重新签名\"></a>对已签名app重新签名</h4><p>为了重新设置签名，你必须带上 -f 参数，有了这个参数，codesign 会用你选择的签名替换掉已经存在的那一个：：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ codesign -f -s &apos;iPhone Developer: Thomas Kollbach (7TPNXN7G6K)&apos; Example.app</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看指定app的签名信息\"><a href=\"#查看指定app的签名信息\" class=\"headerlink\" title=\"查看指定app的签名信息\"></a>查看指定app的签名信息</h4><p>codesign 还可以为你提供有关一个可执行文件签名状态的信息，这些信息在出现不明错误时会提供巨大的帮助：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ codesign -vv -d Example.app</span><br></pre></td></tr></table></figure>\n\n<p>会列出以下有关 Example.app 的签名信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Executable=/Users/toto/Library/Developer/Xcode/DerivedData/Example-cfsbhbvmswdivqhekxfykvkpngkg/Build/Products/Debug-iphoneos/Example.app/Example  </span><br><span class=\"line\">Identifier=ch.kollba.example  </span><br><span class=\"line\">Format=bundle with Mach-O thin (arm64)  </span><br><span class=\"line\">CodeDirectory v=20200 size=26663 flags=0x0(none) hashes=1324+5 location=embedded  </span><br><span class=\"line\">Signature size=4336  </span><br><span class=\"line\">Authority=iPhone Developer: Thomas Kollbach (7TPNXN7G6K)  </span><br><span class=\"line\">Authority=Apple Worldwide Developer Relations Certification Authority  </span><br><span class=\"line\">Authority=Apple Root CA  </span><br><span class=\"line\">Signed Time=29.09.2014 22:29:07  </span><br><span class=\"line\">Info.plist entries=33  </span><br><span class=\"line\">TeamIdentifier=DZM8538E3E  </span><br><span class=\"line\">Sealed Resources version=2 rules=4 files=120  </span><br><span class=\"line\">Internal requirements count=1 size=184</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"验证签名文件的完整性\"><a href=\"#验证签名文件的完整性\" class=\"headerlink\" title=\"验证签名文件的完整性\"></a>验证签名文件的完整性</h4><p>检查已签名的文件是否完整可以使用如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ codesign --verify Example.app</span><br></pre></td></tr></table></figure>\n\n<p>就像大多数 UNIX 工具一样，没有任何输出代表签名是完好的。如果修改一下这个二进制文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &apos;lol&apos; &gt;&gt; Example.app/Example</span><br><span class=\"line\">$ codesign --verify Example.app</span><br><span class=\"line\">Example.app: main executable failed strict validation</span><br></pre></td></tr></table></figure>\n\n<p>和预料中的一样，修改已经签名的应用会导致数字签名验证不通过。</p>\n<h2 id=\"六、资源文件签名\"><a href=\"#六、资源文件签名\" class=\"headerlink\" title=\"六、资源文件签名\"></a>六、资源文件签名</h2><p>iOS 和 OS X 的应用和框架则是包含了它们所需要的资源在其中的。这些资源包括图片和不同的语言文件，资源中也包括很重要的应用组成部分例如 XIB/NIB 文件，存档文件(archives)，甚至是证书文件。所以为一个程序包设置签名时，这个包中的所有资源文件也都会被设置签名。</p>\n<p>为了达到为所有文件设置签名的目的，签名的过程中会在程序包（即Example.app）中新建一个叫做 <code>_CodeSignatue/CodeResources</code> 的文件，这个文件中存储了被签名的程序包中所有文件的签名。你可以自己去查看这个签名列表文件，它仅仅是一个 plist 格式文件。</p>\n<p>这个列表文件中不光包含了文件和它们的签名的列表，还包含了一系列规则，这些规则决定了哪些资源文件应当被设置签名。伴随 OS X 10.10 DP 5 和 10.9.5 版本的发布，苹果改变了代码签名的格式，也改变了有关资源的规则。如果你使用10.9.5或者更高版本的 codesign 工具，在 CodeResources 文件中会有4个不同区域，其中的 <code>rules</code> 和 <code>files</code> 是为老版本准备的，而 <code>files2</code> 和 <code>rules2</code> 是为新的第二版的代码签名准备的。最主要的区别是在新版本中你无法再将某些资源文件排除在代码签名之外，在过去你是可以的，只要在被设置签名的程序包中添加一个名为 <code>ResourceRules.plist</code> 的文件，这个文件会规定哪些资源文件在检查代码签名是否完好时应该被忽略。但是在新版本的代码签名中，这种做法不再有效。所有的代码文件和资源文件都必须设置签名，不再可以有例外。在新版本的代码签名规定中，一个程序包中的可执行程序包，例如扩展 (extension)，是一个独立的需要设置签名的个体，在检查签名是否完整时应当被单独对待。</p>\n<h2 id=\"七、授权文件（entitlements）\"><a href=\"#七、授权文件（entitlements）\" class=\"headerlink\" title=\"七、授权文件（entitlements）\"></a>七、授权文件（entitlements）</h2><p>在 iOS 上你的应用能做什么依然是沙盒限制的，这些限制大多情况下都由授权文件（entitlements）来决定。授权机制决定了哪些系统资源在什么情况下允许被一个应用使用，简单的说它就是一个沙盒的配置列表。</p>\n<p>运行如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ codesign -d --entitlements - Example.app</span><br></pre></td></tr></table></figure>\n\n<p>会得到类似的结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  </span><br><span class=\"line\">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;  </span><br><span class=\"line\">&lt;plist version=&quot;1.0&quot;&gt;  </span><br><span class=\"line\">&lt;dict&gt;  </span><br><span class=\"line\">        &lt;key&gt;application-identifier&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;7TPNXN7G6K.ch.kollba.example&lt;/string&gt;</span><br><span class=\"line\">        &lt;key&gt;aps-environment&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;development&lt;/string&gt;</span><br><span class=\"line\">        &lt;key&gt;com.apple.developer.team-identifier&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;7TPNXN7G6K&lt;/string&gt;</span><br><span class=\"line\">        &lt;key&gt;com.apple.developer.ubiquity-container-identifiers&lt;/key&gt;</span><br><span class=\"line\">        &lt;array&gt;</span><br><span class=\"line\">                &lt;string&gt;7TPNXN7G6K.ch.kollba.example&lt;/string&gt;</span><br><span class=\"line\">        &lt;/array&gt;</span><br><span class=\"line\">        &lt;key&gt;com.apple.developer.ubiquity-kvstore-identifier&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;7TPNXN7G6K.ch.kollba.example&lt;/string&gt;</span><br><span class=\"line\">        &lt;key&gt;com.apple.security.application-groups&lt;/key&gt;</span><br><span class=\"line\">        &lt;array&gt;</span><br><span class=\"line\">                &lt;string&gt;group.ch.kollba.example&lt;/string&gt;</span><br><span class=\"line\">        &lt;/array&gt;</span><br><span class=\"line\">        &lt;key&gt;get-task-allow&lt;/key&gt;</span><br><span class=\"line\">        &lt;true/&gt;</span><br><span class=\"line\">&lt;/dict&gt;  </span><br><span class=\"line\">&lt;/plist&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在 Xcode 的 <code>Capabilities</code> 选项卡下选择一些选项之后，Xcode 就会生成这样一段 XML。 Xcode 会自动生成一个 <code>.entitlements</code> 文件，然后在需要的时候往里面添加条目。当构建整个应用时，这个文件也会提交给 codesign 作为应用所需要拥有哪些授权的参考。这些授权信息必须都在开发者中心的 App ID 中启用，并且包含在后文介绍的描述文件中。在构建应用时需要使用的授权文件可以在 Xcode build setting 中的 <code>code signing entitlements</code>中设置。</p>\n<p>在新版本的 Xcode 6 之后，授权信息列表会以 Example.app.xcent 这样的名字的文件形式包含在应用包中。这么做或许是为了在出现配置错误时提供更加有用的错误信息。</p>\n<h2 id=\"八、描述文件（provisioning-file）\"><a href=\"#八、描述文件（provisioning-file）\" class=\"headerlink\" title=\"八、描述文件（provisioning file）\"></a>八、描述文件（provisioning file）</h2><p>在整个代码签名和沙盒机制中有一个组成部分将签名，授权和沙盒联系了起来，那就是描述文件 (provisioning profiles)。</p>\n<h4 id=\"OS-X中保存目录\"><a href=\"#OS-X中保存目录\" class=\"headerlink\" title=\"OS X中保存目录\"></a>OS X中保存目录</h4><p>Xcode 将从开发者中心下载的全部配置文件都放在了这里：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/Library/MobileDevice/Provisioning Profiles</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"文件格式\"><a href=\"#文件格式\" class=\"headerlink\" title=\"文件格式\"></a>文件格式</h4><p>描述文件并不是一个普通的plist文件，它是一个根据密码讯息语法 (Cryptographic Message Syntax) 加密的文件。</p>\n<p>以XML格式查看该文件的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ security cms -D -i example.mobileprovision</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"文件内容\"><a href=\"#文件内容\" class=\"headerlink\" title=\"文件内容\"></a>文件内容</h4><p>描述文件主要包含以下内容：</p>\n<ul>\n<li>UUID</li>\n</ul>\n<p>每一个配置文件都有它自己的 UUID 。Xcode 会用这个 UUID 来作为标识，记录你在 build settings 中选择了哪一个配置文件。</p>\n<ul>\n<li>ProvisionedDevices</li>\n</ul>\n<p>记录所有可用于调试的设备ID。</p>\n<ul>\n<li>DeveloperCertificates</li>\n</ul>\n<p>包含了可以为使用这个配置文件的应用签名的所有证书。所有的证书都是基于 Base64 编码符合 PEM (Privacy Enhanced Mail, RFC 1848) 格式的。</p>\n<ul>\n<li>Entitlements</li>\n</ul>\n<p>有关前面讲到的配置文件的所有内容都会被保存在这里。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><p><a href=\"http://www.objc.io/issue-17/inside-code-signing.html\" target=\"_blank\" rel=\"noopener\">Inside Code Signing</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/legacy/library/technotes/tn2250/_index.html#//apple_ref/doc/uid/DTS40009933-CH1-CODE_SIGNING_IN_A_NUTSHELL\" target=\"_blank\" rel=\"noopener\">iOS Code Signing Troubleshooting</a></p>\n</li>\n<li><p><a href=\"http://objccn.io/issue-17-2/\" target=\"_blank\" rel=\"noopener\">代码签名探析</a></p>\n</li>\n<li><p><a href=\"http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html\" target=\"_blank\" rel=\"noopener\">数字签名是什么？</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/wzzvictory/article/details/9015155\" target=\"_blank\" rel=\"noopener\">非对称加密原理解析</a></p>\n</li>\n<li><p><a href=\"http://www.2cto.com/Article/201203/122095.html\" target=\"_blank\" rel=\"noopener\">数字证书原理</a></p>\n</li>\n</ul>"},{"layout":"post","title":"离屏渲染学习笔记","date":"2015-05-06T09:17:55.000Z","comments":1,"keywords":"iPhone, iOS, 离屏渲染","_content":"\n## 一、概念理解\n\nOpenGL中，GPU屏幕渲染有以下两种方式：\n\n* On-Screen Rendering\n\n意为当前屏幕渲染，指的是GPU的渲染操作是在当前用于显示的屏幕缓冲区中进行。\n\n* Off-Screen Rendering\n\n意为离屏渲染，指的是GPU在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作。\n\n<!-- more -->\n\n## 二、离屏渲染的是是非非\n\n相比于当前屏幕渲染，离屏渲染的代价是很高的，主要体现在两个方面：\n\n* 创建新缓冲区\n\n要想进行离屏渲染，首先要创建一个新的缓冲区。\n\n* 上下文切换\n\n离屏渲染的整个过程，需要多次切换上下文环境：先是从当前屏幕（On-Screen）切换到离屏（Off-Screen）；等到离屏渲染结束以后，将离屏缓冲区的渲染结果显示到屏幕上有需要将上下文环境从离屏切换到当前屏幕。而上下文环境的切换是要付出很大代价的。\n\n## 三、离屏渲染触发方式\n\n设置了以下属性时，都会触发离屏绘制：\n\n* shouldRasterize（光栅化）\n* masks（遮罩）\n* shadows（阴影）\n* edge antialiasing（抗锯齿）\n* group opacity（不透明）\n\n需要注意的是，如果shouldRasterize被设置成YES，在触发离屏绘制的同时，会将光栅化后的内容缓存起来，如果对应的layer及其sublayers没有发生改变，在下一帧的时候可以直接复用。这将在很大程度上提升渲染性能。\n\n而其它属性如果是开启的，就不会有缓存，离屏绘制会在每一帧都发生。\n\n\n## 四、另一种特殊的“离屏渲染”\n\n按照之前的说法，如果将不在GPU的当前屏幕缓冲区中进行的渲染都称为离屏渲染，那么就还有另一种特殊的“离屏渲染”方式：`CPU渲染`。\n\n如果我们重写了drawRect方法，并且使用任何Core Graphics的技术进行了绘制操作，就涉及到了CPU渲染。整个渲染过程由CPU在App内`同步地`完成，渲染得到的bitmap最后再交由GPU用于显示。\n\n## 五、Instruments \n\nInstruments的Core Animation工具中有几个和离屏渲染相关的检查选项：\n\n* Color Offscreen-Rendered Yellow \n\n开启后会把那些需要离屏渲染的图层高亮成黄色，这就意味着黄色图层可能存在性能问题。\n\n* Color Hits Green and Misses Red\n\n如果shouldRasterize被设置成YES，对应的渲染结果会被缓存，如果图层是绿色，就表示这些缓存被复用；如果是红色就表示缓存会被重复创建，这就表示该处存在性能问题了。\n\n## 六、如何抉择\n\n现在摆在我们面前得有三个选择：当前屏幕渲染、离屏渲染、CPU渲染，该用哪个呢？这需要根据具体的使用场景来决定。\n\n* 尽量使用当前屏幕渲染\n\n鉴于离屏渲染、CPU渲染可能带来的性能问题，一般情况下，我们要尽量使用当前屏幕渲染。\n\n* 离屏渲染 VS CPU渲染\n\n由于GPU的浮点运算能力比CPU强，CPU渲染的效率可能不如离屏渲染；但如果仅仅是实现一个简单的效果，直接使用CPU渲染的效率又可能比离屏渲染好，毕竟离屏渲染要涉及到缓冲区创建和上下文切换等耗时操作。\n\n总之，具体的选择应该由性能测试结果来决定。\n\n\n## 七、写在最后\n\n在赵岩同学的点拨下才理解了离屏渲染的概念，在此表示感谢！\n\n如理解有误还请大家指出。\n\n## 参考文档\n\n* [Getting Pixels onto the Screen](http://www.objc.io/issue-3/moving-pixels-onto-the-screen.html) (中文翻译版：[绘制像素到屏幕上](http://objccn.io/issue-3-1/))\n\n* [Designing for iOS: Graphics &amp; Performance](https://robots.thoughtbot.com/designing-for-ios-graphics-performance)  (中文翻译版：[iOS图形处理和性能](http://www.taofengping.com/2013/05/18/designing-for-ios-graphics-performance/#.VUinciGqpBc))\n\n* [a performance minded take on ios design](https://lobste.rs/s/ckm4uw/a_performance-minded_take_on_ios_design)  (中文翻译版：[iOS离屏绘制的性能和机制分析](http://www.taofengping.com/2013/05/18/ios_offscreen_analysis/#.VUinPyGqpBd))\n","source":"_posts/2015-05-06-chi-ping-xuan-ran-xue-xi-bi-ji.markdown","raw":"---\nlayout: post\ntitle: \"离屏渲染学习笔记\"\ndate: 2015-05-06 17:17:55 +0800\ncomments: true\ncategories: iOS\ntags: [iPhone, iOS, 离屏渲染]\nkeywords: iPhone, iOS, 离屏渲染\n---\n\n## 一、概念理解\n\nOpenGL中，GPU屏幕渲染有以下两种方式：\n\n* On-Screen Rendering\n\n意为当前屏幕渲染，指的是GPU的渲染操作是在当前用于显示的屏幕缓冲区中进行。\n\n* Off-Screen Rendering\n\n意为离屏渲染，指的是GPU在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作。\n\n<!-- more -->\n\n## 二、离屏渲染的是是非非\n\n相比于当前屏幕渲染，离屏渲染的代价是很高的，主要体现在两个方面：\n\n* 创建新缓冲区\n\n要想进行离屏渲染，首先要创建一个新的缓冲区。\n\n* 上下文切换\n\n离屏渲染的整个过程，需要多次切换上下文环境：先是从当前屏幕（On-Screen）切换到离屏（Off-Screen）；等到离屏渲染结束以后，将离屏缓冲区的渲染结果显示到屏幕上有需要将上下文环境从离屏切换到当前屏幕。而上下文环境的切换是要付出很大代价的。\n\n## 三、离屏渲染触发方式\n\n设置了以下属性时，都会触发离屏绘制：\n\n* shouldRasterize（光栅化）\n* masks（遮罩）\n* shadows（阴影）\n* edge antialiasing（抗锯齿）\n* group opacity（不透明）\n\n需要注意的是，如果shouldRasterize被设置成YES，在触发离屏绘制的同时，会将光栅化后的内容缓存起来，如果对应的layer及其sublayers没有发生改变，在下一帧的时候可以直接复用。这将在很大程度上提升渲染性能。\n\n而其它属性如果是开启的，就不会有缓存，离屏绘制会在每一帧都发生。\n\n\n## 四、另一种特殊的“离屏渲染”\n\n按照之前的说法，如果将不在GPU的当前屏幕缓冲区中进行的渲染都称为离屏渲染，那么就还有另一种特殊的“离屏渲染”方式：`CPU渲染`。\n\n如果我们重写了drawRect方法，并且使用任何Core Graphics的技术进行了绘制操作，就涉及到了CPU渲染。整个渲染过程由CPU在App内`同步地`完成，渲染得到的bitmap最后再交由GPU用于显示。\n\n## 五、Instruments \n\nInstruments的Core Animation工具中有几个和离屏渲染相关的检查选项：\n\n* Color Offscreen-Rendered Yellow \n\n开启后会把那些需要离屏渲染的图层高亮成黄色，这就意味着黄色图层可能存在性能问题。\n\n* Color Hits Green and Misses Red\n\n如果shouldRasterize被设置成YES，对应的渲染结果会被缓存，如果图层是绿色，就表示这些缓存被复用；如果是红色就表示缓存会被重复创建，这就表示该处存在性能问题了。\n\n## 六、如何抉择\n\n现在摆在我们面前得有三个选择：当前屏幕渲染、离屏渲染、CPU渲染，该用哪个呢？这需要根据具体的使用场景来决定。\n\n* 尽量使用当前屏幕渲染\n\n鉴于离屏渲染、CPU渲染可能带来的性能问题，一般情况下，我们要尽量使用当前屏幕渲染。\n\n* 离屏渲染 VS CPU渲染\n\n由于GPU的浮点运算能力比CPU强，CPU渲染的效率可能不如离屏渲染；但如果仅仅是实现一个简单的效果，直接使用CPU渲染的效率又可能比离屏渲染好，毕竟离屏渲染要涉及到缓冲区创建和上下文切换等耗时操作。\n\n总之，具体的选择应该由性能测试结果来决定。\n\n\n## 七、写在最后\n\n在赵岩同学的点拨下才理解了离屏渲染的概念，在此表示感谢！\n\n如理解有误还请大家指出。\n\n## 参考文档\n\n* [Getting Pixels onto the Screen](http://www.objc.io/issue-3/moving-pixels-onto-the-screen.html) (中文翻译版：[绘制像素到屏幕上](http://objccn.io/issue-3-1/))\n\n* [Designing for iOS: Graphics &amp; Performance](https://robots.thoughtbot.com/designing-for-ios-graphics-performance)  (中文翻译版：[iOS图形处理和性能](http://www.taofengping.com/2013/05/18/designing-for-ios-graphics-performance/#.VUinciGqpBc))\n\n* [a performance minded take on ios design](https://lobste.rs/s/ckm4uw/a_performance-minded_take_on_ios_design)  (中文翻译版：[iOS离屏绘制的性能和机制分析](http://www.taofengping.com/2013/05/18/ios_offscreen_analysis/#.VUinPyGqpBd))\n","slug":"2015-05-06-chi-ping-xuan-ran-xue-xi-bi-ji","published":1,"updated":"2019-09-23T12:50:28.000Z","photos":[],"link":"","_id":"ck0zclidh001qqhtfvh91x3fw","content":"<h2 id=\"一、概念理解\"><a href=\"#一、概念理解\" class=\"headerlink\" title=\"一、概念理解\"></a>一、概念理解</h2><p>OpenGL中，GPU屏幕渲染有以下两种方式：</p>\n<ul>\n<li>On-Screen Rendering</li>\n</ul>\n<p>意为当前屏幕渲染，指的是GPU的渲染操作是在当前用于显示的屏幕缓冲区中进行。</p>\n<ul>\n<li>Off-Screen Rendering</li>\n</ul>\n<p>意为离屏渲染，指的是GPU在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"二、离屏渲染的是是非非\"><a href=\"#二、离屏渲染的是是非非\" class=\"headerlink\" title=\"二、离屏渲染的是是非非\"></a>二、离屏渲染的是是非非</h2><p>相比于当前屏幕渲染，离屏渲染的代价是很高的，主要体现在两个方面：</p>\n<ul>\n<li>创建新缓冲区</li>\n</ul>\n<p>要想进行离屏渲染，首先要创建一个新的缓冲区。</p>\n<ul>\n<li>上下文切换</li>\n</ul>\n<p>离屏渲染的整个过程，需要多次切换上下文环境：先是从当前屏幕（On-Screen）切换到离屏（Off-Screen）；等到离屏渲染结束以后，将离屏缓冲区的渲染结果显示到屏幕上有需要将上下文环境从离屏切换到当前屏幕。而上下文环境的切换是要付出很大代价的。</p>\n<h2 id=\"三、离屏渲染触发方式\"><a href=\"#三、离屏渲染触发方式\" class=\"headerlink\" title=\"三、离屏渲染触发方式\"></a>三、离屏渲染触发方式</h2><p>设置了以下属性时，都会触发离屏绘制：</p>\n<ul>\n<li>shouldRasterize（光栅化）</li>\n<li>masks（遮罩）</li>\n<li>shadows（阴影）</li>\n<li>edge antialiasing（抗锯齿）</li>\n<li>group opacity（不透明）</li>\n</ul>\n<p>需要注意的是，如果shouldRasterize被设置成YES，在触发离屏绘制的同时，会将光栅化后的内容缓存起来，如果对应的layer及其sublayers没有发生改变，在下一帧的时候可以直接复用。这将在很大程度上提升渲染性能。</p>\n<p>而其它属性如果是开启的，就不会有缓存，离屏绘制会在每一帧都发生。</p>\n<h2 id=\"四、另一种特殊的“离屏渲染”\"><a href=\"#四、另一种特殊的“离屏渲染”\" class=\"headerlink\" title=\"四、另一种特殊的“离屏渲染”\"></a>四、另一种特殊的“离屏渲染”</h2><p>按照之前的说法，如果将不在GPU的当前屏幕缓冲区中进行的渲染都称为离屏渲染，那么就还有另一种特殊的“离屏渲染”方式：<code>CPU渲染</code>。</p>\n<p>如果我们重写了drawRect方法，并且使用任何Core Graphics的技术进行了绘制操作，就涉及到了CPU渲染。整个渲染过程由CPU在App内<code>同步地</code>完成，渲染得到的bitmap最后再交由GPU用于显示。</p>\n<h2 id=\"五、Instruments\"><a href=\"#五、Instruments\" class=\"headerlink\" title=\"五、Instruments\"></a>五、Instruments</h2><p>Instruments的Core Animation工具中有几个和离屏渲染相关的检查选项：</p>\n<ul>\n<li>Color Offscreen-Rendered Yellow </li>\n</ul>\n<p>开启后会把那些需要离屏渲染的图层高亮成黄色，这就意味着黄色图层可能存在性能问题。</p>\n<ul>\n<li>Color Hits Green and Misses Red</li>\n</ul>\n<p>如果shouldRasterize被设置成YES，对应的渲染结果会被缓存，如果图层是绿色，就表示这些缓存被复用；如果是红色就表示缓存会被重复创建，这就表示该处存在性能问题了。</p>\n<h2 id=\"六、如何抉择\"><a href=\"#六、如何抉择\" class=\"headerlink\" title=\"六、如何抉择\"></a>六、如何抉择</h2><p>现在摆在我们面前得有三个选择：当前屏幕渲染、离屏渲染、CPU渲染，该用哪个呢？这需要根据具体的使用场景来决定。</p>\n<ul>\n<li>尽量使用当前屏幕渲染</li>\n</ul>\n<p>鉴于离屏渲染、CPU渲染可能带来的性能问题，一般情况下，我们要尽量使用当前屏幕渲染。</p>\n<ul>\n<li>离屏渲染 VS CPU渲染</li>\n</ul>\n<p>由于GPU的浮点运算能力比CPU强，CPU渲染的效率可能不如离屏渲染；但如果仅仅是实现一个简单的效果，直接使用CPU渲染的效率又可能比离屏渲染好，毕竟离屏渲染要涉及到缓冲区创建和上下文切换等耗时操作。</p>\n<p>总之，具体的选择应该由性能测试结果来决定。</p>\n<h2 id=\"七、写在最后\"><a href=\"#七、写在最后\" class=\"headerlink\" title=\"七、写在最后\"></a>七、写在最后</h2><p>在赵岩同学的点拨下才理解了离屏渲染的概念，在此表示感谢！</p>\n<p>如理解有误还请大家指出。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><p><a href=\"http://www.objc.io/issue-3/moving-pixels-onto-the-screen.html\" target=\"_blank\" rel=\"noopener\">Getting Pixels onto the Screen</a> (中文翻译版：<a href=\"http://objccn.io/issue-3-1/\" target=\"_blank\" rel=\"noopener\">绘制像素到屏幕上</a>)</p>\n</li>\n<li><p><a href=\"https://robots.thoughtbot.com/designing-for-ios-graphics-performance\" target=\"_blank\" rel=\"noopener\">Designing for iOS: Graphics &amp; Performance</a>  (中文翻译版：<a href=\"http://www.taofengping.com/2013/05/18/designing-for-ios-graphics-performance/#.VUinciGqpBc\" target=\"_blank\" rel=\"noopener\">iOS图形处理和性能</a>)</p>\n</li>\n<li><p><a href=\"https://lobste.rs/s/ckm4uw/a_performance-minded_take_on_ios_design\" target=\"_blank\" rel=\"noopener\">a performance minded take on ios design</a>  (中文翻译版：<a href=\"http://www.taofengping.com/2013/05/18/ios_offscreen_analysis/#.VUinPyGqpBd\" target=\"_blank\" rel=\"noopener\">iOS离屏绘制的性能和机制分析</a>)</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、概念理解\"><a href=\"#一、概念理解\" class=\"headerlink\" title=\"一、概念理解\"></a>一、概念理解</h2><p>OpenGL中，GPU屏幕渲染有以下两种方式：</p>\n<ul>\n<li>On-Screen Rendering</li>\n</ul>\n<p>意为当前屏幕渲染，指的是GPU的渲染操作是在当前用于显示的屏幕缓冲区中进行。</p>\n<ul>\n<li>Off-Screen Rendering</li>\n</ul>\n<p>意为离屏渲染，指的是GPU在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作。</p>","more":"<h2 id=\"二、离屏渲染的是是非非\"><a href=\"#二、离屏渲染的是是非非\" class=\"headerlink\" title=\"二、离屏渲染的是是非非\"></a>二、离屏渲染的是是非非</h2><p>相比于当前屏幕渲染，离屏渲染的代价是很高的，主要体现在两个方面：</p>\n<ul>\n<li>创建新缓冲区</li>\n</ul>\n<p>要想进行离屏渲染，首先要创建一个新的缓冲区。</p>\n<ul>\n<li>上下文切换</li>\n</ul>\n<p>离屏渲染的整个过程，需要多次切换上下文环境：先是从当前屏幕（On-Screen）切换到离屏（Off-Screen）；等到离屏渲染结束以后，将离屏缓冲区的渲染结果显示到屏幕上有需要将上下文环境从离屏切换到当前屏幕。而上下文环境的切换是要付出很大代价的。</p>\n<h2 id=\"三、离屏渲染触发方式\"><a href=\"#三、离屏渲染触发方式\" class=\"headerlink\" title=\"三、离屏渲染触发方式\"></a>三、离屏渲染触发方式</h2><p>设置了以下属性时，都会触发离屏绘制：</p>\n<ul>\n<li>shouldRasterize（光栅化）</li>\n<li>masks（遮罩）</li>\n<li>shadows（阴影）</li>\n<li>edge antialiasing（抗锯齿）</li>\n<li>group opacity（不透明）</li>\n</ul>\n<p>需要注意的是，如果shouldRasterize被设置成YES，在触发离屏绘制的同时，会将光栅化后的内容缓存起来，如果对应的layer及其sublayers没有发生改变，在下一帧的时候可以直接复用。这将在很大程度上提升渲染性能。</p>\n<p>而其它属性如果是开启的，就不会有缓存，离屏绘制会在每一帧都发生。</p>\n<h2 id=\"四、另一种特殊的“离屏渲染”\"><a href=\"#四、另一种特殊的“离屏渲染”\" class=\"headerlink\" title=\"四、另一种特殊的“离屏渲染”\"></a>四、另一种特殊的“离屏渲染”</h2><p>按照之前的说法，如果将不在GPU的当前屏幕缓冲区中进行的渲染都称为离屏渲染，那么就还有另一种特殊的“离屏渲染”方式：<code>CPU渲染</code>。</p>\n<p>如果我们重写了drawRect方法，并且使用任何Core Graphics的技术进行了绘制操作，就涉及到了CPU渲染。整个渲染过程由CPU在App内<code>同步地</code>完成，渲染得到的bitmap最后再交由GPU用于显示。</p>\n<h2 id=\"五、Instruments\"><a href=\"#五、Instruments\" class=\"headerlink\" title=\"五、Instruments\"></a>五、Instruments</h2><p>Instruments的Core Animation工具中有几个和离屏渲染相关的检查选项：</p>\n<ul>\n<li>Color Offscreen-Rendered Yellow </li>\n</ul>\n<p>开启后会把那些需要离屏渲染的图层高亮成黄色，这就意味着黄色图层可能存在性能问题。</p>\n<ul>\n<li>Color Hits Green and Misses Red</li>\n</ul>\n<p>如果shouldRasterize被设置成YES，对应的渲染结果会被缓存，如果图层是绿色，就表示这些缓存被复用；如果是红色就表示缓存会被重复创建，这就表示该处存在性能问题了。</p>\n<h2 id=\"六、如何抉择\"><a href=\"#六、如何抉择\" class=\"headerlink\" title=\"六、如何抉择\"></a>六、如何抉择</h2><p>现在摆在我们面前得有三个选择：当前屏幕渲染、离屏渲染、CPU渲染，该用哪个呢？这需要根据具体的使用场景来决定。</p>\n<ul>\n<li>尽量使用当前屏幕渲染</li>\n</ul>\n<p>鉴于离屏渲染、CPU渲染可能带来的性能问题，一般情况下，我们要尽量使用当前屏幕渲染。</p>\n<ul>\n<li>离屏渲染 VS CPU渲染</li>\n</ul>\n<p>由于GPU的浮点运算能力比CPU强，CPU渲染的效率可能不如离屏渲染；但如果仅仅是实现一个简单的效果，直接使用CPU渲染的效率又可能比离屏渲染好，毕竟离屏渲染要涉及到缓冲区创建和上下文切换等耗时操作。</p>\n<p>总之，具体的选择应该由性能测试结果来决定。</p>\n<h2 id=\"七、写在最后\"><a href=\"#七、写在最后\" class=\"headerlink\" title=\"七、写在最后\"></a>七、写在最后</h2><p>在赵岩同学的点拨下才理解了离屏渲染的概念，在此表示感谢！</p>\n<p>如理解有误还请大家指出。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><p><a href=\"http://www.objc.io/issue-3/moving-pixels-onto-the-screen.html\" target=\"_blank\" rel=\"noopener\">Getting Pixels onto the Screen</a> (中文翻译版：<a href=\"http://objccn.io/issue-3-1/\" target=\"_blank\" rel=\"noopener\">绘制像素到屏幕上</a>)</p>\n</li>\n<li><p><a href=\"https://robots.thoughtbot.com/designing-for-ios-graphics-performance\" target=\"_blank\" rel=\"noopener\">Designing for iOS: Graphics &amp; Performance</a>  (中文翻译版：<a href=\"http://www.taofengping.com/2013/05/18/designing-for-ios-graphics-performance/#.VUinciGqpBc\" target=\"_blank\" rel=\"noopener\">iOS图形处理和性能</a>)</p>\n</li>\n<li><p><a href=\"https://lobste.rs/s/ckm4uw/a_performance-minded_take_on_ios_design\" target=\"_blank\" rel=\"noopener\">a performance minded take on ios design</a>  (中文翻译版：<a href=\"http://www.taofengping.com/2013/05/18/ios_offscreen_analysis/#.VUinPyGqpBd\" target=\"_blank\" rel=\"noopener\">iOS离屏绘制的性能和机制分析</a>)</p>\n</li>\n</ul>"},{"layout":"post","title":"手动解析CrashLog之----原理篇","date":"2015-08-10T07:12:49.000Z","comments":1,"keywords":"CrashLog, iOS","_content":"\n\n在上篇文章[《手动解析CrashLog之----方法篇》](http://foggry.com/blog/2015/07/27/ru-he-shou-dong-jie-xi-crashlog/)里介绍了手动解析CrashLog的方法，接下来再说说`dwarfdump`、`atos`等解析工具是如何从符号表文件中获取到崩溃位置信息的。一切还得从`.dSYM`符号表文件开始说起。\n\n## 一、`.dSYM`文件的生成\n符号表文件`.dSYM`实际上是从Mach-O文件中抽取调试信息而得到的文件目录，实际用于保存调试信息的问价是`DWARF`，其出身可以从苹果员工的文章[《Apple's \"Lazy\" DWARF Scheme》](http://wiki.dwarfstd.org/index.php?title=Apple%27s_%22Lazy%22_DWARF_Scheme)了解一二。\n\n### 1、Xcode自动生成\n\nXcode会在编译工程或者归档时自动为我们生成`.dSYM`文件，当然我们也可以通过更改Xcode的若干项`Build Settings`来阻止它那么干。\n\n### 2、手动生成\n\n另一种方式是通过命令行从Mach-O文件中手工提取，比如：\n\n```\n$ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/dsymutil /Users/wangzz/Library/Developer/Xcode/DerivedData/YourApp-cqvijavqbptjyhbwewgpdmzbmwzk/Build/Products/Debug-iphonesimulator/YourApp.app/YourApp -o YourApp.dSYM\n```\n\n该方式通过Xcode提供的工具`dsymutil`，从项目编译结果`.app`目录下的Mach-O文件中提取出调试符号表文件。实际上Xcode也是通过这种方式来生成符号表文件。\n\n<!-- more -->\n\n## 二、`DWARF`简介\n\n`DWARF`（DebuggingWith Arbitrary Record Formats），是ELF和Mach-O等文件格式中用来存储和处理调试信息的标准格式，`.dSYM`中真正保存符号表数据的是`DWARF`文件。`DWARF`中不同的数据都保存在相应的`section`（节）中，ELF文件里所有的section名称都以`\".debug_\"`开头，如下表所示：\n\n```\n| Section Name         | Contents                                          |\n| -------------------- | ------------------------------------------------  |\n| .debug_abbrev        | Abbreviations used in the .debug_info section     |\n| .debug_aranges       | A mapping between memory address and compilation  |\n| .debug_frame         | Call Frame Information                            |\n| .debug_info          | The core DWARF data containing DIEs               |\n| .debug_line          | Line Number Program                               |\n| .debug_loc           | Macro descriptions                                |\n| .debug_macinfo       | A lookup table for global objects and functions   |\n| .debug_pubnames      | A lookup table for global objects and functions   | \n| .debug_pubtypes      | A lookup table for global types                   |\n| .debug_ranges        | Address ranges referenced by DIEs                 |\n| .debug_str           | String table used by .debug_info                  |\n```\n\nMach-O中关于section的命名和ELF稍有区别，把名称前的`.`换成了`_`，例如`.debug_info`变成了`_debug_info`。\n\n## 三、section信息提取\n\n保存在`DAWARF`中的信息是高度压缩的，可以通过`dwarfdump`命令从中提取出可读信息。前文所述的那些section中，定位CrashLog只需要用到`.debug_info`和`.debug_line`。由于解析出来的数据量较大，为了方便查看，就将其保存在文本中。两个section的数据提取方式如下：\n\n* `.debug_info`\n\n```\n$ dwarfdump -e --debug-info YourPath/YourApp.dSYM/Contents/Resources/DWARF > info-e.txt\n```\n\n* `.debug_line`\n \n```\n$ dwarfdump -e --debug-line YourPath/YourApp.dSYM/Contents/Resources/DWARF > line-e.txt\n```\n\n命令中的`-e`可以增加解析结果的可读性；其它section的提取方式类似，详情请参考`dwarfdump`命令帮助信息。\n\n## 四、解析崩溃地址\n\n### 1、计算崩溃地址对应符号表中的地址\n\n在[上篇文章](http://foggry.com/blog/2015/07/27/ru-he-shou-dong-jie-xi-crashlog/)中，介绍了如何根据崩溃地址计算得到对应符号表中的地址，并得到了最终数值：`0x52846`，接下来我们就通过这个值来介绍`dwarfdump`、`atos`等工具是如何解析崩溃日志的。\n\n### 2、解析过程\n\n* `.debug_info`\n\n`.debug_info`中最基本的描述单元为DIE（Debug Information Entry），详情请参考[DWARF官方网站](http://www.dwarfstd.org/)，首先我们要根据符号表崩溃地址`0x52846`从`.debug_info`中取出包含这个地址的DIE单元。为了简单起见，直接贴出了从`info-e.txt`中取出的对应DIE，其部分内容如下：\n\n```\n0x00062112:     function [99] *\n                low pc( 0x000502e0 )\n                high pc( 0x00053730 )\n                frame base( r7 )\n                object pointer( {0x0006212a} )\n                name( \"-[OBDFirstConnectViewController showOilPricePickerView]\" )\n                decl file( \"/YourSourcePath/OBDFirstConnectViewController.m\" )\n                decl line( 870 )\n                prototyped( 0x01 )\n                APPLE instruction set architecture( 0x01 )\n```\n\n可以看出，该DIE包含是方法`-[OBDFirstConnectViewController showOilPricePickerView]`的内容，其地址范围是`0x000502e0`-`0x00053730`，我们的目标地址`0x52846`正是在这个范围内，所以可以判定崩溃发生在该方法的某一行中。\n\n需要指出的是，上面这段DIE是我为了介绍方便直接贴出来的，实际应用的时候需要通过搜索算法找出包含目标符号表崩溃地址（这里是`0x52846`）的DIE。\n\n从上述DIE中我们可以获取到这些信息：\n\n```\n崩溃所在源码文件：/YourSourcePath/OBDFirstConnectViewController.m\n发生崩溃的方法：-[OBDFirstConnectViewController showOilPricePickerView]\n发生崩溃的方法在源文件中的行号：870\n```\n\n* `. debug_line`\n\n截止目前，我们可以获取到发生了崩溃的方法的相关信息，但要想确定崩溃发生的具体行号，还需要`.debug_line`的帮助。\n\n`.debug_line`以一个方法为基本块，急了该方法中每一行对应的符号表地址。通过`.debug_info`得知崩溃发生的方法地址范围是`0x000502e0`-`0x00053730`，通过起始地址`0x000502e0`在解析`. debug_line`得到的line-e.txt中直接搜索即可得到崩溃所在方法的`. debug_line`数据，其中`部分内容`如下：\n\n```\n0x00000000000502e0    870 /YourSourcePath/OBDFirstConnectViewController.m\n0x00000000000502e0      0\n0x00000000000502f0    872\n0x000000000005033c    873\n0x0000000000050374    874\n0x000000000005039e    875\n0x00000000000503c8    876\n...\n0x0000000000052812    880\n0x000000000005283e    881\n0x0000000000052846    882\n0x00000000000528c8    883\n...\n```\n\n`. debug_line`段的第一行内容标识了该方法的起始符号表地址，行号及方法所在文件路径，通过之前得到的崩溃地址`0x52846`即可得知崩溃发生在882行。\n\n至此我们已经根据崩溃地址解析出了崩溃发生位置的详细信息：\n\n```\n崩溃所在源码文件：/YourSourcePath/OBDFirstConnectViewController.m\n发生崩溃的方法：-[OBDFirstConnectViewController showOilPricePickerView]\n发生崩溃的方法在源文件中的行号：870\n崩溃发生在源文件中得行号：882\n```\n\n以上内容为本人工作学习中所得，如有理解错误之处，还请指出！\n\n## 五、参考文档\n\n* [Apple's \"Lazy\" DWARF Scheme](http://wiki.dwarfstd.org/index.php?title=Apple%27s_%22Lazy%22_DWARF_Scheme)\n* [《Introduction to the DWARF Debugging Format》](http://www.dwarfstd.org/doc/Debugging%20using%20DWARF.pdf)\n\n","source":"_posts/2015-08-10-ru-he-shou-dong-jie-xi-crashlogzhi-yuan-li-pian.markdown","raw":"---\nlayout: post\ntitle: \"手动解析CrashLog之----原理篇\"\ndate: 2015-08-10 15:12:49 +0800\ncomments: true\ncategories: iOS\ntags: [CrashLog, iOS]\nkeywords: CrashLog, iOS\n---\n\n\n在上篇文章[《手动解析CrashLog之----方法篇》](http://foggry.com/blog/2015/07/27/ru-he-shou-dong-jie-xi-crashlog/)里介绍了手动解析CrashLog的方法，接下来再说说`dwarfdump`、`atos`等解析工具是如何从符号表文件中获取到崩溃位置信息的。一切还得从`.dSYM`符号表文件开始说起。\n\n## 一、`.dSYM`文件的生成\n符号表文件`.dSYM`实际上是从Mach-O文件中抽取调试信息而得到的文件目录，实际用于保存调试信息的问价是`DWARF`，其出身可以从苹果员工的文章[《Apple's \"Lazy\" DWARF Scheme》](http://wiki.dwarfstd.org/index.php?title=Apple%27s_%22Lazy%22_DWARF_Scheme)了解一二。\n\n### 1、Xcode自动生成\n\nXcode会在编译工程或者归档时自动为我们生成`.dSYM`文件，当然我们也可以通过更改Xcode的若干项`Build Settings`来阻止它那么干。\n\n### 2、手动生成\n\n另一种方式是通过命令行从Mach-O文件中手工提取，比如：\n\n```\n$ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/dsymutil /Users/wangzz/Library/Developer/Xcode/DerivedData/YourApp-cqvijavqbptjyhbwewgpdmzbmwzk/Build/Products/Debug-iphonesimulator/YourApp.app/YourApp -o YourApp.dSYM\n```\n\n该方式通过Xcode提供的工具`dsymutil`，从项目编译结果`.app`目录下的Mach-O文件中提取出调试符号表文件。实际上Xcode也是通过这种方式来生成符号表文件。\n\n<!-- more -->\n\n## 二、`DWARF`简介\n\n`DWARF`（DebuggingWith Arbitrary Record Formats），是ELF和Mach-O等文件格式中用来存储和处理调试信息的标准格式，`.dSYM`中真正保存符号表数据的是`DWARF`文件。`DWARF`中不同的数据都保存在相应的`section`（节）中，ELF文件里所有的section名称都以`\".debug_\"`开头，如下表所示：\n\n```\n| Section Name         | Contents                                          |\n| -------------------- | ------------------------------------------------  |\n| .debug_abbrev        | Abbreviations used in the .debug_info section     |\n| .debug_aranges       | A mapping between memory address and compilation  |\n| .debug_frame         | Call Frame Information                            |\n| .debug_info          | The core DWARF data containing DIEs               |\n| .debug_line          | Line Number Program                               |\n| .debug_loc           | Macro descriptions                                |\n| .debug_macinfo       | A lookup table for global objects and functions   |\n| .debug_pubnames      | A lookup table for global objects and functions   | \n| .debug_pubtypes      | A lookup table for global types                   |\n| .debug_ranges        | Address ranges referenced by DIEs                 |\n| .debug_str           | String table used by .debug_info                  |\n```\n\nMach-O中关于section的命名和ELF稍有区别，把名称前的`.`换成了`_`，例如`.debug_info`变成了`_debug_info`。\n\n## 三、section信息提取\n\n保存在`DAWARF`中的信息是高度压缩的，可以通过`dwarfdump`命令从中提取出可读信息。前文所述的那些section中，定位CrashLog只需要用到`.debug_info`和`.debug_line`。由于解析出来的数据量较大，为了方便查看，就将其保存在文本中。两个section的数据提取方式如下：\n\n* `.debug_info`\n\n```\n$ dwarfdump -e --debug-info YourPath/YourApp.dSYM/Contents/Resources/DWARF > info-e.txt\n```\n\n* `.debug_line`\n \n```\n$ dwarfdump -e --debug-line YourPath/YourApp.dSYM/Contents/Resources/DWARF > line-e.txt\n```\n\n命令中的`-e`可以增加解析结果的可读性；其它section的提取方式类似，详情请参考`dwarfdump`命令帮助信息。\n\n## 四、解析崩溃地址\n\n### 1、计算崩溃地址对应符号表中的地址\n\n在[上篇文章](http://foggry.com/blog/2015/07/27/ru-he-shou-dong-jie-xi-crashlog/)中，介绍了如何根据崩溃地址计算得到对应符号表中的地址，并得到了最终数值：`0x52846`，接下来我们就通过这个值来介绍`dwarfdump`、`atos`等工具是如何解析崩溃日志的。\n\n### 2、解析过程\n\n* `.debug_info`\n\n`.debug_info`中最基本的描述单元为DIE（Debug Information Entry），详情请参考[DWARF官方网站](http://www.dwarfstd.org/)，首先我们要根据符号表崩溃地址`0x52846`从`.debug_info`中取出包含这个地址的DIE单元。为了简单起见，直接贴出了从`info-e.txt`中取出的对应DIE，其部分内容如下：\n\n```\n0x00062112:     function [99] *\n                low pc( 0x000502e0 )\n                high pc( 0x00053730 )\n                frame base( r7 )\n                object pointer( {0x0006212a} )\n                name( \"-[OBDFirstConnectViewController showOilPricePickerView]\" )\n                decl file( \"/YourSourcePath/OBDFirstConnectViewController.m\" )\n                decl line( 870 )\n                prototyped( 0x01 )\n                APPLE instruction set architecture( 0x01 )\n```\n\n可以看出，该DIE包含是方法`-[OBDFirstConnectViewController showOilPricePickerView]`的内容，其地址范围是`0x000502e0`-`0x00053730`，我们的目标地址`0x52846`正是在这个范围内，所以可以判定崩溃发生在该方法的某一行中。\n\n需要指出的是，上面这段DIE是我为了介绍方便直接贴出来的，实际应用的时候需要通过搜索算法找出包含目标符号表崩溃地址（这里是`0x52846`）的DIE。\n\n从上述DIE中我们可以获取到这些信息：\n\n```\n崩溃所在源码文件：/YourSourcePath/OBDFirstConnectViewController.m\n发生崩溃的方法：-[OBDFirstConnectViewController showOilPricePickerView]\n发生崩溃的方法在源文件中的行号：870\n```\n\n* `. debug_line`\n\n截止目前，我们可以获取到发生了崩溃的方法的相关信息，但要想确定崩溃发生的具体行号，还需要`.debug_line`的帮助。\n\n`.debug_line`以一个方法为基本块，急了该方法中每一行对应的符号表地址。通过`.debug_info`得知崩溃发生的方法地址范围是`0x000502e0`-`0x00053730`，通过起始地址`0x000502e0`在解析`. debug_line`得到的line-e.txt中直接搜索即可得到崩溃所在方法的`. debug_line`数据，其中`部分内容`如下：\n\n```\n0x00000000000502e0    870 /YourSourcePath/OBDFirstConnectViewController.m\n0x00000000000502e0      0\n0x00000000000502f0    872\n0x000000000005033c    873\n0x0000000000050374    874\n0x000000000005039e    875\n0x00000000000503c8    876\n...\n0x0000000000052812    880\n0x000000000005283e    881\n0x0000000000052846    882\n0x00000000000528c8    883\n...\n```\n\n`. debug_line`段的第一行内容标识了该方法的起始符号表地址，行号及方法所在文件路径，通过之前得到的崩溃地址`0x52846`即可得知崩溃发生在882行。\n\n至此我们已经根据崩溃地址解析出了崩溃发生位置的详细信息：\n\n```\n崩溃所在源码文件：/YourSourcePath/OBDFirstConnectViewController.m\n发生崩溃的方法：-[OBDFirstConnectViewController showOilPricePickerView]\n发生崩溃的方法在源文件中的行号：870\n崩溃发生在源文件中得行号：882\n```\n\n以上内容为本人工作学习中所得，如有理解错误之处，还请指出！\n\n## 五、参考文档\n\n* [Apple's \"Lazy\" DWARF Scheme](http://wiki.dwarfstd.org/index.php?title=Apple%27s_%22Lazy%22_DWARF_Scheme)\n* [《Introduction to the DWARF Debugging Format》](http://www.dwarfstd.org/doc/Debugging%20using%20DWARF.pdf)\n\n","slug":"2015-08-10-ru-he-shou-dong-jie-xi-crashlogzhi-yuan-li-pian","published":1,"updated":"2019-09-23T12:50:12.000Z","photos":[],"link":"","_id":"ck0zclidi001uqhtfiikh5w1v","content":"<p>在上篇文章<a href=\"http://foggry.com/blog/2015/07/27/ru-he-shou-dong-jie-xi-crashlog/\">《手动解析CrashLog之—-方法篇》</a>里介绍了手动解析CrashLog的方法，接下来再说说<code>dwarfdump</code>、<code>atos</code>等解析工具是如何从符号表文件中获取到崩溃位置信息的。一切还得从<code>.dSYM</code>符号表文件开始说起。</p>\n<h2 id=\"一、-dSYM文件的生成\"><a href=\"#一、-dSYM文件的生成\" class=\"headerlink\" title=\"一、.dSYM文件的生成\"></a>一、<code>.dSYM</code>文件的生成</h2><p>符号表文件<code>.dSYM</code>实际上是从Mach-O文件中抽取调试信息而得到的文件目录，实际用于保存调试信息的问价是<code>DWARF</code>，其出身可以从苹果员工的文章<a href=\"http://wiki.dwarfstd.org/index.php?title=Apple%27s_%22Lazy%22_DWARF_Scheme\" target=\"_blank\" rel=\"noopener\">《Apple’s “Lazy” DWARF Scheme》</a>了解一二。</p>\n<h3 id=\"1、Xcode自动生成\"><a href=\"#1、Xcode自动生成\" class=\"headerlink\" title=\"1、Xcode自动生成\"></a>1、Xcode自动生成</h3><p>Xcode会在编译工程或者归档时自动为我们生成<code>.dSYM</code>文件，当然我们也可以通过更改Xcode的若干项<code>Build Settings</code>来阻止它那么干。</p>\n<h3 id=\"2、手动生成\"><a href=\"#2、手动生成\" class=\"headerlink\" title=\"2、手动生成\"></a>2、手动生成</h3><p>另一种方式是通过命令行从Mach-O文件中手工提取，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/dsymutil /Users/wangzz/Library/Developer/Xcode/DerivedData/YourApp-cqvijavqbptjyhbwewgpdmzbmwzk/Build/Products/Debug-iphonesimulator/YourApp.app/YourApp -o YourApp.dSYM</span><br></pre></td></tr></table></figure>\n\n<p>该方式通过Xcode提供的工具<code>dsymutil</code>，从项目编译结果<code>.app</code>目录下的Mach-O文件中提取出调试符号表文件。实际上Xcode也是通过这种方式来生成符号表文件。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"二、DWARF简介\"><a href=\"#二、DWARF简介\" class=\"headerlink\" title=\"二、DWARF简介\"></a>二、<code>DWARF</code>简介</h2><p><code>DWARF</code>（DebuggingWith Arbitrary Record Formats），是ELF和Mach-O等文件格式中用来存储和处理调试信息的标准格式，<code>.dSYM</code>中真正保存符号表数据的是<code>DWARF</code>文件。<code>DWARF</code>中不同的数据都保存在相应的<code>section</code>（节）中，ELF文件里所有的section名称都以<code>&quot;.debug_&quot;</code>开头，如下表所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| Section Name         | Contents                                          |</span><br><span class=\"line\">| -------------------- | ------------------------------------------------  |</span><br><span class=\"line\">| .debug_abbrev        | Abbreviations used in the .debug_info section     |</span><br><span class=\"line\">| .debug_aranges       | A mapping between memory address and compilation  |</span><br><span class=\"line\">| .debug_frame         | Call Frame Information                            |</span><br><span class=\"line\">| .debug_info          | The core DWARF data containing DIEs               |</span><br><span class=\"line\">| .debug_line          | Line Number Program                               |</span><br><span class=\"line\">| .debug_loc           | Macro descriptions                                |</span><br><span class=\"line\">| .debug_macinfo       | A lookup table for global objects and functions   |</span><br><span class=\"line\">| .debug_pubnames      | A lookup table for global objects and functions   | </span><br><span class=\"line\">| .debug_pubtypes      | A lookup table for global types                   |</span><br><span class=\"line\">| .debug_ranges        | Address ranges referenced by DIEs                 |</span><br><span class=\"line\">| .debug_str           | String table used by .debug_info                  |</span><br></pre></td></tr></table></figure>\n\n<p>Mach-O中关于section的命名和ELF稍有区别，把名称前的<code>.</code>换成了<code>_</code>，例如<code>.debug_info</code>变成了<code>_debug_info</code>。</p>\n<h2 id=\"三、section信息提取\"><a href=\"#三、section信息提取\" class=\"headerlink\" title=\"三、section信息提取\"></a>三、section信息提取</h2><p>保存在<code>DAWARF</code>中的信息是高度压缩的，可以通过<code>dwarfdump</code>命令从中提取出可读信息。前文所述的那些section中，定位CrashLog只需要用到<code>.debug_info</code>和<code>.debug_line</code>。由于解析出来的数据量较大，为了方便查看，就将其保存在文本中。两个section的数据提取方式如下：</p>\n<ul>\n<li><code>.debug_info</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dwarfdump -e --debug-info YourPath/YourApp.dSYM/Contents/Resources/DWARF &gt; info-e.txt</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>.debug_line</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dwarfdump -e --debug-line YourPath/YourApp.dSYM/Contents/Resources/DWARF &gt; line-e.txt</span><br></pre></td></tr></table></figure>\n\n<p>命令中的<code>-e</code>可以增加解析结果的可读性；其它section的提取方式类似，详情请参考<code>dwarfdump</code>命令帮助信息。</p>\n<h2 id=\"四、解析崩溃地址\"><a href=\"#四、解析崩溃地址\" class=\"headerlink\" title=\"四、解析崩溃地址\"></a>四、解析崩溃地址</h2><h3 id=\"1、计算崩溃地址对应符号表中的地址\"><a href=\"#1、计算崩溃地址对应符号表中的地址\" class=\"headerlink\" title=\"1、计算崩溃地址对应符号表中的地址\"></a>1、计算崩溃地址对应符号表中的地址</h3><p>在<a href=\"http://foggry.com/blog/2015/07/27/ru-he-shou-dong-jie-xi-crashlog/\">上篇文章</a>中，介绍了如何根据崩溃地址计算得到对应符号表中的地址，并得到了最终数值：<code>0x52846</code>，接下来我们就通过这个值来介绍<code>dwarfdump</code>、<code>atos</code>等工具是如何解析崩溃日志的。</p>\n<h3 id=\"2、解析过程\"><a href=\"#2、解析过程\" class=\"headerlink\" title=\"2、解析过程\"></a>2、解析过程</h3><ul>\n<li><code>.debug_info</code></li>\n</ul>\n<p><code>.debug_info</code>中最基本的描述单元为DIE（Debug Information Entry），详情请参考<a href=\"http://www.dwarfstd.org/\" target=\"_blank\" rel=\"noopener\">DWARF官方网站</a>，首先我们要根据符号表崩溃地址<code>0x52846</code>从<code>.debug_info</code>中取出包含这个地址的DIE单元。为了简单起见，直接贴出了从<code>info-e.txt</code>中取出的对应DIE，其部分内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x00062112:     function [99] *</span><br><span class=\"line\">                low pc( 0x000502e0 )</span><br><span class=\"line\">                high pc( 0x00053730 )</span><br><span class=\"line\">                frame base( r7 )</span><br><span class=\"line\">                object pointer( &#123;0x0006212a&#125; )</span><br><span class=\"line\">                name( &quot;-[OBDFirstConnectViewController showOilPricePickerView]&quot; )</span><br><span class=\"line\">                decl file( &quot;/YourSourcePath/OBDFirstConnectViewController.m&quot; )</span><br><span class=\"line\">                decl line( 870 )</span><br><span class=\"line\">                prototyped( 0x01 )</span><br><span class=\"line\">                APPLE instruction set architecture( 0x01 )</span><br></pre></td></tr></table></figure>\n\n<p>可以看出，该DIE包含是方法<code>-[OBDFirstConnectViewController showOilPricePickerView]</code>的内容，其地址范围是<code>0x000502e0</code>-<code>0x00053730</code>，我们的目标地址<code>0x52846</code>正是在这个范围内，所以可以判定崩溃发生在该方法的某一行中。</p>\n<p>需要指出的是，上面这段DIE是我为了介绍方便直接贴出来的，实际应用的时候需要通过搜索算法找出包含目标符号表崩溃地址（这里是<code>0x52846</code>）的DIE。</p>\n<p>从上述DIE中我们可以获取到这些信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">崩溃所在源码文件：/YourSourcePath/OBDFirstConnectViewController.m</span><br><span class=\"line\">发生崩溃的方法：-[OBDFirstConnectViewController showOilPricePickerView]</span><br><span class=\"line\">发生崩溃的方法在源文件中的行号：870</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>. debug_line</code></li>\n</ul>\n<p>截止目前，我们可以获取到发生了崩溃的方法的相关信息，但要想确定崩溃发生的具体行号，还需要<code>.debug_line</code>的帮助。</p>\n<p><code>.debug_line</code>以一个方法为基本块，急了该方法中每一行对应的符号表地址。通过<code>.debug_info</code>得知崩溃发生的方法地址范围是<code>0x000502e0</code>-<code>0x00053730</code>，通过起始地址<code>0x000502e0</code>在解析<code>. debug_line</code>得到的line-e.txt中直接搜索即可得到崩溃所在方法的<code>. debug_line</code>数据，其中<code>部分内容</code>如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x00000000000502e0    870 /YourSourcePath/OBDFirstConnectViewController.m</span><br><span class=\"line\">0x00000000000502e0      0</span><br><span class=\"line\">0x00000000000502f0    872</span><br><span class=\"line\">0x000000000005033c    873</span><br><span class=\"line\">0x0000000000050374    874</span><br><span class=\"line\">0x000000000005039e    875</span><br><span class=\"line\">0x00000000000503c8    876</span><br><span class=\"line\">...</span><br><span class=\"line\">0x0000000000052812    880</span><br><span class=\"line\">0x000000000005283e    881</span><br><span class=\"line\">0x0000000000052846    882</span><br><span class=\"line\">0x00000000000528c8    883</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><code>. debug_line</code>段的第一行内容标识了该方法的起始符号表地址，行号及方法所在文件路径，通过之前得到的崩溃地址<code>0x52846</code>即可得知崩溃发生在882行。</p>\n<p>至此我们已经根据崩溃地址解析出了崩溃发生位置的详细信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">崩溃所在源码文件：/YourSourcePath/OBDFirstConnectViewController.m</span><br><span class=\"line\">发生崩溃的方法：-[OBDFirstConnectViewController showOilPricePickerView]</span><br><span class=\"line\">发生崩溃的方法在源文件中的行号：870</span><br><span class=\"line\">崩溃发生在源文件中得行号：882</span><br></pre></td></tr></table></figure>\n\n<p>以上内容为本人工作学习中所得，如有理解错误之处，还请指出！</p>\n<h2 id=\"五、参考文档\"><a href=\"#五、参考文档\" class=\"headerlink\" title=\"五、参考文档\"></a>五、参考文档</h2><ul>\n<li><a href=\"http://wiki.dwarfstd.org/index.php?title=Apple%27s_%22Lazy%22_DWARF_Scheme\" target=\"_blank\" rel=\"noopener\">Apple’s “Lazy” DWARF Scheme</a></li>\n<li><a href=\"http://www.dwarfstd.org/doc/Debugging%20using%20DWARF.pdf\" target=\"_blank\" rel=\"noopener\">《Introduction to the DWARF Debugging Format》</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在上篇文章<a href=\"http://foggry.com/blog/2015/07/27/ru-he-shou-dong-jie-xi-crashlog/\">《手动解析CrashLog之—-方法篇》</a>里介绍了手动解析CrashLog的方法，接下来再说说<code>dwarfdump</code>、<code>atos</code>等解析工具是如何从符号表文件中获取到崩溃位置信息的。一切还得从<code>.dSYM</code>符号表文件开始说起。</p>\n<h2 id=\"一、-dSYM文件的生成\"><a href=\"#一、-dSYM文件的生成\" class=\"headerlink\" title=\"一、.dSYM文件的生成\"></a>一、<code>.dSYM</code>文件的生成</h2><p>符号表文件<code>.dSYM</code>实际上是从Mach-O文件中抽取调试信息而得到的文件目录，实际用于保存调试信息的问价是<code>DWARF</code>，其出身可以从苹果员工的文章<a href=\"http://wiki.dwarfstd.org/index.php?title=Apple%27s_%22Lazy%22_DWARF_Scheme\" target=\"_blank\" rel=\"noopener\">《Apple’s “Lazy” DWARF Scheme》</a>了解一二。</p>\n<h3 id=\"1、Xcode自动生成\"><a href=\"#1、Xcode自动生成\" class=\"headerlink\" title=\"1、Xcode自动生成\"></a>1、Xcode自动生成</h3><p>Xcode会在编译工程或者归档时自动为我们生成<code>.dSYM</code>文件，当然我们也可以通过更改Xcode的若干项<code>Build Settings</code>来阻止它那么干。</p>\n<h3 id=\"2、手动生成\"><a href=\"#2、手动生成\" class=\"headerlink\" title=\"2、手动生成\"></a>2、手动生成</h3><p>另一种方式是通过命令行从Mach-O文件中手工提取，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/dsymutil /Users/wangzz/Library/Developer/Xcode/DerivedData/YourApp-cqvijavqbptjyhbwewgpdmzbmwzk/Build/Products/Debug-iphonesimulator/YourApp.app/YourApp -o YourApp.dSYM</span><br></pre></td></tr></table></figure>\n\n<p>该方式通过Xcode提供的工具<code>dsymutil</code>，从项目编译结果<code>.app</code>目录下的Mach-O文件中提取出调试符号表文件。实际上Xcode也是通过这种方式来生成符号表文件。</p>","more":"<h2 id=\"二、DWARF简介\"><a href=\"#二、DWARF简介\" class=\"headerlink\" title=\"二、DWARF简介\"></a>二、<code>DWARF</code>简介</h2><p><code>DWARF</code>（DebuggingWith Arbitrary Record Formats），是ELF和Mach-O等文件格式中用来存储和处理调试信息的标准格式，<code>.dSYM</code>中真正保存符号表数据的是<code>DWARF</code>文件。<code>DWARF</code>中不同的数据都保存在相应的<code>section</code>（节）中，ELF文件里所有的section名称都以<code>&quot;.debug_&quot;</code>开头，如下表所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| Section Name         | Contents                                          |</span><br><span class=\"line\">| -------------------- | ------------------------------------------------  |</span><br><span class=\"line\">| .debug_abbrev        | Abbreviations used in the .debug_info section     |</span><br><span class=\"line\">| .debug_aranges       | A mapping between memory address and compilation  |</span><br><span class=\"line\">| .debug_frame         | Call Frame Information                            |</span><br><span class=\"line\">| .debug_info          | The core DWARF data containing DIEs               |</span><br><span class=\"line\">| .debug_line          | Line Number Program                               |</span><br><span class=\"line\">| .debug_loc           | Macro descriptions                                |</span><br><span class=\"line\">| .debug_macinfo       | A lookup table for global objects and functions   |</span><br><span class=\"line\">| .debug_pubnames      | A lookup table for global objects and functions   | </span><br><span class=\"line\">| .debug_pubtypes      | A lookup table for global types                   |</span><br><span class=\"line\">| .debug_ranges        | Address ranges referenced by DIEs                 |</span><br><span class=\"line\">| .debug_str           | String table used by .debug_info                  |</span><br></pre></td></tr></table></figure>\n\n<p>Mach-O中关于section的命名和ELF稍有区别，把名称前的<code>.</code>换成了<code>_</code>，例如<code>.debug_info</code>变成了<code>_debug_info</code>。</p>\n<h2 id=\"三、section信息提取\"><a href=\"#三、section信息提取\" class=\"headerlink\" title=\"三、section信息提取\"></a>三、section信息提取</h2><p>保存在<code>DAWARF</code>中的信息是高度压缩的，可以通过<code>dwarfdump</code>命令从中提取出可读信息。前文所述的那些section中，定位CrashLog只需要用到<code>.debug_info</code>和<code>.debug_line</code>。由于解析出来的数据量较大，为了方便查看，就将其保存在文本中。两个section的数据提取方式如下：</p>\n<ul>\n<li><code>.debug_info</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dwarfdump -e --debug-info YourPath/YourApp.dSYM/Contents/Resources/DWARF &gt; info-e.txt</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>.debug_line</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dwarfdump -e --debug-line YourPath/YourApp.dSYM/Contents/Resources/DWARF &gt; line-e.txt</span><br></pre></td></tr></table></figure>\n\n<p>命令中的<code>-e</code>可以增加解析结果的可读性；其它section的提取方式类似，详情请参考<code>dwarfdump</code>命令帮助信息。</p>\n<h2 id=\"四、解析崩溃地址\"><a href=\"#四、解析崩溃地址\" class=\"headerlink\" title=\"四、解析崩溃地址\"></a>四、解析崩溃地址</h2><h3 id=\"1、计算崩溃地址对应符号表中的地址\"><a href=\"#1、计算崩溃地址对应符号表中的地址\" class=\"headerlink\" title=\"1、计算崩溃地址对应符号表中的地址\"></a>1、计算崩溃地址对应符号表中的地址</h3><p>在<a href=\"http://foggry.com/blog/2015/07/27/ru-he-shou-dong-jie-xi-crashlog/\">上篇文章</a>中，介绍了如何根据崩溃地址计算得到对应符号表中的地址，并得到了最终数值：<code>0x52846</code>，接下来我们就通过这个值来介绍<code>dwarfdump</code>、<code>atos</code>等工具是如何解析崩溃日志的。</p>\n<h3 id=\"2、解析过程\"><a href=\"#2、解析过程\" class=\"headerlink\" title=\"2、解析过程\"></a>2、解析过程</h3><ul>\n<li><code>.debug_info</code></li>\n</ul>\n<p><code>.debug_info</code>中最基本的描述单元为DIE（Debug Information Entry），详情请参考<a href=\"http://www.dwarfstd.org/\" target=\"_blank\" rel=\"noopener\">DWARF官方网站</a>，首先我们要根据符号表崩溃地址<code>0x52846</code>从<code>.debug_info</code>中取出包含这个地址的DIE单元。为了简单起见，直接贴出了从<code>info-e.txt</code>中取出的对应DIE，其部分内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x00062112:     function [99] *</span><br><span class=\"line\">                low pc( 0x000502e0 )</span><br><span class=\"line\">                high pc( 0x00053730 )</span><br><span class=\"line\">                frame base( r7 )</span><br><span class=\"line\">                object pointer( &#123;0x0006212a&#125; )</span><br><span class=\"line\">                name( &quot;-[OBDFirstConnectViewController showOilPricePickerView]&quot; )</span><br><span class=\"line\">                decl file( &quot;/YourSourcePath/OBDFirstConnectViewController.m&quot; )</span><br><span class=\"line\">                decl line( 870 )</span><br><span class=\"line\">                prototyped( 0x01 )</span><br><span class=\"line\">                APPLE instruction set architecture( 0x01 )</span><br></pre></td></tr></table></figure>\n\n<p>可以看出，该DIE包含是方法<code>-[OBDFirstConnectViewController showOilPricePickerView]</code>的内容，其地址范围是<code>0x000502e0</code>-<code>0x00053730</code>，我们的目标地址<code>0x52846</code>正是在这个范围内，所以可以判定崩溃发生在该方法的某一行中。</p>\n<p>需要指出的是，上面这段DIE是我为了介绍方便直接贴出来的，实际应用的时候需要通过搜索算法找出包含目标符号表崩溃地址（这里是<code>0x52846</code>）的DIE。</p>\n<p>从上述DIE中我们可以获取到这些信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">崩溃所在源码文件：/YourSourcePath/OBDFirstConnectViewController.m</span><br><span class=\"line\">发生崩溃的方法：-[OBDFirstConnectViewController showOilPricePickerView]</span><br><span class=\"line\">发生崩溃的方法在源文件中的行号：870</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>. debug_line</code></li>\n</ul>\n<p>截止目前，我们可以获取到发生了崩溃的方法的相关信息，但要想确定崩溃发生的具体行号，还需要<code>.debug_line</code>的帮助。</p>\n<p><code>.debug_line</code>以一个方法为基本块，急了该方法中每一行对应的符号表地址。通过<code>.debug_info</code>得知崩溃发生的方法地址范围是<code>0x000502e0</code>-<code>0x00053730</code>，通过起始地址<code>0x000502e0</code>在解析<code>. debug_line</code>得到的line-e.txt中直接搜索即可得到崩溃所在方法的<code>. debug_line</code>数据，其中<code>部分内容</code>如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x00000000000502e0    870 /YourSourcePath/OBDFirstConnectViewController.m</span><br><span class=\"line\">0x00000000000502e0      0</span><br><span class=\"line\">0x00000000000502f0    872</span><br><span class=\"line\">0x000000000005033c    873</span><br><span class=\"line\">0x0000000000050374    874</span><br><span class=\"line\">0x000000000005039e    875</span><br><span class=\"line\">0x00000000000503c8    876</span><br><span class=\"line\">...</span><br><span class=\"line\">0x0000000000052812    880</span><br><span class=\"line\">0x000000000005283e    881</span><br><span class=\"line\">0x0000000000052846    882</span><br><span class=\"line\">0x00000000000528c8    883</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><code>. debug_line</code>段的第一行内容标识了该方法的起始符号表地址，行号及方法所在文件路径，通过之前得到的崩溃地址<code>0x52846</code>即可得知崩溃发生在882行。</p>\n<p>至此我们已经根据崩溃地址解析出了崩溃发生位置的详细信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">崩溃所在源码文件：/YourSourcePath/OBDFirstConnectViewController.m</span><br><span class=\"line\">发生崩溃的方法：-[OBDFirstConnectViewController showOilPricePickerView]</span><br><span class=\"line\">发生崩溃的方法在源文件中的行号：870</span><br><span class=\"line\">崩溃发生在源文件中得行号：882</span><br></pre></td></tr></table></figure>\n\n<p>以上内容为本人工作学习中所得，如有理解错误之处，还请指出！</p>\n<h2 id=\"五、参考文档\"><a href=\"#五、参考文档\" class=\"headerlink\" title=\"五、参考文档\"></a>五、参考文档</h2><ul>\n<li><a href=\"http://wiki.dwarfstd.org/index.php?title=Apple%27s_%22Lazy%22_DWARF_Scheme\" target=\"_blank\" rel=\"noopener\">Apple’s “Lazy” DWARF Scheme</a></li>\n<li><a href=\"http://www.dwarfstd.org/doc/Debugging%20using%20DWARF.pdf\" target=\"_blank\" rel=\"noopener\">《Introduction to the DWARF Debugging Format》</a></li>\n</ul>"},{"layout":"post","title":"为什么 Objective-C 对象存储在堆上而不是栈上","date":"2017-02-06T10:36:10.000Z","comments":1,"keywords":"Objective-C, iOS, 栈对象, 堆对象","_content":"\n为什么 Objective-C 对象存储在堆上而不是栈上\n\n#### 一、什么是栈对象和堆对象\n\n在 Objective-C 中，对象通常是指一块有特定布局的连续内存区域。我们通常这样创建一个对象：\n\n```\nNSObject *obj = [[NSObject alloc] init];\n```\n\n这行代码创建了一个 NSObject 类型的指针 obj 和一个 NSObject 类型的对象，obj 指针存储在栈上，而其指向的对象则存储在堆上（简称为堆对象）。\n\n目前 Objective-C 并不支持直接在栈上创建对象（简称为堆对象），但可以通过如下方式间接地创建：\n\n```\nstruct {\nClass isa;\n} fakeNSObject;\nfakeNSObject.isa = [NSObject class];\n\nNSObject *obj = (NSObject *)&fakeNSObject;\nNSLog(@\"%@\", [obj description]);\n```\n\n栈对象 obj 也能正常工作，由此可见栈对象和堆对象都是可行的，但为什么 Objective-C 不默认使用栈对象呢？\n\n<!-- more -->\n\n#### 二、栈对象优缺点\n\n##### 1、优点\n\n* 速度\n\n在栈上创建对象是非常快的，因为很多东西在编译时就确定了，运行时分配空间几乎不耗时；相对而言在堆上创建对象就非常耗时。\n\n* 简单\n\n栈对象的生命周期是确定的，对象出栈以后就会被释放，不会存在内存泄漏，但这同时也是栈对象的最大缺点。\n\n##### 2、缺点\n\n* 生命周期固定\n\nObjective-C 变量有效范围是由 \"{}\" 包含的块来决定的，也就是说栈对象的生命周期仅限于其所在的块里，出了块立马会被释放。一个对象被创建以后有可能会通过方法调用传递到别的方法，当栈对象的创建方法返回时，栈对象会被一起 pop 出栈而释放，导致其没法在别处被继续持有。此时 retain 操作会失效，除非用 copy 方法在想持有该栈对象的地方重新拷贝一份属于自己的栈对象。\n\n因此，栈对象回给对象的内存管理造成相当大的麻烦。\n\n* 空间\n\n现代操作系统的栈和线程绑定，而栈空间是有限的，具体如下：\n\n```\n512 KB (secondary threads)\n8 MB (OS X main thread)\n1 MB (iOS main thread)\n```\n\n因此对象如果都在栈上创建不太现实，而堆只要物理内存不告警可以无限制使用。\n\n\n综合以上优缺点，Objective-C 选择用堆存储对象。\n\n#### 三、真的没有栈对象吗\n\n实际上 Objective-C 里的 block 却是栈对象，因此栈对象面临的问题在 block 身上一个都不少，但由于 block 是仅有的特殊对象，大家对它的特殊都已经习惯了，比如入行第一年的时候老师就告诉我们想持有一个 block 要用 copy 将 block 从栈拷贝到堆上。\n\n另外，根据前面所说，栈对象的有效区域仅限于其所在的块，因此像下面的代码就无法输出期望的结果：\n\n```\nvoid (^block)();\nif(x)\n{\nblock = ^{ printf(\"x\\n\"); };\n}\nelse\n{\nblock = ^{ printf(\"not x\\n\"); };\n}\nblock();\n```\n\n这也是大家需要特别注意的地方。\n\n#### 四、参考文档\n\n* [Threading Programming Guide](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html#//apple_ref/doc/uid/10000057i-CH15-SW2)\n\n* [Stack and Heap Objects in Objective-C](https://www.mikeash.com/pyblog/friday-qa-2010-01-15-stack-and-heap-objects-in-objective-c.html)\n\n\n","source":"_posts/2017-02-06-wei-shi-yao-objective-c-dui-xiang-cun-chu-zai-dui-shang-er-bu-shi-zhan-shang.markdown","raw":"---\nlayout: post\ntitle: \"为什么 Objective-C 对象存储在堆上而不是栈上\"\ndate: 2017-02-06 18:36:10 +0800\ncomments: true\ncategories: iOS\ntags: [Objective-C, iOS, 栈对象, 堆对象]\nkeywords: Objective-C, iOS, 栈对象, 堆对象\n---\n\n为什么 Objective-C 对象存储在堆上而不是栈上\n\n#### 一、什么是栈对象和堆对象\n\n在 Objective-C 中，对象通常是指一块有特定布局的连续内存区域。我们通常这样创建一个对象：\n\n```\nNSObject *obj = [[NSObject alloc] init];\n```\n\n这行代码创建了一个 NSObject 类型的指针 obj 和一个 NSObject 类型的对象，obj 指针存储在栈上，而其指向的对象则存储在堆上（简称为堆对象）。\n\n目前 Objective-C 并不支持直接在栈上创建对象（简称为堆对象），但可以通过如下方式间接地创建：\n\n```\nstruct {\nClass isa;\n} fakeNSObject;\nfakeNSObject.isa = [NSObject class];\n\nNSObject *obj = (NSObject *)&fakeNSObject;\nNSLog(@\"%@\", [obj description]);\n```\n\n栈对象 obj 也能正常工作，由此可见栈对象和堆对象都是可行的，但为什么 Objective-C 不默认使用栈对象呢？\n\n<!-- more -->\n\n#### 二、栈对象优缺点\n\n##### 1、优点\n\n* 速度\n\n在栈上创建对象是非常快的，因为很多东西在编译时就确定了，运行时分配空间几乎不耗时；相对而言在堆上创建对象就非常耗时。\n\n* 简单\n\n栈对象的生命周期是确定的，对象出栈以后就会被释放，不会存在内存泄漏，但这同时也是栈对象的最大缺点。\n\n##### 2、缺点\n\n* 生命周期固定\n\nObjective-C 变量有效范围是由 \"{}\" 包含的块来决定的，也就是说栈对象的生命周期仅限于其所在的块里，出了块立马会被释放。一个对象被创建以后有可能会通过方法调用传递到别的方法，当栈对象的创建方法返回时，栈对象会被一起 pop 出栈而释放，导致其没法在别处被继续持有。此时 retain 操作会失效，除非用 copy 方法在想持有该栈对象的地方重新拷贝一份属于自己的栈对象。\n\n因此，栈对象回给对象的内存管理造成相当大的麻烦。\n\n* 空间\n\n现代操作系统的栈和线程绑定，而栈空间是有限的，具体如下：\n\n```\n512 KB (secondary threads)\n8 MB (OS X main thread)\n1 MB (iOS main thread)\n```\n\n因此对象如果都在栈上创建不太现实，而堆只要物理内存不告警可以无限制使用。\n\n\n综合以上优缺点，Objective-C 选择用堆存储对象。\n\n#### 三、真的没有栈对象吗\n\n实际上 Objective-C 里的 block 却是栈对象，因此栈对象面临的问题在 block 身上一个都不少，但由于 block 是仅有的特殊对象，大家对它的特殊都已经习惯了，比如入行第一年的时候老师就告诉我们想持有一个 block 要用 copy 将 block 从栈拷贝到堆上。\n\n另外，根据前面所说，栈对象的有效区域仅限于其所在的块，因此像下面的代码就无法输出期望的结果：\n\n```\nvoid (^block)();\nif(x)\n{\nblock = ^{ printf(\"x\\n\"); };\n}\nelse\n{\nblock = ^{ printf(\"not x\\n\"); };\n}\nblock();\n```\n\n这也是大家需要特别注意的地方。\n\n#### 四、参考文档\n\n* [Threading Programming Guide](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html#//apple_ref/doc/uid/10000057i-CH15-SW2)\n\n* [Stack and Heap Objects in Objective-C](https://www.mikeash.com/pyblog/friday-qa-2010-01-15-stack-and-heap-objects-in-objective-c.html)\n\n\n","slug":"2017-02-06-wei-shi-yao-objective-c-dui-xiang-cun-chu-zai-dui-shang-er-bu-shi-zhan-shang","published":1,"updated":"2017-02-06T10:38:05.000Z","photos":[],"link":"","_id":"ck0zclidj001xqhtfg8se94ru","content":"<p>为什么 Objective-C 对象存储在堆上而不是栈上</p>\n<h4 id=\"一、什么是栈对象和堆对象\"><a href=\"#一、什么是栈对象和堆对象\" class=\"headerlink\" title=\"一、什么是栈对象和堆对象\"></a>一、什么是栈对象和堆对象</h4><p>在 Objective-C 中，对象通常是指一块有特定布局的连续内存区域。我们通常这样创建一个对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSObject *obj = [[NSObject alloc] init];</span><br></pre></td></tr></table></figure>\n\n<p>这行代码创建了一个 NSObject 类型的指针 obj 和一个 NSObject 类型的对象，obj 指针存储在栈上，而其指向的对象则存储在堆上（简称为堆对象）。</p>\n<p>目前 Objective-C 并不支持直接在栈上创建对象（简称为堆对象），但可以通过如下方式间接地创建：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct &#123;</span><br><span class=\"line\">Class isa;</span><br><span class=\"line\">&#125; fakeNSObject;</span><br><span class=\"line\">fakeNSObject.isa = [NSObject class];</span><br><span class=\"line\"></span><br><span class=\"line\">NSObject *obj = (NSObject *)&amp;fakeNSObject;</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, [obj description]);</span><br></pre></td></tr></table></figure>\n\n<p>栈对象 obj 也能正常工作，由此可见栈对象和堆对象都是可行的，但为什么 Objective-C 不默认使用栈对象呢？</p>\n<a id=\"more\"></a>\n\n<h4 id=\"二、栈对象优缺点\"><a href=\"#二、栈对象优缺点\" class=\"headerlink\" title=\"二、栈对象优缺点\"></a>二、栈对象优缺点</h4><h5 id=\"1、优点\"><a href=\"#1、优点\" class=\"headerlink\" title=\"1、优点\"></a>1、优点</h5><ul>\n<li>速度</li>\n</ul>\n<p>在栈上创建对象是非常快的，因为很多东西在编译时就确定了，运行时分配空间几乎不耗时；相对而言在堆上创建对象就非常耗时。</p>\n<ul>\n<li>简单</li>\n</ul>\n<p>栈对象的生命周期是确定的，对象出栈以后就会被释放，不会存在内存泄漏，但这同时也是栈对象的最大缺点。</p>\n<h5 id=\"2、缺点\"><a href=\"#2、缺点\" class=\"headerlink\" title=\"2、缺点\"></a>2、缺点</h5><ul>\n<li>生命周期固定</li>\n</ul>\n<p>Objective-C 变量有效范围是由 “{}” 包含的块来决定的，也就是说栈对象的生命周期仅限于其所在的块里，出了块立马会被释放。一个对象被创建以后有可能会通过方法调用传递到别的方法，当栈对象的创建方法返回时，栈对象会被一起 pop 出栈而释放，导致其没法在别处被继续持有。此时 retain 操作会失效，除非用 copy 方法在想持有该栈对象的地方重新拷贝一份属于自己的栈对象。</p>\n<p>因此，栈对象回给对象的内存管理造成相当大的麻烦。</p>\n<ul>\n<li>空间</li>\n</ul>\n<p>现代操作系统的栈和线程绑定，而栈空间是有限的，具体如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">512 KB (secondary threads)</span><br><span class=\"line\">8 MB (OS X main thread)</span><br><span class=\"line\">1 MB (iOS main thread)</span><br></pre></td></tr></table></figure>\n\n<p>因此对象如果都在栈上创建不太现实，而堆只要物理内存不告警可以无限制使用。</p>\n<p>综合以上优缺点，Objective-C 选择用堆存储对象。</p>\n<h4 id=\"三、真的没有栈对象吗\"><a href=\"#三、真的没有栈对象吗\" class=\"headerlink\" title=\"三、真的没有栈对象吗\"></a>三、真的没有栈对象吗</h4><p>实际上 Objective-C 里的 block 却是栈对象，因此栈对象面临的问题在 block 身上一个都不少，但由于 block 是仅有的特殊对象，大家对它的特殊都已经习惯了，比如入行第一年的时候老师就告诉我们想持有一个 block 要用 copy 将 block 从栈拷贝到堆上。</p>\n<p>另外，根据前面所说，栈对象的有效区域仅限于其所在的块，因此像下面的代码就无法输出期望的结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void (^block)();</span><br><span class=\"line\">if(x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">block = ^&#123; printf(&quot;x\\n&quot;); &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">block = ^&#123; printf(&quot;not x\\n&quot;); &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">block();</span><br></pre></td></tr></table></figure>\n\n<p>这也是大家需要特别注意的地方。</p>\n<h4 id=\"四、参考文档\"><a href=\"#四、参考文档\" class=\"headerlink\" title=\"四、参考文档\"></a>四、参考文档</h4><ul>\n<li><p><a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html#//apple_ref/doc/uid/10000057i-CH15-SW2\" target=\"_blank\" rel=\"noopener\">Threading Programming Guide</a></p>\n</li>\n<li><p><a href=\"https://www.mikeash.com/pyblog/friday-qa-2010-01-15-stack-and-heap-objects-in-objective-c.html\" target=\"_blank\" rel=\"noopener\">Stack and Heap Objects in Objective-C</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>为什么 Objective-C 对象存储在堆上而不是栈上</p>\n<h4 id=\"一、什么是栈对象和堆对象\"><a href=\"#一、什么是栈对象和堆对象\" class=\"headerlink\" title=\"一、什么是栈对象和堆对象\"></a>一、什么是栈对象和堆对象</h4><p>在 Objective-C 中，对象通常是指一块有特定布局的连续内存区域。我们通常这样创建一个对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSObject *obj = [[NSObject alloc] init];</span><br></pre></td></tr></table></figure>\n\n<p>这行代码创建了一个 NSObject 类型的指针 obj 和一个 NSObject 类型的对象，obj 指针存储在栈上，而其指向的对象则存储在堆上（简称为堆对象）。</p>\n<p>目前 Objective-C 并不支持直接在栈上创建对象（简称为堆对象），但可以通过如下方式间接地创建：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct &#123;</span><br><span class=\"line\">Class isa;</span><br><span class=\"line\">&#125; fakeNSObject;</span><br><span class=\"line\">fakeNSObject.isa = [NSObject class];</span><br><span class=\"line\"></span><br><span class=\"line\">NSObject *obj = (NSObject *)&amp;fakeNSObject;</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, [obj description]);</span><br></pre></td></tr></table></figure>\n\n<p>栈对象 obj 也能正常工作，由此可见栈对象和堆对象都是可行的，但为什么 Objective-C 不默认使用栈对象呢？</p>","more":"<h4 id=\"二、栈对象优缺点\"><a href=\"#二、栈对象优缺点\" class=\"headerlink\" title=\"二、栈对象优缺点\"></a>二、栈对象优缺点</h4><h5 id=\"1、优点\"><a href=\"#1、优点\" class=\"headerlink\" title=\"1、优点\"></a>1、优点</h5><ul>\n<li>速度</li>\n</ul>\n<p>在栈上创建对象是非常快的，因为很多东西在编译时就确定了，运行时分配空间几乎不耗时；相对而言在堆上创建对象就非常耗时。</p>\n<ul>\n<li>简单</li>\n</ul>\n<p>栈对象的生命周期是确定的，对象出栈以后就会被释放，不会存在内存泄漏，但这同时也是栈对象的最大缺点。</p>\n<h5 id=\"2、缺点\"><a href=\"#2、缺点\" class=\"headerlink\" title=\"2、缺点\"></a>2、缺点</h5><ul>\n<li>生命周期固定</li>\n</ul>\n<p>Objective-C 变量有效范围是由 “{}” 包含的块来决定的，也就是说栈对象的生命周期仅限于其所在的块里，出了块立马会被释放。一个对象被创建以后有可能会通过方法调用传递到别的方法，当栈对象的创建方法返回时，栈对象会被一起 pop 出栈而释放，导致其没法在别处被继续持有。此时 retain 操作会失效，除非用 copy 方法在想持有该栈对象的地方重新拷贝一份属于自己的栈对象。</p>\n<p>因此，栈对象回给对象的内存管理造成相当大的麻烦。</p>\n<ul>\n<li>空间</li>\n</ul>\n<p>现代操作系统的栈和线程绑定，而栈空间是有限的，具体如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">512 KB (secondary threads)</span><br><span class=\"line\">8 MB (OS X main thread)</span><br><span class=\"line\">1 MB (iOS main thread)</span><br></pre></td></tr></table></figure>\n\n<p>因此对象如果都在栈上创建不太现实，而堆只要物理内存不告警可以无限制使用。</p>\n<p>综合以上优缺点，Objective-C 选择用堆存储对象。</p>\n<h4 id=\"三、真的没有栈对象吗\"><a href=\"#三、真的没有栈对象吗\" class=\"headerlink\" title=\"三、真的没有栈对象吗\"></a>三、真的没有栈对象吗</h4><p>实际上 Objective-C 里的 block 却是栈对象，因此栈对象面临的问题在 block 身上一个都不少，但由于 block 是仅有的特殊对象，大家对它的特殊都已经习惯了，比如入行第一年的时候老师就告诉我们想持有一个 block 要用 copy 将 block 从栈拷贝到堆上。</p>\n<p>另外，根据前面所说，栈对象的有效区域仅限于其所在的块，因此像下面的代码就无法输出期望的结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void (^block)();</span><br><span class=\"line\">if(x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">block = ^&#123; printf(&quot;x\\n&quot;); &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">block = ^&#123; printf(&quot;not x\\n&quot;); &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">block();</span><br></pre></td></tr></table></figure>\n\n<p>这也是大家需要特别注意的地方。</p>\n<h4 id=\"四、参考文档\"><a href=\"#四、参考文档\" class=\"headerlink\" title=\"四、参考文档\"></a>四、参考文档</h4><ul>\n<li><p><a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html#//apple_ref/doc/uid/10000057i-CH15-SW2\" target=\"_blank\" rel=\"noopener\">Threading Programming Guide</a></p>\n</li>\n<li><p><a href=\"https://www.mikeash.com/pyblog/friday-qa-2010-01-15-stack-and-heap-objects-in-objective-c.html\" target=\"_blank\" rel=\"noopener\">Stack and Heap Objects in Objective-C</a></p>\n</li>\n</ul>"},{"layout":"post","title":"CocoaPods 详解之----更新篇","date":"2016-03-23T02:50:29.000Z","comments":1,"keywords":"CocoaPods, iOS, Cocoa, Trunk, 私有仓库","_content":"\nCocoaPods 大概是 2011 年出现的开源组件管理工具（目前已支持 Objective-C 和 Swift），近年来普及率越来越高，几乎已是所有 Cocoa 开源项目的标配。另外，很多大点的团队会用 CocoaPods 拆分工程，实现项目插件化。\n\n博主曾在 2014 年写过 `CocoaPods 详解` 系列文章：[CocoaPods详解之----使用篇](http://blog.csdn.net/wzzvictory/article/details/18737437)、[CocoaPods详解之----进阶篇](http://blog.csdn.net/wzzvictory/article/details/19178709)、[CocoaPods详解之----制作篇](http://blog.csdn.net/wzzvictory/article/details/20067595)，简单介绍了从使用到亲手制作 CocoaPods 开源组件的过程。\n\n然而随着时间的推移，CocoaPods 有些使用方式也发生了变化，比如组件提交方式等。本文将从 Trunk 和私有仓库两个方面介绍自己对 CocoaPods 的新认识。\n\n<!-- more -->\n\n## 一、Trunk 方式提交开源组件\n\n从 CocoaPods 0.33 版本开始，CocoaPods 将组件的提交从 Pull requests 变成了自动化的 Trunk 方式。Trunk 提交方式有以下步骤：\n\n### 1、向 Trunk 注册自己的电脑\n\n首次使用 Trunk 时，需要注册自己的电脑：\n\n```\n# pod trunk register [E-mail] [User Name]\n$ pod trunk register foggry@foggry.com \"foggry\"\n```\n\n执行命令以后，上述邮箱会收到一封验证邮件，按照邮件说明打开制定的链接，注册流程就完成了。\n\n注册流程完成后，可以使用命令：\n\n```\n$ pod trunk me\n```\n\n可以检验注册结果，如果输出：\n\n```\n- Name:     foggry\n- Email:    foggry@foggry.com\n- Since:    May 19th, 2014 16:03\n- Pods:     None\n- Sessions:\n- March 19th, 22:23 - July 25th, 22:26. IP: 10.1.1.1\n```\n\n则说明注册成功。\n\n### 2、提交组件\n\n准备好 podspec 文件后，首先要检查其合法性：\n\n```\n# Enter podspec path\n$ pod lib lint\n```\n\n解决完错误和警告后，会显示以下内容：\n\n```\n-> FGMarqueeView (1.0.0)\n\nFGMarqueeView passed validation.\n```\n\n这就说明验证可以提交了。\n\n执行提交命令：\n\n```\n$ pod trunk push WZMarqueeView.podspec\n```\n\n如果顺利的话，会输出以下内容：\n\n```\nUpdating spec repo `master`\n\nValidating podspec\n-> WZMarqueeView (2.0.0)\n\nUpdating spec repo `master`\n\n- Data URL: https://raw.githubusercontent.com/CocoaPods/Specs/1f2d70d978843a29cbe17b2476ffed8204eea6ef/Specs/WZMarqueeView/2.0.0/WZMarqueeView.podspec.json\n- Log messages:\n- March 21st, 00:49: Push for `WZMarqueeView 2.0.0' initiated.\n- March 21st, 00:49: Push for `WZMarqueeView 2.0.0' has been pushed (2.327208585 s).\n```\n\n仅需要这一条命令，开源组件就被推送到 CocoaPods 主仓库中了。可以执行以下命令验证下：\n\n```\n$ pod search WZMarqueeView\n```\n\n输出为：\n\n```\n-> WZMarqueeView (2.0.0)\nA marquee view used on iOS.\npod 'WZMarqueeView', '~> 2.0.0'\n- Homepage: https://github.com/wangzz/WZMarqueeView\n- Source:   https://github.com/wangzz/WZMarqueeView.git\n- Versions: 2.0.0, 1.0.0 [master repo]\n```\n\n说明组件 `WZMarqueeView ` 已经成功从 `1.0.0` 升级成了 `2.0.0` 版本。\n\n### 3、其它说明\n\n* 权限声明\n\n在执行下述命令时：\n\n```\n$ pod trunk push WZMarqueeView.podspec\n```\n\n提示了以下错误：\n\n```\nUpdating spec repo `master`\n\nValidating podspec\n-> WZMarqueeView (2.0.0)\n\n[!] You are not allowed to push new versions for this pod.\n\n```\n\n原来，Trunk 要求只有组件所有者和开发者才能更新已有组件，而上例的组件 `WZMarqueeView ` 是 2014 年通过 Pull requests 方式上传到 CocoaPods 主仓库的，并没有声明过所有权。\n\n随后，到 CocoaPods 指定的网页：[Claim your Pod](https://trunk.cocoapods.org/claims/new)上填写对应信息后，按照提示执行命令：\n\n```\n$ pod trunk info WZMarqueeView\n```\n\n看到执行结果：\n\n```\nWZMarqueeView\n- Versions:\n- 1.0.0 (2014-05-19 22:03:59 UTC)\n- Owners:\n- foggry <foggry@foggry.com>\n```\n\n组件的所有权已经变成了本人，此时再去执行 `trunk push` 命令时就正常了。\n\n* 为组件添加其它所有者\n\n一个组件可以通过以下命令，添加多个所有者（以邮箱为标识）：\n\n```\n# pod trunk add-owner [Module Name] [Owner E-mail]\n$ pod trunk add-owner WZMarqueeView kyle@cocoapods.org\n```\n\n执行成功后，`kyle@cocoapods.org` 也变成了 `WZMarqueeView ` 的所有者。\n\n* Pull requests 和 Trunk 对比\n\n对于开发者来说，Pull requests 的操作过程十分繁琐，需要开源组件制作者先 fork 一份主仓库，然后将组件提交到 fork 后的仓库，再 Pull requests 给 CocoaPods 主仓库的维护者；\n\n对 CocoaPods 主仓库的维护者来说，需要手工一个个处理主仓库的合并操作，通常第二天甚至需要更长时间 requests 才能被处理；\n\n而 Trunk 方式，开发者只需要一条命令就能将组件上传到主仓库，并且 Trunk 方式是自动化的，几乎不再需要主仓库的维护者做任何工作，实时性更好。\n\n另外，Trunk 增加了组件所有者的概念，非所有者无法提交组件的更新，这在一定程度上提高了 CocoaPods 的安全性。\n\n## 二、创建私有 CocoaPods 仓库\n\n目前所有支持 CocoaPods 的开源组件，都存储在 Github 上公共的 [CocoaPods Specs](https://github.com/CocoaPods/Specs.git) 仓库中，这种方式有以下缺点：\n\n官方仓库过大，里面的绝大多数组件都不是我们需要的，你一定忘不了首次执行 `pod install` 操作时那无尽的等待；\n\n不能实现私有化，作为一个相当好用的组件管理工具，很多团队都使用 CocoaPods 实现庞大项目的组件化，都放在公共仓库肯定不行。\n\n这时就需要创建一个和 [CocoaPods Specs](https://github.com/CocoaPods/Specs.git) 类似的私有组件存储仓库。私有仓库可以存放在自家公司的 Git 服务器上，也可以放在各大支持私有仓库的 Git 平台上，下面以支持免费私有仓库的 [coding.net](https://coding.net)为例说明 CocoaPods 私有仓库的创建过程。\n\n### 1、创建[coding.net](https://coding.net)私有仓库\n\n按照 [coding.net](https://coding.net) 官网提示创建一个私有仓库即可。\n\n### 2、本地初始化组件仓库\n\n执行以下命令：\n\n```\n# pod repo add [Private Repo Name] [GitHub HTTPS clone URL]\n$ pod repo add FGSpecs https://git.coding.net/foogry/FGSpecs.git\n```\n\n### 3、向仓库中添加组件\n\n将事先准备好的组件添加到仓库中，组件可以存放在本地，也可以放在自家或网上的代码托管平台。执行以下命令：\n\n```\n# pod repo push [Private Repo Name] [Private podspec Path]\n$ pod repo push FGSpecs ~/Desktop/FGMarqueeView.podspec\n```\n\n执行成功以后，会有以下输出：\n\n```\nValidating spec\n\n-> FGMarqueeView (0.1.0)\n\nUpdating the `FGSpecs' repo\n\nAlready up-to-date.\n\nAdding the spec to the `FGSpecs' repo\n\n- [Fix] FGMarqueeView (0.1.0)\n\nPushing the `FGSpecs' repo\n\nTo git@git.coding.net:foogry/FGSpecs.git\ne2ad499..31a1a8e  master -> master\n```\n\n至此，本地和代码托管平台上的私有仓库 FGSpecs 中就都已经添加了私有组件 FGMarqueeView。\n\n### 4、使用私有仓库中的组件\n\nPodfile 文件中默认情况下已经隐式使用 `source` 声明了 CocoaPods 的官方仓库。但使用私有组件，需要使用 `source` 关键字鲜显式声明组件所在仓库：\n\n```\n# Private Specs\nsource 'https://git.coding.net/foogry/FGSpecs.git'\n\n# Public Specs\nsource 'https://github.com/CocoaPods/Specs.git'\n\npod 'FGMarqueeView', '~> 0.1.0'\npod 'SBJson', '~> 4.0.0'\n```\n\n其中，SBJson 组件是官方仓库的，FGMarqueeView 组件属于我们刚创建的私有仓库。\n\n需要注意的是：\n\n* 官方仓库的显式声明\n\n尽管官方仓库会被隐式声明，如果同时使用了官方仓库和私有仓库，就需要同时声明二者。\n\n* 仓库声明顺序性\n\n先声明的仓库具有优先权。当先后引用的两个仓库中都包含同一个组件时，会使用先引用仓库中的，哪怕后引用的仓库中版本号更高。\n\n### 5、直接使用私有组件\n\n如果不想创建私有仓库，也可以在 Podfile 里直接引用私有组件（组件可以是本地的，也可以是托管在自家公司服务器或网上的代码托管平台上的），引用的同时还可以制定具体的 commit、branch 或者 tag，比如：\n\n```\n$ pod 'FGMarqueeView', :git => 'https://git.coding.net/foogry/FGMarqueeView.git', :commit => 'b4dc0ffee'\n```\n\n这种方式引用的组件在执行完 `pod install` 以后，会被添加在 Development Pods 目录下，而通过私有仓库或共有仓库方式引用的组件则会被添加在 Pods 目录下。\n\n## 三、cocoapods 版本管理\n\ncocoapods 升级新版本后可能会遇到坑，因此就有了降级的需求。\n\n* 查看当前版本\n\n```\nsudo gem list cocoapods\n```\n\n* 卸载当前版本\n\n```\nsudo gem uninstall cocoapods\n```\n\n* 安装指定版本\n\n```\nsudo gem install cocoapods -v 0.39.0\n```\n\n## 四、参考文档\n\n* [CocoaPods Trunk](https://blog.cocoapods.org/CocoaPods-Trunk/#transition)\n\n* [Getting setup with Trunk](https://guides.cocoapods.org/making/getting-setup-with-trunk.html)\n\n* [Private Pods](https://guides.cocoapods.org/making/private-cocoapods.html)\n\n* [Podfile Syntax Reference](https://guides.cocoapods.org/syntax/podfile.html#source)\n\n* [Downgrading or installing older version of Cocoapods](http://stackoverflow.com/a/20489489)","source":"_posts/2016-03-23-cocoapods-xiang-jie-zhi-geng-xin-pian.markdown","raw":"---\nlayout: post\ntitle: \"CocoaPods 详解之----更新篇\"\ndate: 2016-03-23 10:50:29 +0800\ncomments: true\ncategories: iOS\ntags: [CocoaPods, iOS, Cocoa, Trunk, 私有仓库]\nkeywords: CocoaPods, iOS, Cocoa, Trunk, 私有仓库\n---\n\nCocoaPods 大概是 2011 年出现的开源组件管理工具（目前已支持 Objective-C 和 Swift），近年来普及率越来越高，几乎已是所有 Cocoa 开源项目的标配。另外，很多大点的团队会用 CocoaPods 拆分工程，实现项目插件化。\n\n博主曾在 2014 年写过 `CocoaPods 详解` 系列文章：[CocoaPods详解之----使用篇](http://blog.csdn.net/wzzvictory/article/details/18737437)、[CocoaPods详解之----进阶篇](http://blog.csdn.net/wzzvictory/article/details/19178709)、[CocoaPods详解之----制作篇](http://blog.csdn.net/wzzvictory/article/details/20067595)，简单介绍了从使用到亲手制作 CocoaPods 开源组件的过程。\n\n然而随着时间的推移，CocoaPods 有些使用方式也发生了变化，比如组件提交方式等。本文将从 Trunk 和私有仓库两个方面介绍自己对 CocoaPods 的新认识。\n\n<!-- more -->\n\n## 一、Trunk 方式提交开源组件\n\n从 CocoaPods 0.33 版本开始，CocoaPods 将组件的提交从 Pull requests 变成了自动化的 Trunk 方式。Trunk 提交方式有以下步骤：\n\n### 1、向 Trunk 注册自己的电脑\n\n首次使用 Trunk 时，需要注册自己的电脑：\n\n```\n# pod trunk register [E-mail] [User Name]\n$ pod trunk register foggry@foggry.com \"foggry\"\n```\n\n执行命令以后，上述邮箱会收到一封验证邮件，按照邮件说明打开制定的链接，注册流程就完成了。\n\n注册流程完成后，可以使用命令：\n\n```\n$ pod trunk me\n```\n\n可以检验注册结果，如果输出：\n\n```\n- Name:     foggry\n- Email:    foggry@foggry.com\n- Since:    May 19th, 2014 16:03\n- Pods:     None\n- Sessions:\n- March 19th, 22:23 - July 25th, 22:26. IP: 10.1.1.1\n```\n\n则说明注册成功。\n\n### 2、提交组件\n\n准备好 podspec 文件后，首先要检查其合法性：\n\n```\n# Enter podspec path\n$ pod lib lint\n```\n\n解决完错误和警告后，会显示以下内容：\n\n```\n-> FGMarqueeView (1.0.0)\n\nFGMarqueeView passed validation.\n```\n\n这就说明验证可以提交了。\n\n执行提交命令：\n\n```\n$ pod trunk push WZMarqueeView.podspec\n```\n\n如果顺利的话，会输出以下内容：\n\n```\nUpdating spec repo `master`\n\nValidating podspec\n-> WZMarqueeView (2.0.0)\n\nUpdating spec repo `master`\n\n- Data URL: https://raw.githubusercontent.com/CocoaPods/Specs/1f2d70d978843a29cbe17b2476ffed8204eea6ef/Specs/WZMarqueeView/2.0.0/WZMarqueeView.podspec.json\n- Log messages:\n- March 21st, 00:49: Push for `WZMarqueeView 2.0.0' initiated.\n- March 21st, 00:49: Push for `WZMarqueeView 2.0.0' has been pushed (2.327208585 s).\n```\n\n仅需要这一条命令，开源组件就被推送到 CocoaPods 主仓库中了。可以执行以下命令验证下：\n\n```\n$ pod search WZMarqueeView\n```\n\n输出为：\n\n```\n-> WZMarqueeView (2.0.0)\nA marquee view used on iOS.\npod 'WZMarqueeView', '~> 2.0.0'\n- Homepage: https://github.com/wangzz/WZMarqueeView\n- Source:   https://github.com/wangzz/WZMarqueeView.git\n- Versions: 2.0.0, 1.0.0 [master repo]\n```\n\n说明组件 `WZMarqueeView ` 已经成功从 `1.0.0` 升级成了 `2.0.0` 版本。\n\n### 3、其它说明\n\n* 权限声明\n\n在执行下述命令时：\n\n```\n$ pod trunk push WZMarqueeView.podspec\n```\n\n提示了以下错误：\n\n```\nUpdating spec repo `master`\n\nValidating podspec\n-> WZMarqueeView (2.0.0)\n\n[!] You are not allowed to push new versions for this pod.\n\n```\n\n原来，Trunk 要求只有组件所有者和开发者才能更新已有组件，而上例的组件 `WZMarqueeView ` 是 2014 年通过 Pull requests 方式上传到 CocoaPods 主仓库的，并没有声明过所有权。\n\n随后，到 CocoaPods 指定的网页：[Claim your Pod](https://trunk.cocoapods.org/claims/new)上填写对应信息后，按照提示执行命令：\n\n```\n$ pod trunk info WZMarqueeView\n```\n\n看到执行结果：\n\n```\nWZMarqueeView\n- Versions:\n- 1.0.0 (2014-05-19 22:03:59 UTC)\n- Owners:\n- foggry <foggry@foggry.com>\n```\n\n组件的所有权已经变成了本人，此时再去执行 `trunk push` 命令时就正常了。\n\n* 为组件添加其它所有者\n\n一个组件可以通过以下命令，添加多个所有者（以邮箱为标识）：\n\n```\n# pod trunk add-owner [Module Name] [Owner E-mail]\n$ pod trunk add-owner WZMarqueeView kyle@cocoapods.org\n```\n\n执行成功后，`kyle@cocoapods.org` 也变成了 `WZMarqueeView ` 的所有者。\n\n* Pull requests 和 Trunk 对比\n\n对于开发者来说，Pull requests 的操作过程十分繁琐，需要开源组件制作者先 fork 一份主仓库，然后将组件提交到 fork 后的仓库，再 Pull requests 给 CocoaPods 主仓库的维护者；\n\n对 CocoaPods 主仓库的维护者来说，需要手工一个个处理主仓库的合并操作，通常第二天甚至需要更长时间 requests 才能被处理；\n\n而 Trunk 方式，开发者只需要一条命令就能将组件上传到主仓库，并且 Trunk 方式是自动化的，几乎不再需要主仓库的维护者做任何工作，实时性更好。\n\n另外，Trunk 增加了组件所有者的概念，非所有者无法提交组件的更新，这在一定程度上提高了 CocoaPods 的安全性。\n\n## 二、创建私有 CocoaPods 仓库\n\n目前所有支持 CocoaPods 的开源组件，都存储在 Github 上公共的 [CocoaPods Specs](https://github.com/CocoaPods/Specs.git) 仓库中，这种方式有以下缺点：\n\n官方仓库过大，里面的绝大多数组件都不是我们需要的，你一定忘不了首次执行 `pod install` 操作时那无尽的等待；\n\n不能实现私有化，作为一个相当好用的组件管理工具，很多团队都使用 CocoaPods 实现庞大项目的组件化，都放在公共仓库肯定不行。\n\n这时就需要创建一个和 [CocoaPods Specs](https://github.com/CocoaPods/Specs.git) 类似的私有组件存储仓库。私有仓库可以存放在自家公司的 Git 服务器上，也可以放在各大支持私有仓库的 Git 平台上，下面以支持免费私有仓库的 [coding.net](https://coding.net)为例说明 CocoaPods 私有仓库的创建过程。\n\n### 1、创建[coding.net](https://coding.net)私有仓库\n\n按照 [coding.net](https://coding.net) 官网提示创建一个私有仓库即可。\n\n### 2、本地初始化组件仓库\n\n执行以下命令：\n\n```\n# pod repo add [Private Repo Name] [GitHub HTTPS clone URL]\n$ pod repo add FGSpecs https://git.coding.net/foogry/FGSpecs.git\n```\n\n### 3、向仓库中添加组件\n\n将事先准备好的组件添加到仓库中，组件可以存放在本地，也可以放在自家或网上的代码托管平台。执行以下命令：\n\n```\n# pod repo push [Private Repo Name] [Private podspec Path]\n$ pod repo push FGSpecs ~/Desktop/FGMarqueeView.podspec\n```\n\n执行成功以后，会有以下输出：\n\n```\nValidating spec\n\n-> FGMarqueeView (0.1.0)\n\nUpdating the `FGSpecs' repo\n\nAlready up-to-date.\n\nAdding the spec to the `FGSpecs' repo\n\n- [Fix] FGMarqueeView (0.1.0)\n\nPushing the `FGSpecs' repo\n\nTo git@git.coding.net:foogry/FGSpecs.git\ne2ad499..31a1a8e  master -> master\n```\n\n至此，本地和代码托管平台上的私有仓库 FGSpecs 中就都已经添加了私有组件 FGMarqueeView。\n\n### 4、使用私有仓库中的组件\n\nPodfile 文件中默认情况下已经隐式使用 `source` 声明了 CocoaPods 的官方仓库。但使用私有组件，需要使用 `source` 关键字鲜显式声明组件所在仓库：\n\n```\n# Private Specs\nsource 'https://git.coding.net/foogry/FGSpecs.git'\n\n# Public Specs\nsource 'https://github.com/CocoaPods/Specs.git'\n\npod 'FGMarqueeView', '~> 0.1.0'\npod 'SBJson', '~> 4.0.0'\n```\n\n其中，SBJson 组件是官方仓库的，FGMarqueeView 组件属于我们刚创建的私有仓库。\n\n需要注意的是：\n\n* 官方仓库的显式声明\n\n尽管官方仓库会被隐式声明，如果同时使用了官方仓库和私有仓库，就需要同时声明二者。\n\n* 仓库声明顺序性\n\n先声明的仓库具有优先权。当先后引用的两个仓库中都包含同一个组件时，会使用先引用仓库中的，哪怕后引用的仓库中版本号更高。\n\n### 5、直接使用私有组件\n\n如果不想创建私有仓库，也可以在 Podfile 里直接引用私有组件（组件可以是本地的，也可以是托管在自家公司服务器或网上的代码托管平台上的），引用的同时还可以制定具体的 commit、branch 或者 tag，比如：\n\n```\n$ pod 'FGMarqueeView', :git => 'https://git.coding.net/foogry/FGMarqueeView.git', :commit => 'b4dc0ffee'\n```\n\n这种方式引用的组件在执行完 `pod install` 以后，会被添加在 Development Pods 目录下，而通过私有仓库或共有仓库方式引用的组件则会被添加在 Pods 目录下。\n\n## 三、cocoapods 版本管理\n\ncocoapods 升级新版本后可能会遇到坑，因此就有了降级的需求。\n\n* 查看当前版本\n\n```\nsudo gem list cocoapods\n```\n\n* 卸载当前版本\n\n```\nsudo gem uninstall cocoapods\n```\n\n* 安装指定版本\n\n```\nsudo gem install cocoapods -v 0.39.0\n```\n\n## 四、参考文档\n\n* [CocoaPods Trunk](https://blog.cocoapods.org/CocoaPods-Trunk/#transition)\n\n* [Getting setup with Trunk](https://guides.cocoapods.org/making/getting-setup-with-trunk.html)\n\n* [Private Pods](https://guides.cocoapods.org/making/private-cocoapods.html)\n\n* [Podfile Syntax Reference](https://guides.cocoapods.org/syntax/podfile.html#source)\n\n* [Downgrading or installing older version of Cocoapods](http://stackoverflow.com/a/20489489)","slug":"2016-03-23-cocoapods-xiang-jie-zhi-geng-xin-pian","published":1,"updated":"2019-09-23T12:50:20.000Z","photos":[],"link":"","_id":"ck0zclidk0021qhtfz8p7rw48","content":"<p>CocoaPods 大概是 2011 年出现的开源组件管理工具（目前已支持 Objective-C 和 Swift），近年来普及率越来越高，几乎已是所有 Cocoa 开源项目的标配。另外，很多大点的团队会用 CocoaPods 拆分工程，实现项目插件化。</p>\n<p>博主曾在 2014 年写过 <code>CocoaPods 详解</code> 系列文章：<a href=\"http://blog.csdn.net/wzzvictory/article/details/18737437\" target=\"_blank\" rel=\"noopener\">CocoaPods详解之—-使用篇</a>、<a href=\"http://blog.csdn.net/wzzvictory/article/details/19178709\" target=\"_blank\" rel=\"noopener\">CocoaPods详解之—-进阶篇</a>、<a href=\"http://blog.csdn.net/wzzvictory/article/details/20067595\" target=\"_blank\" rel=\"noopener\">CocoaPods详解之—-制作篇</a>，简单介绍了从使用到亲手制作 CocoaPods 开源组件的过程。</p>\n<p>然而随着时间的推移，CocoaPods 有些使用方式也发生了变化，比如组件提交方式等。本文将从 Trunk 和私有仓库两个方面介绍自己对 CocoaPods 的新认识。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"一、Trunk-方式提交开源组件\"><a href=\"#一、Trunk-方式提交开源组件\" class=\"headerlink\" title=\"一、Trunk 方式提交开源组件\"></a>一、Trunk 方式提交开源组件</h2><p>从 CocoaPods 0.33 版本开始，CocoaPods 将组件的提交从 Pull requests 变成了自动化的 Trunk 方式。Trunk 提交方式有以下步骤：</p>\n<h3 id=\"1、向-Trunk-注册自己的电脑\"><a href=\"#1、向-Trunk-注册自己的电脑\" class=\"headerlink\" title=\"1、向 Trunk 注册自己的电脑\"></a>1、向 Trunk 注册自己的电脑</h3><p>首次使用 Trunk 时，需要注册自己的电脑：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># pod trunk register [E-mail] [User Name]</span><br><span class=\"line\">$ pod trunk register foggry@foggry.com &quot;foggry&quot;</span><br></pre></td></tr></table></figure>\n\n<p>执行命令以后，上述邮箱会收到一封验证邮件，按照邮件说明打开制定的链接，注册流程就完成了。</p>\n<p>注册流程完成后，可以使用命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod trunk me</span><br></pre></td></tr></table></figure>\n\n<p>可以检验注册结果，如果输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- Name:     foggry</span><br><span class=\"line\">- Email:    foggry@foggry.com</span><br><span class=\"line\">- Since:    May 19th, 2014 16:03</span><br><span class=\"line\">- Pods:     None</span><br><span class=\"line\">- Sessions:</span><br><span class=\"line\">- March 19th, 22:23 - July 25th, 22:26. IP: 10.1.1.1</span><br></pre></td></tr></table></figure>\n\n<p>则说明注册成功。</p>\n<h3 id=\"2、提交组件\"><a href=\"#2、提交组件\" class=\"headerlink\" title=\"2、提交组件\"></a>2、提交组件</h3><p>准备好 podspec 文件后，首先要检查其合法性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Enter podspec path</span><br><span class=\"line\">$ pod lib lint</span><br></pre></td></tr></table></figure>\n\n<p>解决完错误和警告后，会显示以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; FGMarqueeView (1.0.0)</span><br><span class=\"line\"></span><br><span class=\"line\">FGMarqueeView passed validation.</span><br></pre></td></tr></table></figure>\n\n<p>这就说明验证可以提交了。</p>\n<p>执行提交命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod trunk push WZMarqueeView.podspec</span><br></pre></td></tr></table></figure>\n\n<p>如果顺利的话，会输出以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Updating spec repo `master`</span><br><span class=\"line\"></span><br><span class=\"line\">Validating podspec</span><br><span class=\"line\">-&gt; WZMarqueeView (2.0.0)</span><br><span class=\"line\"></span><br><span class=\"line\">Updating spec repo `master`</span><br><span class=\"line\"></span><br><span class=\"line\">- Data URL: https://raw.githubusercontent.com/CocoaPods/Specs/1f2d70d978843a29cbe17b2476ffed8204eea6ef/Specs/WZMarqueeView/2.0.0/WZMarqueeView.podspec.json</span><br><span class=\"line\">- Log messages:</span><br><span class=\"line\">- March 21st, 00:49: Push for `WZMarqueeView 2.0.0&apos; initiated.</span><br><span class=\"line\">- March 21st, 00:49: Push for `WZMarqueeView 2.0.0&apos; has been pushed (2.327208585 s).</span><br></pre></td></tr></table></figure>\n\n<p>仅需要这一条命令，开源组件就被推送到 CocoaPods 主仓库中了。可以执行以下命令验证下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod search WZMarqueeView</span><br></pre></td></tr></table></figure>\n\n<p>输出为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; WZMarqueeView (2.0.0)</span><br><span class=\"line\">A marquee view used on iOS.</span><br><span class=\"line\">pod &apos;WZMarqueeView&apos;, &apos;~&gt; 2.0.0&apos;</span><br><span class=\"line\">- Homepage: https://github.com/wangzz/WZMarqueeView</span><br><span class=\"line\">- Source:   https://github.com/wangzz/WZMarqueeView.git</span><br><span class=\"line\">- Versions: 2.0.0, 1.0.0 [master repo]</span><br></pre></td></tr></table></figure>\n\n<p>说明组件 <code>WZMarqueeView</code> 已经成功从 <code>1.0.0</code> 升级成了 <code>2.0.0</code> 版本。</p>\n<h3 id=\"3、其它说明\"><a href=\"#3、其它说明\" class=\"headerlink\" title=\"3、其它说明\"></a>3、其它说明</h3><ul>\n<li>权限声明</li>\n</ul>\n<p>在执行下述命令时：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod trunk push WZMarqueeView.podspec</span><br></pre></td></tr></table></figure>\n\n<p>提示了以下错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Updating spec repo `master`</span><br><span class=\"line\"></span><br><span class=\"line\">Validating podspec</span><br><span class=\"line\">-&gt; WZMarqueeView (2.0.0)</span><br><span class=\"line\"></span><br><span class=\"line\">[!] You are not allowed to push new versions for this pod.</span><br></pre></td></tr></table></figure>\n\n<p>原来，Trunk 要求只有组件所有者和开发者才能更新已有组件，而上例的组件 <code>WZMarqueeView</code> 是 2014 年通过 Pull requests 方式上传到 CocoaPods 主仓库的，并没有声明过所有权。</p>\n<p>随后，到 CocoaPods 指定的网页：<a href=\"https://trunk.cocoapods.org/claims/new\" target=\"_blank\" rel=\"noopener\">Claim your Pod</a>上填写对应信息后，按照提示执行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod trunk info WZMarqueeView</span><br></pre></td></tr></table></figure>\n\n<p>看到执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WZMarqueeView</span><br><span class=\"line\">- Versions:</span><br><span class=\"line\">- 1.0.0 (2014-05-19 22:03:59 UTC)</span><br><span class=\"line\">- Owners:</span><br><span class=\"line\">- foggry &lt;foggry@foggry.com&gt;</span><br></pre></td></tr></table></figure>\n\n<p>组件的所有权已经变成了本人，此时再去执行 <code>trunk push</code> 命令时就正常了。</p>\n<ul>\n<li>为组件添加其它所有者</li>\n</ul>\n<p>一个组件可以通过以下命令，添加多个所有者（以邮箱为标识）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># pod trunk add-owner [Module Name] [Owner E-mail]</span><br><span class=\"line\">$ pod trunk add-owner WZMarqueeView kyle@cocoapods.org</span><br></pre></td></tr></table></figure>\n\n<p>执行成功后，<code>kyle@cocoapods.org</code> 也变成了 <code>WZMarqueeView</code> 的所有者。</p>\n<ul>\n<li>Pull requests 和 Trunk 对比</li>\n</ul>\n<p>对于开发者来说，Pull requests 的操作过程十分繁琐，需要开源组件制作者先 fork 一份主仓库，然后将组件提交到 fork 后的仓库，再 Pull requests 给 CocoaPods 主仓库的维护者；</p>\n<p>对 CocoaPods 主仓库的维护者来说，需要手工一个个处理主仓库的合并操作，通常第二天甚至需要更长时间 requests 才能被处理；</p>\n<p>而 Trunk 方式，开发者只需要一条命令就能将组件上传到主仓库，并且 Trunk 方式是自动化的，几乎不再需要主仓库的维护者做任何工作，实时性更好。</p>\n<p>另外，Trunk 增加了组件所有者的概念，非所有者无法提交组件的更新，这在一定程度上提高了 CocoaPods 的安全性。</p>\n<h2 id=\"二、创建私有-CocoaPods-仓库\"><a href=\"#二、创建私有-CocoaPods-仓库\" class=\"headerlink\" title=\"二、创建私有 CocoaPods 仓库\"></a>二、创建私有 CocoaPods 仓库</h2><p>目前所有支持 CocoaPods 的开源组件，都存储在 Github 上公共的 <a href=\"https://github.com/CocoaPods/Specs.git\" target=\"_blank\" rel=\"noopener\">CocoaPods Specs</a> 仓库中，这种方式有以下缺点：</p>\n<p>官方仓库过大，里面的绝大多数组件都不是我们需要的，你一定忘不了首次执行 <code>pod install</code> 操作时那无尽的等待；</p>\n<p>不能实现私有化，作为一个相当好用的组件管理工具，很多团队都使用 CocoaPods 实现庞大项目的组件化，都放在公共仓库肯定不行。</p>\n<p>这时就需要创建一个和 <a href=\"https://github.com/CocoaPods/Specs.git\" target=\"_blank\" rel=\"noopener\">CocoaPods Specs</a> 类似的私有组件存储仓库。私有仓库可以存放在自家公司的 Git 服务器上，也可以放在各大支持私有仓库的 Git 平台上，下面以支持免费私有仓库的 <a href=\"https://coding.net\" target=\"_blank\" rel=\"noopener\">coding.net</a>为例说明 CocoaPods 私有仓库的创建过程。</p>\n<h3 id=\"1、创建coding-net私有仓库\"><a href=\"#1、创建coding-net私有仓库\" class=\"headerlink\" title=\"1、创建coding.net私有仓库\"></a>1、创建<a href=\"https://coding.net\" target=\"_blank\" rel=\"noopener\">coding.net</a>私有仓库</h3><p>按照 <a href=\"https://coding.net\" target=\"_blank\" rel=\"noopener\">coding.net</a> 官网提示创建一个私有仓库即可。</p>\n<h3 id=\"2、本地初始化组件仓库\"><a href=\"#2、本地初始化组件仓库\" class=\"headerlink\" title=\"2、本地初始化组件仓库\"></a>2、本地初始化组件仓库</h3><p>执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># pod repo add [Private Repo Name] [GitHub HTTPS clone URL]</span><br><span class=\"line\">$ pod repo add FGSpecs https://git.coding.net/foogry/FGSpecs.git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、向仓库中添加组件\"><a href=\"#3、向仓库中添加组件\" class=\"headerlink\" title=\"3、向仓库中添加组件\"></a>3、向仓库中添加组件</h3><p>将事先准备好的组件添加到仓库中，组件可以存放在本地，也可以放在自家或网上的代码托管平台。执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># pod repo push [Private Repo Name] [Private podspec Path]</span><br><span class=\"line\">$ pod repo push FGSpecs ~/Desktop/FGMarqueeView.podspec</span><br></pre></td></tr></table></figure>\n\n<p>执行成功以后，会有以下输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Validating spec</span><br><span class=\"line\"></span><br><span class=\"line\">-&gt; FGMarqueeView (0.1.0)</span><br><span class=\"line\"></span><br><span class=\"line\">Updating the `FGSpecs&apos; repo</span><br><span class=\"line\"></span><br><span class=\"line\">Already up-to-date.</span><br><span class=\"line\"></span><br><span class=\"line\">Adding the spec to the `FGSpecs&apos; repo</span><br><span class=\"line\"></span><br><span class=\"line\">- [Fix] FGMarqueeView (0.1.0)</span><br><span class=\"line\"></span><br><span class=\"line\">Pushing the `FGSpecs&apos; repo</span><br><span class=\"line\"></span><br><span class=\"line\">To git@git.coding.net:foogry/FGSpecs.git</span><br><span class=\"line\">e2ad499..31a1a8e  master -&gt; master</span><br></pre></td></tr></table></figure>\n\n<p>至此，本地和代码托管平台上的私有仓库 FGSpecs 中就都已经添加了私有组件 FGMarqueeView。</p>\n<h3 id=\"4、使用私有仓库中的组件\"><a href=\"#4、使用私有仓库中的组件\" class=\"headerlink\" title=\"4、使用私有仓库中的组件\"></a>4、使用私有仓库中的组件</h3><p>Podfile 文件中默认情况下已经隐式使用 <code>source</code> 声明了 CocoaPods 的官方仓库。但使用私有组件，需要使用 <code>source</code> 关键字鲜显式声明组件所在仓库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Private Specs</span><br><span class=\"line\">source &apos;https://git.coding.net/foogry/FGSpecs.git&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># Public Specs</span><br><span class=\"line\">source &apos;https://github.com/CocoaPods/Specs.git&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">pod &apos;FGMarqueeView&apos;, &apos;~&gt; 0.1.0&apos;</span><br><span class=\"line\">pod &apos;SBJson&apos;, &apos;~&gt; 4.0.0&apos;</span><br></pre></td></tr></table></figure>\n\n<p>其中，SBJson 组件是官方仓库的，FGMarqueeView 组件属于我们刚创建的私有仓库。</p>\n<p>需要注意的是：</p>\n<ul>\n<li>官方仓库的显式声明</li>\n</ul>\n<p>尽管官方仓库会被隐式声明，如果同时使用了官方仓库和私有仓库，就需要同时声明二者。</p>\n<ul>\n<li>仓库声明顺序性</li>\n</ul>\n<p>先声明的仓库具有优先权。当先后引用的两个仓库中都包含同一个组件时，会使用先引用仓库中的，哪怕后引用的仓库中版本号更高。</p>\n<h3 id=\"5、直接使用私有组件\"><a href=\"#5、直接使用私有组件\" class=\"headerlink\" title=\"5、直接使用私有组件\"></a>5、直接使用私有组件</h3><p>如果不想创建私有仓库，也可以在 Podfile 里直接引用私有组件（组件可以是本地的，也可以是托管在自家公司服务器或网上的代码托管平台上的），引用的同时还可以制定具体的 commit、branch 或者 tag，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod &apos;FGMarqueeView&apos;, :git =&gt; &apos;https://git.coding.net/foogry/FGMarqueeView.git&apos;, :commit =&gt; &apos;b4dc0ffee&apos;</span><br></pre></td></tr></table></figure>\n\n<p>这种方式引用的组件在执行完 <code>pod install</code> 以后，会被添加在 Development Pods 目录下，而通过私有仓库或共有仓库方式引用的组件则会被添加在 Pods 目录下。</p>\n<h2 id=\"三、cocoapods-版本管理\"><a href=\"#三、cocoapods-版本管理\" class=\"headerlink\" title=\"三、cocoapods 版本管理\"></a>三、cocoapods 版本管理</h2><p>cocoapods 升级新版本后可能会遇到坑，因此就有了降级的需求。</p>\n<ul>\n<li>查看当前版本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem list cocoapods</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>卸载当前版本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem uninstall cocoapods</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装指定版本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem install cocoapods -v 0.39.0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、参考文档\"><a href=\"#四、参考文档\" class=\"headerlink\" title=\"四、参考文档\"></a>四、参考文档</h2><ul>\n<li><p><a href=\"https://blog.cocoapods.org/CocoaPods-Trunk/#transition\" target=\"_blank\" rel=\"noopener\">CocoaPods Trunk</a></p>\n</li>\n<li><p><a href=\"https://guides.cocoapods.org/making/getting-setup-with-trunk.html\" target=\"_blank\" rel=\"noopener\">Getting setup with Trunk</a></p>\n</li>\n<li><p><a href=\"https://guides.cocoapods.org/making/private-cocoapods.html\" target=\"_blank\" rel=\"noopener\">Private Pods</a></p>\n</li>\n<li><p><a href=\"https://guides.cocoapods.org/syntax/podfile.html#source\" target=\"_blank\" rel=\"noopener\">Podfile Syntax Reference</a></p>\n</li>\n<li><p><a href=\"http://stackoverflow.com/a/20489489\" target=\"_blank\" rel=\"noopener\">Downgrading or installing older version of Cocoapods</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>CocoaPods 大概是 2011 年出现的开源组件管理工具（目前已支持 Objective-C 和 Swift），近年来普及率越来越高，几乎已是所有 Cocoa 开源项目的标配。另外，很多大点的团队会用 CocoaPods 拆分工程，实现项目插件化。</p>\n<p>博主曾在 2014 年写过 <code>CocoaPods 详解</code> 系列文章：<a href=\"http://blog.csdn.net/wzzvictory/article/details/18737437\" target=\"_blank\" rel=\"noopener\">CocoaPods详解之—-使用篇</a>、<a href=\"http://blog.csdn.net/wzzvictory/article/details/19178709\" target=\"_blank\" rel=\"noopener\">CocoaPods详解之—-进阶篇</a>、<a href=\"http://blog.csdn.net/wzzvictory/article/details/20067595\" target=\"_blank\" rel=\"noopener\">CocoaPods详解之—-制作篇</a>，简单介绍了从使用到亲手制作 CocoaPods 开源组件的过程。</p>\n<p>然而随着时间的推移，CocoaPods 有些使用方式也发生了变化，比如组件提交方式等。本文将从 Trunk 和私有仓库两个方面介绍自己对 CocoaPods 的新认识。</p>","more":"<h2 id=\"一、Trunk-方式提交开源组件\"><a href=\"#一、Trunk-方式提交开源组件\" class=\"headerlink\" title=\"一、Trunk 方式提交开源组件\"></a>一、Trunk 方式提交开源组件</h2><p>从 CocoaPods 0.33 版本开始，CocoaPods 将组件的提交从 Pull requests 变成了自动化的 Trunk 方式。Trunk 提交方式有以下步骤：</p>\n<h3 id=\"1、向-Trunk-注册自己的电脑\"><a href=\"#1、向-Trunk-注册自己的电脑\" class=\"headerlink\" title=\"1、向 Trunk 注册自己的电脑\"></a>1、向 Trunk 注册自己的电脑</h3><p>首次使用 Trunk 时，需要注册自己的电脑：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># pod trunk register [E-mail] [User Name]</span><br><span class=\"line\">$ pod trunk register foggry@foggry.com &quot;foggry&quot;</span><br></pre></td></tr></table></figure>\n\n<p>执行命令以后，上述邮箱会收到一封验证邮件，按照邮件说明打开制定的链接，注册流程就完成了。</p>\n<p>注册流程完成后，可以使用命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod trunk me</span><br></pre></td></tr></table></figure>\n\n<p>可以检验注册结果，如果输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- Name:     foggry</span><br><span class=\"line\">- Email:    foggry@foggry.com</span><br><span class=\"line\">- Since:    May 19th, 2014 16:03</span><br><span class=\"line\">- Pods:     None</span><br><span class=\"line\">- Sessions:</span><br><span class=\"line\">- March 19th, 22:23 - July 25th, 22:26. IP: 10.1.1.1</span><br></pre></td></tr></table></figure>\n\n<p>则说明注册成功。</p>\n<h3 id=\"2、提交组件\"><a href=\"#2、提交组件\" class=\"headerlink\" title=\"2、提交组件\"></a>2、提交组件</h3><p>准备好 podspec 文件后，首先要检查其合法性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Enter podspec path</span><br><span class=\"line\">$ pod lib lint</span><br></pre></td></tr></table></figure>\n\n<p>解决完错误和警告后，会显示以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; FGMarqueeView (1.0.0)</span><br><span class=\"line\"></span><br><span class=\"line\">FGMarqueeView passed validation.</span><br></pre></td></tr></table></figure>\n\n<p>这就说明验证可以提交了。</p>\n<p>执行提交命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod trunk push WZMarqueeView.podspec</span><br></pre></td></tr></table></figure>\n\n<p>如果顺利的话，会输出以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Updating spec repo `master`</span><br><span class=\"line\"></span><br><span class=\"line\">Validating podspec</span><br><span class=\"line\">-&gt; WZMarqueeView (2.0.0)</span><br><span class=\"line\"></span><br><span class=\"line\">Updating spec repo `master`</span><br><span class=\"line\"></span><br><span class=\"line\">- Data URL: https://raw.githubusercontent.com/CocoaPods/Specs/1f2d70d978843a29cbe17b2476ffed8204eea6ef/Specs/WZMarqueeView/2.0.0/WZMarqueeView.podspec.json</span><br><span class=\"line\">- Log messages:</span><br><span class=\"line\">- March 21st, 00:49: Push for `WZMarqueeView 2.0.0&apos; initiated.</span><br><span class=\"line\">- March 21st, 00:49: Push for `WZMarqueeView 2.0.0&apos; has been pushed (2.327208585 s).</span><br></pre></td></tr></table></figure>\n\n<p>仅需要这一条命令，开源组件就被推送到 CocoaPods 主仓库中了。可以执行以下命令验证下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod search WZMarqueeView</span><br></pre></td></tr></table></figure>\n\n<p>输出为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; WZMarqueeView (2.0.0)</span><br><span class=\"line\">A marquee view used on iOS.</span><br><span class=\"line\">pod &apos;WZMarqueeView&apos;, &apos;~&gt; 2.0.0&apos;</span><br><span class=\"line\">- Homepage: https://github.com/wangzz/WZMarqueeView</span><br><span class=\"line\">- Source:   https://github.com/wangzz/WZMarqueeView.git</span><br><span class=\"line\">- Versions: 2.0.0, 1.0.0 [master repo]</span><br></pre></td></tr></table></figure>\n\n<p>说明组件 <code>WZMarqueeView</code> 已经成功从 <code>1.0.0</code> 升级成了 <code>2.0.0</code> 版本。</p>\n<h3 id=\"3、其它说明\"><a href=\"#3、其它说明\" class=\"headerlink\" title=\"3、其它说明\"></a>3、其它说明</h3><ul>\n<li>权限声明</li>\n</ul>\n<p>在执行下述命令时：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod trunk push WZMarqueeView.podspec</span><br></pre></td></tr></table></figure>\n\n<p>提示了以下错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Updating spec repo `master`</span><br><span class=\"line\"></span><br><span class=\"line\">Validating podspec</span><br><span class=\"line\">-&gt; WZMarqueeView (2.0.0)</span><br><span class=\"line\"></span><br><span class=\"line\">[!] You are not allowed to push new versions for this pod.</span><br></pre></td></tr></table></figure>\n\n<p>原来，Trunk 要求只有组件所有者和开发者才能更新已有组件，而上例的组件 <code>WZMarqueeView</code> 是 2014 年通过 Pull requests 方式上传到 CocoaPods 主仓库的，并没有声明过所有权。</p>\n<p>随后，到 CocoaPods 指定的网页：<a href=\"https://trunk.cocoapods.org/claims/new\" target=\"_blank\" rel=\"noopener\">Claim your Pod</a>上填写对应信息后，按照提示执行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod trunk info WZMarqueeView</span><br></pre></td></tr></table></figure>\n\n<p>看到执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WZMarqueeView</span><br><span class=\"line\">- Versions:</span><br><span class=\"line\">- 1.0.0 (2014-05-19 22:03:59 UTC)</span><br><span class=\"line\">- Owners:</span><br><span class=\"line\">- foggry &lt;foggry@foggry.com&gt;</span><br></pre></td></tr></table></figure>\n\n<p>组件的所有权已经变成了本人，此时再去执行 <code>trunk push</code> 命令时就正常了。</p>\n<ul>\n<li>为组件添加其它所有者</li>\n</ul>\n<p>一个组件可以通过以下命令，添加多个所有者（以邮箱为标识）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># pod trunk add-owner [Module Name] [Owner E-mail]</span><br><span class=\"line\">$ pod trunk add-owner WZMarqueeView kyle@cocoapods.org</span><br></pre></td></tr></table></figure>\n\n<p>执行成功后，<code>kyle@cocoapods.org</code> 也变成了 <code>WZMarqueeView</code> 的所有者。</p>\n<ul>\n<li>Pull requests 和 Trunk 对比</li>\n</ul>\n<p>对于开发者来说，Pull requests 的操作过程十分繁琐，需要开源组件制作者先 fork 一份主仓库，然后将组件提交到 fork 后的仓库，再 Pull requests 给 CocoaPods 主仓库的维护者；</p>\n<p>对 CocoaPods 主仓库的维护者来说，需要手工一个个处理主仓库的合并操作，通常第二天甚至需要更长时间 requests 才能被处理；</p>\n<p>而 Trunk 方式，开发者只需要一条命令就能将组件上传到主仓库，并且 Trunk 方式是自动化的，几乎不再需要主仓库的维护者做任何工作，实时性更好。</p>\n<p>另外，Trunk 增加了组件所有者的概念，非所有者无法提交组件的更新，这在一定程度上提高了 CocoaPods 的安全性。</p>\n<h2 id=\"二、创建私有-CocoaPods-仓库\"><a href=\"#二、创建私有-CocoaPods-仓库\" class=\"headerlink\" title=\"二、创建私有 CocoaPods 仓库\"></a>二、创建私有 CocoaPods 仓库</h2><p>目前所有支持 CocoaPods 的开源组件，都存储在 Github 上公共的 <a href=\"https://github.com/CocoaPods/Specs.git\" target=\"_blank\" rel=\"noopener\">CocoaPods Specs</a> 仓库中，这种方式有以下缺点：</p>\n<p>官方仓库过大，里面的绝大多数组件都不是我们需要的，你一定忘不了首次执行 <code>pod install</code> 操作时那无尽的等待；</p>\n<p>不能实现私有化，作为一个相当好用的组件管理工具，很多团队都使用 CocoaPods 实现庞大项目的组件化，都放在公共仓库肯定不行。</p>\n<p>这时就需要创建一个和 <a href=\"https://github.com/CocoaPods/Specs.git\" target=\"_blank\" rel=\"noopener\">CocoaPods Specs</a> 类似的私有组件存储仓库。私有仓库可以存放在自家公司的 Git 服务器上，也可以放在各大支持私有仓库的 Git 平台上，下面以支持免费私有仓库的 <a href=\"https://coding.net\" target=\"_blank\" rel=\"noopener\">coding.net</a>为例说明 CocoaPods 私有仓库的创建过程。</p>\n<h3 id=\"1、创建coding-net私有仓库\"><a href=\"#1、创建coding-net私有仓库\" class=\"headerlink\" title=\"1、创建coding.net私有仓库\"></a>1、创建<a href=\"https://coding.net\" target=\"_blank\" rel=\"noopener\">coding.net</a>私有仓库</h3><p>按照 <a href=\"https://coding.net\" target=\"_blank\" rel=\"noopener\">coding.net</a> 官网提示创建一个私有仓库即可。</p>\n<h3 id=\"2、本地初始化组件仓库\"><a href=\"#2、本地初始化组件仓库\" class=\"headerlink\" title=\"2、本地初始化组件仓库\"></a>2、本地初始化组件仓库</h3><p>执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># pod repo add [Private Repo Name] [GitHub HTTPS clone URL]</span><br><span class=\"line\">$ pod repo add FGSpecs https://git.coding.net/foogry/FGSpecs.git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、向仓库中添加组件\"><a href=\"#3、向仓库中添加组件\" class=\"headerlink\" title=\"3、向仓库中添加组件\"></a>3、向仓库中添加组件</h3><p>将事先准备好的组件添加到仓库中，组件可以存放在本地，也可以放在自家或网上的代码托管平台。执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># pod repo push [Private Repo Name] [Private podspec Path]</span><br><span class=\"line\">$ pod repo push FGSpecs ~/Desktop/FGMarqueeView.podspec</span><br></pre></td></tr></table></figure>\n\n<p>执行成功以后，会有以下输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Validating spec</span><br><span class=\"line\"></span><br><span class=\"line\">-&gt; FGMarqueeView (0.1.0)</span><br><span class=\"line\"></span><br><span class=\"line\">Updating the `FGSpecs&apos; repo</span><br><span class=\"line\"></span><br><span class=\"line\">Already up-to-date.</span><br><span class=\"line\"></span><br><span class=\"line\">Adding the spec to the `FGSpecs&apos; repo</span><br><span class=\"line\"></span><br><span class=\"line\">- [Fix] FGMarqueeView (0.1.0)</span><br><span class=\"line\"></span><br><span class=\"line\">Pushing the `FGSpecs&apos; repo</span><br><span class=\"line\"></span><br><span class=\"line\">To git@git.coding.net:foogry/FGSpecs.git</span><br><span class=\"line\">e2ad499..31a1a8e  master -&gt; master</span><br></pre></td></tr></table></figure>\n\n<p>至此，本地和代码托管平台上的私有仓库 FGSpecs 中就都已经添加了私有组件 FGMarqueeView。</p>\n<h3 id=\"4、使用私有仓库中的组件\"><a href=\"#4、使用私有仓库中的组件\" class=\"headerlink\" title=\"4、使用私有仓库中的组件\"></a>4、使用私有仓库中的组件</h3><p>Podfile 文件中默认情况下已经隐式使用 <code>source</code> 声明了 CocoaPods 的官方仓库。但使用私有组件，需要使用 <code>source</code> 关键字鲜显式声明组件所在仓库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Private Specs</span><br><span class=\"line\">source &apos;https://git.coding.net/foogry/FGSpecs.git&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># Public Specs</span><br><span class=\"line\">source &apos;https://github.com/CocoaPods/Specs.git&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">pod &apos;FGMarqueeView&apos;, &apos;~&gt; 0.1.0&apos;</span><br><span class=\"line\">pod &apos;SBJson&apos;, &apos;~&gt; 4.0.0&apos;</span><br></pre></td></tr></table></figure>\n\n<p>其中，SBJson 组件是官方仓库的，FGMarqueeView 组件属于我们刚创建的私有仓库。</p>\n<p>需要注意的是：</p>\n<ul>\n<li>官方仓库的显式声明</li>\n</ul>\n<p>尽管官方仓库会被隐式声明，如果同时使用了官方仓库和私有仓库，就需要同时声明二者。</p>\n<ul>\n<li>仓库声明顺序性</li>\n</ul>\n<p>先声明的仓库具有优先权。当先后引用的两个仓库中都包含同一个组件时，会使用先引用仓库中的，哪怕后引用的仓库中版本号更高。</p>\n<h3 id=\"5、直接使用私有组件\"><a href=\"#5、直接使用私有组件\" class=\"headerlink\" title=\"5、直接使用私有组件\"></a>5、直接使用私有组件</h3><p>如果不想创建私有仓库，也可以在 Podfile 里直接引用私有组件（组件可以是本地的，也可以是托管在自家公司服务器或网上的代码托管平台上的），引用的同时还可以制定具体的 commit、branch 或者 tag，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod &apos;FGMarqueeView&apos;, :git =&gt; &apos;https://git.coding.net/foogry/FGMarqueeView.git&apos;, :commit =&gt; &apos;b4dc0ffee&apos;</span><br></pre></td></tr></table></figure>\n\n<p>这种方式引用的组件在执行完 <code>pod install</code> 以后，会被添加在 Development Pods 目录下，而通过私有仓库或共有仓库方式引用的组件则会被添加在 Pods 目录下。</p>\n<h2 id=\"三、cocoapods-版本管理\"><a href=\"#三、cocoapods-版本管理\" class=\"headerlink\" title=\"三、cocoapods 版本管理\"></a>三、cocoapods 版本管理</h2><p>cocoapods 升级新版本后可能会遇到坑，因此就有了降级的需求。</p>\n<ul>\n<li>查看当前版本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem list cocoapods</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>卸载当前版本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem uninstall cocoapods</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装指定版本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem install cocoapods -v 0.39.0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、参考文档\"><a href=\"#四、参考文档\" class=\"headerlink\" title=\"四、参考文档\"></a>四、参考文档</h2><ul>\n<li><p><a href=\"https://blog.cocoapods.org/CocoaPods-Trunk/#transition\" target=\"_blank\" rel=\"noopener\">CocoaPods Trunk</a></p>\n</li>\n<li><p><a href=\"https://guides.cocoapods.org/making/getting-setup-with-trunk.html\" target=\"_blank\" rel=\"noopener\">Getting setup with Trunk</a></p>\n</li>\n<li><p><a href=\"https://guides.cocoapods.org/making/private-cocoapods.html\" target=\"_blank\" rel=\"noopener\">Private Pods</a></p>\n</li>\n<li><p><a href=\"https://guides.cocoapods.org/syntax/podfile.html#source\" target=\"_blank\" rel=\"noopener\">Podfile Syntax Reference</a></p>\n</li>\n<li><p><a href=\"http://stackoverflow.com/a/20489489\" target=\"_blank\" rel=\"noopener\">Downgrading or installing older version of Cocoapods</a></p>\n</li>\n</ul>"},{"layout":"post","title":"iOS内存探秘","date":"2017-02-13T08:38:45.000Z","comments":1,"keywords":"Objective-C, iOS, Clean Page, Dirty Page, 虚拟内存","_content":"\n## iOS 内存机制特点\n\n* 有限的可用内存\n\niPhone 设备的 RAM 一直非常紧缺，iPhone 一代只有 128MB，直到 iPhone5 时达到了 1GB，并且在 iPhone7 plus 达到了 3GB。[StackOverFlow](http://stackoverflow.com/a/15200855/2293677) 上提供了部分 iPhone 机型的可用内存数目。\n\n* 低内存通知\n\n在可用物理内存较少时，iOS 会给各应用发出低内存广播通知，如果此后可用内存仍然低于特定值，则会杀死优先级较低的进程。\n\n* 没有内存交换机制\n\n桌面操作系统可以在物理内存紧张的时候把暂时不用的物理内存置换到磁盘上，并在需要的时候再次加载到内存中。而 iOS 没有这种机制，原因是移动设备的闪存没有 PC 机那么大的硬盘，而且频繁的读写闪存会降低其寿命。目前 iOS 在内存不足时采用的方案是杀死优先级较低的进程。\n\n* 使用虚拟内存机制\n\n和大多数桌面操作系统一样，iOS 也使用虚拟内存机制。\n\n<!-- more -->\n\n## 虚拟内存\n\n关于虚拟内存的原理和优缺点就不再累述，这里说下 iOS 虚拟内存机制中与众不同的地方。\n\n#### 内存分页\n\niOS 把虚拟内存每 4KB 划分成一个 Page，并不是所有的 Page 都会映射到物理内存中。每个 Page 有三种状态：\n\n* Nonresident\n\n是否 Resident 是一个 Page 状态的重要标识，如果 Page 被映射到内存里了，这个 Page 就是 Resident 状态，否则就是 Nonresident 状态；\n\n* Resident and clean\n\n基于 readonly 文件而被加载到内存中的 Page 称为 clean memory，比如：`系统 framework`、`可执行文件`、`通过 mmap 方式读取的文件` 等。这种 Page 由于是加载自不可变的文件，因此可以在物理内存紧张时被 iOS 自动 unload 出去，并且在需要的时候再重新从原来的文件加载到内存中。\n\n* Resident and dirty\n\n凡是非 clean 的 Page 都是 dirty 的，它们的共同特点是 Page 在闪存中没有对应的文件，比如通过 alloc 在堆上创建的内存空间，已经解压的图片，database caches 等。dirty memory 不能被操作系统交换出去，只有在进程被杀死的时候才能被回收，因此在系统发生内存告警时，如果进程创建了大量的 dirty memory，那么将很有可能被 kill 掉。\n\n#### 举例说明\n\n* Malloc 分配内存\n\n如前问所述，Malloc 的内存都是  Resident dirty 的，但事实上并非如此，比如：\n\n```\nchar *p = valloc(2 * 4096);\n\n```\n\n此时会在虚拟内存里申请两份 4096 字节的内存，但由于申请后没有使用，操作系统不会真正为刚申请的内存空间分配对应的物理内存空间，因此此时该内存空间处于 Nonresident 状态。如果对 p[0] 赋值：\n\n```\np[0] = 1;\n```\n\n此时 P[0] 会被加载到物理内存上，由此变成 Resident dirty 状态，同理如果对 p[1] 赋值也一样。\n\n* mmap 加载文件\n\n一个文件通过如果下述 mmap 方式加载：\n\n```\nNSData *data = [NSData dataWithContentsOfMappedFile:file];\rchar *p = (char *)[data bytes];\n```\n\n此时文件由于未被使用，因此也仅仅是在虚拟内存中，操作系统并没有将其映射到物理里，因此所属 Page 的状态是 Nonresident。如果调用以下代码：\n\n```\nprintf(\"%c\", p[0]);\n```\n\n此时由于该文件的 p[0] 部分被使用，操作系统就会将 p[0] 部分加载到物理内存中，又因为 p 对应的存储区域是一个 mmap 方式加载的只读文件，因此 p[0] 对应的 Page 就是 Resident clean 的，而 p[1] 往后的部分由于仍然未被使用，Page 的状态不变。\n\n\n## 需要做什么\n\n对于开发者来说，要想减少应用因内存告警被系统杀掉，应做到以下几点：\n\n* 该尽可能减少 dirty 内存的创建\n\n* 要尽量保证 dirty 内存用完之后及时释放\n\n* 及时处理系统内存告警通知，释放掉大量占用内存并且可重建的对象\n\n* 在发生内存告警时，不再持续申请内存，更不能申请较大块的内存\n\n## 参考文档\n\n* [List of iOS devices](https://en.wikipedia.org/wiki/List_of_iOS_devices)\n\n* [WWDC2010 Session 417:Advanced Performance Optimization on iPhone OS, Part 2](https://developer.apple.com/videos/play/wwdc2010/147/)\n\n* [WWDC2012 Session 242:iOS App Performance: Memory](https://developer.apple.com/videos/play/wwdc2012/242/)","source":"_posts/2017-02-13-iosnei-cun-tan-mi.markdown","raw":"---\nlayout: post\ntitle: \"iOS内存探秘\"\ndate: 2017-02-13 16:38:45 +0800\ncomments: true\ncategories: iOS\ntags: [Objective-C, iOS, Clean Page, Dirty Page, 虚拟内存]\nkeywords: Objective-C, iOS, Clean Page, Dirty Page, 虚拟内存\n---\n\n## iOS 内存机制特点\n\n* 有限的可用内存\n\niPhone 设备的 RAM 一直非常紧缺，iPhone 一代只有 128MB，直到 iPhone5 时达到了 1GB，并且在 iPhone7 plus 达到了 3GB。[StackOverFlow](http://stackoverflow.com/a/15200855/2293677) 上提供了部分 iPhone 机型的可用内存数目。\n\n* 低内存通知\n\n在可用物理内存较少时，iOS 会给各应用发出低内存广播通知，如果此后可用内存仍然低于特定值，则会杀死优先级较低的进程。\n\n* 没有内存交换机制\n\n桌面操作系统可以在物理内存紧张的时候把暂时不用的物理内存置换到磁盘上，并在需要的时候再次加载到内存中。而 iOS 没有这种机制，原因是移动设备的闪存没有 PC 机那么大的硬盘，而且频繁的读写闪存会降低其寿命。目前 iOS 在内存不足时采用的方案是杀死优先级较低的进程。\n\n* 使用虚拟内存机制\n\n和大多数桌面操作系统一样，iOS 也使用虚拟内存机制。\n\n<!-- more -->\n\n## 虚拟内存\n\n关于虚拟内存的原理和优缺点就不再累述，这里说下 iOS 虚拟内存机制中与众不同的地方。\n\n#### 内存分页\n\niOS 把虚拟内存每 4KB 划分成一个 Page，并不是所有的 Page 都会映射到物理内存中。每个 Page 有三种状态：\n\n* Nonresident\n\n是否 Resident 是一个 Page 状态的重要标识，如果 Page 被映射到内存里了，这个 Page 就是 Resident 状态，否则就是 Nonresident 状态；\n\n* Resident and clean\n\n基于 readonly 文件而被加载到内存中的 Page 称为 clean memory，比如：`系统 framework`、`可执行文件`、`通过 mmap 方式读取的文件` 等。这种 Page 由于是加载自不可变的文件，因此可以在物理内存紧张时被 iOS 自动 unload 出去，并且在需要的时候再重新从原来的文件加载到内存中。\n\n* Resident and dirty\n\n凡是非 clean 的 Page 都是 dirty 的，它们的共同特点是 Page 在闪存中没有对应的文件，比如通过 alloc 在堆上创建的内存空间，已经解压的图片，database caches 等。dirty memory 不能被操作系统交换出去，只有在进程被杀死的时候才能被回收，因此在系统发生内存告警时，如果进程创建了大量的 dirty memory，那么将很有可能被 kill 掉。\n\n#### 举例说明\n\n* Malloc 分配内存\n\n如前问所述，Malloc 的内存都是  Resident dirty 的，但事实上并非如此，比如：\n\n```\nchar *p = valloc(2 * 4096);\n\n```\n\n此时会在虚拟内存里申请两份 4096 字节的内存，但由于申请后没有使用，操作系统不会真正为刚申请的内存空间分配对应的物理内存空间，因此此时该内存空间处于 Nonresident 状态。如果对 p[0] 赋值：\n\n```\np[0] = 1;\n```\n\n此时 P[0] 会被加载到物理内存上，由此变成 Resident dirty 状态，同理如果对 p[1] 赋值也一样。\n\n* mmap 加载文件\n\n一个文件通过如果下述 mmap 方式加载：\n\n```\nNSData *data = [NSData dataWithContentsOfMappedFile:file];\rchar *p = (char *)[data bytes];\n```\n\n此时文件由于未被使用，因此也仅仅是在虚拟内存中，操作系统并没有将其映射到物理里，因此所属 Page 的状态是 Nonresident。如果调用以下代码：\n\n```\nprintf(\"%c\", p[0]);\n```\n\n此时由于该文件的 p[0] 部分被使用，操作系统就会将 p[0] 部分加载到物理内存中，又因为 p 对应的存储区域是一个 mmap 方式加载的只读文件，因此 p[0] 对应的 Page 就是 Resident clean 的，而 p[1] 往后的部分由于仍然未被使用，Page 的状态不变。\n\n\n## 需要做什么\n\n对于开发者来说，要想减少应用因内存告警被系统杀掉，应做到以下几点：\n\n* 该尽可能减少 dirty 内存的创建\n\n* 要尽量保证 dirty 内存用完之后及时释放\n\n* 及时处理系统内存告警通知，释放掉大量占用内存并且可重建的对象\n\n* 在发生内存告警时，不再持续申请内存，更不能申请较大块的内存\n\n## 参考文档\n\n* [List of iOS devices](https://en.wikipedia.org/wiki/List_of_iOS_devices)\n\n* [WWDC2010 Session 417:Advanced Performance Optimization on iPhone OS, Part 2](https://developer.apple.com/videos/play/wwdc2010/147/)\n\n* [WWDC2012 Session 242:iOS App Performance: Memory](https://developer.apple.com/videos/play/wwdc2012/242/)","slug":"2017-02-13-iosnei-cun-tan-mi","published":1,"updated":"2017-02-13T08:39:57.000Z","photos":[],"link":"","_id":"ck0zclidl0025qhtfrpuqrw34","content":"<h2 id=\"iOS-内存机制特点\"><a href=\"#iOS-内存机制特点\" class=\"headerlink\" title=\"iOS 内存机制特点\"></a>iOS 内存机制特点</h2><ul>\n<li>有限的可用内存</li>\n</ul>\n<p>iPhone 设备的 RAM 一直非常紧缺，iPhone 一代只有 128MB，直到 iPhone5 时达到了 1GB，并且在 iPhone7 plus 达到了 3GB。<a href=\"http://stackoverflow.com/a/15200855/2293677\" target=\"_blank\" rel=\"noopener\">StackOverFlow</a> 上提供了部分 iPhone 机型的可用内存数目。</p>\n<ul>\n<li>低内存通知</li>\n</ul>\n<p>在可用物理内存较少时，iOS 会给各应用发出低内存广播通知，如果此后可用内存仍然低于特定值，则会杀死优先级较低的进程。</p>\n<ul>\n<li>没有内存交换机制</li>\n</ul>\n<p>桌面操作系统可以在物理内存紧张的时候把暂时不用的物理内存置换到磁盘上，并在需要的时候再次加载到内存中。而 iOS 没有这种机制，原因是移动设备的闪存没有 PC 机那么大的硬盘，而且频繁的读写闪存会降低其寿命。目前 iOS 在内存不足时采用的方案是杀死优先级较低的进程。</p>\n<ul>\n<li>使用虚拟内存机制</li>\n</ul>\n<p>和大多数桌面操作系统一样，iOS 也使用虚拟内存机制。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"虚拟内存\"><a href=\"#虚拟内存\" class=\"headerlink\" title=\"虚拟内存\"></a>虚拟内存</h2><p>关于虚拟内存的原理和优缺点就不再累述，这里说下 iOS 虚拟内存机制中与众不同的地方。</p>\n<h4 id=\"内存分页\"><a href=\"#内存分页\" class=\"headerlink\" title=\"内存分页\"></a>内存分页</h4><p>iOS 把虚拟内存每 4KB 划分成一个 Page，并不是所有的 Page 都会映射到物理内存中。每个 Page 有三种状态：</p>\n<ul>\n<li>Nonresident</li>\n</ul>\n<p>是否 Resident 是一个 Page 状态的重要标识，如果 Page 被映射到内存里了，这个 Page 就是 Resident 状态，否则就是 Nonresident 状态；</p>\n<ul>\n<li>Resident and clean</li>\n</ul>\n<p>基于 readonly 文件而被加载到内存中的 Page 称为 clean memory，比如：<code>系统 framework</code>、<code>可执行文件</code>、<code>通过 mmap 方式读取的文件</code> 等。这种 Page 由于是加载自不可变的文件，因此可以在物理内存紧张时被 iOS 自动 unload 出去，并且在需要的时候再重新从原来的文件加载到内存中。</p>\n<ul>\n<li>Resident and dirty</li>\n</ul>\n<p>凡是非 clean 的 Page 都是 dirty 的，它们的共同特点是 Page 在闪存中没有对应的文件，比如通过 alloc 在堆上创建的内存空间，已经解压的图片，database caches 等。dirty memory 不能被操作系统交换出去，只有在进程被杀死的时候才能被回收，因此在系统发生内存告警时，如果进程创建了大量的 dirty memory，那么将很有可能被 kill 掉。</p>\n<h4 id=\"举例说明\"><a href=\"#举例说明\" class=\"headerlink\" title=\"举例说明\"></a>举例说明</h4><ul>\n<li>Malloc 分配内存</li>\n</ul>\n<p>如前问所述，Malloc 的内存都是  Resident dirty 的，但事实上并非如此，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char *p = valloc(2 * 4096);</span><br></pre></td></tr></table></figure>\n\n<p>此时会在虚拟内存里申请两份 4096 字节的内存，但由于申请后没有使用，操作系统不会真正为刚申请的内存空间分配对应的物理内存空间，因此此时该内存空间处于 Nonresident 状态。如果对 p[0] 赋值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p[0] = 1;</span><br></pre></td></tr></table></figure>\n\n<p>此时 P[0] 会被加载到物理内存上，由此变成 Resident dirty 状态，同理如果对 p[1] 赋值也一样。</p>\n<ul>\n<li>mmap 加载文件</li>\n</ul>\n<p>一个文件通过如果下述 mmap 方式加载：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSData *data = [NSData dataWithContentsOfMappedFile:file];\rchar *p = (char *)[data bytes];</span><br></pre></td></tr></table></figure>\n\n<p>此时文件由于未被使用，因此也仅仅是在虚拟内存中，操作系统并没有将其映射到物理里，因此所属 Page 的状态是 Nonresident。如果调用以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printf(&quot;%c&quot;, p[0]);</span><br></pre></td></tr></table></figure>\n\n<p>此时由于该文件的 p[0] 部分被使用，操作系统就会将 p[0] 部分加载到物理内存中，又因为 p 对应的存储区域是一个 mmap 方式加载的只读文件，因此 p[0] 对应的 Page 就是 Resident clean 的，而 p[1] 往后的部分由于仍然未被使用，Page 的状态不变。</p>\n<h2 id=\"需要做什么\"><a href=\"#需要做什么\" class=\"headerlink\" title=\"需要做什么\"></a>需要做什么</h2><p>对于开发者来说，要想减少应用因内存告警被系统杀掉，应做到以下几点：</p>\n<ul>\n<li><p>该尽可能减少 dirty 内存的创建</p>\n</li>\n<li><p>要尽量保证 dirty 内存用完之后及时释放</p>\n</li>\n<li><p>及时处理系统内存告警通知，释放掉大量占用内存并且可重建的对象</p>\n</li>\n<li><p>在发生内存告警时，不再持续申请内存，更不能申请较大块的内存</p>\n</li>\n</ul>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><p><a href=\"https://en.wikipedia.org/wiki/List_of_iOS_devices\" target=\"_blank\" rel=\"noopener\">List of iOS devices</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/videos/play/wwdc2010/147/\" target=\"_blank\" rel=\"noopener\">WWDC2010 Session 417:Advanced Performance Optimization on iPhone OS, Part 2</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/videos/play/wwdc2012/242/\" target=\"_blank\" rel=\"noopener\">WWDC2012 Session 242:iOS App Performance: Memory</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"iOS-内存机制特点\"><a href=\"#iOS-内存机制特点\" class=\"headerlink\" title=\"iOS 内存机制特点\"></a>iOS 内存机制特点</h2><ul>\n<li>有限的可用内存</li>\n</ul>\n<p>iPhone 设备的 RAM 一直非常紧缺，iPhone 一代只有 128MB，直到 iPhone5 时达到了 1GB，并且在 iPhone7 plus 达到了 3GB。<a href=\"http://stackoverflow.com/a/15200855/2293677\" target=\"_blank\" rel=\"noopener\">StackOverFlow</a> 上提供了部分 iPhone 机型的可用内存数目。</p>\n<ul>\n<li>低内存通知</li>\n</ul>\n<p>在可用物理内存较少时，iOS 会给各应用发出低内存广播通知，如果此后可用内存仍然低于特定值，则会杀死优先级较低的进程。</p>\n<ul>\n<li>没有内存交换机制</li>\n</ul>\n<p>桌面操作系统可以在物理内存紧张的时候把暂时不用的物理内存置换到磁盘上，并在需要的时候再次加载到内存中。而 iOS 没有这种机制，原因是移动设备的闪存没有 PC 机那么大的硬盘，而且频繁的读写闪存会降低其寿命。目前 iOS 在内存不足时采用的方案是杀死优先级较低的进程。</p>\n<ul>\n<li>使用虚拟内存机制</li>\n</ul>\n<p>和大多数桌面操作系统一样，iOS 也使用虚拟内存机制。</p>","more":"<h2 id=\"虚拟内存\"><a href=\"#虚拟内存\" class=\"headerlink\" title=\"虚拟内存\"></a>虚拟内存</h2><p>关于虚拟内存的原理和优缺点就不再累述，这里说下 iOS 虚拟内存机制中与众不同的地方。</p>\n<h4 id=\"内存分页\"><a href=\"#内存分页\" class=\"headerlink\" title=\"内存分页\"></a>内存分页</h4><p>iOS 把虚拟内存每 4KB 划分成一个 Page，并不是所有的 Page 都会映射到物理内存中。每个 Page 有三种状态：</p>\n<ul>\n<li>Nonresident</li>\n</ul>\n<p>是否 Resident 是一个 Page 状态的重要标识，如果 Page 被映射到内存里了，这个 Page 就是 Resident 状态，否则就是 Nonresident 状态；</p>\n<ul>\n<li>Resident and clean</li>\n</ul>\n<p>基于 readonly 文件而被加载到内存中的 Page 称为 clean memory，比如：<code>系统 framework</code>、<code>可执行文件</code>、<code>通过 mmap 方式读取的文件</code> 等。这种 Page 由于是加载自不可变的文件，因此可以在物理内存紧张时被 iOS 自动 unload 出去，并且在需要的时候再重新从原来的文件加载到内存中。</p>\n<ul>\n<li>Resident and dirty</li>\n</ul>\n<p>凡是非 clean 的 Page 都是 dirty 的，它们的共同特点是 Page 在闪存中没有对应的文件，比如通过 alloc 在堆上创建的内存空间，已经解压的图片，database caches 等。dirty memory 不能被操作系统交换出去，只有在进程被杀死的时候才能被回收，因此在系统发生内存告警时，如果进程创建了大量的 dirty memory，那么将很有可能被 kill 掉。</p>\n<h4 id=\"举例说明\"><a href=\"#举例说明\" class=\"headerlink\" title=\"举例说明\"></a>举例说明</h4><ul>\n<li>Malloc 分配内存</li>\n</ul>\n<p>如前问所述，Malloc 的内存都是  Resident dirty 的，但事实上并非如此，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char *p = valloc(2 * 4096);</span><br></pre></td></tr></table></figure>\n\n<p>此时会在虚拟内存里申请两份 4096 字节的内存，但由于申请后没有使用，操作系统不会真正为刚申请的内存空间分配对应的物理内存空间，因此此时该内存空间处于 Nonresident 状态。如果对 p[0] 赋值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p[0] = 1;</span><br></pre></td></tr></table></figure>\n\n<p>此时 P[0] 会被加载到物理内存上，由此变成 Resident dirty 状态，同理如果对 p[1] 赋值也一样。</p>\n<ul>\n<li>mmap 加载文件</li>\n</ul>\n<p>一个文件通过如果下述 mmap 方式加载：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSData *data = [NSData dataWithContentsOfMappedFile:file];\rchar *p = (char *)[data bytes];</span><br></pre></td></tr></table></figure>\n\n<p>此时文件由于未被使用，因此也仅仅是在虚拟内存中，操作系统并没有将其映射到物理里，因此所属 Page 的状态是 Nonresident。如果调用以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printf(&quot;%c&quot;, p[0]);</span><br></pre></td></tr></table></figure>\n\n<p>此时由于该文件的 p[0] 部分被使用，操作系统就会将 p[0] 部分加载到物理内存中，又因为 p 对应的存储区域是一个 mmap 方式加载的只读文件，因此 p[0] 对应的 Page 就是 Resident clean 的，而 p[1] 往后的部分由于仍然未被使用，Page 的状态不变。</p>\n<h2 id=\"需要做什么\"><a href=\"#需要做什么\" class=\"headerlink\" title=\"需要做什么\"></a>需要做什么</h2><p>对于开发者来说，要想减少应用因内存告警被系统杀掉，应做到以下几点：</p>\n<ul>\n<li><p>该尽可能减少 dirty 内存的创建</p>\n</li>\n<li><p>要尽量保证 dirty 内存用完之后及时释放</p>\n</li>\n<li><p>及时处理系统内存告警通知，释放掉大量占用内存并且可重建的对象</p>\n</li>\n<li><p>在发生内存告警时，不再持续申请内存，更不能申请较大块的内存</p>\n</li>\n</ul>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><p><a href=\"https://en.wikipedia.org/wiki/List_of_iOS_devices\" target=\"_blank\" rel=\"noopener\">List of iOS devices</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/videos/play/wwdc2010/147/\" target=\"_blank\" rel=\"noopener\">WWDC2010 Session 417:Advanced Performance Optimization on iPhone OS, Part 2</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/videos/play/wwdc2012/242/\" target=\"_blank\" rel=\"noopener\">WWDC2012 Session 242:iOS App Performance: Memory</a></p>\n</li>\n</ul>"},{"title":"Octopress 迁移 Hexo 经验总结","date":"2019-09-24T12:30:23.000Z","_content":"\n\n## 迁移过程\n\n迁移过程网上有很多现成的文章，这里主要参考巧叔的 [从 Octopress 迁移到 Hexo](https://blog.devtang.com/2016/02/16/from-octopress-to-hexo/)\n\n#### 安装 Hexo\n\n先使用以下命令安装 Hexo：\n\n```zsh\n$ npm install hexo-cli -g\n```\n\n#### 创建新的博客目录\n\n```zsh\n$ hexo init <hexo root folder>\n$ cd <hexo root folder>\n$ npm install\n```\n\n<!-- more -->\n\n#### 迁移配置\n\n* 迁移文章\n\n把以前 Octopress 的 `source/_post` 目录下的文章，拷贝到 Hexo 的同名目录下即可。\n\n* 迁移图片资源\n\n以前的图片目录，也可以直接拷贝到 `source/images` 目录下。\n\n* 修改 _config.yml 文件\n\n上一步生成的 Hexo 目录里，_config.yml 都是默认值，可以根据自己需要修改。\n\n#### 提交到远端仓库\n\n* clone Octopress source 仓库到本地\n\n远程仓库还是使用原来 github 和 gitcafe 上的仓库，所以我的做法是将原来 github 上的 source 分支仓库 clone 到本地：\n\n```zsh\n$ git clone -b source git@github.com:username/username.github.com.git hexo\n```\n\n* 将 hexo 目录里的文件都删除，当然除了 .git 目录外；\n\n* 将 <hexo root folder> 目录里生成的东西全部拷贝到 hexo 目录；\n\n* 强制推送到远端 `git push origin source -f `\n\n到这里 Hexo 博客的 source 部分迁移完成，接下来就可以生成博客了。\n\n## 生成博客\n\n生成博客很简单，执行以下命令即可：\n\n```zsh\n$ hexo clean\n$ hexo generate\n```\n\ngenerate 命令会创建一个 public 目录（前面的 clean 命令会先删除这个目录，如果有），这个目录是实际的博客目录。\n\n为了方便操作，生成博客并提交写了个 deploy 脚本：\n\n```zsh\n#! /bin/zsh\n\n# git pull source\necho \"**************BEGIN GIT PULL SOURCE**************\"\ngit pull origin source\n\nif [ $? != 0 ]\nthen\necho \"**************GIT PULL SOURCE FAILED**************\"\nexit 1\nelse\necho \"**************GIT PULL SOURCE SUCCESS**************\"\nfi\n\n\n# hexo generate\necho \"**************BEGIN HEXO GENERATE**************\"\nhexo clean\nhexo generate\n\nif [ $? != 0 ]\nthen\necho \"**************HEXO GENERATE FAILED**************\"\nexit 1\nelse\necho \"**************HEXO GENERATE SUCCESS**************\"\nfi\n\n\n# git push source\necho \"**************GIT PUSH BEGIN**************\"\ngit add --all .\ngit commit -m \"update at `date` \"\ngit push origin source\nif [ $? != 0 ]\nthen\necho \"**************GIT PUSH FAILED**************\"\nexit 1\nelse\necho \"**************GIT PUSH SUCCESS**************\"\nfi\n\n\n# 创建发布用 git 仓库\ncd public\ngit init\ngit add .\ngit commit -m \"update at `date` \"\n\n# 添加 coding.net 源\necho \"**************PUSH TO CODING.NET BEGIN**************\"\n# 改变 coding.net remote url\ngit remote add coding git@git.coding.net:foogry/foogry.git >> /dev/null 2>&1\n# 提交博客内容\ngit push -u coding master:coding-pages -f\n\nif [ $? != 0 ]\nthen\necho \"**************PUSH TO CODING.NET FAILED**************\"\nexit 1\nelse\necho \"**************PUSH TO CODING.NET SUCCESS**************\"\nfi\n\n# 添加 github 源\necho \"**************PUSH TO GITHUB BEGIN**************\"\n# 改变 github remote url\ngit remote add origin git@github.com:wangzz/wangzz.github.com.git >> /dev/null 2>&1\n# 提交博客内容\ngit push origin master -f\n\nif [ $? != 0 ]\nthen\necho \"**************PUSH TO GITHUB FAILED**************\"\nexit 1\nelse\necho \"**************PUSH TO GITHUB SUCCESS**************\"\nfi\n\ncd -\n\necho \"**************DONE**************\"\n```\n\n我把这个脚本放在了博客 souce 的根目录下每次修改完 source 后，执行一次，博客就能更新了。\n\n## 写新博客\n\n使用下述命令可以生成一个新的 markdown 文件：\n\n```zsh\n$ hexo new \"文章标题\"\n```\n\n写完文章后执行前面的 deploy 脚本就行了。\n\n## 在新电脑上配置已经存在的 Hexo 博客\n\n#### 安装 Hexo\n\n如果没安装过 Hexo，跟新建博客一样要先安装 ：\n\n```zsh\n$ npm install hexo-cli -g\n$ npm install hexo --save\n```\n\n#### clone Hexo source 到本地\n\n```zsh\n$ git clone -b source git@github.com:wangzz/wangzz.github.com.git hexo\n```\n\n#### 部署博客\n\n进入到 hexo 的 source 目录，执行 deploy 脚本即可。\n\n#### SSH key\n\nclone source 或提交博客到 github 或 gitcafe 前，需要将将当前电脑上的 SSH key 填到 github 或 gitcafe 上，具体操作方式见之前的文章 [《让Octopress博客在多台Mac上同时使用》](http://foggry.com/2014/04/02/2014-04-02-ru-he-pei-zhi-rang-ni-de-octopressbo-ke-zai-duo-tai-macshang-tong-shi-shi-yong/)\n\n\n\n## 参考文档\n\n* [从 Octopress 迁移到 Hexo](https://blog.devtang.com/2016/02/16/from-octopress-to-hexo/)\n\n* [Hexo搭建博客教程]([https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/](https://thief.one/2017/03/03/Hexo搭建博客教程/))","source":"_posts/博客从-Octopress-迁移到-Hexo-经验总结.md","raw":"---\ntitle: Octopress 迁移 Hexo 经验总结\ndate: 2019-09-24 20:30:23\ntags: [Octopress, hexo]\n---\n\n\n## 迁移过程\n\n迁移过程网上有很多现成的文章，这里主要参考巧叔的 [从 Octopress 迁移到 Hexo](https://blog.devtang.com/2016/02/16/from-octopress-to-hexo/)\n\n#### 安装 Hexo\n\n先使用以下命令安装 Hexo：\n\n```zsh\n$ npm install hexo-cli -g\n```\n\n#### 创建新的博客目录\n\n```zsh\n$ hexo init <hexo root folder>\n$ cd <hexo root folder>\n$ npm install\n```\n\n<!-- more -->\n\n#### 迁移配置\n\n* 迁移文章\n\n把以前 Octopress 的 `source/_post` 目录下的文章，拷贝到 Hexo 的同名目录下即可。\n\n* 迁移图片资源\n\n以前的图片目录，也可以直接拷贝到 `source/images` 目录下。\n\n* 修改 _config.yml 文件\n\n上一步生成的 Hexo 目录里，_config.yml 都是默认值，可以根据自己需要修改。\n\n#### 提交到远端仓库\n\n* clone Octopress source 仓库到本地\n\n远程仓库还是使用原来 github 和 gitcafe 上的仓库，所以我的做法是将原来 github 上的 source 分支仓库 clone 到本地：\n\n```zsh\n$ git clone -b source git@github.com:username/username.github.com.git hexo\n```\n\n* 将 hexo 目录里的文件都删除，当然除了 .git 目录外；\n\n* 将 <hexo root folder> 目录里生成的东西全部拷贝到 hexo 目录；\n\n* 强制推送到远端 `git push origin source -f `\n\n到这里 Hexo 博客的 source 部分迁移完成，接下来就可以生成博客了。\n\n## 生成博客\n\n生成博客很简单，执行以下命令即可：\n\n```zsh\n$ hexo clean\n$ hexo generate\n```\n\ngenerate 命令会创建一个 public 目录（前面的 clean 命令会先删除这个目录，如果有），这个目录是实际的博客目录。\n\n为了方便操作，生成博客并提交写了个 deploy 脚本：\n\n```zsh\n#! /bin/zsh\n\n# git pull source\necho \"**************BEGIN GIT PULL SOURCE**************\"\ngit pull origin source\n\nif [ $? != 0 ]\nthen\necho \"**************GIT PULL SOURCE FAILED**************\"\nexit 1\nelse\necho \"**************GIT PULL SOURCE SUCCESS**************\"\nfi\n\n\n# hexo generate\necho \"**************BEGIN HEXO GENERATE**************\"\nhexo clean\nhexo generate\n\nif [ $? != 0 ]\nthen\necho \"**************HEXO GENERATE FAILED**************\"\nexit 1\nelse\necho \"**************HEXO GENERATE SUCCESS**************\"\nfi\n\n\n# git push source\necho \"**************GIT PUSH BEGIN**************\"\ngit add --all .\ngit commit -m \"update at `date` \"\ngit push origin source\nif [ $? != 0 ]\nthen\necho \"**************GIT PUSH FAILED**************\"\nexit 1\nelse\necho \"**************GIT PUSH SUCCESS**************\"\nfi\n\n\n# 创建发布用 git 仓库\ncd public\ngit init\ngit add .\ngit commit -m \"update at `date` \"\n\n# 添加 coding.net 源\necho \"**************PUSH TO CODING.NET BEGIN**************\"\n# 改变 coding.net remote url\ngit remote add coding git@git.coding.net:foogry/foogry.git >> /dev/null 2>&1\n# 提交博客内容\ngit push -u coding master:coding-pages -f\n\nif [ $? != 0 ]\nthen\necho \"**************PUSH TO CODING.NET FAILED**************\"\nexit 1\nelse\necho \"**************PUSH TO CODING.NET SUCCESS**************\"\nfi\n\n# 添加 github 源\necho \"**************PUSH TO GITHUB BEGIN**************\"\n# 改变 github remote url\ngit remote add origin git@github.com:wangzz/wangzz.github.com.git >> /dev/null 2>&1\n# 提交博客内容\ngit push origin master -f\n\nif [ $? != 0 ]\nthen\necho \"**************PUSH TO GITHUB FAILED**************\"\nexit 1\nelse\necho \"**************PUSH TO GITHUB SUCCESS**************\"\nfi\n\ncd -\n\necho \"**************DONE**************\"\n```\n\n我把这个脚本放在了博客 souce 的根目录下每次修改完 source 后，执行一次，博客就能更新了。\n\n## 写新博客\n\n使用下述命令可以生成一个新的 markdown 文件：\n\n```zsh\n$ hexo new \"文章标题\"\n```\n\n写完文章后执行前面的 deploy 脚本就行了。\n\n## 在新电脑上配置已经存在的 Hexo 博客\n\n#### 安装 Hexo\n\n如果没安装过 Hexo，跟新建博客一样要先安装 ：\n\n```zsh\n$ npm install hexo-cli -g\n$ npm install hexo --save\n```\n\n#### clone Hexo source 到本地\n\n```zsh\n$ git clone -b source git@github.com:wangzz/wangzz.github.com.git hexo\n```\n\n#### 部署博客\n\n进入到 hexo 的 source 目录，执行 deploy 脚本即可。\n\n#### SSH key\n\nclone source 或提交博客到 github 或 gitcafe 前，需要将将当前电脑上的 SSH key 填到 github 或 gitcafe 上，具体操作方式见之前的文章 [《让Octopress博客在多台Mac上同时使用》](http://foggry.com/2014/04/02/2014-04-02-ru-he-pei-zhi-rang-ni-de-octopressbo-ke-zai-duo-tai-macshang-tong-shi-shi-yong/)\n\n\n\n## 参考文档\n\n* [从 Octopress 迁移到 Hexo](https://blog.devtang.com/2016/02/16/from-octopress-to-hexo/)\n\n* [Hexo搭建博客教程]([https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/](https://thief.one/2017/03/03/Hexo搭建博客教程/))","slug":"博客从-Octopress-迁移到-Hexo-经验总结","published":1,"updated":"2019-09-25T13:00:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0zclidm0027qhtf7ygfvzok","content":"<h2 id=\"迁移过程\"><a href=\"#迁移过程\" class=\"headerlink\" title=\"迁移过程\"></a>迁移过程</h2><p>迁移过程网上有很多现成的文章，这里主要参考巧叔的 <a href=\"https://blog.devtang.com/2016/02/16/from-octopress-to-hexo/\" target=\"_blank\" rel=\"noopener\">从 Octopress 迁移到 Hexo</a></p>\n<h4 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h4><p>先使用以下命令安装 Hexo：</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建新的博客目录\"><a href=\"#创建新的博客目录\" class=\"headerlink\" title=\"创建新的博客目录\"></a>创建新的博客目录</h4><figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;hexo root folder&gt;</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;hexo root folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h4 id=\"迁移配置\"><a href=\"#迁移配置\" class=\"headerlink\" title=\"迁移配置\"></a>迁移配置</h4><ul>\n<li>迁移文章</li>\n</ul>\n<p>把以前 Octopress 的 <code>source/_post</code> 目录下的文章，拷贝到 Hexo 的同名目录下即可。</p>\n<ul>\n<li>迁移图片资源</li>\n</ul>\n<p>以前的图片目录，也可以直接拷贝到 <code>source/images</code> 目录下。</p>\n<ul>\n<li>修改 _config.yml 文件</li>\n</ul>\n<p>上一步生成的 Hexo 目录里，_config.yml 都是默认值，可以根据自己需要修改。</p>\n<h4 id=\"提交到远端仓库\"><a href=\"#提交到远端仓库\" class=\"headerlink\" title=\"提交到远端仓库\"></a>提交到远端仓库</h4><ul>\n<li>clone Octopress source 仓库到本地</li>\n</ul>\n<p>远程仓库还是使用原来 github 和 gitcafe 上的仓库，所以我的做法是将原来 github 上的 source 分支仓库 clone 到本地：</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> -b <span class=\"built_in\">source</span> git@github.com:username/username.github.com.git hexo</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>将 hexo 目录里的文件都删除，当然除了 .git 目录外；</p>\n</li>\n<li><p>将 <hexo root folder> 目录里生成的东西全部拷贝到 hexo 目录；</hexo></p>\n</li>\n<li><p>强制推送到远端 <code>git push origin source -f</code></p>\n</li>\n</ul>\n<p>到这里 Hexo 博客的 source 部分迁移完成，接下来就可以生成博客了。</p>\n<h2 id=\"生成博客\"><a href=\"#生成博客\" class=\"headerlink\" title=\"生成博客\"></a>生成博客</h2><p>生成博客很简单，执行以下命令即可：</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>generate 命令会创建一个 public 目录（前面的 clean 命令会先删除这个目录，如果有），这个目录是实际的博客目录。</p>\n<p>为了方便操作，生成博客并提交写了个 deploy 脚本：</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/zsh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># git pull source</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************BEGIN GIT PULL SOURCE**************\"</span></span><br><span class=\"line\">git pull origin <span class=\"built_in\">source</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? != 0 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************GIT PULL SOURCE FAILED**************\"</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************GIT PULL SOURCE SUCCESS**************\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># hexo generate</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************BEGIN HEXO GENERATE**************\"</span></span><br><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? != 0 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************HEXO GENERATE FAILED**************\"</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************HEXO GENERATE SUCCESS**************\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># git push source</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************GIT PUSH BEGIN**************\"</span></span><br><span class=\"line\">git add --all .</span><br><span class=\"line\">git commit -m <span class=\"string\">\"update at `date` \"</span></span><br><span class=\"line\">git push origin <span class=\"built_in\">source</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? != 0 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************GIT PUSH FAILED**************\"</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************GIT PUSH SUCCESS**************\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建发布用 git 仓库</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> public</span><br><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">\"update at `date` \"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加 coding.net 源</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************PUSH TO CODING.NET BEGIN**************\"</span></span><br><span class=\"line\"><span class=\"comment\"># 改变 coding.net remote url</span></span><br><span class=\"line\">git remote add coding git@git.coding.net:foogry/foogry.git &gt;&gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\"><span class=\"comment\"># 提交博客内容</span></span><br><span class=\"line\">git push -u coding master:coding-pages -f</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? != 0 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************PUSH TO CODING.NET FAILED**************\"</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************PUSH TO CODING.NET SUCCESS**************\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加 github 源</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************PUSH TO GITHUB BEGIN**************\"</span></span><br><span class=\"line\"><span class=\"comment\"># 改变 github remote url</span></span><br><span class=\"line\">git remote add origin git@github.com:wangzz/wangzz.github.com.git &gt;&gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\"><span class=\"comment\"># 提交博客内容</span></span><br><span class=\"line\">git push origin master -f</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? != 0 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************PUSH TO GITHUB FAILED**************\"</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************PUSH TO GITHUB SUCCESS**************\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> -</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************DONE**************\"</span></span><br></pre></td></tr></table></figure>\n\n<p>我把这个脚本放在了博客 souce 的根目录下每次修改完 source 后，执行一次，博客就能更新了。</p>\n<h2 id=\"写新博客\"><a href=\"#写新博客\" class=\"headerlink\" title=\"写新博客\"></a>写新博客</h2><p>使用下述命令可以生成一个新的 markdown 文件：</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"文章标题\"</span></span><br></pre></td></tr></table></figure>\n\n<p>写完文章后执行前面的 deploy 脚本就行了。</p>\n<h2 id=\"在新电脑上配置已经存在的-Hexo-博客\"><a href=\"#在新电脑上配置已经存在的-Hexo-博客\" class=\"headerlink\" title=\"在新电脑上配置已经存在的 Hexo 博客\"></a>在新电脑上配置已经存在的 Hexo 博客</h2><h4 id=\"安装-Hexo-1\"><a href=\"#安装-Hexo-1\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h4><p>如果没安装过 Hexo，跟新建博客一样要先安装 ：</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\">$ npm install hexo --save</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"clone-Hexo-source-到本地\"><a href=\"#clone-Hexo-source-到本地\" class=\"headerlink\" title=\"clone Hexo source 到本地\"></a>clone Hexo source 到本地</h4><figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> -b <span class=\"built_in\">source</span> git@github.com:wangzz/wangzz.github.com.git hexo</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"部署博客\"><a href=\"#部署博客\" class=\"headerlink\" title=\"部署博客\"></a>部署博客</h4><p>进入到 hexo 的 source 目录，执行 deploy 脚本即可。</p>\n<h4 id=\"SSH-key\"><a href=\"#SSH-key\" class=\"headerlink\" title=\"SSH key\"></a>SSH key</h4><p>clone source 或提交博客到 github 或 gitcafe 前，需要将将当前电脑上的 SSH key 填到 github 或 gitcafe 上，具体操作方式见之前的文章 <a href=\"http://foggry.com/2014/04/02/2014-04-02-ru-he-pei-zhi-rang-ni-de-octopressbo-ke-zai-duo-tai-macshang-tong-shi-shi-yong/\">《让Octopress博客在多台Mac上同时使用》</a></p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><p><a href=\"https://blog.devtang.com/2016/02/16/from-octopress-to-hexo/\" target=\"_blank\" rel=\"noopener\">从 Octopress 迁移到 Hexo</a></p>\n</li>\n<li><p><a href=\"[https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/](https://thief.one/2017/03/03/Hexo搭建博客教程/)\">Hexo搭建博客教程</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"迁移过程\"><a href=\"#迁移过程\" class=\"headerlink\" title=\"迁移过程\"></a>迁移过程</h2><p>迁移过程网上有很多现成的文章，这里主要参考巧叔的 <a href=\"https://blog.devtang.com/2016/02/16/from-octopress-to-hexo/\" target=\"_blank\" rel=\"noopener\">从 Octopress 迁移到 Hexo</a></p>\n<h4 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h4><p>先使用以下命令安装 Hexo：</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建新的博客目录\"><a href=\"#创建新的博客目录\" class=\"headerlink\" title=\"创建新的博客目录\"></a>创建新的博客目录</h4><figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;hexo root folder&gt;</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;hexo root folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"迁移配置\"><a href=\"#迁移配置\" class=\"headerlink\" title=\"迁移配置\"></a>迁移配置</h4><ul>\n<li>迁移文章</li>\n</ul>\n<p>把以前 Octopress 的 <code>source/_post</code> 目录下的文章，拷贝到 Hexo 的同名目录下即可。</p>\n<ul>\n<li>迁移图片资源</li>\n</ul>\n<p>以前的图片目录，也可以直接拷贝到 <code>source/images</code> 目录下。</p>\n<ul>\n<li>修改 _config.yml 文件</li>\n</ul>\n<p>上一步生成的 Hexo 目录里，_config.yml 都是默认值，可以根据自己需要修改。</p>\n<h4 id=\"提交到远端仓库\"><a href=\"#提交到远端仓库\" class=\"headerlink\" title=\"提交到远端仓库\"></a>提交到远端仓库</h4><ul>\n<li>clone Octopress source 仓库到本地</li>\n</ul>\n<p>远程仓库还是使用原来 github 和 gitcafe 上的仓库，所以我的做法是将原来 github 上的 source 分支仓库 clone 到本地：</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> -b <span class=\"built_in\">source</span> git@github.com:username/username.github.com.git hexo</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>将 hexo 目录里的文件都删除，当然除了 .git 目录外；</p>\n</li>\n<li><p>将 <hexo root folder> 目录里生成的东西全部拷贝到 hexo 目录；</hexo></p>\n</li>\n<li><p>强制推送到远端 <code>git push origin source -f</code></p>\n</li>\n</ul>\n<p>到这里 Hexo 博客的 source 部分迁移完成，接下来就可以生成博客了。</p>\n<h2 id=\"生成博客\"><a href=\"#生成博客\" class=\"headerlink\" title=\"生成博客\"></a>生成博客</h2><p>生成博客很简单，执行以下命令即可：</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>generate 命令会创建一个 public 目录（前面的 clean 命令会先删除这个目录，如果有），这个目录是实际的博客目录。</p>\n<p>为了方便操作，生成博客并提交写了个 deploy 脚本：</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/zsh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># git pull source</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************BEGIN GIT PULL SOURCE**************\"</span></span><br><span class=\"line\">git pull origin <span class=\"built_in\">source</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? != 0 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************GIT PULL SOURCE FAILED**************\"</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************GIT PULL SOURCE SUCCESS**************\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># hexo generate</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************BEGIN HEXO GENERATE**************\"</span></span><br><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? != 0 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************HEXO GENERATE FAILED**************\"</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************HEXO GENERATE SUCCESS**************\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># git push source</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************GIT PUSH BEGIN**************\"</span></span><br><span class=\"line\">git add --all .</span><br><span class=\"line\">git commit -m <span class=\"string\">\"update at `date` \"</span></span><br><span class=\"line\">git push origin <span class=\"built_in\">source</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? != 0 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************GIT PUSH FAILED**************\"</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************GIT PUSH SUCCESS**************\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建发布用 git 仓库</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> public</span><br><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">\"update at `date` \"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加 coding.net 源</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************PUSH TO CODING.NET BEGIN**************\"</span></span><br><span class=\"line\"><span class=\"comment\"># 改变 coding.net remote url</span></span><br><span class=\"line\">git remote add coding git@git.coding.net:foogry/foogry.git &gt;&gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\"><span class=\"comment\"># 提交博客内容</span></span><br><span class=\"line\">git push -u coding master:coding-pages -f</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? != 0 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************PUSH TO CODING.NET FAILED**************\"</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************PUSH TO CODING.NET SUCCESS**************\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加 github 源</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************PUSH TO GITHUB BEGIN**************\"</span></span><br><span class=\"line\"><span class=\"comment\"># 改变 github remote url</span></span><br><span class=\"line\">git remote add origin git@github.com:wangzz/wangzz.github.com.git &gt;&gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\"><span class=\"comment\"># 提交博客内容</span></span><br><span class=\"line\">git push origin master -f</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? != 0 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************PUSH TO GITHUB FAILED**************\"</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************PUSH TO GITHUB SUCCESS**************\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> -</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**************DONE**************\"</span></span><br></pre></td></tr></table></figure>\n\n<p>我把这个脚本放在了博客 souce 的根目录下每次修改完 source 后，执行一次，博客就能更新了。</p>\n<h2 id=\"写新博客\"><a href=\"#写新博客\" class=\"headerlink\" title=\"写新博客\"></a>写新博客</h2><p>使用下述命令可以生成一个新的 markdown 文件：</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"文章标题\"</span></span><br></pre></td></tr></table></figure>\n\n<p>写完文章后执行前面的 deploy 脚本就行了。</p>\n<h2 id=\"在新电脑上配置已经存在的-Hexo-博客\"><a href=\"#在新电脑上配置已经存在的-Hexo-博客\" class=\"headerlink\" title=\"在新电脑上配置已经存在的 Hexo 博客\"></a>在新电脑上配置已经存在的 Hexo 博客</h2><h4 id=\"安装-Hexo-1\"><a href=\"#安装-Hexo-1\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h4><p>如果没安装过 Hexo，跟新建博客一样要先安装 ：</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\">$ npm install hexo --save</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"clone-Hexo-source-到本地\"><a href=\"#clone-Hexo-source-到本地\" class=\"headerlink\" title=\"clone Hexo source 到本地\"></a>clone Hexo source 到本地</h4><figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> -b <span class=\"built_in\">source</span> git@github.com:wangzz/wangzz.github.com.git hexo</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"部署博客\"><a href=\"#部署博客\" class=\"headerlink\" title=\"部署博客\"></a>部署博客</h4><p>进入到 hexo 的 source 目录，执行 deploy 脚本即可。</p>\n<h4 id=\"SSH-key\"><a href=\"#SSH-key\" class=\"headerlink\" title=\"SSH key\"></a>SSH key</h4><p>clone source 或提交博客到 github 或 gitcafe 前，需要将将当前电脑上的 SSH key 填到 github 或 gitcafe 上，具体操作方式见之前的文章 <a href=\"http://foggry.com/2014/04/02/2014-04-02-ru-he-pei-zhi-rang-ni-de-octopressbo-ke-zai-duo-tai-macshang-tong-shi-shi-yong/\">《让Octopress博客在多台Mac上同时使用》</a></p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><p><a href=\"https://blog.devtang.com/2016/02/16/from-octopress-to-hexo/\" target=\"_blank\" rel=\"noopener\">从 Octopress 迁移到 Hexo</a></p>\n</li>\n<li><p><a href=\"[https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/](https://thief.one/2017/03/03/Hexo搭建博客教程/)\">Hexo搭建博客教程</a></p>\n</li>\n</ul>"},{"layout":"post","title":"try catch 原理剖析","date":"2018-11-15T00:27:01.000Z","comments":1,"keywords":"Objective-C, iOS,setjmp,longjmp,异常处理,try,catch","_content":"\n## 一、非局部跳转\n\n### 1、简介\n\n大部分语言的运行控制模型，都是基于栈的。在这种模型中，调用一个函数时，就会将这个函数的参数、返回地址、局部变量等信息入栈；这个函数返回时，对应信息再出栈。正常情况下，函数调用的进栈和出栈都是成对出现的，比如函数的调用顺序是：func1 --> func2 -- > func3，那么一定是 func1 先进栈，然后是 func2，最后是 func3；而 func3 调用结束后一定是先返回到 func2 ，然后从 func2 返回到func3，而不能直接从 func3 返回到 func1。\n\n我们都知道，C 语言中的 goto 语句，可以实现在一个函数内部跳转;与此同时，C 语言还提供了一种能够在函数间跳转、被称为 `非局部跳转` (no-local goto) 的机制，这种机制可以允许从一个多层嵌套的函数调用中直接返回。我们先通过下面的栗子来见证它的神奇之处：\n\n<!-- more -->\n\n```\n#include <stdio.h>\n#include <setjmp.h>\n\njmp_buf jump_buffer;\n\nvoid func2(void)\n{\nprintf(\"Before calling longjmp\\n\");\nlongjmp(jump_buffer, 1);\nprintf(\"After calling longjmp\\n\");\n}\n\nvoid func1(void)\n{\nprintf(\"Before calling func2\\n\");\nfunc2();\nprintf(\"After calling func2\\n\");\n}\n\nint main()\n{\nif (setjmp(jump_buffer) == 0){\nprintf(\"first calling set_jmp\\n\");\nfunc1();\n} else {\nprintf(\"second calling set_jmp\\n\");\n}\n\nreturn 0;\n}\n\n```\n\n运行结果如下：\n\n```\nfirst calling set_jmp\nBefore calling func2\nBefore calling longjmp\nsecond calling set_jmp\n```\n\n从日志可以看出，函数的执行过程跳过了 `After calling func2`、`After calling longjmp` 两句日志所在的代码行，在 `func2` 中执行了 `longjmp` 方法后函数直接从 `func2` 跳转回了 `main` 函数中继续执行，而没经过 `func1`！\n\n### 2、实现机制\n\n非局部跳转功能主要是通过位于 `<setjmp.h>` 中的 `setjmp` 和 `longjmp` 两个函数实现。\n\n* setjmp\n\n```\n`int setjmp(jmp_buf env);`\n```\n\n可以把当前代码行的状态信息保存到 env 中，供以后 `longjmp` 恢复状态信息时使用。如果直接调用 `setjmp()`，则返回值为 0；如果是由于调用了 `longjmp` 而调用到 `setjmp`，则返回值为 `longjmp` 第二个参数所指定的值。\n\n* longjmp\n\n```\n`void longjmp(jmp_buf env, int val);`\n```\n\n用于将调用堆栈恢复成最近一次调用 `setjmp` 时所保存到 env 中的状态信息。也就是说，调用了 `longjmp` 后，不管当前调用堆栈在哪个方法中，都会回到有效范围内最近一次调用 `setjmp` 方法的地方，而 `setjmp` 方法的返回值就是这里设置的 `val` 的值，用于区分到底是从哪个 `longjmp` 返回到的 `setjmp`。\n\n\n而 `jmp_buf` 是 `<setjmp.h>` 文件中定义的结构类型，用于保存系统状态信息。函数 `setjmp` 会将其所在的程序点的系统状态信息都保存到 `jmp_buf` 类型的结构变量 env 中，而调用 `longjmp` 会将 env 的系统状态信息恢复，以实现非局部跳转的功能。\n\n### 3、注意事项\n\n* 执行顺序\n\n`setjmp` 和 `longjmp` 结合使用时，必须要有严格的先后执行顺序，即先调用 `setjmp` 函数，再调用 `longjmp` 函数。否则如果在 `setjmp` 之前调用 `longjmp`，将导致程序的执行流变的不可预测，有可能导致程序崩溃。\n\n* 作用域\n\n`longjmp` 必须在正确的 `setjmp` 的作用域范围内。具体来说，在一个函数中调用了 `setjmp`，只要该函数没有返回，那么在任何其它地方都可以通过 `longjmp` 调用来跳转到 `setjmp` 的下一条语句执行。\n\n## 二、try/catch 异常处理机制\n\n在类 C 语言中，非局部跳转的一个重要应用场景就是 `异常处理机制`。Objective-C 使用 try/catch/finally 来捕获并处理异常，比如下面的代码：\n\n```\n#import <Foundation/Foundation.h>\n\nint main (int argc, const char * argv[])\n{\n@autoreleasepool\n{\n@try {\nNSException *e = [NSException\nexceptionWithName:@\"FileNotFoundException\"\nreason:@\"File Not Found on System\"\nuserInfo:nil];\n@throw e;\n}\n@catch (NSException *exception) {\nif ([[exception name] isEqualToString:NSInvalidArgumentException]) {\nNSLog(@\"%@\", exception);\n} else {\n@throw exception;\n}\n}\n@finally {\nNSLog(@\"finally\");\n}\n}\nreturn 0;\n}\n```\n\n通过 Clang 生成的 C 中间代码，可以看出 try/catch 的原理，上述代码保存成 main.m 文件后通过命令：\n\n```\nclang -rewrite-objc main.m\n```\n\n剔除无用信息后，可以得到下述代码：\n\n```\n#include <Foundation/Foundation.h>\n\nint main (int argc, const char * argv[])\n{\n@autoreleasepool\n{\n/**\n* try/catch的作用域从这里开始\n*/\n/* @try scope begin */\n{\n/**\n* 首先定义一个_objc_exception_data类型的结构体，用来保存异常现场的数据。\n*/\nstruct _objc_exception_data\n{\n/**\n* buf变量就是c语言中的jmp_buf\n* jmp_buf的定义可在setjmp.h文件中找到：\n*\n*      #define _JBLEN        (10 + 16 + 2)\n*      #define _JBLEN_MAX    _JBLEN\n*\n*      typedef int jmp_buf[_JBLEN];\n*/\nint buf[18/*32-bit i386*/];\n\n/**\n* pointers[0]用来存储通过@throw抛出的异常对象，\n* pointers[1]存储下一个_stack数据。\n*/\nchar *pointers[4];\n} _stack;\n\n/**\n* _rethrow保存可能在@catch中再次抛出的异常对象。\n*/\nid volatile _rethrow = 0;\n\n/**\n* 因为异常处理支持嵌套，_stack会被存储在一个全局的栈中，这个栈用单链表的存储结构表示。\n* objc_exception_try_enter函数将_stack压栈。\n*/\nobjc_exception_try_enter(&_stack);\n\n/**\n* _setjmp是C的函数，用于保存当前程序现场。\n* _setjmp需要传入一个jmp_buf参数，保存当前需要用到的寄存器的值。\n* _setjmp()它能返回两次，第一次是初始化时，返回0，第二次遇到_longjmp()函数调用会返回，返回值由_longjmp的第二个参数决定。\n* 如果对_setjmp()和_longjmp()概念不太了解的，请参考C语言的异常处理机制。\n*\n* 下面_setjmp()初始化返回0，然后执行if{}中也就是@try{}中的代码。\n*/\nif (!_setjmp(_stack.buf)) /* @try block continue */\n{\n/**\n* 创建一个NSException对象，对应代码：\n*\n*             NSException *e = [NSException\n*                               exceptionWithName:@\"FileNotFoundException\"\n*                               reason:@\"File Not Found on System\"\n*                               userInfo:nil];\n*/\nNSException *e = ((NSException *(*)(id, SEL, NSString *, NSString *, NSDictionary *))(void *)objc_msgSend)(objc_getClass(\"NSException\"), sel_registerName(\"exceptionWithName:reason:userInfo:\"), (NSString *)&__NSConstantStringImpl_main_m_0, (NSString *)&__NSConstantStringImpl_main_m_1, (NSDictionary *)((void *)0));\n\n/**\n* 抛出异常对象，对应代码：@throw e;\n*\n* objc_exception_throw函数实现步骤如下：\n* 1. 把e对象保存到_stack->pointers[0]中使其在@catch{}中能被捕获。\n* 2. 将_stack从全局栈中弹出。\n* 3. 调用_longjmp()跳转到前面if语句中的_setjmp()位置。_longjmp()使得_setjmp()函数第二次返回，\n* 返回值为1，所以会执行else{}中也就是@catch{}中的代码。\n*/\nobjc_exception_throw(e);\n\n} /* @catch begin */ else {\n\n/**\n* objc_exception_extract函数从_stack->pointers[0]中取得上面抛出的异常对象。\n*/\nid _caught = objc_exception_extract(&_stack);\n\n/**\n* 这里为何再次调用objc_exception_try_enter对_stack压栈？先保留这个疑问，继续看下面的代码。\n*/\nobjc_exception_try_enter (&_stack);\n\n/**\n* 在@catch中设置一个跳转位置\n*/\nif (_setjmp(_stack.buf))\n\n/**\n* 如果@catch{}中再次抛出异常，在这里捕获。\n*/\n_rethrow = objc_exception_extract(&_stack);\n\nelse { /* @catch continue */\n\n/**\n* objc_exception_match函数判断_caught对象是否是需要捕获的目标对象。对应代码：\n*\n* @catch (NSException *exception) {\n*/\nif (objc_exception_match((struct objc_class *)objc_getClass(\"NSException\"), (struct objc_object *)_caught)) {\nNSException *exception = _caught;\n\n/**\n* 比较捕获的异常是不是NSInvalidArgumentException类型。对应代码：\n*\n* if ([[exception name] isEqualToString:NSInvalidArgumentException]) {\n*      NSLog(@\"%@\", exception);\n*\n*/\nif (((BOOL (*)(id, SEL, NSString *))(void *)objc_msgSend)((id)((NSString *(*)(id, SEL))(void *)objc_msgSend)((id)exception, sel_registerName(\"name\")), sel_registerName(\"isEqualToString:\"), (NSString *)NSInvalidArgumentException)) {\n\nNSLog((NSString *)&__NSConstantStringImpl_main_m_2, exception);\n} else {\n\n/**\n* 抛出异常对象，然后跳转到前面@catch中的if语句中的_setjmp()位置。\n* 这就解释了前面为什么要在@catch中再次将_stack压栈和调用_setjmp()的原因。\n* 在当前@catch中，如果不设置一个跳转点来捕获@catch中抛出的异常，那么程序就直接跳转到全局栈的下一个@catch中，而下面的@finally{}代码就无法执行。\n* 在@catch中设置跳转点就是为了最后总能执行@finally中的代码。\n*/\nobjc_exception_throw( exception);\n}\n\n} /* last catch end */ else {\n\n/**\n* 如果异常对象没被处理，先将其保存到_rethrow变量。\n* objc_exception_try_exit函数将_stack从全局栈中弹出。\n*/\n_rethrow = _caught;\nobjc_exception_try_exit(&_stack);\n}\n} /* @catch end */\n}\n/* @finally */\n{\nif (!_rethrow) objc_exception_try_exit(&_stack);\n\nNSLog((NSString *)&__NSConstantStringImpl_main_m_3);\n\n/**\n* _rethrow是前面@catch中没有被处理的或被捕获的异常对象，\n* 最后，_rethrow异常对象被抛到全局栈的下一个@catch中。\n*/\nif (_rethrow) objc_exception_throw(_rethrow);\n}\n\n} /* @try scope end */\n\n}\nreturn 0;\n}\n```\n\n以上代码还涉及了 objc_exception_try_enter、 objc_exception_extract、 objc_exception_throw、 objc_exception_try_exit 等函数，都可以在苹果开源 [objc4](https://opensource.apple.com/source/objc4/) 的 objc-exception.mm 文件中找到。\n\n\n## 参考文档\n\n* [浅析C语言的非局部跳转：setjmp和longjmp](https://www.cnblogs.com/lienhua34/archive/2012/04/22/2464859.html)\n\n* [setjmp和longjmp函数使用详解](https://blog.csdn.net/wykwdy007/article/details/6535322)\n\n* [Objective-C try/catch异常处理机制原理](https://www.cnblogs.com/markhy/p/3169035.html)\n","source":"_posts/2018-11-15-try-catch-yuan-li-pou-xi.markdown","raw":"---\nlayout: post\ntitle: \"try catch 原理剖析\"\ndate: 2018-11-15 08:27:01 +0800\ncomments: true\ncategories: iOS\ntags: [Objective-C, iOS,setjmp,longjmp,异常处理,try,catch]\nkeywords: Objective-C, iOS,setjmp,longjmp,异常处理,try,catch\n---\n\n## 一、非局部跳转\n\n### 1、简介\n\n大部分语言的运行控制模型，都是基于栈的。在这种模型中，调用一个函数时，就会将这个函数的参数、返回地址、局部变量等信息入栈；这个函数返回时，对应信息再出栈。正常情况下，函数调用的进栈和出栈都是成对出现的，比如函数的调用顺序是：func1 --> func2 -- > func3，那么一定是 func1 先进栈，然后是 func2，最后是 func3；而 func3 调用结束后一定是先返回到 func2 ，然后从 func2 返回到func3，而不能直接从 func3 返回到 func1。\n\n我们都知道，C 语言中的 goto 语句，可以实现在一个函数内部跳转;与此同时，C 语言还提供了一种能够在函数间跳转、被称为 `非局部跳转` (no-local goto) 的机制，这种机制可以允许从一个多层嵌套的函数调用中直接返回。我们先通过下面的栗子来见证它的神奇之处：\n\n<!-- more -->\n\n```\n#include <stdio.h>\n#include <setjmp.h>\n\njmp_buf jump_buffer;\n\nvoid func2(void)\n{\nprintf(\"Before calling longjmp\\n\");\nlongjmp(jump_buffer, 1);\nprintf(\"After calling longjmp\\n\");\n}\n\nvoid func1(void)\n{\nprintf(\"Before calling func2\\n\");\nfunc2();\nprintf(\"After calling func2\\n\");\n}\n\nint main()\n{\nif (setjmp(jump_buffer) == 0){\nprintf(\"first calling set_jmp\\n\");\nfunc1();\n} else {\nprintf(\"second calling set_jmp\\n\");\n}\n\nreturn 0;\n}\n\n```\n\n运行结果如下：\n\n```\nfirst calling set_jmp\nBefore calling func2\nBefore calling longjmp\nsecond calling set_jmp\n```\n\n从日志可以看出，函数的执行过程跳过了 `After calling func2`、`After calling longjmp` 两句日志所在的代码行，在 `func2` 中执行了 `longjmp` 方法后函数直接从 `func2` 跳转回了 `main` 函数中继续执行，而没经过 `func1`！\n\n### 2、实现机制\n\n非局部跳转功能主要是通过位于 `<setjmp.h>` 中的 `setjmp` 和 `longjmp` 两个函数实现。\n\n* setjmp\n\n```\n`int setjmp(jmp_buf env);`\n```\n\n可以把当前代码行的状态信息保存到 env 中，供以后 `longjmp` 恢复状态信息时使用。如果直接调用 `setjmp()`，则返回值为 0；如果是由于调用了 `longjmp` 而调用到 `setjmp`，则返回值为 `longjmp` 第二个参数所指定的值。\n\n* longjmp\n\n```\n`void longjmp(jmp_buf env, int val);`\n```\n\n用于将调用堆栈恢复成最近一次调用 `setjmp` 时所保存到 env 中的状态信息。也就是说，调用了 `longjmp` 后，不管当前调用堆栈在哪个方法中，都会回到有效范围内最近一次调用 `setjmp` 方法的地方，而 `setjmp` 方法的返回值就是这里设置的 `val` 的值，用于区分到底是从哪个 `longjmp` 返回到的 `setjmp`。\n\n\n而 `jmp_buf` 是 `<setjmp.h>` 文件中定义的结构类型，用于保存系统状态信息。函数 `setjmp` 会将其所在的程序点的系统状态信息都保存到 `jmp_buf` 类型的结构变量 env 中，而调用 `longjmp` 会将 env 的系统状态信息恢复，以实现非局部跳转的功能。\n\n### 3、注意事项\n\n* 执行顺序\n\n`setjmp` 和 `longjmp` 结合使用时，必须要有严格的先后执行顺序，即先调用 `setjmp` 函数，再调用 `longjmp` 函数。否则如果在 `setjmp` 之前调用 `longjmp`，将导致程序的执行流变的不可预测，有可能导致程序崩溃。\n\n* 作用域\n\n`longjmp` 必须在正确的 `setjmp` 的作用域范围内。具体来说，在一个函数中调用了 `setjmp`，只要该函数没有返回，那么在任何其它地方都可以通过 `longjmp` 调用来跳转到 `setjmp` 的下一条语句执行。\n\n## 二、try/catch 异常处理机制\n\n在类 C 语言中，非局部跳转的一个重要应用场景就是 `异常处理机制`。Objective-C 使用 try/catch/finally 来捕获并处理异常，比如下面的代码：\n\n```\n#import <Foundation/Foundation.h>\n\nint main (int argc, const char * argv[])\n{\n@autoreleasepool\n{\n@try {\nNSException *e = [NSException\nexceptionWithName:@\"FileNotFoundException\"\nreason:@\"File Not Found on System\"\nuserInfo:nil];\n@throw e;\n}\n@catch (NSException *exception) {\nif ([[exception name] isEqualToString:NSInvalidArgumentException]) {\nNSLog(@\"%@\", exception);\n} else {\n@throw exception;\n}\n}\n@finally {\nNSLog(@\"finally\");\n}\n}\nreturn 0;\n}\n```\n\n通过 Clang 生成的 C 中间代码，可以看出 try/catch 的原理，上述代码保存成 main.m 文件后通过命令：\n\n```\nclang -rewrite-objc main.m\n```\n\n剔除无用信息后，可以得到下述代码：\n\n```\n#include <Foundation/Foundation.h>\n\nint main (int argc, const char * argv[])\n{\n@autoreleasepool\n{\n/**\n* try/catch的作用域从这里开始\n*/\n/* @try scope begin */\n{\n/**\n* 首先定义一个_objc_exception_data类型的结构体，用来保存异常现场的数据。\n*/\nstruct _objc_exception_data\n{\n/**\n* buf变量就是c语言中的jmp_buf\n* jmp_buf的定义可在setjmp.h文件中找到：\n*\n*      #define _JBLEN        (10 + 16 + 2)\n*      #define _JBLEN_MAX    _JBLEN\n*\n*      typedef int jmp_buf[_JBLEN];\n*/\nint buf[18/*32-bit i386*/];\n\n/**\n* pointers[0]用来存储通过@throw抛出的异常对象，\n* pointers[1]存储下一个_stack数据。\n*/\nchar *pointers[4];\n} _stack;\n\n/**\n* _rethrow保存可能在@catch中再次抛出的异常对象。\n*/\nid volatile _rethrow = 0;\n\n/**\n* 因为异常处理支持嵌套，_stack会被存储在一个全局的栈中，这个栈用单链表的存储结构表示。\n* objc_exception_try_enter函数将_stack压栈。\n*/\nobjc_exception_try_enter(&_stack);\n\n/**\n* _setjmp是C的函数，用于保存当前程序现场。\n* _setjmp需要传入一个jmp_buf参数，保存当前需要用到的寄存器的值。\n* _setjmp()它能返回两次，第一次是初始化时，返回0，第二次遇到_longjmp()函数调用会返回，返回值由_longjmp的第二个参数决定。\n* 如果对_setjmp()和_longjmp()概念不太了解的，请参考C语言的异常处理机制。\n*\n* 下面_setjmp()初始化返回0，然后执行if{}中也就是@try{}中的代码。\n*/\nif (!_setjmp(_stack.buf)) /* @try block continue */\n{\n/**\n* 创建一个NSException对象，对应代码：\n*\n*             NSException *e = [NSException\n*                               exceptionWithName:@\"FileNotFoundException\"\n*                               reason:@\"File Not Found on System\"\n*                               userInfo:nil];\n*/\nNSException *e = ((NSException *(*)(id, SEL, NSString *, NSString *, NSDictionary *))(void *)objc_msgSend)(objc_getClass(\"NSException\"), sel_registerName(\"exceptionWithName:reason:userInfo:\"), (NSString *)&__NSConstantStringImpl_main_m_0, (NSString *)&__NSConstantStringImpl_main_m_1, (NSDictionary *)((void *)0));\n\n/**\n* 抛出异常对象，对应代码：@throw e;\n*\n* objc_exception_throw函数实现步骤如下：\n* 1. 把e对象保存到_stack->pointers[0]中使其在@catch{}中能被捕获。\n* 2. 将_stack从全局栈中弹出。\n* 3. 调用_longjmp()跳转到前面if语句中的_setjmp()位置。_longjmp()使得_setjmp()函数第二次返回，\n* 返回值为1，所以会执行else{}中也就是@catch{}中的代码。\n*/\nobjc_exception_throw(e);\n\n} /* @catch begin */ else {\n\n/**\n* objc_exception_extract函数从_stack->pointers[0]中取得上面抛出的异常对象。\n*/\nid _caught = objc_exception_extract(&_stack);\n\n/**\n* 这里为何再次调用objc_exception_try_enter对_stack压栈？先保留这个疑问，继续看下面的代码。\n*/\nobjc_exception_try_enter (&_stack);\n\n/**\n* 在@catch中设置一个跳转位置\n*/\nif (_setjmp(_stack.buf))\n\n/**\n* 如果@catch{}中再次抛出异常，在这里捕获。\n*/\n_rethrow = objc_exception_extract(&_stack);\n\nelse { /* @catch continue */\n\n/**\n* objc_exception_match函数判断_caught对象是否是需要捕获的目标对象。对应代码：\n*\n* @catch (NSException *exception) {\n*/\nif (objc_exception_match((struct objc_class *)objc_getClass(\"NSException\"), (struct objc_object *)_caught)) {\nNSException *exception = _caught;\n\n/**\n* 比较捕获的异常是不是NSInvalidArgumentException类型。对应代码：\n*\n* if ([[exception name] isEqualToString:NSInvalidArgumentException]) {\n*      NSLog(@\"%@\", exception);\n*\n*/\nif (((BOOL (*)(id, SEL, NSString *))(void *)objc_msgSend)((id)((NSString *(*)(id, SEL))(void *)objc_msgSend)((id)exception, sel_registerName(\"name\")), sel_registerName(\"isEqualToString:\"), (NSString *)NSInvalidArgumentException)) {\n\nNSLog((NSString *)&__NSConstantStringImpl_main_m_2, exception);\n} else {\n\n/**\n* 抛出异常对象，然后跳转到前面@catch中的if语句中的_setjmp()位置。\n* 这就解释了前面为什么要在@catch中再次将_stack压栈和调用_setjmp()的原因。\n* 在当前@catch中，如果不设置一个跳转点来捕获@catch中抛出的异常，那么程序就直接跳转到全局栈的下一个@catch中，而下面的@finally{}代码就无法执行。\n* 在@catch中设置跳转点就是为了最后总能执行@finally中的代码。\n*/\nobjc_exception_throw( exception);\n}\n\n} /* last catch end */ else {\n\n/**\n* 如果异常对象没被处理，先将其保存到_rethrow变量。\n* objc_exception_try_exit函数将_stack从全局栈中弹出。\n*/\n_rethrow = _caught;\nobjc_exception_try_exit(&_stack);\n}\n} /* @catch end */\n}\n/* @finally */\n{\nif (!_rethrow) objc_exception_try_exit(&_stack);\n\nNSLog((NSString *)&__NSConstantStringImpl_main_m_3);\n\n/**\n* _rethrow是前面@catch中没有被处理的或被捕获的异常对象，\n* 最后，_rethrow异常对象被抛到全局栈的下一个@catch中。\n*/\nif (_rethrow) objc_exception_throw(_rethrow);\n}\n\n} /* @try scope end */\n\n}\nreturn 0;\n}\n```\n\n以上代码还涉及了 objc_exception_try_enter、 objc_exception_extract、 objc_exception_throw、 objc_exception_try_exit 等函数，都可以在苹果开源 [objc4](https://opensource.apple.com/source/objc4/) 的 objc-exception.mm 文件中找到。\n\n\n## 参考文档\n\n* [浅析C语言的非局部跳转：setjmp和longjmp](https://www.cnblogs.com/lienhua34/archive/2012/04/22/2464859.html)\n\n* [setjmp和longjmp函数使用详解](https://blog.csdn.net/wykwdy007/article/details/6535322)\n\n* [Objective-C try/catch异常处理机制原理](https://www.cnblogs.com/markhy/p/3169035.html)\n","slug":"2018-11-15-try-catch-yuan-li-pou-xi","published":1,"updated":"2019-09-16T13:23:14.000Z","photos":[],"link":"","_id":"ck0zclidn002aqhtfg1zq33p7","content":"<h2 id=\"一、非局部跳转\"><a href=\"#一、非局部跳转\" class=\"headerlink\" title=\"一、非局部跳转\"></a>一、非局部跳转</h2><h3 id=\"1、简介\"><a href=\"#1、简介\" class=\"headerlink\" title=\"1、简介\"></a>1、简介</h3><p>大部分语言的运行控制模型，都是基于栈的。在这种模型中，调用一个函数时，就会将这个函数的参数、返回地址、局部变量等信息入栈；这个函数返回时，对应信息再出栈。正常情况下，函数调用的进栈和出栈都是成对出现的，比如函数的调用顺序是：func1 –&gt; func2 – &gt; func3，那么一定是 func1 先进栈，然后是 func2，最后是 func3；而 func3 调用结束后一定是先返回到 func2 ，然后从 func2 返回到func3，而不能直接从 func3 返回到 func1。</p>\n<p>我们都知道，C 语言中的 goto 语句，可以实现在一个函数内部跳转;与此同时，C 语言还提供了一种能够在函数间跳转、被称为 <code>非局部跳转</code> (no-local goto) 的机制，这种机制可以允许从一个多层嵌套的函数调用中直接返回。我们先通过下面的栗子来见证它的神奇之处：</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;setjmp.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">jmp_buf jump_buffer;</span><br><span class=\"line\"></span><br><span class=\"line\">void func2(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">printf(&quot;Before calling longjmp\\n&quot;);</span><br><span class=\"line\">longjmp(jump_buffer, 1);</span><br><span class=\"line\">printf(&quot;After calling longjmp\\n&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void func1(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">printf(&quot;Before calling func2\\n&quot;);</span><br><span class=\"line\">func2();</span><br><span class=\"line\">printf(&quot;After calling func2\\n&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">if (setjmp(jump_buffer) == 0)&#123;</span><br><span class=\"line\">printf(&quot;first calling set_jmp\\n&quot;);</span><br><span class=\"line\">func1();</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">printf(&quot;second calling set_jmp\\n&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first calling set_jmp</span><br><span class=\"line\">Before calling func2</span><br><span class=\"line\">Before calling longjmp</span><br><span class=\"line\">second calling set_jmp</span><br></pre></td></tr></table></figure>\n\n<p>从日志可以看出，函数的执行过程跳过了 <code>After calling func2</code>、<code>After calling longjmp</code> 两句日志所在的代码行，在 <code>func2</code> 中执行了 <code>longjmp</code> 方法后函数直接从 <code>func2</code> 跳转回了 <code>main</code> 函数中继续执行，而没经过 <code>func1</code>！</p>\n<h3 id=\"2、实现机制\"><a href=\"#2、实现机制\" class=\"headerlink\" title=\"2、实现机制\"></a>2、实现机制</h3><p>非局部跳转功能主要是通过位于 <code>&lt;setjmp.h&gt;</code> 中的 <code>setjmp</code> 和 <code>longjmp</code> 两个函数实现。</p>\n<ul>\n<li>setjmp</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`int setjmp(jmp_buf env);`</span><br></pre></td></tr></table></figure>\n\n<p>可以把当前代码行的状态信息保存到 env 中，供以后 <code>longjmp</code> 恢复状态信息时使用。如果直接调用 <code>setjmp()</code>，则返回值为 0；如果是由于调用了 <code>longjmp</code> 而调用到 <code>setjmp</code>，则返回值为 <code>longjmp</code> 第二个参数所指定的值。</p>\n<ul>\n<li>longjmp</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`void longjmp(jmp_buf env, int val);`</span><br></pre></td></tr></table></figure>\n\n<p>用于将调用堆栈恢复成最近一次调用 <code>setjmp</code> 时所保存到 env 中的状态信息。也就是说，调用了 <code>longjmp</code> 后，不管当前调用堆栈在哪个方法中，都会回到有效范围内最近一次调用 <code>setjmp</code> 方法的地方，而 <code>setjmp</code> 方法的返回值就是这里设置的 <code>val</code> 的值，用于区分到底是从哪个 <code>longjmp</code> 返回到的 <code>setjmp</code>。</p>\n<p>而 <code>jmp_buf</code> 是 <code>&lt;setjmp.h&gt;</code> 文件中定义的结构类型，用于保存系统状态信息。函数 <code>setjmp</code> 会将其所在的程序点的系统状态信息都保存到 <code>jmp_buf</code> 类型的结构变量 env 中，而调用 <code>longjmp</code> 会将 env 的系统状态信息恢复，以实现非局部跳转的功能。</p>\n<h3 id=\"3、注意事项\"><a href=\"#3、注意事项\" class=\"headerlink\" title=\"3、注意事项\"></a>3、注意事项</h3><ul>\n<li>执行顺序</li>\n</ul>\n<p><code>setjmp</code> 和 <code>longjmp</code> 结合使用时，必须要有严格的先后执行顺序，即先调用 <code>setjmp</code> 函数，再调用 <code>longjmp</code> 函数。否则如果在 <code>setjmp</code> 之前调用 <code>longjmp</code>，将导致程序的执行流变的不可预测，有可能导致程序崩溃。</p>\n<ul>\n<li>作用域</li>\n</ul>\n<p><code>longjmp</code> 必须在正确的 <code>setjmp</code> 的作用域范围内。具体来说，在一个函数中调用了 <code>setjmp</code>，只要该函数没有返回，那么在任何其它地方都可以通过 <code>longjmp</code> 调用来跳转到 <code>setjmp</code> 的下一条语句执行。</p>\n<h2 id=\"二、try-catch-异常处理机制\"><a href=\"#二、try-catch-异常处理机制\" class=\"headerlink\" title=\"二、try/catch 异常处理机制\"></a>二、try/catch 异常处理机制</h2><p>在类 C 语言中，非局部跳转的一个重要应用场景就是 <code>异常处理机制</code>。Objective-C 使用 try/catch/finally 来捕获并处理异常，比如下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main (int argc, const char * argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">@autoreleasepool</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">@try &#123;</span><br><span class=\"line\">NSException *e = [NSException</span><br><span class=\"line\">exceptionWithName:@&quot;FileNotFoundException&quot;</span><br><span class=\"line\">reason:@&quot;File Not Found on System&quot;</span><br><span class=\"line\">userInfo:nil];</span><br><span class=\"line\">@throw e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@catch (NSException *exception) &#123;</span><br><span class=\"line\">if ([[exception name] isEqualToString:NSInvalidArgumentException]) &#123;</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, exception);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">@throw exception;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@finally &#123;</span><br><span class=\"line\">NSLog(@&quot;finally&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过 Clang 生成的 C 中间代码，可以看出 try/catch 的原理，上述代码保存成 main.m 文件后通过命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clang -rewrite-objc main.m</span><br></pre></td></tr></table></figure>\n\n<p>剔除无用信息后，可以得到下述代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main (int argc, const char * argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">@autoreleasepool</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">/**</span><br><span class=\"line\">* try/catch的作用域从这里开始</span><br><span class=\"line\">*/</span><br><span class=\"line\">/* @try scope begin */</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">/**</span><br><span class=\"line\">* 首先定义一个_objc_exception_data类型的结构体，用来保存异常现场的数据。</span><br><span class=\"line\">*/</span><br><span class=\"line\">struct _objc_exception_data</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">/**</span><br><span class=\"line\">* buf变量就是c语言中的jmp_buf</span><br><span class=\"line\">* jmp_buf的定义可在setjmp.h文件中找到：</span><br><span class=\"line\">*</span><br><span class=\"line\">*      #define _JBLEN        (10 + 16 + 2)</span><br><span class=\"line\">*      #define _JBLEN_MAX    _JBLEN</span><br><span class=\"line\">*</span><br><span class=\"line\">*      typedef int jmp_buf[_JBLEN];</span><br><span class=\"line\">*/</span><br><span class=\"line\">int buf[18/*32-bit i386*/];</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* pointers[0]用来存储通过@throw抛出的异常对象，</span><br><span class=\"line\">* pointers[1]存储下一个_stack数据。</span><br><span class=\"line\">*/</span><br><span class=\"line\">char *pointers[4];</span><br><span class=\"line\">&#125; _stack;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* _rethrow保存可能在@catch中再次抛出的异常对象。</span><br><span class=\"line\">*/</span><br><span class=\"line\">id volatile _rethrow = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* 因为异常处理支持嵌套，_stack会被存储在一个全局的栈中，这个栈用单链表的存储结构表示。</span><br><span class=\"line\">* objc_exception_try_enter函数将_stack压栈。</span><br><span class=\"line\">*/</span><br><span class=\"line\">objc_exception_try_enter(&amp;_stack);</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* _setjmp是C的函数，用于保存当前程序现场。</span><br><span class=\"line\">* _setjmp需要传入一个jmp_buf参数，保存当前需要用到的寄存器的值。</span><br><span class=\"line\">* _setjmp()它能返回两次，第一次是初始化时，返回0，第二次遇到_longjmp()函数调用会返回，返回值由_longjmp的第二个参数决定。</span><br><span class=\"line\">* 如果对_setjmp()和_longjmp()概念不太了解的，请参考C语言的异常处理机制。</span><br><span class=\"line\">*</span><br><span class=\"line\">* 下面_setjmp()初始化返回0，然后执行if&#123;&#125;中也就是@try&#123;&#125;中的代码。</span><br><span class=\"line\">*/</span><br><span class=\"line\">if (!_setjmp(_stack.buf)) /* @try block continue */</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">/**</span><br><span class=\"line\">* 创建一个NSException对象，对应代码：</span><br><span class=\"line\">*</span><br><span class=\"line\">*             NSException *e = [NSException</span><br><span class=\"line\">*                               exceptionWithName:@&quot;FileNotFoundException&quot;</span><br><span class=\"line\">*                               reason:@&quot;File Not Found on System&quot;</span><br><span class=\"line\">*                               userInfo:nil];</span><br><span class=\"line\">*/</span><br><span class=\"line\">NSException *e = ((NSException *(*)(id, SEL, NSString *, NSString *, NSDictionary *))(void *)objc_msgSend)(objc_getClass(&quot;NSException&quot;), sel_registerName(&quot;exceptionWithName:reason:userInfo:&quot;), (NSString *)&amp;__NSConstantStringImpl_main_m_0, (NSString *)&amp;__NSConstantStringImpl_main_m_1, (NSDictionary *)((void *)0));</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* 抛出异常对象，对应代码：@throw e;</span><br><span class=\"line\">*</span><br><span class=\"line\">* objc_exception_throw函数实现步骤如下：</span><br><span class=\"line\">* 1. 把e对象保存到_stack-&gt;pointers[0]中使其在@catch&#123;&#125;中能被捕获。</span><br><span class=\"line\">* 2. 将_stack从全局栈中弹出。</span><br><span class=\"line\">* 3. 调用_longjmp()跳转到前面if语句中的_setjmp()位置。_longjmp()使得_setjmp()函数第二次返回，</span><br><span class=\"line\">* 返回值为1，所以会执行else&#123;&#125;中也就是@catch&#123;&#125;中的代码。</span><br><span class=\"line\">*/</span><br><span class=\"line\">objc_exception_throw(e);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; /* @catch begin */ else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* objc_exception_extract函数从_stack-&gt;pointers[0]中取得上面抛出的异常对象。</span><br><span class=\"line\">*/</span><br><span class=\"line\">id _caught = objc_exception_extract(&amp;_stack);</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* 这里为何再次调用objc_exception_try_enter对_stack压栈？先保留这个疑问，继续看下面的代码。</span><br><span class=\"line\">*/</span><br><span class=\"line\">objc_exception_try_enter (&amp;_stack);</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* 在@catch中设置一个跳转位置</span><br><span class=\"line\">*/</span><br><span class=\"line\">if (_setjmp(_stack.buf))</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* 如果@catch&#123;&#125;中再次抛出异常，在这里捕获。</span><br><span class=\"line\">*/</span><br><span class=\"line\">_rethrow = objc_exception_extract(&amp;_stack);</span><br><span class=\"line\"></span><br><span class=\"line\">else &#123; /* @catch continue */</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* objc_exception_match函数判断_caught对象是否是需要捕获的目标对象。对应代码：</span><br><span class=\"line\">*</span><br><span class=\"line\">* @catch (NSException *exception) &#123;</span><br><span class=\"line\">*/</span><br><span class=\"line\">if (objc_exception_match((struct objc_class *)objc_getClass(&quot;NSException&quot;), (struct objc_object *)_caught)) &#123;</span><br><span class=\"line\">NSException *exception = _caught;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* 比较捕获的异常是不是NSInvalidArgumentException类型。对应代码：</span><br><span class=\"line\">*</span><br><span class=\"line\">* if ([[exception name] isEqualToString:NSInvalidArgumentException]) &#123;</span><br><span class=\"line\">*      NSLog(@&quot;%@&quot;, exception);</span><br><span class=\"line\">*</span><br><span class=\"line\">*/</span><br><span class=\"line\">if (((BOOL (*)(id, SEL, NSString *))(void *)objc_msgSend)((id)((NSString *(*)(id, SEL))(void *)objc_msgSend)((id)exception, sel_registerName(&quot;name&quot;)), sel_registerName(&quot;isEqualToString:&quot;), (NSString *)NSInvalidArgumentException)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">NSLog((NSString *)&amp;__NSConstantStringImpl_main_m_2, exception);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* 抛出异常对象，然后跳转到前面@catch中的if语句中的_setjmp()位置。</span><br><span class=\"line\">* 这就解释了前面为什么要在@catch中再次将_stack压栈和调用_setjmp()的原因。</span><br><span class=\"line\">* 在当前@catch中，如果不设置一个跳转点来捕获@catch中抛出的异常，那么程序就直接跳转到全局栈的下一个@catch中，而下面的@finally&#123;&#125;代码就无法执行。</span><br><span class=\"line\">* 在@catch中设置跳转点就是为了最后总能执行@finally中的代码。</span><br><span class=\"line\">*/</span><br><span class=\"line\">objc_exception_throw( exception);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; /* last catch end */ else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* 如果异常对象没被处理，先将其保存到_rethrow变量。</span><br><span class=\"line\">* objc_exception_try_exit函数将_stack从全局栈中弹出。</span><br><span class=\"line\">*/</span><br><span class=\"line\">_rethrow = _caught;</span><br><span class=\"line\">objc_exception_try_exit(&amp;_stack);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125; /* @catch end */</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/* @finally */</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">if (!_rethrow) objc_exception_try_exit(&amp;_stack);</span><br><span class=\"line\"></span><br><span class=\"line\">NSLog((NSString *)&amp;__NSConstantStringImpl_main_m_3);</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* _rethrow是前面@catch中没有被处理的或被捕获的异常对象，</span><br><span class=\"line\">* 最后，_rethrow异常对象被抛到全局栈的下一个@catch中。</span><br><span class=\"line\">*/</span><br><span class=\"line\">if (_rethrow) objc_exception_throw(_rethrow);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; /* @try scope end */</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码还涉及了 objc_exception_try_enter、 objc_exception_extract、 objc_exception_throw、 objc_exception_try_exit 等函数，都可以在苹果开源 <a href=\"https://opensource.apple.com/source/objc4/\" target=\"_blank\" rel=\"noopener\">objc4</a> 的 objc-exception.mm 文件中找到。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><p><a href=\"https://www.cnblogs.com/lienhua34/archive/2012/04/22/2464859.html\" target=\"_blank\" rel=\"noopener\">浅析C语言的非局部跳转：setjmp和longjmp</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/wykwdy007/article/details/6535322\" target=\"_blank\" rel=\"noopener\">setjmp和longjmp函数使用详解</a></p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/markhy/p/3169035.html\" target=\"_blank\" rel=\"noopener\">Objective-C try/catch异常处理机制原理</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、非局部跳转\"><a href=\"#一、非局部跳转\" class=\"headerlink\" title=\"一、非局部跳转\"></a>一、非局部跳转</h2><h3 id=\"1、简介\"><a href=\"#1、简介\" class=\"headerlink\" title=\"1、简介\"></a>1、简介</h3><p>大部分语言的运行控制模型，都是基于栈的。在这种模型中，调用一个函数时，就会将这个函数的参数、返回地址、局部变量等信息入栈；这个函数返回时，对应信息再出栈。正常情况下，函数调用的进栈和出栈都是成对出现的，比如函数的调用顺序是：func1 –&gt; func2 – &gt; func3，那么一定是 func1 先进栈，然后是 func2，最后是 func3；而 func3 调用结束后一定是先返回到 func2 ，然后从 func2 返回到func3，而不能直接从 func3 返回到 func1。</p>\n<p>我们都知道，C 语言中的 goto 语句，可以实现在一个函数内部跳转;与此同时，C 语言还提供了一种能够在函数间跳转、被称为 <code>非局部跳转</code> (no-local goto) 的机制，这种机制可以允许从一个多层嵌套的函数调用中直接返回。我们先通过下面的栗子来见证它的神奇之处：</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;setjmp.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">jmp_buf jump_buffer;</span><br><span class=\"line\"></span><br><span class=\"line\">void func2(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">printf(&quot;Before calling longjmp\\n&quot;);</span><br><span class=\"line\">longjmp(jump_buffer, 1);</span><br><span class=\"line\">printf(&quot;After calling longjmp\\n&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void func1(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">printf(&quot;Before calling func2\\n&quot;);</span><br><span class=\"line\">func2();</span><br><span class=\"line\">printf(&quot;After calling func2\\n&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">if (setjmp(jump_buffer) == 0)&#123;</span><br><span class=\"line\">printf(&quot;first calling set_jmp\\n&quot;);</span><br><span class=\"line\">func1();</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">printf(&quot;second calling set_jmp\\n&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first calling set_jmp</span><br><span class=\"line\">Before calling func2</span><br><span class=\"line\">Before calling longjmp</span><br><span class=\"line\">second calling set_jmp</span><br></pre></td></tr></table></figure>\n\n<p>从日志可以看出，函数的执行过程跳过了 <code>After calling func2</code>、<code>After calling longjmp</code> 两句日志所在的代码行，在 <code>func2</code> 中执行了 <code>longjmp</code> 方法后函数直接从 <code>func2</code> 跳转回了 <code>main</code> 函数中继续执行，而没经过 <code>func1</code>！</p>\n<h3 id=\"2、实现机制\"><a href=\"#2、实现机制\" class=\"headerlink\" title=\"2、实现机制\"></a>2、实现机制</h3><p>非局部跳转功能主要是通过位于 <code>&lt;setjmp.h&gt;</code> 中的 <code>setjmp</code> 和 <code>longjmp</code> 两个函数实现。</p>\n<ul>\n<li>setjmp</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`int setjmp(jmp_buf env);`</span><br></pre></td></tr></table></figure>\n\n<p>可以把当前代码行的状态信息保存到 env 中，供以后 <code>longjmp</code> 恢复状态信息时使用。如果直接调用 <code>setjmp()</code>，则返回值为 0；如果是由于调用了 <code>longjmp</code> 而调用到 <code>setjmp</code>，则返回值为 <code>longjmp</code> 第二个参数所指定的值。</p>\n<ul>\n<li>longjmp</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`void longjmp(jmp_buf env, int val);`</span><br></pre></td></tr></table></figure>\n\n<p>用于将调用堆栈恢复成最近一次调用 <code>setjmp</code> 时所保存到 env 中的状态信息。也就是说，调用了 <code>longjmp</code> 后，不管当前调用堆栈在哪个方法中，都会回到有效范围内最近一次调用 <code>setjmp</code> 方法的地方，而 <code>setjmp</code> 方法的返回值就是这里设置的 <code>val</code> 的值，用于区分到底是从哪个 <code>longjmp</code> 返回到的 <code>setjmp</code>。</p>\n<p>而 <code>jmp_buf</code> 是 <code>&lt;setjmp.h&gt;</code> 文件中定义的结构类型，用于保存系统状态信息。函数 <code>setjmp</code> 会将其所在的程序点的系统状态信息都保存到 <code>jmp_buf</code> 类型的结构变量 env 中，而调用 <code>longjmp</code> 会将 env 的系统状态信息恢复，以实现非局部跳转的功能。</p>\n<h3 id=\"3、注意事项\"><a href=\"#3、注意事项\" class=\"headerlink\" title=\"3、注意事项\"></a>3、注意事项</h3><ul>\n<li>执行顺序</li>\n</ul>\n<p><code>setjmp</code> 和 <code>longjmp</code> 结合使用时，必须要有严格的先后执行顺序，即先调用 <code>setjmp</code> 函数，再调用 <code>longjmp</code> 函数。否则如果在 <code>setjmp</code> 之前调用 <code>longjmp</code>，将导致程序的执行流变的不可预测，有可能导致程序崩溃。</p>\n<ul>\n<li>作用域</li>\n</ul>\n<p><code>longjmp</code> 必须在正确的 <code>setjmp</code> 的作用域范围内。具体来说，在一个函数中调用了 <code>setjmp</code>，只要该函数没有返回，那么在任何其它地方都可以通过 <code>longjmp</code> 调用来跳转到 <code>setjmp</code> 的下一条语句执行。</p>\n<h2 id=\"二、try-catch-异常处理机制\"><a href=\"#二、try-catch-异常处理机制\" class=\"headerlink\" title=\"二、try/catch 异常处理机制\"></a>二、try/catch 异常处理机制</h2><p>在类 C 语言中，非局部跳转的一个重要应用场景就是 <code>异常处理机制</code>。Objective-C 使用 try/catch/finally 来捕获并处理异常，比如下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main (int argc, const char * argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">@autoreleasepool</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">@try &#123;</span><br><span class=\"line\">NSException *e = [NSException</span><br><span class=\"line\">exceptionWithName:@&quot;FileNotFoundException&quot;</span><br><span class=\"line\">reason:@&quot;File Not Found on System&quot;</span><br><span class=\"line\">userInfo:nil];</span><br><span class=\"line\">@throw e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@catch (NSException *exception) &#123;</span><br><span class=\"line\">if ([[exception name] isEqualToString:NSInvalidArgumentException]) &#123;</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, exception);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">@throw exception;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@finally &#123;</span><br><span class=\"line\">NSLog(@&quot;finally&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过 Clang 生成的 C 中间代码，可以看出 try/catch 的原理，上述代码保存成 main.m 文件后通过命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clang -rewrite-objc main.m</span><br></pre></td></tr></table></figure>\n\n<p>剔除无用信息后，可以得到下述代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main (int argc, const char * argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">@autoreleasepool</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">/**</span><br><span class=\"line\">* try/catch的作用域从这里开始</span><br><span class=\"line\">*/</span><br><span class=\"line\">/* @try scope begin */</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">/**</span><br><span class=\"line\">* 首先定义一个_objc_exception_data类型的结构体，用来保存异常现场的数据。</span><br><span class=\"line\">*/</span><br><span class=\"line\">struct _objc_exception_data</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">/**</span><br><span class=\"line\">* buf变量就是c语言中的jmp_buf</span><br><span class=\"line\">* jmp_buf的定义可在setjmp.h文件中找到：</span><br><span class=\"line\">*</span><br><span class=\"line\">*      #define _JBLEN        (10 + 16 + 2)</span><br><span class=\"line\">*      #define _JBLEN_MAX    _JBLEN</span><br><span class=\"line\">*</span><br><span class=\"line\">*      typedef int jmp_buf[_JBLEN];</span><br><span class=\"line\">*/</span><br><span class=\"line\">int buf[18/*32-bit i386*/];</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* pointers[0]用来存储通过@throw抛出的异常对象，</span><br><span class=\"line\">* pointers[1]存储下一个_stack数据。</span><br><span class=\"line\">*/</span><br><span class=\"line\">char *pointers[4];</span><br><span class=\"line\">&#125; _stack;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* _rethrow保存可能在@catch中再次抛出的异常对象。</span><br><span class=\"line\">*/</span><br><span class=\"line\">id volatile _rethrow = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* 因为异常处理支持嵌套，_stack会被存储在一个全局的栈中，这个栈用单链表的存储结构表示。</span><br><span class=\"line\">* objc_exception_try_enter函数将_stack压栈。</span><br><span class=\"line\">*/</span><br><span class=\"line\">objc_exception_try_enter(&amp;_stack);</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* _setjmp是C的函数，用于保存当前程序现场。</span><br><span class=\"line\">* _setjmp需要传入一个jmp_buf参数，保存当前需要用到的寄存器的值。</span><br><span class=\"line\">* _setjmp()它能返回两次，第一次是初始化时，返回0，第二次遇到_longjmp()函数调用会返回，返回值由_longjmp的第二个参数决定。</span><br><span class=\"line\">* 如果对_setjmp()和_longjmp()概念不太了解的，请参考C语言的异常处理机制。</span><br><span class=\"line\">*</span><br><span class=\"line\">* 下面_setjmp()初始化返回0，然后执行if&#123;&#125;中也就是@try&#123;&#125;中的代码。</span><br><span class=\"line\">*/</span><br><span class=\"line\">if (!_setjmp(_stack.buf)) /* @try block continue */</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">/**</span><br><span class=\"line\">* 创建一个NSException对象，对应代码：</span><br><span class=\"line\">*</span><br><span class=\"line\">*             NSException *e = [NSException</span><br><span class=\"line\">*                               exceptionWithName:@&quot;FileNotFoundException&quot;</span><br><span class=\"line\">*                               reason:@&quot;File Not Found on System&quot;</span><br><span class=\"line\">*                               userInfo:nil];</span><br><span class=\"line\">*/</span><br><span class=\"line\">NSException *e = ((NSException *(*)(id, SEL, NSString *, NSString *, NSDictionary *))(void *)objc_msgSend)(objc_getClass(&quot;NSException&quot;), sel_registerName(&quot;exceptionWithName:reason:userInfo:&quot;), (NSString *)&amp;__NSConstantStringImpl_main_m_0, (NSString *)&amp;__NSConstantStringImpl_main_m_1, (NSDictionary *)((void *)0));</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* 抛出异常对象，对应代码：@throw e;</span><br><span class=\"line\">*</span><br><span class=\"line\">* objc_exception_throw函数实现步骤如下：</span><br><span class=\"line\">* 1. 把e对象保存到_stack-&gt;pointers[0]中使其在@catch&#123;&#125;中能被捕获。</span><br><span class=\"line\">* 2. 将_stack从全局栈中弹出。</span><br><span class=\"line\">* 3. 调用_longjmp()跳转到前面if语句中的_setjmp()位置。_longjmp()使得_setjmp()函数第二次返回，</span><br><span class=\"line\">* 返回值为1，所以会执行else&#123;&#125;中也就是@catch&#123;&#125;中的代码。</span><br><span class=\"line\">*/</span><br><span class=\"line\">objc_exception_throw(e);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; /* @catch begin */ else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* objc_exception_extract函数从_stack-&gt;pointers[0]中取得上面抛出的异常对象。</span><br><span class=\"line\">*/</span><br><span class=\"line\">id _caught = objc_exception_extract(&amp;_stack);</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* 这里为何再次调用objc_exception_try_enter对_stack压栈？先保留这个疑问，继续看下面的代码。</span><br><span class=\"line\">*/</span><br><span class=\"line\">objc_exception_try_enter (&amp;_stack);</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* 在@catch中设置一个跳转位置</span><br><span class=\"line\">*/</span><br><span class=\"line\">if (_setjmp(_stack.buf))</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* 如果@catch&#123;&#125;中再次抛出异常，在这里捕获。</span><br><span class=\"line\">*/</span><br><span class=\"line\">_rethrow = objc_exception_extract(&amp;_stack);</span><br><span class=\"line\"></span><br><span class=\"line\">else &#123; /* @catch continue */</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* objc_exception_match函数判断_caught对象是否是需要捕获的目标对象。对应代码：</span><br><span class=\"line\">*</span><br><span class=\"line\">* @catch (NSException *exception) &#123;</span><br><span class=\"line\">*/</span><br><span class=\"line\">if (objc_exception_match((struct objc_class *)objc_getClass(&quot;NSException&quot;), (struct objc_object *)_caught)) &#123;</span><br><span class=\"line\">NSException *exception = _caught;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* 比较捕获的异常是不是NSInvalidArgumentException类型。对应代码：</span><br><span class=\"line\">*</span><br><span class=\"line\">* if ([[exception name] isEqualToString:NSInvalidArgumentException]) &#123;</span><br><span class=\"line\">*      NSLog(@&quot;%@&quot;, exception);</span><br><span class=\"line\">*</span><br><span class=\"line\">*/</span><br><span class=\"line\">if (((BOOL (*)(id, SEL, NSString *))(void *)objc_msgSend)((id)((NSString *(*)(id, SEL))(void *)objc_msgSend)((id)exception, sel_registerName(&quot;name&quot;)), sel_registerName(&quot;isEqualToString:&quot;), (NSString *)NSInvalidArgumentException)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">NSLog((NSString *)&amp;__NSConstantStringImpl_main_m_2, exception);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* 抛出异常对象，然后跳转到前面@catch中的if语句中的_setjmp()位置。</span><br><span class=\"line\">* 这就解释了前面为什么要在@catch中再次将_stack压栈和调用_setjmp()的原因。</span><br><span class=\"line\">* 在当前@catch中，如果不设置一个跳转点来捕获@catch中抛出的异常，那么程序就直接跳转到全局栈的下一个@catch中，而下面的@finally&#123;&#125;代码就无法执行。</span><br><span class=\"line\">* 在@catch中设置跳转点就是为了最后总能执行@finally中的代码。</span><br><span class=\"line\">*/</span><br><span class=\"line\">objc_exception_throw( exception);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; /* last catch end */ else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* 如果异常对象没被处理，先将其保存到_rethrow变量。</span><br><span class=\"line\">* objc_exception_try_exit函数将_stack从全局栈中弹出。</span><br><span class=\"line\">*/</span><br><span class=\"line\">_rethrow = _caught;</span><br><span class=\"line\">objc_exception_try_exit(&amp;_stack);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125; /* @catch end */</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/* @finally */</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">if (!_rethrow) objc_exception_try_exit(&amp;_stack);</span><br><span class=\"line\"></span><br><span class=\"line\">NSLog((NSString *)&amp;__NSConstantStringImpl_main_m_3);</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* _rethrow是前面@catch中没有被处理的或被捕获的异常对象，</span><br><span class=\"line\">* 最后，_rethrow异常对象被抛到全局栈的下一个@catch中。</span><br><span class=\"line\">*/</span><br><span class=\"line\">if (_rethrow) objc_exception_throw(_rethrow);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; /* @try scope end */</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码还涉及了 objc_exception_try_enter、 objc_exception_extract、 objc_exception_throw、 objc_exception_try_exit 等函数，都可以在苹果开源 <a href=\"https://opensource.apple.com/source/objc4/\" target=\"_blank\" rel=\"noopener\">objc4</a> 的 objc-exception.mm 文件中找到。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><p><a href=\"https://www.cnblogs.com/lienhua34/archive/2012/04/22/2464859.html\" target=\"_blank\" rel=\"noopener\">浅析C语言的非局部跳转：setjmp和longjmp</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/wykwdy007/article/details/6535322\" target=\"_blank\" rel=\"noopener\">setjmp和longjmp函数使用详解</a></p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/markhy/p/3169035.html\" target=\"_blank\" rel=\"noopener\">Objective-C try/catch异常处理机制原理</a></p>\n</li>\n</ul>"},{"layout":"post","title":"变长参数学习笔记","date":"2018-11-18T11:23:45.000Z","comments":1,"keywords":"C语言, va_list,va_arg,va_end,变长参数,printf","_content":"\n## 1、简介\n\n在定义接口时，经常会遇到参数个数甚至类型都不确定的情况。这时，在类 C 语言中我们可以使用省略号指定参数表，具体形式如下：\n\n```\nvoid fun(parm1,parm2,...);\n```\n\n这种传参形式被称为 `变长参数`。C 语言中的：\n\n```\nint printf(const char * format, ...)\n```\n\n便是两个最经典的例子。对于固定参数列表的函数，每个参数的名称、类型是直接可见的，他们的地址和值也可以直接得到。但是对于变长参数的函数，该如何获取这些信息呢？\n\n<!-- more -->\n\n## 2、实现原理\n\n函数的参数在内存中是以从右到左的顺序依次存放在栈中，最右侧的参数最先入栈，最左边的参数最后入栈，比如：\n\n```\nvoid func(int x, float y, char z);\n```\n\n在发生函数调用的时候，形参 z 先进栈，然后是 y，最后是 x，最终在内存中几个变量的存放次序是 x->y->z。\n\n按照 C 标准，支持变长参数的函数声明中，必须至少在最左侧有一个固定参数。根据前文所述，形参在内存中是存放在栈中，而且顺序是连续的。因此，有了最左侧的 `固定参数` 和 `可变参数的类型`，我们就能获取到所有的可变参数的地址和值。\n\n\n## 3、变长参数获取\n\n#### 3.1 获取\n\n在 C 语言中 `<stdarg.h>` 文件中定义了几个用于获取变长参数的宏：\n\n* va_list\n\n```\ntypedef char* va_list;\n```\n\nva_list 是一个字符指针，可以理解为指向当前参数的一个指针，所有对变长参数的获取都需要通过这个指针进行。因此，在获取变长参数之前，需要先定义一个 va_list 类型的变量，比如叫 `ap`。\n\n* va_start\n\n```\nvoid va_start(va_list ap, param);\n```\n\n`ap` 定义好了后，需要通过 va_start 初始化，让它指向变长参数列表中的第一个。该函数的第一个参数就是前面定义好的 `ap`，第二个参数则是变长参数表前面紧挨着的变量（即 `...` 之前的那个）。\n\n\n* va_arg\n\n```\ntype va_arg(va_list ap, type);\n```\n\n接下来便可以通过 va_arg 来按顺序获取变长参数列表中的每一个参数。该方法第一个参数是 `ap`，第二个参数是当前要获取的变长参数的类型；该方法的返回值便是当前要获取的参数值；每调用一次以后，便把 `ap` 指向了下一个变量的位置。\n\n* va_end\n\n```\nvoid va_end(va_list ap);\n```\n\n全部参数获取结束以后，需要调用 va_end 把 `ap` 指针关掉，以保证程序健壮性。因此，通常 va_start 和 va_end 是成对出现。\n\n#### 3.2 内部实现\n\n在 VC++ 的 <stdarg.h> 里， x86 平台的上述宏定义实现如下 ：\n\n```\ntypedef char * va_list;\n#define _INTSIZEOF(n) \\\n((sizeof(n)+sizeof(int)-1)&~(sizeof(int) - 1) )\n#define va_start(ap,v) ( ap = (va_list)&v + _INTSIZEOF(v) )\n#define va_arg(ap,t) \\\n( *(t *)((ap += _INTSIZEOF(t)) - _INTSIZEOF(t)) )\n#define va_end(ap) ( ap = (va_list)0 )\n```\n\n其中，_INTSIZEOF 的实现方式时为了保证获取到的大小是 int 的整数倍。其它的宏实现就比较容易理解了。\n\n## 4、变长参数应用\n\n我们可以写一个简单版的 printf 来展示该方法的实现原理和变长参数的获取方法：\n\n```\nvoid mineprintf(char *fmt, ...)\n{\n    va_list ap;\n    char *p, *sval;\n    int ival;\n    double dval;\n    \n    va_start(ap, fmt);\n    for (p = fmt; *p; p++) {\n        if (*p != '%') {\n            putchar(*p);\n            continue;\n        }\n        \n        switch (*++p) {\n            case 'd':\n                ival = va_arg(ap, int);\n                printf(\"%d\",ival);\n                break;\n            case 'f':\n                dval = va_arg(ap, double);\n                printf(\"%f\",dval);\n                break;\n            case 's':\n                for (sval = va_arg(ap, char *); *sval; sval++) {\n                    putchar(*sval);\n                }\n                break;\n            default:\n                putchar(*p);\n                break;\n        }\n    }\n    va_end(ap);\n}\n```\n\n## 参考文档\n\n* C程序设计语言（第2版）K&R\n\n* [Implementation of __builtin_va_start(v,l)](https://stackoverflow.com/a/22643365)\n","source":"_posts/2018-11-18-bian-chang-can-shu-xue-xi-bi-ji.markdown","raw":"---\nlayout: post\ntitle: \"变长参数学习笔记\"\ndate: 2018-11-18 19:23:45 +0800\ncomments: true\ncategories: C语言\ntags: [C语言, va_list,va_arg,va_end,变长参数,printf]\nkeywords: C语言, va_list,va_arg,va_end,变长参数,printf\n---\n\n## 1、简介\n\n在定义接口时，经常会遇到参数个数甚至类型都不确定的情况。这时，在类 C 语言中我们可以使用省略号指定参数表，具体形式如下：\n\n```\nvoid fun(parm1,parm2,...);\n```\n\n这种传参形式被称为 `变长参数`。C 语言中的：\n\n```\nint printf(const char * format, ...)\n```\n\n便是两个最经典的例子。对于固定参数列表的函数，每个参数的名称、类型是直接可见的，他们的地址和值也可以直接得到。但是对于变长参数的函数，该如何获取这些信息呢？\n\n<!-- more -->\n\n## 2、实现原理\n\n函数的参数在内存中是以从右到左的顺序依次存放在栈中，最右侧的参数最先入栈，最左边的参数最后入栈，比如：\n\n```\nvoid func(int x, float y, char z);\n```\n\n在发生函数调用的时候，形参 z 先进栈，然后是 y，最后是 x，最终在内存中几个变量的存放次序是 x->y->z。\n\n按照 C 标准，支持变长参数的函数声明中，必须至少在最左侧有一个固定参数。根据前文所述，形参在内存中是存放在栈中，而且顺序是连续的。因此，有了最左侧的 `固定参数` 和 `可变参数的类型`，我们就能获取到所有的可变参数的地址和值。\n\n\n## 3、变长参数获取\n\n#### 3.1 获取\n\n在 C 语言中 `<stdarg.h>` 文件中定义了几个用于获取变长参数的宏：\n\n* va_list\n\n```\ntypedef char* va_list;\n```\n\nva_list 是一个字符指针，可以理解为指向当前参数的一个指针，所有对变长参数的获取都需要通过这个指针进行。因此，在获取变长参数之前，需要先定义一个 va_list 类型的变量，比如叫 `ap`。\n\n* va_start\n\n```\nvoid va_start(va_list ap, param);\n```\n\n`ap` 定义好了后，需要通过 va_start 初始化，让它指向变长参数列表中的第一个。该函数的第一个参数就是前面定义好的 `ap`，第二个参数则是变长参数表前面紧挨着的变量（即 `...` 之前的那个）。\n\n\n* va_arg\n\n```\ntype va_arg(va_list ap, type);\n```\n\n接下来便可以通过 va_arg 来按顺序获取变长参数列表中的每一个参数。该方法第一个参数是 `ap`，第二个参数是当前要获取的变长参数的类型；该方法的返回值便是当前要获取的参数值；每调用一次以后，便把 `ap` 指向了下一个变量的位置。\n\n* va_end\n\n```\nvoid va_end(va_list ap);\n```\n\n全部参数获取结束以后，需要调用 va_end 把 `ap` 指针关掉，以保证程序健壮性。因此，通常 va_start 和 va_end 是成对出现。\n\n#### 3.2 内部实现\n\n在 VC++ 的 <stdarg.h> 里， x86 平台的上述宏定义实现如下 ：\n\n```\ntypedef char * va_list;\n#define _INTSIZEOF(n) \\\n((sizeof(n)+sizeof(int)-1)&~(sizeof(int) - 1) )\n#define va_start(ap,v) ( ap = (va_list)&v + _INTSIZEOF(v) )\n#define va_arg(ap,t) \\\n( *(t *)((ap += _INTSIZEOF(t)) - _INTSIZEOF(t)) )\n#define va_end(ap) ( ap = (va_list)0 )\n```\n\n其中，_INTSIZEOF 的实现方式时为了保证获取到的大小是 int 的整数倍。其它的宏实现就比较容易理解了。\n\n## 4、变长参数应用\n\n我们可以写一个简单版的 printf 来展示该方法的实现原理和变长参数的获取方法：\n\n```\nvoid mineprintf(char *fmt, ...)\n{\n    va_list ap;\n    char *p, *sval;\n    int ival;\n    double dval;\n    \n    va_start(ap, fmt);\n    for (p = fmt; *p; p++) {\n        if (*p != '%') {\n            putchar(*p);\n            continue;\n        }\n        \n        switch (*++p) {\n            case 'd':\n                ival = va_arg(ap, int);\n                printf(\"%d\",ival);\n                break;\n            case 'f':\n                dval = va_arg(ap, double);\n                printf(\"%f\",dval);\n                break;\n            case 's':\n                for (sval = va_arg(ap, char *); *sval; sval++) {\n                    putchar(*sval);\n                }\n                break;\n            default:\n                putchar(*p);\n                break;\n        }\n    }\n    va_end(ap);\n}\n```\n\n## 参考文档\n\n* C程序设计语言（第2版）K&R\n\n* [Implementation of __builtin_va_start(v,l)](https://stackoverflow.com/a/22643365)\n","slug":"2018-11-18-bian-chang-can-shu-xue-xi-bi-ji","published":1,"updated":"2019-09-16T13:23:14.000Z","photos":[],"link":"","_id":"ck0zclido002cqhtfbjevv4eo","content":"<h2 id=\"1、简介\"><a href=\"#1、简介\" class=\"headerlink\" title=\"1、简介\"></a>1、简介</h2><p>在定义接口时，经常会遇到参数个数甚至类型都不确定的情况。这时，在类 C 语言中我们可以使用省略号指定参数表，具体形式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void fun(parm1,parm2,...);</span><br></pre></td></tr></table></figure>\n\n<p>这种传参形式被称为 <code>变长参数</code>。C 语言中的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int printf(const char * format, ...)</span><br></pre></td></tr></table></figure>\n\n<p>便是两个最经典的例子。对于固定参数列表的函数，每个参数的名称、类型是直接可见的，他们的地址和值也可以直接得到。但是对于变长参数的函数，该如何获取这些信息呢？</p>\n<a id=\"more\"></a>\n\n<h2 id=\"2、实现原理\"><a href=\"#2、实现原理\" class=\"headerlink\" title=\"2、实现原理\"></a>2、实现原理</h2><p>函数的参数在内存中是以从右到左的顺序依次存放在栈中，最右侧的参数最先入栈，最左边的参数最后入栈，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void func(int x, float y, char z);</span><br></pre></td></tr></table></figure>\n\n<p>在发生函数调用的时候，形参 z 先进栈，然后是 y，最后是 x，最终在内存中几个变量的存放次序是 x-&gt;y-&gt;z。</p>\n<p>按照 C 标准，支持变长参数的函数声明中，必须至少在最左侧有一个固定参数。根据前文所述，形参在内存中是存放在栈中，而且顺序是连续的。因此，有了最左侧的 <code>固定参数</code> 和 <code>可变参数的类型</code>，我们就能获取到所有的可变参数的地址和值。</p>\n<h2 id=\"3、变长参数获取\"><a href=\"#3、变长参数获取\" class=\"headerlink\" title=\"3、变长参数获取\"></a>3、变长参数获取</h2><h4 id=\"3-1-获取\"><a href=\"#3-1-获取\" class=\"headerlink\" title=\"3.1 获取\"></a>3.1 获取</h4><p>在 C 语言中 <code>&lt;stdarg.h&gt;</code> 文件中定义了几个用于获取变长参数的宏：</p>\n<ul>\n<li>va_list</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef char* va_list;</span><br></pre></td></tr></table></figure>\n\n<p>va_list 是一个字符指针，可以理解为指向当前参数的一个指针，所有对变长参数的获取都需要通过这个指针进行。因此，在获取变长参数之前，需要先定义一个 va_list 类型的变量，比如叫 <code>ap</code>。</p>\n<ul>\n<li>va_start</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void va_start(va_list ap, param);</span><br></pre></td></tr></table></figure>\n\n<p><code>ap</code> 定义好了后，需要通过 va_start 初始化，让它指向变长参数列表中的第一个。该函数的第一个参数就是前面定义好的 <code>ap</code>，第二个参数则是变长参数表前面紧挨着的变量（即 <code>...</code> 之前的那个）。</p>\n<ul>\n<li>va_arg</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type va_arg(va_list ap, type);</span><br></pre></td></tr></table></figure>\n\n<p>接下来便可以通过 va_arg 来按顺序获取变长参数列表中的每一个参数。该方法第一个参数是 <code>ap</code>，第二个参数是当前要获取的变长参数的类型；该方法的返回值便是当前要获取的参数值；每调用一次以后，便把 <code>ap</code> 指向了下一个变量的位置。</p>\n<ul>\n<li>va_end</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void va_end(va_list ap);</span><br></pre></td></tr></table></figure>\n\n<p>全部参数获取结束以后，需要调用 va_end 把 <code>ap</code> 指针关掉，以保证程序健壮性。因此，通常 va_start 和 va_end 是成对出现。</p>\n<h4 id=\"3-2-内部实现\"><a href=\"#3-2-内部实现\" class=\"headerlink\" title=\"3.2 内部实现\"></a>3.2 内部实现</h4><p>在 VC++ 的 &lt;stdarg.h&gt; 里， x86 平台的上述宏定义实现如下 ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef char * va_list;</span><br><span class=\"line\">#define _INTSIZEOF(n) \\</span><br><span class=\"line\">((sizeof(n)+sizeof(int)-1)&amp;~(sizeof(int) - 1) )</span><br><span class=\"line\">#define va_start(ap,v) ( ap = (va_list)&amp;v + _INTSIZEOF(v) )</span><br><span class=\"line\">#define va_arg(ap,t) \\</span><br><span class=\"line\">( *(t *)((ap += _INTSIZEOF(t)) - _INTSIZEOF(t)) )</span><br><span class=\"line\">#define va_end(ap) ( ap = (va_list)0 )</span><br></pre></td></tr></table></figure>\n\n<p>其中，_INTSIZEOF 的实现方式时为了保证获取到的大小是 int 的整数倍。其它的宏实现就比较容易理解了。</p>\n<h2 id=\"4、变长参数应用\"><a href=\"#4、变长参数应用\" class=\"headerlink\" title=\"4、变长参数应用\"></a>4、变长参数应用</h2><p>我们可以写一个简单版的 printf 来展示该方法的实现原理和变长参数的获取方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void mineprintf(char *fmt, ...)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    va_list ap;</span><br><span class=\"line\">    char *p, *sval;</span><br><span class=\"line\">    int ival;</span><br><span class=\"line\">    double dval;</span><br><span class=\"line\">    </span><br><span class=\"line\">    va_start(ap, fmt);</span><br><span class=\"line\">    for (p = fmt; *p; p++) &#123;</span><br><span class=\"line\">        if (*p != &apos;%&apos;) &#123;</span><br><span class=\"line\">            putchar(*p);</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        switch (*++p) &#123;</span><br><span class=\"line\">            case &apos;d&apos;:</span><br><span class=\"line\">                ival = va_arg(ap, int);</span><br><span class=\"line\">                printf(&quot;%d&quot;,ival);</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case &apos;f&apos;:</span><br><span class=\"line\">                dval = va_arg(ap, double);</span><br><span class=\"line\">                printf(&quot;%f&quot;,dval);</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case &apos;s&apos;:</span><br><span class=\"line\">                for (sval = va_arg(ap, char *); *sval; sval++) &#123;</span><br><span class=\"line\">                    putchar(*sval);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            default:</span><br><span class=\"line\">                putchar(*p);</span><br><span class=\"line\">                break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    va_end(ap);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><p>C程序设计语言（第2版）K&amp;R</p>\n</li>\n<li><p><a href=\"https://stackoverflow.com/a/22643365\" target=\"_blank\" rel=\"noopener\">Implementation of __builtin_va_start(v,l)</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"1、简介\"><a href=\"#1、简介\" class=\"headerlink\" title=\"1、简介\"></a>1、简介</h2><p>在定义接口时，经常会遇到参数个数甚至类型都不确定的情况。这时，在类 C 语言中我们可以使用省略号指定参数表，具体形式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void fun(parm1,parm2,...);</span><br></pre></td></tr></table></figure>\n\n<p>这种传参形式被称为 <code>变长参数</code>。C 语言中的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int printf(const char * format, ...)</span><br></pre></td></tr></table></figure>\n\n<p>便是两个最经典的例子。对于固定参数列表的函数，每个参数的名称、类型是直接可见的，他们的地址和值也可以直接得到。但是对于变长参数的函数，该如何获取这些信息呢？</p>","more":"<h2 id=\"2、实现原理\"><a href=\"#2、实现原理\" class=\"headerlink\" title=\"2、实现原理\"></a>2、实现原理</h2><p>函数的参数在内存中是以从右到左的顺序依次存放在栈中，最右侧的参数最先入栈，最左边的参数最后入栈，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void func(int x, float y, char z);</span><br></pre></td></tr></table></figure>\n\n<p>在发生函数调用的时候，形参 z 先进栈，然后是 y，最后是 x，最终在内存中几个变量的存放次序是 x-&gt;y-&gt;z。</p>\n<p>按照 C 标准，支持变长参数的函数声明中，必须至少在最左侧有一个固定参数。根据前文所述，形参在内存中是存放在栈中，而且顺序是连续的。因此，有了最左侧的 <code>固定参数</code> 和 <code>可变参数的类型</code>，我们就能获取到所有的可变参数的地址和值。</p>\n<h2 id=\"3、变长参数获取\"><a href=\"#3、变长参数获取\" class=\"headerlink\" title=\"3、变长参数获取\"></a>3、变长参数获取</h2><h4 id=\"3-1-获取\"><a href=\"#3-1-获取\" class=\"headerlink\" title=\"3.1 获取\"></a>3.1 获取</h4><p>在 C 语言中 <code>&lt;stdarg.h&gt;</code> 文件中定义了几个用于获取变长参数的宏：</p>\n<ul>\n<li>va_list</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef char* va_list;</span><br></pre></td></tr></table></figure>\n\n<p>va_list 是一个字符指针，可以理解为指向当前参数的一个指针，所有对变长参数的获取都需要通过这个指针进行。因此，在获取变长参数之前，需要先定义一个 va_list 类型的变量，比如叫 <code>ap</code>。</p>\n<ul>\n<li>va_start</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void va_start(va_list ap, param);</span><br></pre></td></tr></table></figure>\n\n<p><code>ap</code> 定义好了后，需要通过 va_start 初始化，让它指向变长参数列表中的第一个。该函数的第一个参数就是前面定义好的 <code>ap</code>，第二个参数则是变长参数表前面紧挨着的变量（即 <code>...</code> 之前的那个）。</p>\n<ul>\n<li>va_arg</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type va_arg(va_list ap, type);</span><br></pre></td></tr></table></figure>\n\n<p>接下来便可以通过 va_arg 来按顺序获取变长参数列表中的每一个参数。该方法第一个参数是 <code>ap</code>，第二个参数是当前要获取的变长参数的类型；该方法的返回值便是当前要获取的参数值；每调用一次以后，便把 <code>ap</code> 指向了下一个变量的位置。</p>\n<ul>\n<li>va_end</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void va_end(va_list ap);</span><br></pre></td></tr></table></figure>\n\n<p>全部参数获取结束以后，需要调用 va_end 把 <code>ap</code> 指针关掉，以保证程序健壮性。因此，通常 va_start 和 va_end 是成对出现。</p>\n<h4 id=\"3-2-内部实现\"><a href=\"#3-2-内部实现\" class=\"headerlink\" title=\"3.2 内部实现\"></a>3.2 内部实现</h4><p>在 VC++ 的 &lt;stdarg.h&gt; 里， x86 平台的上述宏定义实现如下 ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef char * va_list;</span><br><span class=\"line\">#define _INTSIZEOF(n) \\</span><br><span class=\"line\">((sizeof(n)+sizeof(int)-1)&amp;~(sizeof(int) - 1) )</span><br><span class=\"line\">#define va_start(ap,v) ( ap = (va_list)&amp;v + _INTSIZEOF(v) )</span><br><span class=\"line\">#define va_arg(ap,t) \\</span><br><span class=\"line\">( *(t *)((ap += _INTSIZEOF(t)) - _INTSIZEOF(t)) )</span><br><span class=\"line\">#define va_end(ap) ( ap = (va_list)0 )</span><br></pre></td></tr></table></figure>\n\n<p>其中，_INTSIZEOF 的实现方式时为了保证获取到的大小是 int 的整数倍。其它的宏实现就比较容易理解了。</p>\n<h2 id=\"4、变长参数应用\"><a href=\"#4、变长参数应用\" class=\"headerlink\" title=\"4、变长参数应用\"></a>4、变长参数应用</h2><p>我们可以写一个简单版的 printf 来展示该方法的实现原理和变长参数的获取方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void mineprintf(char *fmt, ...)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    va_list ap;</span><br><span class=\"line\">    char *p, *sval;</span><br><span class=\"line\">    int ival;</span><br><span class=\"line\">    double dval;</span><br><span class=\"line\">    </span><br><span class=\"line\">    va_start(ap, fmt);</span><br><span class=\"line\">    for (p = fmt; *p; p++) &#123;</span><br><span class=\"line\">        if (*p != &apos;%&apos;) &#123;</span><br><span class=\"line\">            putchar(*p);</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        switch (*++p) &#123;</span><br><span class=\"line\">            case &apos;d&apos;:</span><br><span class=\"line\">                ival = va_arg(ap, int);</span><br><span class=\"line\">                printf(&quot;%d&quot;,ival);</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case &apos;f&apos;:</span><br><span class=\"line\">                dval = va_arg(ap, double);</span><br><span class=\"line\">                printf(&quot;%f&quot;,dval);</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case &apos;s&apos;:</span><br><span class=\"line\">                for (sval = va_arg(ap, char *); *sval; sval++) &#123;</span><br><span class=\"line\">                    putchar(*sval);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            default:</span><br><span class=\"line\">                putchar(*p);</span><br><span class=\"line\">                break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    va_end(ap);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><p>C程序设计语言（第2版）K&amp;R</p>\n</li>\n<li><p><a href=\"https://stackoverflow.com/a/22643365\" target=\"_blank\" rel=\"noopener\">Implementation of __builtin_va_start(v,l)</a></p>\n</li>\n</ul>"},{"layout":"post","title":"iOS 定位权限那些事","date":"2019-09-18T02:02:48.000Z","comments":1,"keywords":"iOS, CoreLocation, 定位","_content":"\n## 一、定位权限分类\n\n#### 1、Always\n\n在 iOS 8 之前的系统中，我们不需要单独调用任何接口，默认就是，也只有 `Always` 定位权限。\n\n在 iOS 8 和之后的系统中，要想申请 `Always` 权限，需要手动调用下面的方法：\n\n```objective-c\n- (void)requestAlwaysAuthorization API_AVAILABLE(ios(8.0)) API_UNAVAILABLE(macos) API_UNAVAILABLE(tvos);\n```\n\n另外 `Always` 权限要求必须在 plist 里有对应配置（具体配置项在 `系统定位权限弹框` 一节里有介绍），否则调用该方法也不起作用。\n\n通过此方法申请的定位权限在前台、后台都能够使用定位数据，但 App 应该视情况在不需要的时候主动关闭定位，以节省电量。\n\n<!-- more -->\n\n#### 2、WhenInUse (iOS 8+ 才有)\n\niOS 8 之前的系统没有该权限，iOS 8 和之后的系统要想申请 `WhenInUse` 权限，需要手动调用下面的方法：\n\n```objective-c\n- (void)requestWhenInUseAuthorization API_AVAILABLE(ios(8.0)) API_UNAVAILABLE(macos);\n```\n\n`WhenInUse` 权限要求必须在 plist 里配置 ` NSLocationWhenInUseUsageDescription`，否则调用该方法不起作用。\n\n 通过此方法申请的定位权限，默认情况下， App 只有在前台时才能使用定位数据，如果在后台想使用定位数据，需要将 `allowsBackgroundLocationUpdates` 属性设置成 YES，后面会有说明。\n\n## 二、系统定位权限弹框\n\n#### 1、以下情况系统会弹出定位权限弹框\n\n* 定位权限状态是 `NotDetermined` 时通过 `requestWhenInUseAuthorization` 申请定位权限，弹框样式如图：\n\n  <img src=\"/images/location/1.jpeg\" style=\"zoom:50%;\" />\n\n* 定位权限状态是 `NotDetermined` 时通过 `requestAlwaysAuthorization` 申请定位权限，弹框样式如图：\n\n  <img src=\"/images/location/3.jpeg\" style=\"zoom:50%;\" />\n\n* 通过 `requestWhenInUseAuthorization` 申请并获得了 `WhenInUse` 定位权限后，`第一次` ( 注意是第一次) 通过 `requestAlwaysAuthorization` 申请定位权限，弹框样式如图：\n\n  <img src=\"/images/location/2.jpeg\" style=\"zoom:50%;\" />\n\n## 三、系统定位服务设置项中的定位权限列表\n\n#### 1、`WhenInUse` （iOS 8+）\n\n当 plist 中只设置了 `NSLocationWhenInUseUsageDescription` (iOS 8+ 才支持) 时，系统定位服务设置中的定位权限列表中就只会显示 `永不` 、`使用应用期间` 两项，如下图所示：\n\n<img src=\"/images/location/5.jpeg\" style=\"zoom:50%;\" />\n\n#### 2、`Always` \n\n不同版本的系统，在 plist 里配置 `Always` 权限的 key 不太一样，具体如下：\n\n* iOS 7 及之前\n\n`NSLocationUsageDescription`，配置后系统设置里会显示 `永不` 、`始终` 两个选项\n\n* iOS 8-10 \n\n`NSLocationAlwaysUsageDescription`， 配置后系统里会显示  `永不` 、`始终` 两个选项，如果同时也配了 `NSLocationWhenInUseUsageDescription`，则会显示  `永不` 、`使用应用期间` 、`始终`   三项\n\n* iOS 11+ \n\n`NSLocationAlwaysAndWhenInUseUsageDescription` ，配置后系统里就会显示 `永不` 、`使用应用期间` 、`始终`  三项，而无论配没配过 `NSLocationWhenInUseUsageDescription`，如下图所示：\n\n<img src=\"/images/location/6.jpeg\" style=\"zoom:50%;\" />\n\n用户可以随时在系统设置中更改每个 App 获得的定位权限。\n\n另外，不管你申请的是哪种权限，都以用户在系统设置中给你的权限为准。比如你 App 启动时通过 `requestWhenInUseAuthorization` 申请了 `WhenInUse` 权限，但用户后来到系统设置里给你改成了 `Always` 权限；哪怕你代码里下次启动时仍然调用的是 `requestWhenInUseAuthorization`  ，但你启动后可以使用的仍然是 `Always` 权限。\n\n\n\n## 四、其它重要属性\n\n## 1、pausesLocationUpdatesAutomatically\n\n```objective-c\n@property(assign, nonatomic) BOOL pausesLocationUpdatesAutomatically API_AVAILABLE(ios(6.0)) API_UNAVAILABLE(macos) API_UNAVAILABLE(watchos, tvos);\n```\n\n默认值是 YES。当值为 YES 时，如果用户位置长时间不变化，系统就会将定位停掉。系统将定位停掉以后，会通过下述回调告诉我们：\n\n```objective-c\n- (void)locationManagerDidPauseLocationUpdates:(CLLocationManager *)manager;\n```\n\n在这个回调里，我们可以开启用户区域变化的监听，当用户离开当前区域后，重新开启定位；或者也可以立即以低定位精度重启定位，当发现用户位置变化后，再以高精度启动定位。以上是两种在尽量省电的前提下使用定位的方式，一些对定位数据依赖不高的场景可以使用，但像驾车导航类的应用，还是乖乖将 `pausesLocationUpdatesAutomatically` 设置成 NO 吧。\n\n另外，当系统自动停止定位后，我们又手动重新开启定位时，系统会调用下面的回调，以告诉我们定位被恢复了：\n\n```objective-c\n- (void)locationManagerDidResumeLocationUpdates:(CLLocationManager *)manager;\n```\n\n## 2、allowsBackgroundLocationUpdates\n\n```objective-c\n@property(assign, nonatomic) BOOL allowsBackgroundLocationUpdates API_AVAILABLE(ios(9.0), watchos(4.0)) API_UNAVAILABLE(macos) API_UNAVAILABLE(tvos);\n```\n\n这是个 iOS 9 才支持的 API，默认值是 NO。\n\n* 在 iOS 7 及之前系统中，只有 `Always` 权限，前后台都能正常定位；\n\n* 到了 iOS 8 系统，如果申请的是 `WhenInUse` 权限，App 切后台后也能正常定位，只是会在屏幕顶部出现定位的提示蓝条；\n* 到了 iOS 9 及更新的系统，如果申请的是  `WhenInUse` 权限，App 切后台后默认就不能定位。当将 `allowsBackgroundLocationUpdates` 设置成 YES 后，才能在后台定位，同时在后台定位时会像 iOS 8 一样在屏幕顶部出现定位的提示蓝条；\n\n定位提示蓝条如下图所示：\n\n<img src=\"/images/location/4.jpeg\" style=\"zoom:50%;\" />\n\n## 3、showsBackgroundLocationIndicator\n\n```objective-c\n@property(assign, nonatomic) BOOL showsBackgroundLocationIndicator API_AVAILABLE(ios(11.0)) API_UNAVAILABLE(macos) API_UNAVAILABLE(watchos, tvos);\n```\n\n这是个 iOS 11 才支持，默认值为 NO，是个专门给 `Always` 权限使用的属性。\n\n前面说过， `WhenInUse` 权限当 `allowsBackgroundLocationUpdates`  为 YES，且 App 在后台使用定位时，系统会在设备顶部显示正在使用定位的蓝条。当权限为  `Always` 时，如果 `showsBackgroundLocationIndicator` 为 YES 时，那么系统就会为我们展示一个同款蓝条。\n\n## 五、关于 iOS 13\n\niOS 13 的 `CoreLocation` 做了比较大的改变，所以单独拿出来说下。\n\n#### 1、定位权限变动\n\n在 iOS 13 系统，申请 `WhenInUse` 或 `Always` 权限时，系统都会先弹出来下面的弹框让用户选择：\n\n<img src=\"/images/location/7.jpeg\" style=\"zoom:50%;\" />\n\n* 用户选择 `Allow While In Use`\n\n如果用户选择 `Allow While In Use` ，我们的 App 会获得 `WhenInUse` 权限。\n\n如果之前申请的是  `WhenInUse`  权限，那么就跟 iOS 13 之前版本的系统表现没什么区别；\n\n如果之前申请的是 ` Always` 权限，当我们的 App 在后台使用位置信息时，系统就会在未来的某个时间（目前我重现过的时机是切后台锁屏后，再解锁屏幕时）再弹出一个弹框询问用户是继续给我们的 App  `WhenInUse` 权限，还是切换成 `Always` 权限，如下图所示：\n\n<img src=\"/images/location/8.jpeg\" style=\"zoom:50%;\" />\n\n也就是说，iOS 13 中，我们没法直接向用户要 `Always` 权限了，必须要经过一个二次确认。\n\n别急，更蛋疼的还在后面。\n\n* 用户选择 `Allow Once`\n\niOS 13 提出了 `Temporary authorization` 的概念。当用户选择 `Allow Once` 后，我们的 App 就获得了 `Temporary authorization` ，也就是临时权限。该权限有以下特点：\n\n实际的权限类型是：`WhenInUse`；\n\nApp 重启后，定位权限会重新变成 `NotDetermined`，下次开启定位时再申请定位权限会重新弹框让用户确认；\n\n#### 2、系统设置中的定位权限列表\n\n如果是用 Xcode 11 编译出来的应用，在 iOS 13 的系统定位权限设置列表里会多出一个下次询问的选项：\n\n<img src=\"/images/location/10.png\" style=\"zoom:50%;\" />\n\n#### 3、定位蓝条\n\niOS 13 系统如果当前是 `WhenInUse` 权限、 `allowsBackgroundLocationUpdates` 为 YES，且应用在后台时，屏幕顶部的定位蓝条视觉调整成了下图的样式：\n\n<img src=\"/images/location/9.png\" style=\"zoom:50%;\" />","source":"_posts/2019-09-18-ios-ding-wei-quan-xian-na-xie-shi.markdown","raw":"---\nlayout: post\ntitle: \"iOS 定位权限那些事\"\ndate: 2019-09-18 10:02:48 +0800\ncomments: true\ncategories: iOS\ntags: [iOS, CoreLocation, 定位]\nkeywords: iOS, CoreLocation, 定位\n---\n\n## 一、定位权限分类\n\n#### 1、Always\n\n在 iOS 8 之前的系统中，我们不需要单独调用任何接口，默认就是，也只有 `Always` 定位权限。\n\n在 iOS 8 和之后的系统中，要想申请 `Always` 权限，需要手动调用下面的方法：\n\n```objective-c\n- (void)requestAlwaysAuthorization API_AVAILABLE(ios(8.0)) API_UNAVAILABLE(macos) API_UNAVAILABLE(tvos);\n```\n\n另外 `Always` 权限要求必须在 plist 里有对应配置（具体配置项在 `系统定位权限弹框` 一节里有介绍），否则调用该方法也不起作用。\n\n通过此方法申请的定位权限在前台、后台都能够使用定位数据，但 App 应该视情况在不需要的时候主动关闭定位，以节省电量。\n\n<!-- more -->\n\n#### 2、WhenInUse (iOS 8+ 才有)\n\niOS 8 之前的系统没有该权限，iOS 8 和之后的系统要想申请 `WhenInUse` 权限，需要手动调用下面的方法：\n\n```objective-c\n- (void)requestWhenInUseAuthorization API_AVAILABLE(ios(8.0)) API_UNAVAILABLE(macos);\n```\n\n`WhenInUse` 权限要求必须在 plist 里配置 ` NSLocationWhenInUseUsageDescription`，否则调用该方法不起作用。\n\n 通过此方法申请的定位权限，默认情况下， App 只有在前台时才能使用定位数据，如果在后台想使用定位数据，需要将 `allowsBackgroundLocationUpdates` 属性设置成 YES，后面会有说明。\n\n## 二、系统定位权限弹框\n\n#### 1、以下情况系统会弹出定位权限弹框\n\n* 定位权限状态是 `NotDetermined` 时通过 `requestWhenInUseAuthorization` 申请定位权限，弹框样式如图：\n\n  <img src=\"/images/location/1.jpeg\" style=\"zoom:50%;\" />\n\n* 定位权限状态是 `NotDetermined` 时通过 `requestAlwaysAuthorization` 申请定位权限，弹框样式如图：\n\n  <img src=\"/images/location/3.jpeg\" style=\"zoom:50%;\" />\n\n* 通过 `requestWhenInUseAuthorization` 申请并获得了 `WhenInUse` 定位权限后，`第一次` ( 注意是第一次) 通过 `requestAlwaysAuthorization` 申请定位权限，弹框样式如图：\n\n  <img src=\"/images/location/2.jpeg\" style=\"zoom:50%;\" />\n\n## 三、系统定位服务设置项中的定位权限列表\n\n#### 1、`WhenInUse` （iOS 8+）\n\n当 plist 中只设置了 `NSLocationWhenInUseUsageDescription` (iOS 8+ 才支持) 时，系统定位服务设置中的定位权限列表中就只会显示 `永不` 、`使用应用期间` 两项，如下图所示：\n\n<img src=\"/images/location/5.jpeg\" style=\"zoom:50%;\" />\n\n#### 2、`Always` \n\n不同版本的系统，在 plist 里配置 `Always` 权限的 key 不太一样，具体如下：\n\n* iOS 7 及之前\n\n`NSLocationUsageDescription`，配置后系统设置里会显示 `永不` 、`始终` 两个选项\n\n* iOS 8-10 \n\n`NSLocationAlwaysUsageDescription`， 配置后系统里会显示  `永不` 、`始终` 两个选项，如果同时也配了 `NSLocationWhenInUseUsageDescription`，则会显示  `永不` 、`使用应用期间` 、`始终`   三项\n\n* iOS 11+ \n\n`NSLocationAlwaysAndWhenInUseUsageDescription` ，配置后系统里就会显示 `永不` 、`使用应用期间` 、`始终`  三项，而无论配没配过 `NSLocationWhenInUseUsageDescription`，如下图所示：\n\n<img src=\"/images/location/6.jpeg\" style=\"zoom:50%;\" />\n\n用户可以随时在系统设置中更改每个 App 获得的定位权限。\n\n另外，不管你申请的是哪种权限，都以用户在系统设置中给你的权限为准。比如你 App 启动时通过 `requestWhenInUseAuthorization` 申请了 `WhenInUse` 权限，但用户后来到系统设置里给你改成了 `Always` 权限；哪怕你代码里下次启动时仍然调用的是 `requestWhenInUseAuthorization`  ，但你启动后可以使用的仍然是 `Always` 权限。\n\n\n\n## 四、其它重要属性\n\n## 1、pausesLocationUpdatesAutomatically\n\n```objective-c\n@property(assign, nonatomic) BOOL pausesLocationUpdatesAutomatically API_AVAILABLE(ios(6.0)) API_UNAVAILABLE(macos) API_UNAVAILABLE(watchos, tvos);\n```\n\n默认值是 YES。当值为 YES 时，如果用户位置长时间不变化，系统就会将定位停掉。系统将定位停掉以后，会通过下述回调告诉我们：\n\n```objective-c\n- (void)locationManagerDidPauseLocationUpdates:(CLLocationManager *)manager;\n```\n\n在这个回调里，我们可以开启用户区域变化的监听，当用户离开当前区域后，重新开启定位；或者也可以立即以低定位精度重启定位，当发现用户位置变化后，再以高精度启动定位。以上是两种在尽量省电的前提下使用定位的方式，一些对定位数据依赖不高的场景可以使用，但像驾车导航类的应用，还是乖乖将 `pausesLocationUpdatesAutomatically` 设置成 NO 吧。\n\n另外，当系统自动停止定位后，我们又手动重新开启定位时，系统会调用下面的回调，以告诉我们定位被恢复了：\n\n```objective-c\n- (void)locationManagerDidResumeLocationUpdates:(CLLocationManager *)manager;\n```\n\n## 2、allowsBackgroundLocationUpdates\n\n```objective-c\n@property(assign, nonatomic) BOOL allowsBackgroundLocationUpdates API_AVAILABLE(ios(9.0), watchos(4.0)) API_UNAVAILABLE(macos) API_UNAVAILABLE(tvos);\n```\n\n这是个 iOS 9 才支持的 API，默认值是 NO。\n\n* 在 iOS 7 及之前系统中，只有 `Always` 权限，前后台都能正常定位；\n\n* 到了 iOS 8 系统，如果申请的是 `WhenInUse` 权限，App 切后台后也能正常定位，只是会在屏幕顶部出现定位的提示蓝条；\n* 到了 iOS 9 及更新的系统，如果申请的是  `WhenInUse` 权限，App 切后台后默认就不能定位。当将 `allowsBackgroundLocationUpdates` 设置成 YES 后，才能在后台定位，同时在后台定位时会像 iOS 8 一样在屏幕顶部出现定位的提示蓝条；\n\n定位提示蓝条如下图所示：\n\n<img src=\"/images/location/4.jpeg\" style=\"zoom:50%;\" />\n\n## 3、showsBackgroundLocationIndicator\n\n```objective-c\n@property(assign, nonatomic) BOOL showsBackgroundLocationIndicator API_AVAILABLE(ios(11.0)) API_UNAVAILABLE(macos) API_UNAVAILABLE(watchos, tvos);\n```\n\n这是个 iOS 11 才支持，默认值为 NO，是个专门给 `Always` 权限使用的属性。\n\n前面说过， `WhenInUse` 权限当 `allowsBackgroundLocationUpdates`  为 YES，且 App 在后台使用定位时，系统会在设备顶部显示正在使用定位的蓝条。当权限为  `Always` 时，如果 `showsBackgroundLocationIndicator` 为 YES 时，那么系统就会为我们展示一个同款蓝条。\n\n## 五、关于 iOS 13\n\niOS 13 的 `CoreLocation` 做了比较大的改变，所以单独拿出来说下。\n\n#### 1、定位权限变动\n\n在 iOS 13 系统，申请 `WhenInUse` 或 `Always` 权限时，系统都会先弹出来下面的弹框让用户选择：\n\n<img src=\"/images/location/7.jpeg\" style=\"zoom:50%;\" />\n\n* 用户选择 `Allow While In Use`\n\n如果用户选择 `Allow While In Use` ，我们的 App 会获得 `WhenInUse` 权限。\n\n如果之前申请的是  `WhenInUse`  权限，那么就跟 iOS 13 之前版本的系统表现没什么区别；\n\n如果之前申请的是 ` Always` 权限，当我们的 App 在后台使用位置信息时，系统就会在未来的某个时间（目前我重现过的时机是切后台锁屏后，再解锁屏幕时）再弹出一个弹框询问用户是继续给我们的 App  `WhenInUse` 权限，还是切换成 `Always` 权限，如下图所示：\n\n<img src=\"/images/location/8.jpeg\" style=\"zoom:50%;\" />\n\n也就是说，iOS 13 中，我们没法直接向用户要 `Always` 权限了，必须要经过一个二次确认。\n\n别急，更蛋疼的还在后面。\n\n* 用户选择 `Allow Once`\n\niOS 13 提出了 `Temporary authorization` 的概念。当用户选择 `Allow Once` 后，我们的 App 就获得了 `Temporary authorization` ，也就是临时权限。该权限有以下特点：\n\n实际的权限类型是：`WhenInUse`；\n\nApp 重启后，定位权限会重新变成 `NotDetermined`，下次开启定位时再申请定位权限会重新弹框让用户确认；\n\n#### 2、系统设置中的定位权限列表\n\n如果是用 Xcode 11 编译出来的应用，在 iOS 13 的系统定位权限设置列表里会多出一个下次询问的选项：\n\n<img src=\"/images/location/10.png\" style=\"zoom:50%;\" />\n\n#### 3、定位蓝条\n\niOS 13 系统如果当前是 `WhenInUse` 权限、 `allowsBackgroundLocationUpdates` 为 YES，且应用在后台时，屏幕顶部的定位蓝条视觉调整成了下图的样式：\n\n<img src=\"/images/location/9.png\" style=\"zoom:50%;\" />","slug":"2019-09-18-ios-ding-wei-quan-xian-na-xie-shi","published":1,"updated":"2019-09-23T05:46:45.000Z","photos":[],"link":"","_id":"ck0zclidp002fqhtfbg76puli","content":"<h2 id=\"一、定位权限分类\"><a href=\"#一、定位权限分类\" class=\"headerlink\" title=\"一、定位权限分类\"></a>一、定位权限分类</h2><h4 id=\"1、Always\"><a href=\"#1、Always\" class=\"headerlink\" title=\"1、Always\"></a>1、Always</h4><p>在 iOS 8 之前的系统中，我们不需要单独调用任何接口，默认就是，也只有 <code>Always</code> 定位权限。</p>\n<p>在 iOS 8 和之后的系统中，要想申请 <code>Always</code> 权限，需要手动调用下面的方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)requestAlwaysAuthorization API_AVAILABLE(ios(8.0)) API_UNAVAILABLE(macos) API_UNAVAILABLE(tvos);</span><br></pre></td></tr></table></figure>\n\n<p>另外 <code>Always</code> 权限要求必须在 plist 里有对应配置（具体配置项在 <code>系统定位权限弹框</code> 一节里有介绍），否则调用该方法也不起作用。</p>\n<p>通过此方法申请的定位权限在前台、后台都能够使用定位数据，但 App 应该视情况在不需要的时候主动关闭定位，以节省电量。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"2、WhenInUse-iOS-8-才有\"><a href=\"#2、WhenInUse-iOS-8-才有\" class=\"headerlink\" title=\"2、WhenInUse (iOS 8+ 才有)\"></a>2、WhenInUse (iOS 8+ 才有)</h4><p>iOS 8 之前的系统没有该权限，iOS 8 和之后的系统要想申请 <code>WhenInUse</code> 权限，需要手动调用下面的方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)requestWhenInUseAuthorization API_AVAILABLE(ios(8.0)) API_UNAVAILABLE(macos);</span><br></pre></td></tr></table></figure>\n\n<p><code>WhenInUse</code> 权限要求必须在 plist 里配置 <code>NSLocationWhenInUseUsageDescription</code>，否则调用该方法不起作用。</p>\n<p> 通过此方法申请的定位权限，默认情况下， App 只有在前台时才能使用定位数据，如果在后台想使用定位数据，需要将 <code>allowsBackgroundLocationUpdates</code> 属性设置成 YES，后面会有说明。</p>\n<h2 id=\"二、系统定位权限弹框\"><a href=\"#二、系统定位权限弹框\" class=\"headerlink\" title=\"二、系统定位权限弹框\"></a>二、系统定位权限弹框</h2><h4 id=\"1、以下情况系统会弹出定位权限弹框\"><a href=\"#1、以下情况系统会弹出定位权限弹框\" class=\"headerlink\" title=\"1、以下情况系统会弹出定位权限弹框\"></a>1、以下情况系统会弹出定位权限弹框</h4><ul>\n<li><p>定位权限状态是 <code>NotDetermined</code> 时通过 <code>requestWhenInUseAuthorization</code> 申请定位权限，弹框样式如图：</p>\n<img src=\"/images/location/1.jpeg\" style=\"zoom:50%;\">\n</li>\n<li><p>定位权限状态是 <code>NotDetermined</code> 时通过 <code>requestAlwaysAuthorization</code> 申请定位权限，弹框样式如图：</p>\n<img src=\"/images/location/3.jpeg\" style=\"zoom:50%;\">\n</li>\n<li><p>通过 <code>requestWhenInUseAuthorization</code> 申请并获得了 <code>WhenInUse</code> 定位权限后，<code>第一次</code> ( 注意是第一次) 通过 <code>requestAlwaysAuthorization</code> 申请定位权限，弹框样式如图：</p>\n<img src=\"/images/location/2.jpeg\" style=\"zoom:50%;\">\n\n</li>\n</ul>\n<h2 id=\"三、系统定位服务设置项中的定位权限列表\"><a href=\"#三、系统定位服务设置项中的定位权限列表\" class=\"headerlink\" title=\"三、系统定位服务设置项中的定位权限列表\"></a>三、系统定位服务设置项中的定位权限列表</h2><h4 id=\"1、WhenInUse-（iOS-8-）\"><a href=\"#1、WhenInUse-（iOS-8-）\" class=\"headerlink\" title=\"1、WhenInUse （iOS 8+）\"></a>1、<code>WhenInUse</code> （iOS 8+）</h4><p>当 plist 中只设置了 <code>NSLocationWhenInUseUsageDescription</code> (iOS 8+ 才支持) 时，系统定位服务设置中的定位权限列表中就只会显示 <code>永不</code> 、<code>使用应用期间</code> 两项，如下图所示：</p>\n<img src=\"/images/location/5.jpeg\" style=\"zoom:50%;\">\n\n<h4 id=\"2、Always\"><a href=\"#2、Always\" class=\"headerlink\" title=\"2、Always\"></a>2、<code>Always</code></h4><p>不同版本的系统，在 plist 里配置 <code>Always</code> 权限的 key 不太一样，具体如下：</p>\n<ul>\n<li>iOS 7 及之前</li>\n</ul>\n<p><code>NSLocationUsageDescription</code>，配置后系统设置里会显示 <code>永不</code> 、<code>始终</code> 两个选项</p>\n<ul>\n<li>iOS 8-10 </li>\n</ul>\n<p><code>NSLocationAlwaysUsageDescription</code>， 配置后系统里会显示  <code>永不</code> 、<code>始终</code> 两个选项，如果同时也配了 <code>NSLocationWhenInUseUsageDescription</code>，则会显示  <code>永不</code> 、<code>使用应用期间</code> 、<code>始终</code>   三项</p>\n<ul>\n<li>iOS 11+ </li>\n</ul>\n<p><code>NSLocationAlwaysAndWhenInUseUsageDescription</code> ，配置后系统里就会显示 <code>永不</code> 、<code>使用应用期间</code> 、<code>始终</code>  三项，而无论配没配过 <code>NSLocationWhenInUseUsageDescription</code>，如下图所示：</p>\n<img src=\"/images/location/6.jpeg\" style=\"zoom:50%;\">\n\n<p>用户可以随时在系统设置中更改每个 App 获得的定位权限。</p>\n<p>另外，不管你申请的是哪种权限，都以用户在系统设置中给你的权限为准。比如你 App 启动时通过 <code>requestWhenInUseAuthorization</code> 申请了 <code>WhenInUse</code> 权限，但用户后来到系统设置里给你改成了 <code>Always</code> 权限；哪怕你代码里下次启动时仍然调用的是 <code>requestWhenInUseAuthorization</code>  ，但你启动后可以使用的仍然是 <code>Always</code> 权限。</p>\n<h2 id=\"四、其它重要属性\"><a href=\"#四、其它重要属性\" class=\"headerlink\" title=\"四、其它重要属性\"></a>四、其它重要属性</h2><h2 id=\"1、pausesLocationUpdatesAutomatically\"><a href=\"#1、pausesLocationUpdatesAutomatically\" class=\"headerlink\" title=\"1、pausesLocationUpdatesAutomatically\"></a>1、pausesLocationUpdatesAutomatically</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property(assign, nonatomic) BOOL pausesLocationUpdatesAutomatically API_AVAILABLE(ios(6.0)) API_UNAVAILABLE(macos) API_UNAVAILABLE(watchos, tvos);</span><br></pre></td></tr></table></figure>\n\n<p>默认值是 YES。当值为 YES 时，如果用户位置长时间不变化，系统就会将定位停掉。系统将定位停掉以后，会通过下述回调告诉我们：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)locationManagerDidPauseLocationUpdates:(CLLocationManager *)manager;</span><br></pre></td></tr></table></figure>\n\n<p>在这个回调里，我们可以开启用户区域变化的监听，当用户离开当前区域后，重新开启定位；或者也可以立即以低定位精度重启定位，当发现用户位置变化后，再以高精度启动定位。以上是两种在尽量省电的前提下使用定位的方式，一些对定位数据依赖不高的场景可以使用，但像驾车导航类的应用，还是乖乖将 <code>pausesLocationUpdatesAutomatically</code> 设置成 NO 吧。</p>\n<p>另外，当系统自动停止定位后，我们又手动重新开启定位时，系统会调用下面的回调，以告诉我们定位被恢复了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)locationManagerDidResumeLocationUpdates:(CLLocationManager *)manager;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、allowsBackgroundLocationUpdates\"><a href=\"#2、allowsBackgroundLocationUpdates\" class=\"headerlink\" title=\"2、allowsBackgroundLocationUpdates\"></a>2、allowsBackgroundLocationUpdates</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property(assign, nonatomic) BOOL allowsBackgroundLocationUpdates API_AVAILABLE(ios(9.0), watchos(4.0)) API_UNAVAILABLE(macos) API_UNAVAILABLE(tvos);</span><br></pre></td></tr></table></figure>\n\n<p>这是个 iOS 9 才支持的 API，默认值是 NO。</p>\n<ul>\n<li><p>在 iOS 7 及之前系统中，只有 <code>Always</code> 权限，前后台都能正常定位；</p>\n</li>\n<li><p>到了 iOS 8 系统，如果申请的是 <code>WhenInUse</code> 权限，App 切后台后也能正常定位，只是会在屏幕顶部出现定位的提示蓝条；</p>\n</li>\n<li><p>到了 iOS 9 及更新的系统，如果申请的是  <code>WhenInUse</code> 权限，App 切后台后默认就不能定位。当将 <code>allowsBackgroundLocationUpdates</code> 设置成 YES 后，才能在后台定位，同时在后台定位时会像 iOS 8 一样在屏幕顶部出现定位的提示蓝条；</p>\n</li>\n</ul>\n<p>定位提示蓝条如下图所示：</p>\n<img src=\"/images/location/4.jpeg\" style=\"zoom:50%;\">\n\n<h2 id=\"3、showsBackgroundLocationIndicator\"><a href=\"#3、showsBackgroundLocationIndicator\" class=\"headerlink\" title=\"3、showsBackgroundLocationIndicator\"></a>3、showsBackgroundLocationIndicator</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property(assign, nonatomic) BOOL showsBackgroundLocationIndicator API_AVAILABLE(ios(11.0)) API_UNAVAILABLE(macos) API_UNAVAILABLE(watchos, tvos);</span><br></pre></td></tr></table></figure>\n\n<p>这是个 iOS 11 才支持，默认值为 NO，是个专门给 <code>Always</code> 权限使用的属性。</p>\n<p>前面说过， <code>WhenInUse</code> 权限当 <code>allowsBackgroundLocationUpdates</code>  为 YES，且 App 在后台使用定位时，系统会在设备顶部显示正在使用定位的蓝条。当权限为  <code>Always</code> 时，如果 <code>showsBackgroundLocationIndicator</code> 为 YES 时，那么系统就会为我们展示一个同款蓝条。</p>\n<h2 id=\"五、关于-iOS-13\"><a href=\"#五、关于-iOS-13\" class=\"headerlink\" title=\"五、关于 iOS 13\"></a>五、关于 iOS 13</h2><p>iOS 13 的 <code>CoreLocation</code> 做了比较大的改变，所以单独拿出来说下。</p>\n<h4 id=\"1、定位权限变动\"><a href=\"#1、定位权限变动\" class=\"headerlink\" title=\"1、定位权限变动\"></a>1、定位权限变动</h4><p>在 iOS 13 系统，申请 <code>WhenInUse</code> 或 <code>Always</code> 权限时，系统都会先弹出来下面的弹框让用户选择：</p>\n<img src=\"/images/location/7.jpeg\" style=\"zoom:50%;\">\n\n<ul>\n<li>用户选择 <code>Allow While In Use</code></li>\n</ul>\n<p>如果用户选择 <code>Allow While In Use</code> ，我们的 App 会获得 <code>WhenInUse</code> 权限。</p>\n<p>如果之前申请的是  <code>WhenInUse</code>  权限，那么就跟 iOS 13 之前版本的系统表现没什么区别；</p>\n<p>如果之前申请的是 <code>Always</code> 权限，当我们的 App 在后台使用位置信息时，系统就会在未来的某个时间（目前我重现过的时机是切后台锁屏后，再解锁屏幕时）再弹出一个弹框询问用户是继续给我们的 App  <code>WhenInUse</code> 权限，还是切换成 <code>Always</code> 权限，如下图所示：</p>\n<img src=\"/images/location/8.jpeg\" style=\"zoom:50%;\">\n\n<p>也就是说，iOS 13 中，我们没法直接向用户要 <code>Always</code> 权限了，必须要经过一个二次确认。</p>\n<p>别急，更蛋疼的还在后面。</p>\n<ul>\n<li>用户选择 <code>Allow Once</code></li>\n</ul>\n<p>iOS 13 提出了 <code>Temporary authorization</code> 的概念。当用户选择 <code>Allow Once</code> 后，我们的 App 就获得了 <code>Temporary authorization</code> ，也就是临时权限。该权限有以下特点：</p>\n<p>实际的权限类型是：<code>WhenInUse</code>；</p>\n<p>App 重启后，定位权限会重新变成 <code>NotDetermined</code>，下次开启定位时再申请定位权限会重新弹框让用户确认；</p>\n<h4 id=\"2、系统设置中的定位权限列表\"><a href=\"#2、系统设置中的定位权限列表\" class=\"headerlink\" title=\"2、系统设置中的定位权限列表\"></a>2、系统设置中的定位权限列表</h4><p>如果是用 Xcode 11 编译出来的应用，在 iOS 13 的系统定位权限设置列表里会多出一个下次询问的选项：</p>\n<img src=\"/images/location/10.png\" style=\"zoom:50%;\">\n\n<h4 id=\"3、定位蓝条\"><a href=\"#3、定位蓝条\" class=\"headerlink\" title=\"3、定位蓝条\"></a>3、定位蓝条</h4><p>iOS 13 系统如果当前是 <code>WhenInUse</code> 权限、 <code>allowsBackgroundLocationUpdates</code> 为 YES，且应用在后台时，屏幕顶部的定位蓝条视觉调整成了下图的样式：</p>\n<img src=\"/images/location/9.png\" style=\"zoom:50%;\">","site":{"data":{}},"excerpt":"<h2 id=\"一、定位权限分类\"><a href=\"#一、定位权限分类\" class=\"headerlink\" title=\"一、定位权限分类\"></a>一、定位权限分类</h2><h4 id=\"1、Always\"><a href=\"#1、Always\" class=\"headerlink\" title=\"1、Always\"></a>1、Always</h4><p>在 iOS 8 之前的系统中，我们不需要单独调用任何接口，默认就是，也只有 <code>Always</code> 定位权限。</p>\n<p>在 iOS 8 和之后的系统中，要想申请 <code>Always</code> 权限，需要手动调用下面的方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)requestAlwaysAuthorization API_AVAILABLE(ios(8.0)) API_UNAVAILABLE(macos) API_UNAVAILABLE(tvos);</span><br></pre></td></tr></table></figure>\n\n<p>另外 <code>Always</code> 权限要求必须在 plist 里有对应配置（具体配置项在 <code>系统定位权限弹框</code> 一节里有介绍），否则调用该方法也不起作用。</p>\n<p>通过此方法申请的定位权限在前台、后台都能够使用定位数据，但 App 应该视情况在不需要的时候主动关闭定位，以节省电量。</p>","more":"<h4 id=\"2、WhenInUse-iOS-8-才有\"><a href=\"#2、WhenInUse-iOS-8-才有\" class=\"headerlink\" title=\"2、WhenInUse (iOS 8+ 才有)\"></a>2、WhenInUse (iOS 8+ 才有)</h4><p>iOS 8 之前的系统没有该权限，iOS 8 和之后的系统要想申请 <code>WhenInUse</code> 权限，需要手动调用下面的方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)requestWhenInUseAuthorization API_AVAILABLE(ios(8.0)) API_UNAVAILABLE(macos);</span><br></pre></td></tr></table></figure>\n\n<p><code>WhenInUse</code> 权限要求必须在 plist 里配置 <code>NSLocationWhenInUseUsageDescription</code>，否则调用该方法不起作用。</p>\n<p> 通过此方法申请的定位权限，默认情况下， App 只有在前台时才能使用定位数据，如果在后台想使用定位数据，需要将 <code>allowsBackgroundLocationUpdates</code> 属性设置成 YES，后面会有说明。</p>\n<h2 id=\"二、系统定位权限弹框\"><a href=\"#二、系统定位权限弹框\" class=\"headerlink\" title=\"二、系统定位权限弹框\"></a>二、系统定位权限弹框</h2><h4 id=\"1、以下情况系统会弹出定位权限弹框\"><a href=\"#1、以下情况系统会弹出定位权限弹框\" class=\"headerlink\" title=\"1、以下情况系统会弹出定位权限弹框\"></a>1、以下情况系统会弹出定位权限弹框</h4><ul>\n<li><p>定位权限状态是 <code>NotDetermined</code> 时通过 <code>requestWhenInUseAuthorization</code> 申请定位权限，弹框样式如图：</p>\n<img src=\"/images/location/1.jpeg\" style=\"zoom:50%;\">\n</li>\n<li><p>定位权限状态是 <code>NotDetermined</code> 时通过 <code>requestAlwaysAuthorization</code> 申请定位权限，弹框样式如图：</p>\n<img src=\"/images/location/3.jpeg\" style=\"zoom:50%;\">\n</li>\n<li><p>通过 <code>requestWhenInUseAuthorization</code> 申请并获得了 <code>WhenInUse</code> 定位权限后，<code>第一次</code> ( 注意是第一次) 通过 <code>requestAlwaysAuthorization</code> 申请定位权限，弹框样式如图：</p>\n<img src=\"/images/location/2.jpeg\" style=\"zoom:50%;\">\n\n</li>\n</ul>\n<h2 id=\"三、系统定位服务设置项中的定位权限列表\"><a href=\"#三、系统定位服务设置项中的定位权限列表\" class=\"headerlink\" title=\"三、系统定位服务设置项中的定位权限列表\"></a>三、系统定位服务设置项中的定位权限列表</h2><h4 id=\"1、WhenInUse-（iOS-8-）\"><a href=\"#1、WhenInUse-（iOS-8-）\" class=\"headerlink\" title=\"1、WhenInUse （iOS 8+）\"></a>1、<code>WhenInUse</code> （iOS 8+）</h4><p>当 plist 中只设置了 <code>NSLocationWhenInUseUsageDescription</code> (iOS 8+ 才支持) 时，系统定位服务设置中的定位权限列表中就只会显示 <code>永不</code> 、<code>使用应用期间</code> 两项，如下图所示：</p>\n<img src=\"/images/location/5.jpeg\" style=\"zoom:50%;\">\n\n<h4 id=\"2、Always\"><a href=\"#2、Always\" class=\"headerlink\" title=\"2、Always\"></a>2、<code>Always</code></h4><p>不同版本的系统，在 plist 里配置 <code>Always</code> 权限的 key 不太一样，具体如下：</p>\n<ul>\n<li>iOS 7 及之前</li>\n</ul>\n<p><code>NSLocationUsageDescription</code>，配置后系统设置里会显示 <code>永不</code> 、<code>始终</code> 两个选项</p>\n<ul>\n<li>iOS 8-10 </li>\n</ul>\n<p><code>NSLocationAlwaysUsageDescription</code>， 配置后系统里会显示  <code>永不</code> 、<code>始终</code> 两个选项，如果同时也配了 <code>NSLocationWhenInUseUsageDescription</code>，则会显示  <code>永不</code> 、<code>使用应用期间</code> 、<code>始终</code>   三项</p>\n<ul>\n<li>iOS 11+ </li>\n</ul>\n<p><code>NSLocationAlwaysAndWhenInUseUsageDescription</code> ，配置后系统里就会显示 <code>永不</code> 、<code>使用应用期间</code> 、<code>始终</code>  三项，而无论配没配过 <code>NSLocationWhenInUseUsageDescription</code>，如下图所示：</p>\n<img src=\"/images/location/6.jpeg\" style=\"zoom:50%;\">\n\n<p>用户可以随时在系统设置中更改每个 App 获得的定位权限。</p>\n<p>另外，不管你申请的是哪种权限，都以用户在系统设置中给你的权限为准。比如你 App 启动时通过 <code>requestWhenInUseAuthorization</code> 申请了 <code>WhenInUse</code> 权限，但用户后来到系统设置里给你改成了 <code>Always</code> 权限；哪怕你代码里下次启动时仍然调用的是 <code>requestWhenInUseAuthorization</code>  ，但你启动后可以使用的仍然是 <code>Always</code> 权限。</p>\n<h2 id=\"四、其它重要属性\"><a href=\"#四、其它重要属性\" class=\"headerlink\" title=\"四、其它重要属性\"></a>四、其它重要属性</h2><h2 id=\"1、pausesLocationUpdatesAutomatically\"><a href=\"#1、pausesLocationUpdatesAutomatically\" class=\"headerlink\" title=\"1、pausesLocationUpdatesAutomatically\"></a>1、pausesLocationUpdatesAutomatically</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property(assign, nonatomic) BOOL pausesLocationUpdatesAutomatically API_AVAILABLE(ios(6.0)) API_UNAVAILABLE(macos) API_UNAVAILABLE(watchos, tvos);</span><br></pre></td></tr></table></figure>\n\n<p>默认值是 YES。当值为 YES 时，如果用户位置长时间不变化，系统就会将定位停掉。系统将定位停掉以后，会通过下述回调告诉我们：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)locationManagerDidPauseLocationUpdates:(CLLocationManager *)manager;</span><br></pre></td></tr></table></figure>\n\n<p>在这个回调里，我们可以开启用户区域变化的监听，当用户离开当前区域后，重新开启定位；或者也可以立即以低定位精度重启定位，当发现用户位置变化后，再以高精度启动定位。以上是两种在尽量省电的前提下使用定位的方式，一些对定位数据依赖不高的场景可以使用，但像驾车导航类的应用，还是乖乖将 <code>pausesLocationUpdatesAutomatically</code> 设置成 NO 吧。</p>\n<p>另外，当系统自动停止定位后，我们又手动重新开启定位时，系统会调用下面的回调，以告诉我们定位被恢复了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)locationManagerDidResumeLocationUpdates:(CLLocationManager *)manager;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、allowsBackgroundLocationUpdates\"><a href=\"#2、allowsBackgroundLocationUpdates\" class=\"headerlink\" title=\"2、allowsBackgroundLocationUpdates\"></a>2、allowsBackgroundLocationUpdates</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property(assign, nonatomic) BOOL allowsBackgroundLocationUpdates API_AVAILABLE(ios(9.0), watchos(4.0)) API_UNAVAILABLE(macos) API_UNAVAILABLE(tvos);</span><br></pre></td></tr></table></figure>\n\n<p>这是个 iOS 9 才支持的 API，默认值是 NO。</p>\n<ul>\n<li><p>在 iOS 7 及之前系统中，只有 <code>Always</code> 权限，前后台都能正常定位；</p>\n</li>\n<li><p>到了 iOS 8 系统，如果申请的是 <code>WhenInUse</code> 权限，App 切后台后也能正常定位，只是会在屏幕顶部出现定位的提示蓝条；</p>\n</li>\n<li><p>到了 iOS 9 及更新的系统，如果申请的是  <code>WhenInUse</code> 权限，App 切后台后默认就不能定位。当将 <code>allowsBackgroundLocationUpdates</code> 设置成 YES 后，才能在后台定位，同时在后台定位时会像 iOS 8 一样在屏幕顶部出现定位的提示蓝条；</p>\n</li>\n</ul>\n<p>定位提示蓝条如下图所示：</p>\n<img src=\"/images/location/4.jpeg\" style=\"zoom:50%;\">\n\n<h2 id=\"3、showsBackgroundLocationIndicator\"><a href=\"#3、showsBackgroundLocationIndicator\" class=\"headerlink\" title=\"3、showsBackgroundLocationIndicator\"></a>3、showsBackgroundLocationIndicator</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property(assign, nonatomic) BOOL showsBackgroundLocationIndicator API_AVAILABLE(ios(11.0)) API_UNAVAILABLE(macos) API_UNAVAILABLE(watchos, tvos);</span><br></pre></td></tr></table></figure>\n\n<p>这是个 iOS 11 才支持，默认值为 NO，是个专门给 <code>Always</code> 权限使用的属性。</p>\n<p>前面说过， <code>WhenInUse</code> 权限当 <code>allowsBackgroundLocationUpdates</code>  为 YES，且 App 在后台使用定位时，系统会在设备顶部显示正在使用定位的蓝条。当权限为  <code>Always</code> 时，如果 <code>showsBackgroundLocationIndicator</code> 为 YES 时，那么系统就会为我们展示一个同款蓝条。</p>\n<h2 id=\"五、关于-iOS-13\"><a href=\"#五、关于-iOS-13\" class=\"headerlink\" title=\"五、关于 iOS 13\"></a>五、关于 iOS 13</h2><p>iOS 13 的 <code>CoreLocation</code> 做了比较大的改变，所以单独拿出来说下。</p>\n<h4 id=\"1、定位权限变动\"><a href=\"#1、定位权限变动\" class=\"headerlink\" title=\"1、定位权限变动\"></a>1、定位权限变动</h4><p>在 iOS 13 系统，申请 <code>WhenInUse</code> 或 <code>Always</code> 权限时，系统都会先弹出来下面的弹框让用户选择：</p>\n<img src=\"/images/location/7.jpeg\" style=\"zoom:50%;\">\n\n<ul>\n<li>用户选择 <code>Allow While In Use</code></li>\n</ul>\n<p>如果用户选择 <code>Allow While In Use</code> ，我们的 App 会获得 <code>WhenInUse</code> 权限。</p>\n<p>如果之前申请的是  <code>WhenInUse</code>  权限，那么就跟 iOS 13 之前版本的系统表现没什么区别；</p>\n<p>如果之前申请的是 <code>Always</code> 权限，当我们的 App 在后台使用位置信息时，系统就会在未来的某个时间（目前我重现过的时机是切后台锁屏后，再解锁屏幕时）再弹出一个弹框询问用户是继续给我们的 App  <code>WhenInUse</code> 权限，还是切换成 <code>Always</code> 权限，如下图所示：</p>\n<img src=\"/images/location/8.jpeg\" style=\"zoom:50%;\">\n\n<p>也就是说，iOS 13 中，我们没法直接向用户要 <code>Always</code> 权限了，必须要经过一个二次确认。</p>\n<p>别急，更蛋疼的还在后面。</p>\n<ul>\n<li>用户选择 <code>Allow Once</code></li>\n</ul>\n<p>iOS 13 提出了 <code>Temporary authorization</code> 的概念。当用户选择 <code>Allow Once</code> 后，我们的 App 就获得了 <code>Temporary authorization</code> ，也就是临时权限。该权限有以下特点：</p>\n<p>实际的权限类型是：<code>WhenInUse</code>；</p>\n<p>App 重启后，定位权限会重新变成 <code>NotDetermined</code>，下次开启定位时再申请定位权限会重新弹框让用户确认；</p>\n<h4 id=\"2、系统设置中的定位权限列表\"><a href=\"#2、系统设置中的定位权限列表\" class=\"headerlink\" title=\"2、系统设置中的定位权限列表\"></a>2、系统设置中的定位权限列表</h4><p>如果是用 Xcode 11 编译出来的应用，在 iOS 13 的系统定位权限设置列表里会多出一个下次询问的选项：</p>\n<img src=\"/images/location/10.png\" style=\"zoom:50%;\">\n\n<h4 id=\"3、定位蓝条\"><a href=\"#3、定位蓝条\" class=\"headerlink\" title=\"3、定位蓝条\"></a>3、定位蓝条</h4><p>iOS 13 系统如果当前是 <code>WhenInUse</code> 权限、 <code>allowsBackgroundLocationUpdates</code> 为 YES，且应用在后台时，屏幕顶部的定位蓝条视觉调整成了下图的样式：</p>\n<img src=\"/images/location/9.png\" style=\"zoom:50%;\">"}],"PostAsset":[],"PostCategory":[{"post_id":"ck0zcli6w0000qhtfn94t2938","category_id":"ck0zclic60002qhtfqq210bdv","_id":"ck0zclicd000aqhtf11p3mmkh"},{"post_id":"ck0zclic20001qhtf711x6j6u","category_id":"ck0zclic60002qhtfqq210bdv","_id":"ck0zclice000dqhtfv80wor7e"},{"post_id":"ck0zclic80004qhtfo3wep8j6","category_id":"ck0zclicd0009qhtf31y8inrm","_id":"ck0zclicf000hqhtfi9018kzr"},{"post_id":"ck0zclic90005qhtfcest0rel","category_id":"ck0zclice000fqhtfncpwmlzr","_id":"ck0zclicf000jqhtf5oi0d36k"},{"post_id":"ck0zclid60013qhtfo0cyq4sn","category_id":"ck0zclid80015qhtfdqf9gbna","_id":"ck0zclidd001eqhtf6pflpc9l"},{"post_id":"ck0zclid70014qhtfz65z4w6g","category_id":"ck0zclidb001aqhtfds6a2jj3","_id":"ck0zclidg001lqhtfy1zpnnb7"},{"post_id":"ck0zclidd001dqhtf5zq925ep","category_id":"ck0zclidb001aqhtfds6a2jj3","_id":"ck0zclidh001pqhtf2jspdyjm"},{"post_id":"ck0zclide001hqhtfafaki9bz","category_id":"ck0zclidb001aqhtfds6a2jj3","_id":"ck0zclidh001rqhtf1wekvj2d"},{"post_id":"ck0zclid80017qhtfxlvmo4xn","category_id":"ck0zclidd001fqhtfxeoq7p2o","_id":"ck0zclidj001vqhtfo4guqnp8"},{"post_id":"ck0zclidf001jqhtfnfks0oe2","category_id":"ck0zclidb001aqhtfds6a2jj3","_id":"ck0zclidj001yqhtfjjf8alkj"},{"post_id":"ck0zclidg001oqhtf58d2kfoh","category_id":"ck0zclidb001aqhtfds6a2jj3","_id":"ck0zclidl0023qhtfsmz7kclp"},{"post_id":"ck0zclid90018qhtft93p0jz5","category_id":"ck0zclidg001mqhtf95g96udo","_id":"ck0zclidm0026qhtf1hbxafzn"},{"post_id":"ck0zclidh001qqhtfvh91x3fw","category_id":"ck0zclidb001aqhtfds6a2jj3","_id":"ck0zclidn0028qhtfjy6vmimh"},{"post_id":"ck0zclidi001uqhtfiikh5w1v","category_id":"ck0zclidb001aqhtfds6a2jj3","_id":"ck0zclido002bqhtfcir7ld36"},{"post_id":"ck0zclida0019qhtfgvi7r6dw","category_id":"ck0zclidb001aqhtfds6a2jj3","_id":"ck0zclidp002dqhtfn1kj76o5"},{"post_id":"ck0zclidj001xqhtfg8se94ru","category_id":"ck0zclidb001aqhtfds6a2jj3","_id":"ck0zclidq002gqhtfsamuhza5"},{"post_id":"ck0zclidk0021qhtfz8p7rw48","category_id":"ck0zclidb001aqhtfds6a2jj3","_id":"ck0zclidq002jqhtf387frh8n"},{"post_id":"ck0zclidc001cqhtf3kc5k9es","category_id":"ck0zclidg001mqhtf95g96udo","_id":"ck0zclidq002mqhtfaho5zb7r"},{"post_id":"ck0zclidl0025qhtfrpuqrw34","category_id":"ck0zclidb001aqhtfds6a2jj3","_id":"ck0zclidr002oqhtfe98urd28"},{"post_id":"ck0zclidn002aqhtfg1zq33p7","category_id":"ck0zclidb001aqhtfds6a2jj3","_id":"ck0zclidr002qqhtfrz7g5g4c"},{"post_id":"ck0zclidp002fqhtfbg76puli","category_id":"ck0zclidb001aqhtfds6a2jj3","_id":"ck0zclidr002rqhtfootiq3ed"},{"post_id":"ck0zclido002cqhtfbjevv4eo","category_id":"ck0zclidq002iqhtf1ke62sh9","_id":"ck0zclidr002sqhtf3bzjnh1l"}],"PostTag":[{"post_id":"ck0zcli6w0000qhtfn94t2938","tag_id":"ck0zclic80003qhtf53id8cpz","_id":"ck0zclicd000cqhtfwdosgg5r"},{"post_id":"ck0zcli6w0000qhtfn94t2938","tag_id":"ck0zclicb0008qhtf4stjoua9","_id":"ck0zclice000eqhtfbwn3touu"},{"post_id":"ck0zclic20001qhtf711x6j6u","tag_id":"ck0zclic80003qhtf53id8cpz","_id":"ck0zclicg000lqhtfqxwieeeq"},{"post_id":"ck0zclic20001qhtf711x6j6u","tag_id":"ck0zclice000gqhtfp3104fmq","_id":"ck0zclicg000mqhtfi974clx1"},{"post_id":"ck0zclic20001qhtf711x6j6u","tag_id":"ck0zclicf000iqhtfjdof98u8","_id":"ck0zclich000oqhtfh80lhu2c"},{"post_id":"ck0zclic80004qhtfo3wep8j6","tag_id":"ck0zclic80003qhtf53id8cpz","_id":"ck0zclick000tqhtf652e9tgl"},{"post_id":"ck0zclic80004qhtfo3wep8j6","tag_id":"ck0zclicb0008qhtf4stjoua9","_id":"ck0zclick000uqhtf59vd6twb"},{"post_id":"ck0zclic80004qhtfo3wep8j6","tag_id":"ck0zclich000pqhtf2u8its0t","_id":"ck0zclick000wqhtf3e5lvsn2"},{"post_id":"ck0zclic80004qhtfo3wep8j6","tag_id":"ck0zclici000qqhtfwkq0ztr3","_id":"ck0zclicl000xqhtfxzn8xten"},{"post_id":"ck0zclic80004qhtfo3wep8j6","tag_id":"ck0zclicj000rqhtfvh7ynax2","_id":"ck0zclicl000zqhtfbbf7jg6q"},{"post_id":"ck0zclic90005qhtfcest0rel","tag_id":"ck0zclicj000sqhtfzsix9ynd","_id":"ck0zclicm0010qhtfx2mbqr2u"},{"post_id":"ck0zclic90005qhtfcest0rel","tag_id":"ck0zclick000vqhtfyuvsmstx","_id":"ck0zclicm0011qhtfuq3dd95k"},{"post_id":"ck0zclic90005qhtfcest0rel","tag_id":"ck0zclicl000yqhtf6gtqf86v","_id":"ck0zclicm0012qhtfjgqfir4x"},{"post_id":"ck0zclid60013qhtfo0cyq4sn","tag_id":"ck0zclid80016qhtfuro5iceq","_id":"ck0zclide001iqhtfkkmazrx5"},{"post_id":"ck0zclid60013qhtfo0cyq4sn","tag_id":"ck0zclidb001bqhtf8gf1v8wt","_id":"ck0zclidf001kqhtfrbgm0rns"},{"post_id":"ck0zclid70014qhtfz65z4w6g","tag_id":"ck0zclicj000rqhtfvh7ynax2","_id":"ck0zclidj001wqhtf98kx38nw"},{"post_id":"ck0zclid70014qhtfz65z4w6g","tag_id":"ck0zclidd001gqhtftoyzo5rx","_id":"ck0zclidj001zqhtflgmt0242"},{"post_id":"ck0zclid70014qhtfz65z4w6g","tag_id":"ck0zclidg001nqhtfxcyztor8","_id":"ck0zclidl0024qhtf9a6nuxi3"},{"post_id":"ck0zclid80017qhtfxlvmo4xn","tag_id":"ck0zclidi001tqhtfq7nojifz","_id":"ck0zclidq002hqhtf4vev5h0e"},{"post_id":"ck0zclid80017qhtfxlvmo4xn","tag_id":"ck0zclidk0022qhtfbgb91tgt","_id":"ck0zclidq002kqhtftc616rji"},{"post_id":"ck0zclid80017qhtfxlvmo4xn","tag_id":"ck0zclidn0029qhtf1wjya4y3","_id":"ck0zclidr002nqhtf7a3370my"},{"post_id":"ck0zclid90018qhtft93p0jz5","tag_id":"ck0zclidp002eqhtf46n5tuyf","_id":"ck0zclidr002uqhtfqhxr06xx"},{"post_id":"ck0zclid90018qhtft93p0jz5","tag_id":"ck0zclicj000rqhtfvh7ynax2","_id":"ck0zclidr002vqhtfl61846yf"},{"post_id":"ck0zclid90018qhtft93p0jz5","tag_id":"ck0zclidq002lqhtfh4dbmcsg","_id":"ck0zclids002xqhtf8zbifldl"},{"post_id":"ck0zclid90018qhtft93p0jz5","tag_id":"ck0zclidr002pqhtfehghxp6j","_id":"ck0zclids002yqhtf0op70omh"},{"post_id":"ck0zclida0019qhtfgvi7r6dw","tag_id":"ck0zclidr002tqhtf3bzzg5lw","_id":"ck0zclids0032qhtfa8qyl73g"},{"post_id":"ck0zclida0019qhtfgvi7r6dw","tag_id":"ck0zclicj000rqhtfvh7ynax2","_id":"ck0zclids0033qhtf4rfuoykh"},{"post_id":"ck0zclida0019qhtfgvi7r6dw","tag_id":"ck0zclidr002wqhtfxf6zgnsz","_id":"ck0zclidt0035qhtfv9y0us29"},{"post_id":"ck0zclida0019qhtfgvi7r6dw","tag_id":"ck0zclids002zqhtfbvs9260j","_id":"ck0zclidt0036qhtf8ryrc73l"},{"post_id":"ck0zclida0019qhtfgvi7r6dw","tag_id":"ck0zclids0030qhtffumdaism","_id":"ck0zclidt0038qhtfh8h031ra"},{"post_id":"ck0zclidc001cqhtf3kc5k9es","tag_id":"ck0zclidp002eqhtf46n5tuyf","_id":"ck0zclidt003aqhtfv0yd3yvt"},{"post_id":"ck0zclidc001cqhtf3kc5k9es","tag_id":"ck0zclicj000rqhtfvh7ynax2","_id":"ck0zclidt003bqhtf0385wbzf"},{"post_id":"ck0zclidc001cqhtf3kc5k9es","tag_id":"ck0zclidq002lqhtfh4dbmcsg","_id":"ck0zclidu003dqhtf2kl32q4t"},{"post_id":"ck0zclidc001cqhtf3kc5k9es","tag_id":"ck0zclidt0037qhtfipc530gf","_id":"ck0zclidu003eqhtforsgypcd"},{"post_id":"ck0zclidd001dqhtf5zq925ep","tag_id":"ck0zclidt0039qhtf85mx14q6","_id":"ck0zclidv003hqhtfsenjoev1"},{"post_id":"ck0zclidd001dqhtf5zq925ep","tag_id":"ck0zclicj000rqhtfvh7ynax2","_id":"ck0zclidv003iqhtf7xs7fus7"},{"post_id":"ck0zclidd001dqhtf5zq925ep","tag_id":"ck0zclidt003cqhtfof1heldy","_id":"ck0zclidv003kqhtfmyxqcbue"},{"post_id":"ck0zclidd001dqhtf5zq925ep","tag_id":"ck0zclidu003fqhtfk1mxf7ge","_id":"ck0zclidv003lqhtf10ir26nv"},{"post_id":"ck0zclide001hqhtfafaki9bz","tag_id":"ck0zclidv003gqhtfv33q1q99","_id":"ck0zclidw003nqhtfb2utzr6p"},{"post_id":"ck0zclide001hqhtfafaki9bz","tag_id":"ck0zclicj000rqhtfvh7ynax2","_id":"ck0zclidw003oqhtfsdtcondy"},{"post_id":"ck0zclidf001jqhtfnfks0oe2","tag_id":"ck0zclidv003jqhtfacto4ncz","_id":"ck0zclidw003rqhtfd74vcs1w"},{"post_id":"ck0zclidf001jqhtfnfks0oe2","tag_id":"ck0zclicj000rqhtfvh7ynax2","_id":"ck0zclidw003sqhtfnipops71"},{"post_id":"ck0zclidf001jqhtfnfks0oe2","tag_id":"ck0zclidv003mqhtfv2j4q2q7","_id":"ck0zclidx003uqhtfoft7zqdd"},{"post_id":"ck0zclidf001jqhtfnfks0oe2","tag_id":"ck0zclidw003pqhtfj5o42fdh","_id":"ck0zclidx003vqhtfbq2aaa51"},{"post_id":"ck0zclidg001oqhtf58d2kfoh","tag_id":"ck0zclidr002tqhtf3bzzg5lw","_id":"ck0zclidx003yqhtfkolnmyas"},{"post_id":"ck0zclidg001oqhtf58d2kfoh","tag_id":"ck0zclicj000rqhtfvh7ynax2","_id":"ck0zclidx003zqhtf7mnc146h"},{"post_id":"ck0zclidg001oqhtf58d2kfoh","tag_id":"ck0zclidw003tqhtfvz16ht34","_id":"ck0zclidy0041qhtf5r7zbsm5"},{"post_id":"ck0zclidg001oqhtf58d2kfoh","tag_id":"ck0zclidx003wqhtf8yp5fzqo","_id":"ck0zclidy0042qhtf4avdt8o8"},{"post_id":"ck0zclidh001qqhtfvh91x3fw","tag_id":"ck0zclidr002tqhtf3bzzg5lw","_id":"ck0zclidy0044qhtf3w0ek99p"},{"post_id":"ck0zclidh001qqhtfvh91x3fw","tag_id":"ck0zclicj000rqhtfvh7ynax2","_id":"ck0zclidy0045qhtf96rjphrr"},{"post_id":"ck0zclidh001qqhtfvh91x3fw","tag_id":"ck0zclidx0040qhtft3avtrx5","_id":"ck0zclidy0047qhtfn3qbiknx"},{"post_id":"ck0zclidi001uqhtfiikh5w1v","tag_id":"ck0zclidv003gqhtfv33q1q99","_id":"ck0zclidy0048qhtf8o1duzxy"},{"post_id":"ck0zclidi001uqhtfiikh5w1v","tag_id":"ck0zclicj000rqhtfvh7ynax2","_id":"ck0zclidz004aqhtfs8fusqie"},{"post_id":"ck0zclidj001xqhtfg8se94ru","tag_id":"ck0zclidy0046qhtfm8f67od0","_id":"ck0zclidz004dqhtfrjwzfrt8"},{"post_id":"ck0zclidj001xqhtfg8se94ru","tag_id":"ck0zclicj000rqhtfvh7ynax2","_id":"ck0zclidz004eqhtfqyrb7j96"},{"post_id":"ck0zclidj001xqhtfg8se94ru","tag_id":"ck0zclidz0049qhtfjky1npb4","_id":"ck0zclidz004gqhtfj4hws8p5"},{"post_id":"ck0zclidj001xqhtfg8se94ru","tag_id":"ck0zclidz004bqhtfn5ztli3v","_id":"ck0zclie0004hqhtfbyfqwcda"},{"post_id":"ck0zclidk0021qhtfz8p7rw48","tag_id":"ck0zclidz004cqhtfanp93c59","_id":"ck0zclie1004lqhtf7seouckj"},{"post_id":"ck0zclidk0021qhtfz8p7rw48","tag_id":"ck0zclicj000rqhtfvh7ynax2","_id":"ck0zclie1004mqhtfqeeg23bt"},{"post_id":"ck0zclidk0021qhtfz8p7rw48","tag_id":"ck0zclidz004fqhtf1zys1ewu","_id":"ck0zclie1004oqhtf3dkyikh1"},{"post_id":"ck0zclidk0021qhtfz8p7rw48","tag_id":"ck0zclie0004iqhtfv19i905g","_id":"ck0zclie1004pqhtfohdgnz22"},{"post_id":"ck0zclidk0021qhtfz8p7rw48","tag_id":"ck0zclie0004jqhtf289wd3lr","_id":"ck0zclie1004rqhtfg8g9mz28"},{"post_id":"ck0zclidl0025qhtfrpuqrw34","tag_id":"ck0zclidy0046qhtfm8f67od0","_id":"ck0zclie2004uqhtfgz9egskf"},{"post_id":"ck0zclidl0025qhtfrpuqrw34","tag_id":"ck0zclicj000rqhtfvh7ynax2","_id":"ck0zclie2004vqhtfdhxk3a75"},{"post_id":"ck0zclidl0025qhtfrpuqrw34","tag_id":"ck0zclie1004nqhtfw2kkxcqr","_id":"ck0zclie2004xqhtf6zx7cx7j"},{"post_id":"ck0zclidl0025qhtfrpuqrw34","tag_id":"ck0zclie1004qqhtfj8kumdhy","_id":"ck0zclie2004yqhtfr4cqcnve"},{"post_id":"ck0zclidl0025qhtfrpuqrw34","tag_id":"ck0zclie1004sqhtfi0v0n6zg","_id":"ck0zclie30050qhtfldzqyz1o"},{"post_id":"ck0zclidm0027qhtf7ygfvzok","tag_id":"ck0zclie1004tqhtfce6ot5ml","_id":"ck0zclie30051qhtf51qd6gvr"},{"post_id":"ck0zclidm0027qhtf7ygfvzok","tag_id":"ck0zclie2004wqhtfpm9epvcu","_id":"ck0zclie30053qhtfhgqnlhqe"},{"post_id":"ck0zclidn002aqhtfg1zq33p7","tag_id":"ck0zclidy0046qhtfm8f67od0","_id":"ck0zclie60059qhtf3z4f4uga"},{"post_id":"ck0zclidn002aqhtfg1zq33p7","tag_id":"ck0zclicj000rqhtfvh7ynax2","_id":"ck0zclie6005aqhtfmvare29o"},{"post_id":"ck0zclidn002aqhtfg1zq33p7","tag_id":"ck0zclie30052qhtf27eeblym","_id":"ck0zclie6005cqhtfsrhqcz05"},{"post_id":"ck0zclidn002aqhtfg1zq33p7","tag_id":"ck0zclie30054qhtf8dwh6321","_id":"ck0zclie6005dqhtfpmqlf55m"},{"post_id":"ck0zclidn002aqhtfg1zq33p7","tag_id":"ck0zclie30055qhtfsamuruch","_id":"ck0zclie6005fqhtfxgyopqo7"},{"post_id":"ck0zclidn002aqhtfg1zq33p7","tag_id":"ck0zclie40056qhtfxqop6rl3","_id":"ck0zclie6005gqhtfswo8f1he"},{"post_id":"ck0zclidn002aqhtfg1zq33p7","tag_id":"ck0zclie40057qhtfchoaz09w","_id":"ck0zclie6005iqhtf3xwcxz8y"},{"post_id":"ck0zclido002cqhtfbjevv4eo","tag_id":"ck0zclie40058qhtfdkg6dd0m","_id":"ck0zclie7005mqhtfea0vzu5o"},{"post_id":"ck0zclido002cqhtfbjevv4eo","tag_id":"ck0zclie6005bqhtfceeukuye","_id":"ck0zclie7005nqhtftlxab15n"},{"post_id":"ck0zclido002cqhtfbjevv4eo","tag_id":"ck0zclie6005eqhtflmqbrmdq","_id":"ck0zclie7005pqhtfrwqnt6gu"},{"post_id":"ck0zclido002cqhtfbjevv4eo","tag_id":"ck0zclie6005hqhtfdtsnna65","_id":"ck0zclie8005qqhtfsxmunlyh"},{"post_id":"ck0zclido002cqhtfbjevv4eo","tag_id":"ck0zclie7005jqhtf78nmrsha","_id":"ck0zclie8005rqhtfod3wzqx9"},{"post_id":"ck0zclido002cqhtfbjevv4eo","tag_id":"ck0zclie7005kqhtfymekflfj","_id":"ck0zclie8005sqhtf1mbztp6e"},{"post_id":"ck0zclidp002fqhtfbg76puli","tag_id":"ck0zclicj000rqhtfvh7ynax2","_id":"ck0zclie8005tqhtf5b461ebg"},{"post_id":"ck0zclidp002fqhtfbg76puli","tag_id":"ck0zclie7005lqhtf2nsvhpn6","_id":"ck0zclie8005uqhtfsgyia3lp"},{"post_id":"ck0zclidp002fqhtfbg76puli","tag_id":"ck0zclie7005oqhtfrzx1w04i","_id":"ck0zclie8005vqhtfndzal3xe"}],"Tag":[{"name":"octopress","_id":"ck0zclic80003qhtf53id8cpz"},{"name":"博客","_id":"ck0zclicb0008qhtf4stjoua9"},{"name":"博客自定义","_id":"ck0zclice000gqhtfp3104fmq"},{"name":"seo","_id":"ck0zclicf000iqhtfjdof98u8"},{"name":"github","_id":"ck0zclich000pqhtf2u8its0t"},{"name":"开源","_id":"ck0zclici000qqhtfwkq0ztr3"},{"name":"iOS","_id":"ck0zclicj000rqhtfvh7ynax2"},{"name":"Architectures","_id":"ck0zclicj000sqhtfzsix9ynd"},{"name":"Valid Architectures","_id":"ck0zclick000vqhtfyuvsmstx"},{"name":"Xcode","_id":"ck0zclicl000yqhtf6gtqf86v"},{"name":"SQLite","_id":"ck0zclid80016qhtfuro5iceq"},{"name":"sqlcipher","_id":"ck0zclidb001bqhtf8gf1v8wt"},{"name":"进程通信","_id":"ck0zclidd001gqhtftoyzo5rx"},{"name":"CFMessagePort","_id":"ck0zclidg001nqhtfxcyztor8"},{"name":"XcodeSettings","_id":"ck0zclidi001tqhtfq7nojifz"},{"name":"iOS simulato","_id":"ck0zclidk0022qhtfbgb91tgt"},{"name":"custom location","_id":"ck0zclidn0029qhtf1wjya4y3"},{"name":"WWDC2014","_id":"ck0zclidp002eqhtf46n5tuyf"},{"name":"framework","_id":"ck0zclidq002lqhtfh4dbmcsg"},{"name":"动态库","_id":"ck0zclidr002pqhtfehghxp6j"},{"name":"iPhone","_id":"ck0zclidr002tqhtf3bzzg5lw"},{"name":"iPhone6","_id":"ck0zclidr002wqhtfxf6zgnsz"},{"name":"iPhone6+","_id":"ck0zclids002zqhtfbvs9260j"},{"name":"屏幕","_id":"ck0zclids0030qhtffumdaism"},{"name":"App Extensions","_id":"ck0zclidt0037qhtfipc530gf"},{"name":"device orientation","_id":"ck0zclidt0039qhtf85mx14q6"},{"name":"interface orientation","_id":"ck0zclidt003cqhtfof1heldy"},{"name":"屏幕旋转","_id":"ck0zclidu003fqhtfk1mxf7ge"},{"name":"CrashLog","_id":"ck0zclidv003gqhtfv33q1q99"},{"name":"ARC","_id":"ck0zclidv003jqhtfacto4ncz"},{"name":"MRC","_id":"ck0zclidv003mqhtfv2j4q2q7"},{"name":"手动内存管理","_id":"ck0zclidw003pqhtfj5o42fdh"},{"name":"代码签名","_id":"ck0zclidw003tqhtfvz16ht34"},{"name":"Code Signing","_id":"ck0zclidx003wqhtf8yp5fzqo"},{"name":"离屏渲染","_id":"ck0zclidx0040qhtft3avtrx5"},{"name":"Objective-C","_id":"ck0zclidy0046qhtfm8f67od0"},{"name":"栈对象","_id":"ck0zclidz0049qhtfjky1npb4"},{"name":"堆对象","_id":"ck0zclidz004bqhtfn5ztli3v"},{"name":"CocoaPods","_id":"ck0zclidz004cqhtfanp93c59"},{"name":"Cocoa","_id":"ck0zclidz004fqhtf1zys1ewu"},{"name":"Trunk","_id":"ck0zclie0004iqhtfv19i905g"},{"name":"私有仓库","_id":"ck0zclie0004jqhtf289wd3lr"},{"name":"Clean Page","_id":"ck0zclie1004nqhtfw2kkxcqr"},{"name":"Dirty Page","_id":"ck0zclie1004qqhtfj8kumdhy"},{"name":"虚拟内存","_id":"ck0zclie1004sqhtfi0v0n6zg"},{"name":"Octopress","_id":"ck0zclie1004tqhtfce6ot5ml"},{"name":"hexo","_id":"ck0zclie2004wqhtfpm9epvcu"},{"name":"setjmp","_id":"ck0zclie30052qhtf27eeblym"},{"name":"longjmp","_id":"ck0zclie30054qhtf8dwh6321"},{"name":"异常处理","_id":"ck0zclie30055qhtfsamuruch"},{"name":"try","_id":"ck0zclie40056qhtfxqop6rl3"},{"name":"catch","_id":"ck0zclie40057qhtfchoaz09w"},{"name":"C语言","_id":"ck0zclie40058qhtfdkg6dd0m"},{"name":"va_list","_id":"ck0zclie6005bqhtfceeukuye"},{"name":"va_arg","_id":"ck0zclie6005eqhtflmqbrmdq"},{"name":"va_end","_id":"ck0zclie6005hqhtfdtsnna65"},{"name":"变长参数","_id":"ck0zclie7005jqhtf78nmrsha"},{"name":"printf","_id":"ck0zclie7005kqhtfymekflfj"},{"name":"CoreLocation","_id":"ck0zclie7005lqhtf2nsvhpn6"},{"name":"定位","_id":"ck0zclie7005oqhtfrzx1w04i"}]}}