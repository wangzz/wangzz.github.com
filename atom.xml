<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[王中周的个人博客]]></title>
  <link href="http://wangzz.github.io/atom.xml" rel="self"/>
  <link href="http://wangzz.github.io/"/>
  <updated>2014-04-27T18:16:17+08:00</updated>
  <id>http://wangzz.github.io/</id>
  <author>
    <name><![CDATA[王中周]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[github优秀开源项目大全-iOS]]></title>
    <link href="http://wangzz.github.io/blog/2014/04/25/githubyou-xiu-xiang-mu-ios/"/>
    <updated>2014-04-25T17:45:33+08:00</updated>
    <id>http://wangzz.github.io/blog/2014/04/25/githubyou-xiu-xiang-mu-ios</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<ol>
<li><p>本文旨在搜集github上优秀的开源项目</p></li>
<li><p>本文搜集的项目都是用于iOS开发</p></li>
<li><p>本文会持续更新&hellip;</p></li>
</ol>


<h2>完整客户端</h2>

<ul>
<li><a href="https://github.com/dennisreimann/">ioctocat</a></li>
</ul>


<p>github的iOS客户端，目前开源代码是V1版本，V2版本在appstore上可以下载</p>

<ul>
<li><a href="https://github.com/chrisballinger/ChatSecure-iOS">ChatSecure-iOS</a></li>
</ul>


<p>使用XMPP协议的IM开源软件，很强大，在appstore上可以下载</p>

<ul>
<li><a href="https://github.com/gaosboy/iOSSF">SegmentFault</a></li>
</ul>


<p>SegmentFault的官方iOS客户端</p>

<ul>
<li><a href="http://git.oschina.net/oschina/iphone-app">OSChina-iOS</a></li>
</ul>


<p>开源中国社区oschina的官方iPhone客户端，appstore已上线。早期地址在<a href="https://github.com/gaosboy/iOSSF">github</a>上,后来迁移到OSChina自己的代码托管平台.</p>

<h1>Xcode插件</h1>

<ul>
<li><a href="https://github.com/kattrali/cocoapods-xcode-plugin">cocoapods-xcode-plugin</a></li>
</ul>


<p>用于在Xcode中管理CocoaPods依赖库
<img src="https://raw.githubusercontent.com/kattrali/cocoapods-xcode-plugin/master/menu.png" alt="cocoapods-xcode-plugin" /></p>

<ul>
<li><a href="https://github.com/qfish/XAlign">XAlign</a></li>
</ul>


<p>方便实现代码对其功能，使代码风格统一
<img src="https://camo.githubusercontent.com/7973c0e352b1f91e3efe5b3550cff5df97f4589a/687474703a2f2f7166692e73682f58416c69676e2f696d616765732f657175616c2e676966" alt="XAlign" /></p>

<h1>工具</h1>

<ul>
<li><a href="https://github.com/johnno1962/Xtrace">Xtrace</a></li>
</ul>


<p>能详细打印出一个某个方法被调用的堆栈，方便调试时定位问题
<img src="https://camo.githubusercontent.com/c5b766f2e9646f5b909ac4e8d63cca6d4f2ff7fd/687474703a2f2f696e6a656374696f6e666f7278636f64652e6a6f686e686f6c6473776f7274682e636f6d2f787472616365632e706e673f666c7573683d32" alt="Xtrace" /></p>

<ul>
<li><a href="https://github.com/realmacsoftware/RMConnecter">RMConnecter</a></li>
</ul>


<p>在上传AppStore时需要填写app的描述信息，此软件能很方便的填写这些信息。
<img src="https://github.com/realmacsoftware/RMConnecter/blob/master/Assets/screenshots.png?raw=true" alt="RMConnecter" /></p>

<h1>自定义view</h1>

<ul>
<li><a href="https://github.com/yishuiliunian/DZTableView">DZTableView</a></li>
</ul>


<p>仿照UITableView机制自己实现的一个自定义tableview，带有详细的说明文档</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让你的Octopress博客在多台Mac上同时使用]]></title>
    <link href="http://wangzz.github.io/blog/2014/04/02/ru-he-pei-zhi-rang-ni-de-octopressbo-ke-zai-duo-tai-macshang-tong-shi-shi-yong/"/>
    <updated>2014-04-02T14:28:35+08:00</updated>
    <id>http://wangzz.github.io/blog/2014/04/02/ru-he-pei-zhi-rang-ni-de-octopressbo-ke-zai-duo-tai-macshang-tong-shi-shi-yong</id>
    <content type="html"><![CDATA[<p>前阵子在公司电脑上配置好了Octopress博客，但是想在家里的Mac上使用，开始以为简单的将仓库clone就可以了，不幸的是我想的太简单。后来在网上看到了前面列出的第一篇文章，终于解决问题。</p>

<h2>一、Octopress目录结构</h2>

<p>Octopress的仓库目录下有两个branch，<code>source</code>和<code>master</code>。</p>

<ol>
<li><p><code>source</code>分支下保存Octopress的源代码，我们需要用他们生成博客，该分支保存在Octopress本地仓库的根目录下；</p></li>
<li><p><code>master</code>分支下保存生成的博客内容，该分支在Octopress本地仓库的根目录下一个叫<code>_deploy</code>得文件夹中。该文件夹是以下划线开头的，会在执行<code>git push origin source</code>命令时被忽略，这也是为什么一个目录中能同时存在两个不同分支的文件夹的原因。</p></li>
</ol>


<h2>二、在本地重建Octopress仓库</h2>

<p>需要执行以下命令：</p>

<ol>
<li>clone <code>source</code>分支</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone -b source git@github.com:username/username.github.com.git octopress</span></code></pre></td></tr></table></div></figure>


<p>别忘了<code>username</code>替换成你自己github用户名。
另外还要注意的是，clone的地址不能是<code>http</code>而必须得是<code>ssh</code>的。
如果执行时提示以下错误：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Cloning into 'octopress'...
</span><span class='line'>The authenticity of host 'github.com (192.30.252.131)' can't be established.
</span><span class='line'>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
</span><span class='line'>Are you sure you want to continue connecting (yes/no)? yes
</span><span class='line'>Warning: Permanently added 'github.com,192.30.252.131' (RSA) to the list of known hosts.
</span><span class='line'>Permission denied (publickey).
</span><span class='line'>fatal: Could not read from remote repository.
</span><span class='line'>
</span><span class='line'>Please make sure you have the correct access rights
</span><span class='line'>and the repository exists.
</span></code></pre></td></tr></table></div></figure>


<p>说明你的电脑不被github信任，需要在你电脑上创建<code>ssh key</code>并添加到github中。</p>

<p>这是你需要执行2；
如果没出现上述错误，直接执行3。</p>

<p>2.创建并添加ssh key</p>

<p>2.1 创建ssh key</p>

<p>2.1.1 生成key</p>

<p>执行命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh-keygen -t rsa -C "your_email@example.com"</span></code></pre></td></tr></table></div></figure>


<p>会提示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Generating public/private rsa key pair.
</span><span class='line'>Enter file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]</span></code></pre></td></tr></table></div></figure>


<p>这时候按回车键(Enter)继续：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Enter passphrase (empty for no passphrase): [Type a passphrase]
</span><span class='line'># Enter same passphrase again: [Type passphrase again]</span></code></pre></td></tr></table></div></figure>


<p>会要求你输入一个密码，4位以上，要记住，后面有用。</p>

<p>接下来会提示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Your identification has been saved in /Users/you/.ssh/id_rsa.
</span><span class='line'># Your public key has been saved in /Users/you/.ssh/id_rsa.pub.
</span><span class='line'># The key fingerprint is:
</span><span class='line'># 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</span></code></pre></td></tr></table></div></figure>


<p>到这里就说明key已经创建成功了。</p>

<p>2.1.2 把生成的key添加到<code>ssh-agent</code>中
最后需要执行以下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh-add ~/.ssh/id_rsa</span></code></pre></td></tr></table></div></figure>


<p>2.2 把生成的key添加到github</p>

<p>2.2.1 copy key内容</p>

<p>先执行下面的命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pbcopy &lt; ~/.ssh/id_rsa.pub</span></code></pre></td></tr></table></div></figure>


<p>该命令将key中的内容copy到粘贴板中，以便后面使用。当然你也可以用自己的方式copy。</p>

<p>2.2.2 找到添加key的地方</p>

<p>先点击<a href="https://github.com/settings">Account Settings</a>：</p>

<p><img src="https://github-images.s3.amazonaws.com/help/settings/userbar-account-settings.png" alt="账户设置" /></p>

<p>进入设置界面后，点击界面左侧的<a href="https://github.com/settings/ssh">SSH KEYS</a>:</p>

<p><img src="https://github-images.s3.amazonaws.com/help/settings/settings-sidebar-ssh-keys.png" alt="ssh keys" /></p>

<p>点击<code>Add SSH key</code>按钮：</p>

<p><img src="https://github-images.s3.amazonaws.com/help/settings/ssh-add-ssh-key.png" alt="add ssh key" /></p>

<p>点击<code>Add key</code>按钮：</p>

<p><img src="https://github-images.s3.amazonaws.com/help/settings/ssh-add-key.png" alt="add key" /></p>

<p>在输入框内粘贴刚才copy的key，点击确定即可。</p>

<p>2.3 验证key可用性</p>

<p>通过ssh github验证key是否可用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -T git@github.com</span></code></pre></td></tr></table></div></figure>


<p>命令执行后会输出：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>The authenticity of host 'github.com (207.97.227.239)' can't be established.
</span><span class='line'>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
</span><span class='line'>Are you sure you want to continue connecting (yes/no)?</span></code></pre></td></tr></table></div></figure>


<p>输入<code>yes</code>如果打印以下内容，就说明OK了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hi username! You've successfully authenticated, but GitHub does not</span></code></pre></td></tr></table></div></figure>


<p> 3.clone master分支</p>

<p>下面需要将master分支clone到<code>_deploy</code>目录：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd octopress
</span><span class='line'>$ git clone git@github.com:username/username.github.com.git _deploy </span></code></pre></td></tr></table></div></figure>


<p> 4.配置环境</p>

<p>执行以下命令配置环境：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install bundler
</span><span class='line'>$ rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
</span><span class='line'>$ bundle install
</span><span class='line'>$ rake setup_github_pages </span></code></pre></td></tr></table></div></figure>


<p>执行最后一条命令时需要你输入github中博客仓库地址：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Enter the read/write url for your repository
</span><span class='line'>(For example, 'git@github.com:your_username/your_username.github.com)</span></code></pre></td></tr></table></div></figure>


<p>到此所有的工作都完成了，你就可以享受在两台电脑上使用Octopress了！</p>

<h2>三、Tips</h2>

<ol>
<li>及时提交本地修改</li>
</ol>


<p>在每处配置了Octopress的地方，做了任何修改都要提交，否则另一个地方做了修改，本地更新的时候肯定会冲突。</p>

<p>每次在本地做完修改以后，都要及时提交，分别执行以下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake generate
</span><span class='line'>$ rake deploy             # update the remote master branch</span></code></pre></td></tr></table></div></figure>


<p>第一条命令会使用本地的修改生成最新的blog网站，并且生成的blog会存放到<code>Octopress</code>根目录下的<code>public/</code>目录下；</p>

<p>第二条命令主要做了两件事：</p>

<p>*用<code>generate</code>命令生成在<code>public/</code>目录下的内容覆盖<code>_deploy/</code>目录下内容；</p>

<p>*将<code>_deploy/</code>目录下的修改<code>add</code> 、 <code>commit</code>到git，并<code>push</code>到git的<code>master</code>分支。</p>

<p>别以为这就结束了，你还得把source分支中做的修改提交的git仓库中，执行以下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add .
</span><span class='line'>$ git commit -am "Some comment here." 
</span><span class='line'>$ git push origin source  # update the remote source branch </span></code></pre></td></tr></table></div></figure>


<p>执行完这两步后，稍过一会就能看到自己blog中的更新啦！</p>

<p> 2.修改前先更新到最新版本</p>

<p>为了以防万一，在本地做任何修改前都要先做更新，可以执行以下命令分别更新<code>source</code>和<code>master</code>分支：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd octopress
</span><span class='line'>$ git pull origin source  # update the local source branch
</span><span class='line'>$ cd ./_deploy
</span><span class='line'>$ git pull origin master  # update the local master branch</span></code></pre></td></tr></table></div></figure>


<h2>四、参考文档</h2>

<p>本文参考了以下两篇文章：</p>

<ol>
<li><p><a href="http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/"><strong>Clone Your Octopress to Blog From Two Places</strong></a></p></li>
<li><p><a href="https://help.github.com/articles/generating-ssh-keys"><strong>Generating SSH Keys</strong></a></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开始写blog啦]]></title>
    <link href="http://wangzz.github.io/blog/2014/03/31/kai-shi-xie-blogla/"/>
    <updated>2014-03-31T20:19:44+08:00</updated>
    <id>http://wangzz.github.io/blog/2014/03/31/kai-shi-xie-blogla</id>
    <content type="html"><![CDATA[<p>这是我的第一篇日志，以后多多关注！</p>
]]></content>
  </entry>
  
</feed>
