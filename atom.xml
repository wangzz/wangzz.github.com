<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[王中周的技术博客]]></title>
  <link href="http://wangzz.github.io/atom.xml" rel="self"/>
  <link href="http://wangzz.github.io/"/>
  <updated>2014-10-05T21:37:37+08:00</updated>
  <id>http://wangzz.github.io/</id>
  <author>
    <name><![CDATA[王中周]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iPhone屏幕知识点解析]]></title>
    <link href="http://wangzz.github.io/blog/2014/09/28/iphoneping-mu-zhi-shi-dian-jie-xi/"/>
    <updated>2014-09-28T14:34:37+08:00</updated>
    <id>http://wangzz.github.io/blog/2014/09/28/iphoneping-mu-zhi-shi-dian-jie-xi</id>
    <content type="html"><![CDATA[<p><img src="http://wangzz.github.io/images/article7/iphone5-6.jpg" alt="iphone5-6" /></p>

<h2>一、屏幕相关知识点</h2>

<h4>1、屏幕尺寸</h4>

<p>在显示器世界里，屏幕尺寸都是由屏幕对脚线长度表示的，单位是英寸。比如iPhone4的3.5寸屏就意味着屏幕对角线的长度是3.5英寸。</p>

<h4>2、分辨率</h4>

<p>分辨率是任何一款手机产品最重要的参数之一。显示屏是由一个个像素组成的，分辨率可以简单理解成屏幕像素的数目。比如iPhone4的屏幕分辨率为640×960，就表示屏幕的横向有640个像素点，纵向有960个像素点。</p>

<!-- more -->


<h4>3、PPI</h4>

<p>PPI（Pixels Per Inch）表示单位面积上的像素点数目。分辨率可以表示屏幕包含的像素数目，但要想描述屏幕的显示质量，还需要知道屏幕尺寸，最后算出单位面积上的像素点数目。显然PPI越高，屏幕显示效果越细腻。</p>

<p>PPI计算公式：</p>

<p><img src="http://wangzz.github.io/images/article7/PPI.jpg" alt="PPI" /></p>

<p>其中，X：长度像素数；Y：宽度像素数；Z：屏幕尺寸即对角线长度</p>

<h4>4、Points</h4>

<p>可以简单理解成我们使用<code>UIKit</code>或 <code>Core Animation</code>处理界面元素时所用到的逻辑坐标系统。Points是在iOS4以后引入的，出现的目的是提供一种与设备无关的一致的输出效果。</p>

<p>苹果考虑到以后有可能推出不同分辨率屏幕的手机，如果开发者在界面布局的时候操纵像素，就会导致每种不同分辨率的设备都要有一份适配代码。比如在分辨率为320×480的iPhone3GS上，要画一条长度1英寸的线条，假设需要50个像素，即线条的长度设成50像素；但是在分辨率为640×960的iPhone4上，50像素所能表示的实际长度只有iPhone3GS的一半，即0.5英寸。因此开发者必须使用两套适配代码：在iPhone3GS上将线条长度设成50像素，在iPhone4上设成100像素。这还仅仅是两款设备，如果算上后来的iPhone5/5C/5S和iPhone6/6+，每种分辨率都来一套适配代码，开发者岂不是得疯掉？？</p>

<p>现在苹果使用了一套逻辑坐标系统来解决多分辨率屏幕适配问题，将屏幕上的每一个点都用以屏幕左上角为原点，横向为X轴，纵向为Y轴的坐标来表示（PS：并不是所有的框架默认坐标系统都是这样，比如<code>APPKit</code>中的<code>NSView</code>；当然开发者也可以将<code>UIKit</code>和 <code>Core Animation</code>的坐标系统改成以屏幕左下角为原点，但原理都是一样的。）。以iPhone3GS/4为例，他们的坐标系统中X和Y的最大值都分别是320和480。</p>

<p>有了逻辑坐标系统，想在分辨率不同的iPhone3GS/4画一条长度均为1英寸的线条就变成了这样：将线的长度设成50Points（假设1英寸对应那么多个Points），<code>UIKit</code>在屏幕上绘图的时候会判断屏幕分辨率，如果是iPhone3GS的320×480分辨率屏幕，会自动使用50像素绘制；如果是iPhone4的640×960分辨率，会自动使用100像素绘制。</p>

<p>这种机制使得在4寸屏幕的iPhone5出来之前，iOS开发者在设备屏幕适配上的工作量几乎为零（当然，需要准备两套图片），对此Android同行们早就口水直下三千尺了。后来随着iPhone屏幕尺寸的变化，逻辑坐标系统的取值范围也发生了变化，这才让iOS开发者有点事情可做。</p>

<h4>5、渲染比例（Scale）</h4>

<p>像素点数目和逻辑坐标点数目的比值，就是渲染比例（Scale）。更直观的说法是一个逻辑坐标点，需要用几个像素点来渲染。</p>

<p>iPhone3GS的逻辑坐标系统是320×480，分辨率是320×480，即每个坐标点对应一个像素，即Scale为1；iPhone4的逻辑坐标系统是320×480，分辨率是640×960，每个坐标点对应两个像素点，即Scale为2。</p>

<p>因此，为了适配iPhone6+的屏幕，以后又得曾加一份@3x分辨率的图片了。</p>

<h4>6、宽高比</h4>

<p>屏幕宽度和高度的比例，也可以是分辨率的横向像素点数目和纵向像素点数目的比例，他们通常是一致的，一般用整数表示。</p>

<p>iPhone3GS/4/4S的宽高比2:3，iPhone5/5C/5S/6/6+的宽高比都是9:16。</p>

<p>当年iPhone5出来的时候，适配3.5寸屏幕的应用上下黑边的场景仍记忆犹新，用户体验很不好，虽然大部分应用都迅速的做了适配。还好苹果这次学聪明了，从4寸屏升级到iPhone6的4.7寸屏和iPhone6+的5.5寸屏，宽高比并没有变化。也就是说原来在iPhone5上运行的应用能够通过拉伸平滑过渡到iPhone6/6+上，可能会稍微有点模糊。不过比起3.5寸到4寸屏的升级来说已经好很多了。</p>

<h2>二、说明</h2>

<h4>1、历代iPhone屏幕参数</h4>

<p>下面的一张图介绍了从iPhone4到iPhone6+的几代iPhone跟屏幕相关的几个关键参数：</p>

<p><img src="http://wangzz.github.io/images/article7/iPhone_display.png" alt="iPhone_display" /></p>

<p>需要说明的是，iPhone6+的逻辑坐标是414×736，渲染比例是3倍，因此对应的屏幕分辨率是1242×2208。但iPhone6+的实际屏幕分辨率是1080×1920，这时系统会把整体的显示内容做一个从新采样缩放，downsampling比例为1/1.15。</p>

<h4>2、老工程中的坐标系统</h4>

<p>使用Xcode6之前版本的Xcode创建的工程，在iPhone6/6+上运行，得到的逻辑坐标都是和iPhone5/5C/5S屏幕相同的320*568。这样就做到从4寸到4.7寸和5.5寸屏幕的无缝升级，即使我们什么都不做，我们的老工程也能在iPhone6/6+上几乎完美的运行。当然因为等比例放大了，图片可能会有模糊或锯齿感。</p>

<p>要想让老工程的坐标系统恢复正常，可以通过为Target添加<code>LaunchImage</code>或者<code>Launch Screen File</code>来实现，如下图所示：</p>

<p><img src="http://wangzz.github.io/images/article7/LaunchFile.png" alt="LaunchFile" /></p>

<p><code>LaunchImage</code>的方式需要在<code>Images.xcassets</code>里，删除旧的<code>LaunchImage</code>组，然后新建<code>LaunchImage</code>组，添加对应高分辨率的图片。对此，这里有一篇更详细的图文介绍：<a href="http://matthewpalmer.net/blog/2014/09/10/iphone-6-plus-launch-image-adaptive-mode/">How to Add a Launch Image for the iPhone 6</a>。</p>

<p>其中<code>Launch Screen File</code>是Xcode6和iOS8新加的功能，它用一个xib文件来作为启动画面。App在旧版iOS启动时，该属性会被自动忽略，不会造成异常。</p>

<p>上面两种设置，只要启用任意一个即可让App进入高分辨率模式。鉴于现在不少App还需要兼容iOS5，而第一种方法在iOS5上可能有<a href="http://stackoverflow.com/questions/19220082/support-of-ios-5-0-icons-with-xcode-5">bug</a>，所以这里推荐用第二种方法。</p>

<h2>三、参考文档</h2>

<ul>
<li><a href="https://developer.apple.com/library/ios/documentation/2DDrawing/Conceptual/DrawingPrintingios/GraphicsDrawingOverview/GraphicsDrawingOverview.html">Drawing and Printing Guide for iOS</a></li>
<li><a href="http://baike.baidu.com/view/7687.htm">分辨率</a></li>
<li><a href="http://blog.ibireme.com/2014/09/16/adapted_to_iphone6/#rd?sukey=f3735aed1ca7f2658e86e2e18cb36d80fed889a7bdfd2d651a1aaef8f9941b691c71e4e8353e61cd57237e4cd0b3edc6#jtss-tsina">大屏iPhone的适配</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoreAnimation系列之基础变换]]></title>
    <link href="http://wangzz.github.io/blog/2014/08/27/coreanimationxi-lie-zhi-ji-chu-bian-huan/"/>
    <updated>2014-08-27T12:21:50+08:00</updated>
    <id>http://wangzz.github.io/blog/2014/08/27/coreanimationxi-lie-zhi-ji-chu-bian-huan</id>
    <content type="html"><![CDATA[<p>从<a href="http://blog.csdn.net/wzzvictory">CSDN</a>时代开始，就有用一系列文章聊聊CoreAnimation的打算，这算是本系列中的第三篇了。一直以来都是哪天心情好的时候来一篇，真怀疑等把整个系列写完的时候CoreAnimation是不是都要被Apple换掉了。</p>

<p>本文打算介绍自己对基础变换的认识。</p>

<h2>一、基础变换与数学</h2>

<h4>1.两种坐标系</h4>

<p>不管是平面几何还是立体几何，笛卡尔坐标系都是我们学习和研究几何的最基础工具。的笛卡尔坐标系主要分两种：左手坐标系和右手坐标系。</p>

<p>对于三维坐标系，<a href="http://baike.baidu.com/view/2939423.htm">百度百科</a>上给出了右手坐标系的判断方法：在空间直角坐标系中，让右手拇指指向x轴的正方向，食指指向y轴的正方向，如果中指能指向z轴的正方向，则称这个坐标系为右手直角坐标系。同理左手直角三维坐标系。</p>

<!-- more -->


<p>下图直观的表示了上述判断方法（图片来自<a href="http://outofmemory.cn/wr/?u=http%3A%2F%2Fwonderffee.github.io%2Fblog%2F2013%2F10%2F17%2Fa-simple-method-to-determine-positive-rotation-in-in-three-dimensional-space%2F">这里</a>）：</p>

<p><img src="http://wangzz.github.io/images/article6/coordinate-system.jpg" alt="left-right hand coordinate" /></p>

<p>由此判断，从中学到大学的课堂上我们接触的立体几何都是右手系。</p>

<h4>2.基础变换的数学公式</h4>

<p>一个点在立体空间内的变换可以通过数学公式表示，前面讲那么多左手和右手坐标系相关的内容是因为<code>不同坐标系下计算公式不同</code>。</p>

<p>iOS中CoreAnimation的CALayer默认使用的是<code>左手坐标系</code>（使用哪种坐标系可以通过CALayer的<code>geometryFlipped</code>属性更改，该值默认为NO，设为YES时表示使用右手坐标系），因此本文后面所说的所有坐标系都是之左手坐标系。</p>

<p>变换对于动画来说应该是最基础最核心的内容了，CoreAnimation中基础变换包括平移（Translate）、缩放（Scale）、旋转（Rotate）三种。假如三维空间中有一个点(x0, y0, z0)，该点经过一定条件的基础变换，变换后的坐标为(x, y, z)，则针对平移、缩放、旋转三种基础变换，对应的坐标变换关系如下：</p>

<h6>2.1 平移</h6>

<p>平移对应的变化量为(δx, δy, δz)。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x = x0 + δx;
</span><span class='line'>y = y0 + δy;
</span><span class='line'>z = z0 + δz;</span></code></pre></td></tr></table></div></figure>


<h6>2.2 缩放</h6>

<p>缩放对应的缩放倍数为(δx, δy, δz)。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x = x0 * δx;
</span><span class='line'>y = y0 * δy;
</span><span class='line'>z = z0 * δz;</span></code></pre></td></tr></table></div></figure>


<h6>2.3 旋转</h6>

<p>旋转的方式有很多，比如简单点的绕X轴、Y轴、Z轴旋转，复杂点的还有绕任意三维向量旋转。为了简单起见，旋转以绕Z轴旋转了角度α（注意这里及后文所有涉及角度的地方都是弧度制）为例，对应的变化关系为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x = y0*sinα + x0*cosα;
</span><span class='line'>y = y0*conα - x0*sinα;
</span><span class='line'>z = z0;</span></code></pre></td></tr></table></div></figure>


<p>其它的大家感兴趣可以自己推倒下。</p>

<h2>二、变换矩阵</h2>

<p>在CoreAnimation中用CATransform3D来表示三维齐次坐标变换矩阵，在齐次坐标中n维空间的坐标需要用n+1个元素的坐标元组来表示（详情还请自行Google），因此CATransform3D定义如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct CATransform3D
</span><span class='line'>{
</span><span class='line'>  CGFloat m11, m12, m13, m14;
</span><span class='line'>  CGFloat m21, m22, m23, m24;
</span><span class='line'>  CGFloat m31, m32, m33, m34;
</span><span class='line'>  CGFloat m41, m42, m43, m44;
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>为什么实现变换要有变换矩阵呢？</p>

<p>以上文中旋转的计算公式为例，可以使用如下矩阵运算表示：</p>

<p><img src="http://wangzz.github.io/images/article6/matrix1.png" alt="left-right hand coordinate" /></p>

<p>其中的矩阵：</p>

<p><img src="http://wangzz.github.io/images/article6/matrix2.png" alt="left-right hand coordinate" /></p>

<p>就被称为点(x0, y0, z0)绕Z轴旋转角度α的变换矩阵。</p>

<p>由于放射变换可以通过矩阵变换来实现，而且看起来更加直观，因此变换公式通常都用对应的变换矩阵表示。</p>

<p>在CoreAnimation中平移、缩放、旋转对应的变换矩阵为：</p>

<h4>1. 平移</h4>

<p><img src="http://wangzz.github.io/images/article6/matrix3.png" alt="left-right hand coordinate" /></p>

<p>其中δx、δy、δz表示三个坐标上对应的平移量。</p>

<h4>2. 缩放</h4>

<p><img src="http://wangzz.github.io/images/article6/matrix4.png" alt="left-right hand coordinate" /></p>

<p>其中δx、δy、δz表示三个坐标上对应的缩放倍数。</p>

<h4>3. 旋转</h4>

<p><img src="http://wangzz.github.io/images/article6/matrix5.png" alt="left-right hand coordinate" /></p>

<p>该矩阵为任意点(x, y, z)绕任意向量旋转旋转角度α的旋转向量。</p>

<h2>三、验证</h2>

<p>前面总结了CoreAnimation中三种基础变换对应的变换矩阵，这样以来我们就能自己对任意的矩阵做变换了。平移、缩放、旋转对应的变换矩阵计算方法如下：</p>

<h4>1. 平移</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">CATransform3D</span><span class="p">)</span><span class="nf">translateWithMatrix:</span><span class="p">(</span><span class="n">CATransform3D</span><span class="p">)</span><span class="nv">t</span> <span class="nf">x:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nv">x</span> <span class="nf">y:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nv">y</span> <span class="nf">z:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nv">z</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CATransform3D</span> <span class="n">matrixTransform</span> <span class="o">=</span> <span class="n">CATransform3DIdentity</span><span class="p">;</span>
</span><span class='line'>    <span class="n">matrixTransform</span><span class="p">.</span><span class="n">m41</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="n">matrixTransform</span><span class="p">.</span><span class="n">m42</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="n">matrixTransform</span><span class="p">.</span><span class="n">m43</span> <span class="o">=</span> <span class="n">z</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">CATransform3DConcat</span><span class="p">(</span><span class="n">matrixTransform</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>该方法根据平移变换矩阵的计算方式，得到平移参数(x, y, z)对应的变换矩阵，然后和原始矩阵相乘，得到最终的变换矩阵。</p>

<h4>2. 缩放</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">CATransform3D</span><span class="p">)</span><span class="nf">scaleWithMatrix:</span><span class="p">(</span><span class="n">CATransform3D</span><span class="p">)</span><span class="nv">t</span> <span class="nf">x:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nv">x</span> <span class="nf">y:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nv">y</span> <span class="nf">z:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nv">z</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CATransform3D</span> <span class="n">matrixTransform</span> <span class="o">=</span> <span class="n">CATransform3DIdentity</span><span class="p">;</span>
</span><span class='line'>    <span class="n">matrixTransform</span><span class="p">.</span><span class="n">m11</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="n">matrixTransform</span><span class="p">.</span><span class="n">m22</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="n">matrixTransform</span><span class="p">.</span><span class="n">m33</span> <span class="o">=</span> <span class="n">z</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">CATransform3DConcat</span><span class="p">(</span><span class="n">matrixTransform</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>该方法根据缩放变换矩阵的计算方式，得到缩放参数(x, y, z)对应的变换矩阵，然后和原始矩阵相乘，得到最终的变换矩阵。</p>

<h4>3. 旋转</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">CATransform3D</span><span class="p">)</span><span class="nf">rotateWithMatrix:</span><span class="p">(</span><span class="n">CATransform3D</span><span class="p">)</span><span class="nv">t</span> <span class="nf">angle:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nv">angle</span> <span class="nf">x:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nv">x</span> <span class="nf">y:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nv">y</span> <span class="nf">z:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nv">z</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">unitValue</span> <span class="o">=</span> <span class="n">sqrtf</span><span class="p">(</span><span class="n">powf</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="n">powf</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="n">powf</span><span class="p">(</span><span class="n">z</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">x0</span> <span class="o">=</span> <span class="n">x</span><span class="o">/</span><span class="n">unitValue</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">y0</span> <span class="o">=</span> <span class="n">y</span><span class="o">/</span><span class="n">unitValue</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">z0</span> <span class="o">=</span> <span class="n">z</span><span class="o">/</span><span class="n">unitValue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CATransform3D</span> <span class="n">matrixTransform</span> <span class="o">=</span> <span class="n">CATransform3DIdentity</span><span class="p">;</span>
</span><span class='line'>    <span class="n">matrixTransform</span><span class="p">.</span><span class="n">m11</span> <span class="o">=</span> <span class="n">powf</span><span class="p">(</span><span class="n">x0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">cosf</span><span class="p">(</span><span class="n">angle</span><span class="p">))</span><span class="o">+</span><span class="n">cosf</span><span class="p">(</span><span class="n">angle</span><span class="p">);</span>
</span><span class='line'>    <span class="n">matrixTransform</span><span class="p">.</span><span class="n">m12</span> <span class="o">=</span> <span class="n">x0</span><span class="o">*</span><span class="n">y0</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">cosf</span><span class="p">(</span><span class="n">angle</span><span class="p">))</span><span class="o">+</span><span class="n">z0</span><span class="o">*</span><span class="n">sinf</span><span class="p">(</span><span class="n">angle</span><span class="p">);</span>
</span><span class='line'>    <span class="n">matrixTransform</span><span class="p">.</span><span class="n">m13</span> <span class="o">=</span> <span class="n">x0</span><span class="o">*</span><span class="n">z0</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">cosf</span><span class="p">(</span><span class="n">angle</span><span class="p">))</span><span class="o">-</span><span class="n">y0</span><span class="o">*</span><span class="n">sinf</span><span class="p">(</span><span class="n">angle</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">matrixTransform</span><span class="p">.</span><span class="n">m21</span> <span class="o">=</span> <span class="n">x0</span><span class="o">*</span><span class="n">y0</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">cosf</span><span class="p">(</span><span class="n">angle</span><span class="p">))</span><span class="o">-</span><span class="n">z0</span><span class="o">*</span><span class="n">sinf</span><span class="p">(</span><span class="n">angle</span><span class="p">);</span>
</span><span class='line'>    <span class="n">matrixTransform</span><span class="p">.</span><span class="n">m22</span> <span class="o">=</span> <span class="n">powf</span><span class="p">(</span><span class="n">y0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">cosf</span><span class="p">(</span><span class="n">angle</span><span class="p">))</span><span class="o">+</span><span class="n">cosf</span><span class="p">(</span><span class="n">angle</span><span class="p">);</span>
</span><span class='line'>    <span class="n">matrixTransform</span><span class="p">.</span><span class="n">m23</span> <span class="o">=</span> <span class="n">y0</span><span class="o">*</span><span class="n">z0</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">cosf</span><span class="p">(</span><span class="n">angle</span><span class="p">))</span><span class="o">+</span><span class="n">x0</span><span class="o">*</span><span class="n">sinf</span><span class="p">(</span><span class="n">angle</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">matrixTransform</span><span class="p">.</span><span class="n">m31</span> <span class="o">=</span> <span class="n">x0</span><span class="o">*</span><span class="n">z0</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">cosf</span><span class="p">(</span><span class="n">angle</span><span class="p">))</span><span class="o">+</span><span class="n">y0</span><span class="o">*</span><span class="n">sinf</span><span class="p">(</span><span class="n">angle</span><span class="p">);</span>
</span><span class='line'>    <span class="n">matrixTransform</span><span class="p">.</span><span class="n">m32</span> <span class="o">=</span> <span class="n">y0</span><span class="o">*</span><span class="n">z0</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">cosf</span><span class="p">(</span><span class="n">angle</span><span class="p">))</span><span class="o">-</span><span class="n">x0</span><span class="o">*</span><span class="n">sinf</span><span class="p">(</span><span class="n">angle</span><span class="p">);</span>
</span><span class='line'>    <span class="n">matrixTransform</span><span class="p">.</span><span class="n">m33</span> <span class="o">=</span> <span class="n">powf</span><span class="p">(</span><span class="n">z0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">cosf</span><span class="p">(</span><span class="n">angle</span><span class="p">))</span><span class="o">+</span><span class="n">cosf</span><span class="p">(</span><span class="n">angle</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">CATransform3DConcat</span><span class="p">(</span><span class="n">matrixTransform</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>该方法根据旋转变换矩阵的计算方式，得到旋转参数(angle, x, y, z)对应的变换矩阵，然后和原始矩阵相乘，得到最终的变换矩阵。</p>

<h4>4. demo</h4>

<p>以旋转变换demo为例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">logTransform:</span><span class="p">(</span><span class="n">CATransform3D</span><span class="p">)</span><span class="nv">t</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;***************************&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%f,%f,%f,%f&quot;</span><span class="p">,</span><span class="n">t</span><span class="p">.</span><span class="n">m11</span><span class="p">,</span><span class="n">t</span><span class="p">.</span><span class="n">m12</span><span class="p">,</span><span class="n">t</span><span class="p">.</span><span class="n">m13</span><span class="p">,</span><span class="n">t</span><span class="p">.</span><span class="n">m14</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%f,%f,%f,%f&quot;</span><span class="p">,</span><span class="n">t</span><span class="p">.</span><span class="n">m21</span><span class="p">,</span><span class="n">t</span><span class="p">.</span><span class="n">m22</span><span class="p">,</span><span class="n">t</span><span class="p">.</span><span class="n">m23</span><span class="p">,</span><span class="n">t</span><span class="p">.</span><span class="n">m24</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%f,%f,%f,%f&quot;</span><span class="p">,</span><span class="n">t</span><span class="p">.</span><span class="n">m31</span><span class="p">,</span><span class="n">t</span><span class="p">.</span><span class="n">m32</span><span class="p">,</span><span class="n">t</span><span class="p">.</span><span class="n">m33</span><span class="p">,</span><span class="n">t</span><span class="p">.</span><span class="n">m34</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%f,%f,%f,%f&quot;</span><span class="p">,</span><span class="n">t</span><span class="p">.</span><span class="n">m41</span><span class="p">,</span><span class="n">t</span><span class="p">.</span><span class="n">m42</span><span class="p">,</span><span class="n">t</span><span class="p">.</span><span class="n">m43</span><span class="p">,</span><span class="n">t</span><span class="p">.</span><span class="n">m44</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">onRotateButtonAction:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//Rotate</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//随意的原始矩阵</span>
</span><span class='line'>    <span class="n">CATransform3D</span> <span class="n">matrixOrigin</span> <span class="o">=</span> <span class="n">CATransform3DMakeRotation</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span> <span class="c1">//旋转向量（2,3,4）</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">angle</span> <span class="o">=</span> <span class="mf">30.0f</span> <span class="o">*</span> <span class="n">M_PI</span> <span class="o">/</span> <span class="mf">180.0f</span><span class="p">;</span> <span class="c1">//旋转角度30°，计算对应的弧度</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//通过系统函数计算变换矩阵</span>
</span><span class='line'>    <span class="n">CATransform3D</span> <span class="n">matrixSystem</span> <span class="o">=</span> <span class="n">CATransform3DRotate</span><span class="p">(</span><span class="n">matrixOrigin</span><span class="p">,</span> <span class="n">angle</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">);</span>
</span><span class='line'>    <span class="n">systemLayer</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">matrixSystem</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">logTransform:</span><span class="n">matrixSystem</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//自定义方法计算3D旋转矩阵</span>
</span><span class='line'>    <span class="n">CATransform3D</span> <span class="n">matrixCalculate</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">rotateWithMatrix:</span><span class="n">matrixOrigin</span> <span class="nl">angle:</span><span class="n">angle</span> <span class="nl">x:</span><span class="n">x</span> <span class="nl">y:</span><span class="n">y</span> <span class="nl">z:</span><span class="n">z</span><span class="p">];</span>
</span><span class='line'>    <span class="n">customLayer</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">matrixCalculate</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">logTransform:</span><span class="n">matrixCalculate</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>demo使用随意生成的参数<code>matrixOrigin</code>模拟一个CALayer的初始<code>transform</code>属性值，然后使用同一组变换参数，分别通过系统函数和自定义方法对原始<code>transform</code>做变换，然后对比变换结果。最终的计算得到的变换矩阵可以通过log的方式打印出来，也可以在界面上做直观的展示。</p>

<p>平移和缩放变换矩阵的验证方式和旋转类似。</p>

<p>经过对比发现两种计算方式得到的最终变换矩阵是完全相同的，这进一步验证了CoreAnimation中变换矩阵的计算方式。</p>

<p>完整的<a href="https://github.com/wangzz/Demo/tree/master/CoreAnimationDemo">demo</a>放到了github上，欢迎大家下载。</p>

<h2>四、说明</h2>

<ul>
<li>变换矩阵可以组合</li>
</ul>


<p>可以同时对CALayer进行多种变换，比如同时缩放和旋转，直接通过矩阵相乘得到组合变换的变换矩阵。CoreAnimation提供了变换矩阵组合的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">CATransform3D</span> <span class="n">CATransform3DConcat</span> <span class="p">(</span><span class="n">CATransform3D</span> <span class="n">a</span><span class="p">,</span> <span class="n">CATransform3D</span> <span class="n">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，通常情况下矩阵乘法不支持交换律，因此两个矩阵a、b的顺序不能交换。</p>

<ul>
<li>最好不要手动修改变换矩阵的值</li>
</ul>


<p>CoreAnimation的3D变换对应的4维变换矩阵，单独修改其中的任何一个值都可能带来不可控的变换结果，因此不建议单独手动修改变换矩阵，而是通过基础变换或者基础变换组合的方式修改。</p>

<ul>
<li>理解有误的地方还望大家指出。</li>
</ul>


<h2>五、参考文档</h2>

<ul>
<li><a href="http://www.thinkandbuild.it/introduction-to-3d-drawing-in-core-animation-part-2/">INTRODUCTION TO 3D DRAWING IN CORE ANIMATION</a></li>
<li><a href="http://en.wikipedia.org/wiki/Rotation_matrix">Rotation matrix</a></li>
<li><a href="http://baike.baidu.com/view/2939423.htm">右手坐标系</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS屏幕旋转学习笔记]]></title>
    <link href="http://wangzz.github.io/blog/2014/08/08/ping-mu-xuan-zhuan-xue-xi-bi-ji/"/>
    <updated>2014-08-08T09:39:04+08:00</updated>
    <id>http://wangzz.github.io/blog/2014/08/08/ping-mu-xuan-zhuan-xue-xi-bi-ji</id>
    <content type="html"><![CDATA[<h2>一、两种orientation</h2>

<p>了解屏幕旋转首先需要区分两种orientation</p>

<h4>1、device orientation</h4>

<p>设备的物理方向</p>

<h4>2、interface orientation</h4>

<p>界面显示的方向</p>

<p>iOS提供了在设备旋转时，界面显示发生相应适配的能力，已达到方便用户使用并提供最佳显示效果的目的。开发者需要指定应用支持的显示方向，并对界面显示做出对应的适配。由于界面适配的工作量相当大，目前国内的应用大都只支持默认的竖屏方向，</p>

<!-- more -->


<h2>二、相关枚举定义</h2>

<h4>1、iOS5和之前版本（后文均简称iOS5）：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef NS_ENUM(NSInteger, UIInterfaceOrientation) {
</span><span class='line'>    UIInterfaceOrientationPortrait           = UIDeviceOrientationPortrait,
</span><span class='line'>    UIInterfaceOrientationPortraitUpsideDown = UIDeviceOrientationPortraitUpsideDown,
</span><span class='line'>    UIInterfaceOrientationLandscapeLeft      = UIDeviceOrientationLandscapeRight,
</span><span class='line'>    UIInterfaceOrientationLandscapeRight     = UIDeviceOrientationLandscapeLeft
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<h4>2、iOS6和之后版本（后文均简称iOS6）又新增了：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef NS_OPTIONS(NSUInteger, UIInterfaceOrientationMask) {
</span><span class='line'>    UIInterfaceOrientationMaskPortrait = (1 &lt;&lt; UIInterfaceOrientationPortrait),
</span><span class='line'>    UIInterfaceOrientationMaskLandscapeLeft = (1 &lt;&lt; UIInterfaceOrientationLandscapeLeft),
</span><span class='line'>    UIInterfaceOrientationMaskLandscapeRight = (1 &lt;&lt; UIInterfaceOrientationLandscapeRight),
</span><span class='line'>    UIInterfaceOrientationMaskPortraitUpsideDown = (1 &lt;&lt; UIInterfaceOrientationPortraitUpsideDown),
</span><span class='line'>    UIInterfaceOrientationMaskLandscape = (UIInterfaceOrientationMaskLandscapeLeft | UIInterfaceOrientationMaskLandscapeRight),
</span><span class='line'>    UIInterfaceOrientationMaskAll = (UIInterfaceOrientationMaskPortrait | UIInterfaceOrientationMaskLandscapeLeft | UIInterfaceOrientationMaskLandscapeRight | UIInterfaceOrientationMaskPortraitUpsideDown),
</span><span class='line'>    UIInterfaceOrientationMaskAllButUpsideDown = (UIInterfaceOrientationMaskPortrait | UIInterfaceOrientationMaskLandscapeLeft | UIInterfaceOrientationMaskLandscapeRight),
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>iOS6使用<code>NS_OPTIONS</code>的方式重新定义了UIInterfaceOrientationMaskPortrait、UIInterfaceOrientationMaskLandscapeLeft、UIInterfaceOrientationMaskLandscapeRight、UIInterfaceOrientationMaskPortraitUpsideDown几种基础枚举，这就意味着能以组合的方式更加方便的使用这些枚举值。</p>

<h2>三、相关方法</h2>

<h4>1、iOS5中控制屏幕旋转的方法：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Applications should use supportedInterfaceOrientations and/or shouldAutorotate..
</span><span class='line'>- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation NS_DEPRECATED_IOS(2_0, 6_0);</span></code></pre></td></tr></table></div></figure>


<p>如果打算支持toInterfaceOrientation对应的方向就返回YES，否则返回NO。</p>

<h4>2、iOS6中控制屏幕旋转相关方法：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// New Autorotation support.
</span><span class='line'>- (BOOL)shouldAutorotate NS_AVAILABLE_IOS(6_0);
</span><span class='line'>- (NSUInteger)supportedInterfaceOrientations NS_AVAILABLE_IOS(6_0);
</span><span class='line'>// Returns interface orientation masks.
</span><span class='line'>- (UIInterfaceOrientation)preferredInterfaceOrientationForPresentation NS_AVAILABLE_IOS(6_0);
</span></code></pre></td></tr></table></div></figure>


<p>第一个方法决定是否支持多方向旋转屏，如果返回NO则后面的两个方法都不会再被调用，而且只会支持默认的UIInterfaceOrientationMaskPortrait方向；</p>

<p>第二个方法直接返回支持的旋转方向，该方法在iPad上的默认返回值是<code>UIInterfaceOrientationMaskAll</code>，iPhone上的默认返回值是<code>UIInterfaceOrientationMaskAllButUpsideDown</code>，详情见<a href="https://developer.apple.com/library/ios/qa/qa1688/_index.html">官方Q&amp;A文档</a>；</p>

<p>第三个方法返回最优先显示的屏幕方向，比如同时支持Portrait和Landscape方向，但想优先显示Landscape方向，那软件启动的时候就会先显示Landscape，在手机切换旋转方向的时候仍然可以在Portrait和Landscape之间切换；</p>

<h4>3、attemptRotationToDeviceOrientation方法</h4>

<p>从iOS5开始有了这个新方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// call this method when your return value from shouldAutorotateToInterfaceOrientation: changes
</span><span class='line'>// if the current interface orientation does not match the current device orientation, a rotation may occur provided all relevant view controllers now return YES from shouldAutorotateToInterfaceOrientation:
</span><span class='line'>+ (void)attemptRotationToDeviceOrientation NS_AVAILABLE_IOS(5_0);</span></code></pre></td></tr></table></div></figure>


<p>该方法的使用场景是interface orientation和device orientation不一致，但希望通过重新指定interface orientation的值，立即实现二者一致；如果这时只是更改了支持的interface orientation的值，没有调用attemptRotationToDeviceOrientation，那么下次device orientation变化的时候才会实现二者一致，关键点在于能不能立即实现。</p>

<p>举个例子：</p>

<p>假设当前的interface orientation只支持Portrait，如果device orientation变成Landscape，那么interface orientation仍然显示Portrait；</p>

<p>如果这时我们希望interface orientation也变成和device orientation一致的Landscape，以iOS6为例，需要先将supportedInterfaceOrientations的返回值改成Landscape，然后调用attemptRotationToDeviceOrientation方法，系统会重新询问支持的interface orientation，已达到立即更改当前interface orientation的目的。</p>

<h2>四、如何决定interface orientation</h2>

<h4>1、全局控制</h4>

<p>Info.plist文件中，有一个<code>Supported interface orientations</code>，可以配置整个应用的屏幕方向，此处为全局控制。</p>

<h4>2、UIWindow</h4>

<p>iOS6的UIApplicationDelegate提供了下述方法，能够指定 UIWindow 中的界面的屏幕方向：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (NSUInteger)application:(UIApplication *)application supportedInterfaceOrientationsForWindow:(UIWindow *)window  NS_AVAILABLE_IOS(6_0);</span></code></pre></td></tr></table></div></figure>


<p>该方法默认值为Info.plist中配置的<code>Supported interface orientations</code>项的值。</p>

<p>iOS中通常只有一个window，所以此处的控制也可以视为全局控制。</p>

<h4>3、controller</h4>

<p>只有以下两种情况：</p>

<ul>
<li>当前controller是window的rootViewController</li>
<li>当前controller是modal模式的</li>
</ul>


<p>时，orientations相关方法才会起作用（才会被调用），当前controller及其所有的childViewController都在此作用范围内。</p>

<h4>4、最终支持的屏幕方向</h4>

<p>前面所述的3种控制规则的交集就是一个controller的最终支持的方向；</p>

<p>如果最终的交集为空，在iOS6以后会抛出<code>UIApplicationInvalidInterfaceOrientationException</code>崩溃异常。</p>

<h2>四、强制屏幕旋转</h2>

<p>如果interface和device方向不一样，想强制将interface旋转成device的方向，可以通过attemptRotationToDeviceOrientation实现，但是如果想将interface强制旋转成任一指定方向，该方式就无能为力了。</p>

<p>不过聪明的开发者们总能想到解决方式：</p>

<h4>1、私有方法</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[UIDevice currentDevice] setOrientation:UIInterfaceOrientationPortrait];</span></code></pre></td></tr></table></div></figure>


<p>但是现在苹果已经将该方法私有化了，越狱开发的同学可以试试。</p>

<h4>2、旋转view的transform</h4>

<p>也可以通过旋转view的transform属性达到强制旋转屏幕方向的目的，但个人感觉这不是靠谱的思路，可能会带来某些诡异的问题。</p>

<h4>3、主动触发orientation机制</h4>

<p>要是能主动触发系统的orientation机制，调用orientation相关方法，使新设置的orientation值起作用就好了。这样只要提前设置好想要支持的orientation，然后主动触发orientation机制，便能实现将interface orientation旋转至任意方向的目的。</p>

<p>万能的<a href="http://stackoverflow.com/a/14445888/2293677">stackoverflow</a>上提供了一种主动触发的方式：</p>

<p>在iOS4和iOS6以后：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UIViewController *vc = [[UIViewController alloc]init];
</span><span class='line'>[self presentModalViewController:vc animated:NO];
</span><span class='line'>[self dismissModalViewControllerAnimated:NO];
</span><span class='line'>[vc release];</span></code></pre></td></tr></table></div></figure>


<p>iOS5中：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UIWindow *window = [[UIApplication sharedApplication] keyWindow];
</span><span class='line'>UIView *view = [window.subviews objectAtIndex:0];
</span><span class='line'>[view removeFromSuperview];
</span><span class='line'>[window addSubview:view];</span></code></pre></td></tr></table></div></figure>


<p>这种方式会触发UIKit重新调用controller的orientation相关方法，以达到在device方向不变的情况下改变interface方向的目的。</p>

<p>虽然不优雅，但却能解决问题，凑合吧。。</p>

<p>PS：</p>

<p>话说iOS8中的屏幕旋转相关方法又变化了，表示适配起来很蛋疼。。。</p>

<h2>五、参考文档</h2>

<ul>
<li><a href="https://developer.apple.com/library/ios/qa/qa1688/_index.html">Why won&rsquo;t my UIViewController rotate with the device?</a>；</li>
<li><a href="http://stackoverflow.com/a/14445888/2293677">How to force a UIViewController to Portait orientation in iOS 6</a></li>
<li><a href="http://www.cnblogs.com/jhzhu/p/3480885.html">IOS Orientation, 想怎么转就怎么转</a></li>
<li><a href="http://zhenby.com/blog/2013/08/20/talk-ios-orientation/">iOS 屏幕方向那点事儿</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WWDC2014之App Extensions学习笔记]]></title>
    <link href="http://wangzz.github.io/blog/2014/06/23/wwdc2014zhi-app-extensionsxue-xi-bi-ji/"/>
    <updated>2014-06-23T19:55:29+08:00</updated>
    <id>http://wangzz.github.io/blog/2014/06/23/wwdc2014zhi-app-extensionsxue-xi-bi-ji</id>
    <content type="html"><![CDATA[<p><img src="http://wangzz.github.io/images/article5/wwdc_banner_promo.jpg" alt="wwdc_banner_promo" /></p>

<h2>一、关于App Extensions</h2>

<p>extension是iOS8新开放的一种对几个固定系统区域的扩展机制，它可以在一定程度上弥补iOS的沙盒机制对应用间通信的限制。</p>

<p>extension的出现，为用户提供了在其它应用中使用我们应用提供的服务的便捷方式，比如用户可以在<code>Today</code>的<code>widgets</code>中查看应用展示的简略信息，而不用再进到我们的应用中，这将是一种全新的用户体验；但是，extension的出现可能会减少用户启动应用的次数，同时还会增大开发者的工作量。</p>

<!-- more -->


<h4>几个关键词</h4>

<ul>
<li>extension point</li>
</ul>


<p>系统中支持extension的区域，extension的类别也是据此区分的，iOS上共有<code>Today</code>、<code>Share</code>、<code>Action</code>、<code>Photo Editing</code>、<code>Storage Provider</code>、<code>Custom keyboard</code>几种，其中<code>Today</code>中的extension又被称为<code>widget</code>。</p>

<p>每种extension point的使用方式和适合干的活都不一样，因此不存在通用的extension。</p>

<ul>
<li>app extension</li>
</ul>


<p>即为本文所说的extension。extension并不是一个独立的app，它有一个包含在app bundle中的独立bundle，extension的bundle后缀名是<code>.appex</code>。其生命周期也和普通app不同，这些后文将会详述。</p>

<p>extension不能单独存在，必须有一个包含它的containing app。</p>

<p>另外，extension需要用户手动激活，不同的extension激活方式也不同，比如：
比如Today中的widget需要在Today中激活和关闭；<code>Custom keyboard</code>需要在设置中进行相关设置；<code>Photo Editing</code>需要在使用照片时在照片管理器中激活或关闭；<code>Storage Provider</code>可以在选择文件时出现；<code>Share</code>和<code>Action</code>可以在任何应用里被激活，但前提是开发者需要设置<code>Activation Rules</code>，以确定extension需要在合适出现。</p>

<ul>
<li>containing app</li>
</ul>


<p>尽管苹果开放了extension，但是在iOS中extension并不能单独存在，要想提交到AppStore，必须将extension包含在一个app中提交，并且app的实现部分不能为空,这个包含extension的app就叫containing app。</p>

<p>extension会随着containing app的安装而安装，同时随着containing app的卸载而卸载。</p>

<ul>
<li>host app</li>
</ul>


<p>能够调起extension的app被称为host app，比如<code>widget</code>的host app就是<code>Today</code>。</p>

<h2>二、extension和containing app、host app</h2>

<h4>2.1 extension和host app</h4>

<p>extension和host app之间可以通过extensionContext属性直接通信，该属性是新增加的UIViewController类别：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">UIViewController</span><span class="nl">(NSExtensionAdditions)</span> <span class="o">&lt;</span><span class="n">NSExtensionRequestHandling</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Returns the extension context. Also acts as a convenience method for a view controller to check if it participating in an extension request.</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span><span class="n">readonly</span><span class="p">,</span><span class="n">retain</span><span class="p">)</span> <span class="n">NSExtensionContext</span> <span class="o">*</span><span class="n">extensionContext</span> <span class="n">NS_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">8</span><span class="n">_0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>实际上extension和host app之间是通过IPC（interprocess communication）实现的，只是苹果把调用接口高度抽象了，我们并不需要关注那么底层的东西。</p>

<h4>2.2 containing app和host app</h4>

<p>他们之间没有任何直接关系，也从来不需要通信。</p>

<h4>2.3 extension和containing app</h4>

<p>这二者之间的关系最复杂，纠纠缠缠扯不清关系。</p>

<ul>
<li>不能直接通信</li>
</ul>


<p>首先，尽管extension的bundle是放在containing app的bundle中，但是他们是两个完全独立的进程，之间不能直接通信。不过extension可以通过openURL的方式启动containing app（当然也能启动其它app），不过必须通过extensionContext借助host app来实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">//通过openURL的方式启动Containing APP</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">openURLContainingAPP</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">extensionContext</span> <span class="nl">openURL:</span><span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;appextension://123&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="nl">completionHandler:</span><span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">success</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;open url result:%d&quot;</span><span class="p">,</span><span class="n">success</span><span class="p">);</span>
</span><span class='line'>                 <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>extension中是无法直接使用openURL的。</p>

<ul>
<li>可以共享<code>Shared resources</code></li>
</ul>


<p>extension和containing app可以共同读写一个被称为<code>Shared resources</code>的存储区域，这是通过App Groups实现的，后文将会详述。</p>

<p>三者间的关系可以通过官网给的两张图片形象地说明：</p>

<p><img src="http://wangzz.github.io/images/article5/detailed_communication.png" alt="detailed_communication" /></p>

<p><img src="http://wangzz.github.io/images/article5/app_extensions_container_restrictions.png" alt="app_extensions_container_restrictions" /></p>

<ul>
<li>containing app能够控制extension的出现和隐藏</li>
</ul>


<p>通过以下代码，containing app可以让extension出现或隐藏（当然extension也可以让自己隐藏）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">//让隐藏的插件重新显示</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">showTodayExtension</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">NCWidgetController</span> <span class="n">widgetController</span><span class="p">]</span> <span class="nl">setHasContent:</span><span class="n">YES</span> <span class="nl">forWidgetWithBundleIdentifier:</span><span class="s">@&quot;com.wangzz.app.extension&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//隐藏插件</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">hiddeTodayExtension</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">NCWidgetController</span> <span class="n">widgetController</span><span class="p">]</span> <span class="nl">setHasContent:</span><span class="n">NO</span> <span class="nl">forWidgetWithBundleIdentifier:</span><span class="s">@&quot;com.wangzz.app.extension&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>三、App Groups</h2>

<p>这是iOS8新开放的功能，在OS X上早就可用了。它主要用于同一group下的app共享同一份读写空间，以实现数据共享。</p>

<p>extension和containing app共同读写一份数据是很合理的需求，比如系统的股市应用，widget和app中都需要展示几个公司的股票数据，这就可以通过App Groups实现。</p>

<h4>3.1 功能开启</h4>

<p>为了便于后续操作，请先确保你的开发者账号在Xcode上处于登录状态。</p>

<ul>
<li>在app中开启</li>
</ul>


<p>App Groups位于：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">TARGETS</span><span class="o">--&gt;</span><span class="n">AppExtensionDemo</span><span class="o">--&gt;</span><span class="n">Capabilities</span><span class="o">--&gt;</span><span class="n">App</span> <span class="n">Groups</span>
</span></code></pre></td></tr></table></div></figure>


<p>找到以后，将App Groups右上角的开关打开，然后选择添加groups，比如我的是group.wangzz，当然这是为了测试随便起得名字，正规点得命名规则应该是：group.com.company.app。</p>

<p>添加成功以后如下图所示：</p>

<p><img src="http://wangzz.github.io/images/article5/app_group.png" alt="app_group" /></p>

<ul>
<li>在extension中开启</li>
</ul>


<p>我创建的是widget，target名称为TodayExtension，对应的App Groups位于：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">TARGETS</span><span class="o">--&gt;</span><span class="n">TodayExtension</span><span class="o">--&gt;</span><span class="n">Capabilities</span><span class="o">--&gt;</span><span class="n">App</span> <span class="n">Groups</span>
</span></code></pre></td></tr></table></div></figure>


<p>开启方式和app中一样，需要注意的是必须保证这里地App Groups名称和app中的相同，即为group.wangzz。</p>

<h2>四、extension和containing app数据共享</h2>

<p>App Groups给我们提供了同一group内app可以共同读写的区域，可以通过以下方式实现数据共享：</p>

<h4>4.1 通过NSUserDefaults共享数据</h4>

<ul>
<li>存数据</li>
</ul>


<p>通过以下方式向NSUserDefaults中保存数据：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">saveTextByNSUserDefaults</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">shared</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSUserDefaults</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithSuiteName:</span><span class="s">@&quot;group.wangzz&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">shared</span> <span class="nl">setObject:</span><span class="n">_textField</span><span class="p">.</span><span class="n">text</span> <span class="nl">forKey:</span><span class="s">@&quot;wangzz&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">shared</span> <span class="n">synchronize</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是：</p>

<p>1.保存数据的时候必须指明group id；</p>

<p>2.而且要注意NSUserDefaults能够处理的数据只能是可plist化的对象，详情见<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/PropertyLists/AboutPropertyLists/AboutPropertyLists.html">Property List Programming Guide</a>。</p>

<p>3.为了防止出现数据同步问题，不要忘记调用<code>[shared synchronize];</code></p>

<ul>
<li>读数据</li>
</ul>


<p>对应的读取数据方式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">readDataFromNSUserDefaults</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">shared</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSUserDefaults</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithSuiteName:</span><span class="s">@&quot;group.wangzz&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">value</span> <span class="o">=</span> <span class="p">[</span><span class="n">shared</span> <span class="nl">valueForKey:</span><span class="s">@&quot;wangzz&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>4.2 通过NSFileManager共享数据</h4>

<p>NSFileManager在iOS7提供了containerURLForSecurityApplicationGroupIdentifier方法，可以用来实现app group共享数据。</p>

<ul>
<li>保存数据</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">saveTextByNSFileManager</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSError</span> <span class="o">*</span><span class="n">err</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">containerURL</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="nl">containerURLForSecurityApplicationGroupIdentifier:</span><span class="s">@&quot;group.wangzz&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">containerURL</span> <span class="o">=</span> <span class="p">[</span><span class="n">containerURL</span> <span class="nl">URLByAppendingPathComponent:</span><span class="s">@&quot;Library/Caches/good&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">value</span> <span class="o">=</span> <span class="n">_textField</span><span class="p">.</span><span class="n">text</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">value</span> <span class="nl">writeToURL:</span><span class="n">containerURL</span> <span class="nl">atomically:</span><span class="n">YES</span> <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">err</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">err</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;save value:%@ success.&quot;</span><span class="p">,</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>读数据</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">readTextByNSFileManager</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSError</span> <span class="o">*</span><span class="n">err</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">containerURL</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="nl">containerURLForSecurityApplicationGroupIdentifier:</span><span class="s">@&quot;group.wangzz&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">containerURL</span> <span class="o">=</span> <span class="p">[</span><span class="n">containerURL</span> <span class="nl">URLByAppendingPathComponent:</span><span class="s">@&quot;Library/Caches/good&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">value</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithContentsOfURL:</span><span class="n">containerURL</span> <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">err</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这里我试着保存和读取的是字符串数据，但读写SQlite我相信也是没问题的。</p>

<ul>
<li>数据同步</li>
</ul>


<p>两个应用共同读取同一份数据，就会引发数据同步问题。WWDC2014的视频中建议使用NSFileCoordination实现普通文件的读写同步，而数据库可以使用CoreData,Sqlite也支持同步。</p>

<h2>五、extension和containing app代码共享</h2>

<p>和数据共享类似，extension和containing app很自然地会有一些业务逻辑上可以共用的代码，这时可以通过iOS8中刚开放使用的framework实现。苹果在<a href="https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html#//apple_ref/doc/uid/TP40014214-CH21-SW1">App Extension Programming Guide</a>中是这样描述的：</p>

<blockquote><p>In iOS 8.0 and later, you can use an embedded framework to share code between your extension and its containing app. For example, if you develop image-processing code that you want both your Photo Editing extension and its containing app to share, you can put the code into a framework and embed it in both targets.</p></blockquote>

<p>即将framework分别嵌入到extension和containing app的target中实现代码共享。但这样岂不是需要分别要将framework分别copy到extension和containing app的main bundle中？</p>

<p>参考extension和containing app数据共享，我试想能不能将framework只保存一份放在App Groups区域？</p>

<h4>5.1 copy framework到App Groups</h4>

<p>在app首次启动的时候将framework放到App Groups区域：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">copyFrameworkFromMainBundleToAppGroup</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSFileManager</span> <span class="o">*</span><span class="n">manager</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSError</span> <span class="o">*</span><span class="n">err</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">containerURL</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="nl">containerURLForSecurityApplicationGroupIdentifier:</span><span class="s">@&quot;group.wangzz&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">sorPath</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@/Dylib.framework&quot;</span><span class="p">,[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="n">bundlePath</span><span class="p">]];</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">desPath</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@/Library/Caches/Dylib.framework&quot;</span><span class="p">,</span><span class="n">containerURL</span><span class="p">.</span><span class="n">path</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">removeResult</span> <span class="o">=</span> <span class="p">[</span><span class="n">manager</span> <span class="nl">removeItemAtPath:</span><span class="n">desPath</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">err</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">removeResult</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">err</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;remove success.&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">copyResult</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="nl">copyItemAtPath:</span><span class="n">sorPath</span> <span class="nl">toPath:</span><span class="n">desPath</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">err</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">copyResult</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">err</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;copy success.&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">copyResult</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>5.2 使用framework：</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">loadFrameworkInAppGroup</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSError</span> <span class="o">*</span><span class="n">err</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">containerURL</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="nl">containerURLForSecurityApplicationGroupIdentifier:</span><span class="s">@&quot;group.wangzz&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">desPath</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@/Library/Caches/Dylib.framework&quot;</span><span class="p">,</span><span class="n">containerURL</span><span class="p">.</span><span class="n">path</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSBundle</span> <span class="o">*</span><span class="n">bundle</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSBundle</span> <span class="nl">bundleWithPath:</span><span class="n">desPath</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">bundle</span> <span class="nl">loadAndReturnError:</span><span class="o">&amp;</span><span class="n">err</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Class</span> <span class="n">root</span> <span class="o">=</span> <span class="n">NSClassFromString</span><span class="p">(</span><span class="s">@&quot;Person&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">root</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Person</span> <span class="o">*</span><span class="n">person</span> <span class="o">=</span> <span class="p">[[</span><span class="n">root</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">person</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">person</span> <span class="n">run</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">err</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>经过测试，竟然能够加载成功。</p>

<p>需要说明的是，这里只是说那么用是可以成功加载framework，但还面临不少问题，比如如果用户在启动app之前去使用extension，这时framework还没有copy过去，怎么处理；另外iOS的机制或者苹果的审核是否允许这样使用等。</p>

<p>在一切确定下来之前还是乖乖按文档中的方式使用吧。</p>

<h2>六、生命周期</h2>

<p>extension和普通app的最大区别之一是生命周期。</p>

<ul>
<li>开始</li>
</ul>


<p>在用户通过host app点击extension时，系统就会实例化extension应用，这是生命周期的开始。</p>

<ul>
<li>执行任务</li>
</ul>


<p>在extension启动以后，开始执行它的使命。</p>

<ul>
<li>终止</li>
</ul>


<p>在用户取消任务，或者任务执行结束，或者开启了一个长时后台任务时，系统会将其杀掉。</p>

<p>由此可见，extension就是为了任务而生！</p>

<p>下图来自官方文档，它将生命周期划分的更详细：</p>

<p><img src="http://wangzz.github.io/images/article5/app_extensions_lifecycle.png" alt="app_extensions_lifecycle" /></p>

<p>通过打印日志发现，<code>Today</code>中的<code>widget</code>在将<code>Today</code>切换到<code>全部</code>或者<code>未读通知时</code>都会被杀掉。</p>

<h2>七、 调试</h2>

<p>extension和普通app的调试方式差不多，开始调试前先选中extension对应的target，点击run，就会弹出下图所示选择框：</p>

<p><img src="http://wangzz.github.io/images/article5/extension_debug.png" alt="extension_debug" /></p>

<p>需要选择一个host app，这里选择<code>Today</code>。</p>

<p>然后即可和普通app一样调试了，不过我在实际使用过程中，发现有各种奇怪的事情，比如NSLog无法在控制台输出，应该是bug吧。</p>

<h2>八、 iOS8应用文件系统</h2>

<p>发现iOS8的文件系统发生了变化，新的文件系统将可执行文件（即原来的.app文件）从沙盒中移到了另外一个地方，这样感觉更合理。</p>

<ul>
<li>测试代码</li>
</ul>


<p>下述代码用于打印App Groups路径、应用的可执行文件路径、对应的Documents路径：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">logAppPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//app group路径</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">containerURL</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="nl">containerURLForSecurityApplicationGroupIdentifier:</span><span class="s">@&quot;group.wangzz&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;app group:</span><span class="se">\n</span><span class="s">%@&quot;</span><span class="p">,</span><span class="n">containerURL</span><span class="p">.</span><span class="n">path</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//打印可执行文件路径</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;bundle:</span><span class="se">\n</span><span class="s">%@&quot;</span><span class="p">,[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="n">bundlePath</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//打印documents</span>
</span><span class='line'>    <span class="n">NSArray</span> <span class="o">*</span><span class="n">paths</span> <span class="o">=</span> <span class="n">NSSearchPathForDirectoriesInDomains</span><span class="p">(</span><span class="n">NSDocumentDirectory</span><span class="p">,</span> <span class="n">NSUserDomainMask</span><span class="p">,</span> <span class="n">YES</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">path</span> <span class="o">=</span> <span class="p">[</span><span class="n">paths</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;documents:</span><span class="se">\n</span><span class="s">%@&quot;</span><span class="p">,</span><span class="n">path</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>containing app执行结果</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="mi">2014</span><span class="o">-</span><span class="mo">06</span><span class="o">-</span><span class="mi">23</span> <span class="mi">19</span><span class="o">:</span><span class="mi">35</span><span class="o">:</span><span class="mf">03.944</span> <span class="n">AppExtensionDemo</span><span class="p">[</span><span class="mi">7471</span><span class="o">:</span><span class="mi">365131</span><span class="p">]</span> <span class="n">app</span> <span class="nl">group:</span>
</span><span class='line'><span class="o">/</span><span class="n">private</span><span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">mobile</span><span class="o">/</span><span class="n">Containers</span><span class="o">/</span><span class="n">Shared</span><span class="o">/</span><span class="n">AppGroup</span><span class="o">/</span><span class="mi">89</span><span class="n">CCBFB1</span><span class="o">-</span><span class="n">CA5E</span><span class="o">-</span><span class="mi">4</span><span class="n">C7F</span><span class="o">-</span><span class="mi">80</span><span class="n">CB</span><span class="o">-</span><span class="n">A3EB9E841816</span>
</span><span class='line'><span class="mi">2014</span><span class="o">-</span><span class="mo">06</span><span class="o">-</span><span class="mi">23</span> <span class="mi">19</span><span class="o">:</span><span class="mi">35</span><span class="o">:</span><span class="mf">03.946</span> <span class="n">AppExtensionDemo</span><span class="p">[</span><span class="mi">7471</span><span class="o">:</span><span class="mi">365131</span><span class="p">]</span> <span class="nl">bundle:</span>
</span><span class='line'><span class="o">/</span><span class="n">private</span><span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">mobile</span><span class="o">/</span><span class="n">Containers</span><span class="o">/</span><span class="n">Bundle</span><span class="o">/</span><span class="n">Application</span><span class="o">/</span><span class="mi">1</span><span class="n">AC73797</span><span class="o">-</span><span class="n">A3BB</span><span class="o">-</span><span class="mi">4</span><span class="n">BDE</span><span class="o">-</span><span class="n">A647</span><span class="o">-</span><span class="mi">3</span><span class="n">D083DA6871A</span><span class="o">/</span><span class="n">AppExtensionDemo</span><span class="p">.</span><span class="n">app</span>
</span><span class='line'><span class="mi">2014</span><span class="o">-</span><span class="mo">06</span><span class="o">-</span><span class="mi">23</span> <span class="mi">19</span><span class="o">:</span><span class="mi">35</span><span class="o">:</span><span class="mf">03.948</span> <span class="n">AppExtensionDemo</span><span class="p">[</span><span class="mi">7471</span><span class="o">:</span><span class="mi">365131</span><span class="p">]</span> <span class="nl">documents:</span>
</span><span class='line'><span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">mobile</span><span class="o">/</span><span class="n">Containers</span><span class="o">/</span><span class="n">Data</span><span class="o">/</span><span class="n">Application</span><span class="o">/</span><span class="n">E5E6E516</span><span class="o">-</span><span class="mo">0163</span><span class="o">-</span><span class="mi">4754</span><span class="o">-</span><span class="mi">9</span><span class="n">D10</span><span class="o">-</span><span class="n">A5F6C33A6261</span><span class="o">/</span><span class="n">Documents</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>extension执行结果</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">Jun</span> <span class="mi">23</span> <span class="mi">19</span><span class="o">:</span><span class="mi">37</span><span class="o">:</span><span class="mi">49</span> <span class="n">autonavis</span><span class="o">-</span><span class="n">iPad</span> <span class="n">com</span><span class="p">.</span><span class="n">foogry</span><span class="p">.</span><span class="n">AppExtensionDemo</span><span class="p">.</span><span class="n">TodayExtension</span><span class="p">[</span><span class="mi">7638</span><span class="p">]</span> <span class="o">&lt;</span><span class="n">Warning</span><span class="o">&gt;:</span> <span class="n">app</span> <span class="nl">group:</span>
</span><span class='line'>  <span class="o">/</span><span class="n">private</span><span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">mobile</span><span class="o">/</span><span class="n">Containers</span><span class="o">/</span><span class="n">Shared</span><span class="o">/</span><span class="n">AppGroup</span><span class="o">/</span><span class="mi">89</span><span class="n">CCBFB1</span><span class="o">-</span><span class="n">CA5E</span><span class="o">-</span><span class="mi">4</span><span class="n">C7F</span><span class="o">-</span><span class="mi">80</span><span class="n">CB</span><span class="o">-</span><span class="n">A3EB9E841816</span>
</span><span class='line'><span class="n">Jun</span> <span class="mi">23</span> <span class="mi">19</span><span class="o">:</span><span class="mi">37</span><span class="o">:</span><span class="mi">49</span> <span class="n">autonavis</span><span class="o">-</span><span class="n">iPad</span> <span class="n">com</span><span class="p">.</span><span class="n">foogry</span><span class="p">.</span><span class="n">AppExtensionDemo</span><span class="p">.</span><span class="n">TodayExtension</span><span class="p">[</span><span class="mi">7638</span><span class="p">]</span> <span class="o">&lt;</span><span class="n">Warning</span><span class="o">&gt;:</span> <span class="nl">bundle:</span>
</span><span class='line'>  <span class="o">/</span><span class="n">private</span><span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">mobile</span><span class="o">/</span><span class="n">Containers</span><span class="o">/</span><span class="n">Bundle</span><span class="o">/</span><span class="n">Application</span><span class="o">/</span><span class="mi">596717</span><span class="n">B7</span><span class="o">-</span><span class="mi">7</span><span class="n">CB8</span><span class="o">-</span><span class="mf">4F</span><span class="mi">53</span><span class="o">-</span><span class="n">BCD4</span><span class="o">-</span><span class="mf">380F</span><span class="mi">34</span><span class="n">ABD30F</span><span class="o">/</span><span class="n">AppExtensionDemo</span><span class="p">.</span><span class="n">app</span><span class="o">/</span><span class="n">PlugIns</span><span class="o">/</span><span class="n">com</span><span class="p">.</span><span class="n">foogry</span><span class="p">.</span><span class="n">AppExtensionDemo</span><span class="p">.</span><span class="n">TodayExtension</span><span class="p">.</span><span class="n">appex</span>
</span><span class='line'><span class="n">Jun</span> <span class="mi">23</span> <span class="mi">19</span><span class="o">:</span><span class="mi">37</span><span class="o">:</span><span class="mi">49</span> <span class="n">autonavis</span><span class="o">-</span><span class="n">iPad</span> <span class="n">com</span><span class="p">.</span><span class="n">foogry</span><span class="p">.</span><span class="n">AppExtensionDemo</span><span class="p">.</span><span class="n">TodayExtension</span><span class="p">[</span><span class="mi">7638</span><span class="p">]</span> <span class="o">&lt;</span><span class="n">Warning</span><span class="o">&gt;:</span> <span class="nl">documents:</span>
</span><span class='line'>  <span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">mobile</span><span class="o">/</span><span class="n">Containers</span><span class="o">/</span><span class="n">Data</span><span class="o">/</span><span class="n">PluginKitPlugin</span><span class="o">/</span><span class="mi">57581433</span><span class="o">-</span><span class="mi">3</span><span class="n">DBD</span><span class="o">-</span><span class="mi">4930</span><span class="o">-</span><span class="mf">971F</span><span class="o">-</span><span class="mi">78</span><span class="n">D30C150E8A</span><span class="o">/</span><span class="n">Documents</span>
</span></code></pre></td></tr></table></div></figure>


<p>由此可见，不管是extension还是containing app，他们的可执行文件和保存数据的目录都是分开存放的，即所有app的可执行文件都放在一个大目录下，保存数据的目录保存在另一个大目录下，同样，AppGroup放在另一个大目录下。</p>

<h2>说明</h2>

<ul>
<li><p>本文用到的demo已经上传到<a href="https://github.com/wangzz/Demo/tree/master/AppExtensionsDemo">github</a>上。</p></li>
<li><p>文中可能有理解有误的地方，还请指出。</p></li>
</ul>


<h2>参考文档</h2>

<ul>
<li><p><a href="https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/index.html#//apple_ref/doc/uid/TP40014214-CH20-SW1">App Extension Programming Guide</a></p></li>
<li><p><a href="http://blog.waynehartman.com/">Crash Course In iOS 8 Widgets</a></p></li>
<li><p><a href="https://developer.apple.com/library/prerelease/ios/documentation/NotificationCenter/Reference/NotificationCenter_Framework/index.html#//apple_ref/doc/uid/TP40014443">Notification Center Framework Reference</a></p></li>
<li><p><a href="https://developer.apple.com/library/prerelease/ios/releasenotes/General/RN-iOSSDK-8.0/">iOS 8 Release Notes</a></p></li>
<li><p><a href="https://developer.apple.com/library/prerelease/ios/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/EnablingAppSandbox.html#//apple_ref/doc/uid/TP40011195-CH4-SW19">Entitlement Key Reference</a></p></li>
<li><p><a href="http://www.pingwest.com/apples-new-extension-eco-system/">苹果的插件生态系统，开发者的新世界</a></p></li>
<li><p><a href="http://www.macstories.net/stories/ios-8-extensions-apples-plan-for-a-powerful-app-ecosystem/">iOS 8 Extensions: Apple’s Plan for a Powerful App Ecosystem</a></p></li>
<li><p><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/PropertyLists/AboutPropertyLists/AboutPropertyLists.html">Property List Programming Guide</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WWDC2014之iOS使用动态库]]></title>
    <link href="http://wangzz.github.io/blog/2014/06/12/wwdc2014zhi-iosshi-yong-dong-tai-ku/"/>
    <updated>2014-06-12T19:27:57+08:00</updated>
    <id>http://wangzz.github.io/blog/2014/06/12/wwdc2014zhi-iosshi-yong-dong-tai-ku</id>
    <content type="html"><![CDATA[<h2>苹果的开放态度</h2>

<p>WWDC2014上发布的<code>Xcode6 beta</code>版有了不少更新，其中令我惊讶的一个是苹果在iOS上开放了动态库，在<code>Xcode6 Beta</code>版的更新文档中是这样描述的：</p>

<blockquote><p>Frameworks for iOS. iOS developers can now create dynamic frameworks. Frameworks are a collection of code and resources to encapsulate functionality that is valuable across multiple projects. Frameworks work perfectly with extensions, sharing logic that can be used by both the main application, and the bundled extensions.</p></blockquote>

<p>详情见官方文档<a href="https://developer.apple.com/library/prerelease/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_6_0.html">New Features in Xcode 6 Beta</a>。</p>

<p>framework是Cocoa/Cocoa Touch程序中使用的一种资源打包方式，可以将将代码文件、头文件、资源文件、说明文档等集中在一起，方便开发者使用，作为一名Cocoa/Cocoa Touch程序员每天都要跟各种各样的Framework打交道。Cocoa/Cocoa Touch开发框架本身提供了大量的Framework，比如Foundation.framework/UIKit.framework/AppKit.framework等。需要注意的是，这些framework无一例外都是动态库。</p>

<!-- more -->


<p>但残忍的是，Cocoa Touch上并不允许我们使用自己创建的framework。不过由于framework是一种优秀的资源打包方式，拥有无穷智慧的程序员们便想出了以framework的形式打包静态库的招数，因此我们平时看到的第三方发布的framework无一例外都是静态库，真正的动态库是上不了AppStore的。</p>

<p>WWDC2014给我的一个很大感触是苹果对iOS的开放态度：允许使用动态库、允许第三方键盘、<code>App Extension</code>等等，这些在之前是想都不敢想的事。</p>

<h2>iOS上动态库可以做什么</h2>

<p>和静态库在编译时和app代码链接并打进同一个二进制包中不同，动态库可以在运行时手动加载，这样就可以做很多事情，比如：</p>

<ul>
<li>应用插件化</li>
</ul>


<p>目前很多应用功能越做越多，软件显得越来越臃肿。因此插件化就成了很多软件发展的必经之路，比如支付宝这种平台级别的软件：</p>

<p><img src="http://wangzz.github.io/images/article4/AliPay.png" width="320" height="480"></p>

<p>首页上密密麻麻的功能，而且还在增多，照这个趋势发展下去，软件包的大小将会不可想象。目前常用的解决方案是使用web页面，但用户体验和Native界面是没法比的。</p>

<p>设想，如果每一个功能点都是一个动态库，在用户想使用某个功能的时候让其从网络下载，然后手动加载动态库，实现功能的的插件化，就再也不用担心功能点的无限增多了，这该是件多么美好的事！</p>

<ul>
<li>软件版本实时模块升级</li>
</ul>


<p>还在忍受苹果动辄一周，甚至更长的审核周期吗？有了动态库妈妈就再也不用担心你的软件升级了！</p>

<p>如果软件中的某个功能点出现了严重的bug，或者想在其中新增功能，你的这个功能点又是通过动态库实现的，这时候你只需要在适当的时候从服务器上将新版本的动态库文件下载到本地，然后在用户重启应用的时候即可实现新功能的展现。</p>

<ul>
<li>共享可执行文件</li>
</ul>


<p>在其它大部分平台上，动态库都可以用于不同应用间共享，这就大大节省了内存。从目前来看，iOS仍然不允许进程间共享动态库，即iOS上的动态库只能是私有的，因为我们仍然不能将动态库文件放置在除了自身沙盒以外的其它任何地方。</p>

<p>不过iOS8上开放了<code>App Extension</code>功能，可以为一个应用创建插件，这样主app和插件之间共享动态库还是可行的。</p>

<p>PS：
上述关于动态库在iOS平台的使用，在技术上都是可行的，但本人并没有真正尝试过做出一个上线AppStore的应用，因此并不保证按照上述方式使用动态库一定能通过苹果审核！</p>

<p>2014-6-23修正：</p>

<p>经<a href="http://weibo.com/tangqiaoboy?topnav=1&amp;wvr=5&amp;topsug=1">@唐巧_boy</a>提醒，sandbox会验证动态库的签名，所以如果是动态从服务器更新的动态库，应该是签名不了的，因此应用插件化、软件版本实时模块升级估计很难实现，一切都只能等到iOS8正式版发布以后再验证了。感谢<a href="http://weibo.com/tangqiaoboy?topnav=1&amp;wvr=5&amp;topsug=1">@唐巧_boy</a>！</p>

<h2>创建动态库</h2>

<h4>1、创建动态库</h4>

<ul>
<li>创建工程文件</li>
</ul>


<p>在下图所示界面能够找到Cocoa Touch动态库的创建入口：</p>

<p><img src="http://wangzz.github.io/images/article4/cocoa_touch_framework.png" alt="framework" /></p>

<p>跟随指引一步步操作即可创建一个新的动态库工程，我的工程名字叫Dylib，Xcode会同时创建一个和工程target同名的.h文件，比如我的就是Dylib.h。</p>

<ul>
<li>向工程中添加文件</li>
</ul>


<p>接下来就可以在工程中随意添加文件了。我在其中新建了一个名为Person的测试类，提供的接口如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">Person</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">run</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>对应的实现部分：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@implementation</span> <span class="nc">Person</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">run</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;let&#39;s run.&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;The Second Alert&quot;</span> <span class="nl">message:</span><span class="nb">nil</span> <span class="nl">delegate:</span><span class="nb">nil</span> <span class="nl">cancelButtonTitle:</span><span class="nb">nil</span> <span class="nl">otherButtonTitles:</span><span class="s">@&quot;done&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">alert</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>设置开放的头文件</li>
</ul>


<p>一个库里面可以后很多的代码，但是我们需要设置能够提供给外界使用的接口，可以通过Target&mdash;>Build Phases&mdash;>Headers来设置，如下图所示：</p>

<p><img src="http://wangzz.github.io/images/article4/header.png" alt="header" /></p>

<p>我们只需将希望开放的头文件放到Public列表中即可，比如我开放了<code>Dylib.h</code>和<code>Person.h</code>两个头文件，在生成的framework的Header目录下就可以看到这两个头文件，如下图所示：</p>

<p><img src="http://wangzz.github.io/images/article4/public_header.png" alt="public_header" /></p>

<p>一切完成，Run以后就能成功生成framework文件了。</p>

<h4>2、通用动态库</h4>

<p>经过第一步我们只是创建了一个动态库文件，但是和静态库类似，该动态库并同时不支持真机和模拟器，可以通过以下步骤创建通用动态库：</p>

<ul>
<li>创建Aggregate Target</li>
</ul>


<p>按下图所示，在动态库工程中添加一个类型为Aggregate的target:</p>

<p><img src="http://wangzz.github.io/images/article4/aggregate.png" alt="aggregate" /></p>

<p>按提示一步步操作即可，我给<code>Aggregate</code>的Target的命名是<code>CommonDylib</code>。</p>

<ul>
<li>设置Target Dependencies</li>
</ul>


<p>按以下路径设置<code>CommonDylib</code>对应的<code>Target Dependencies</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">TARGETS</span><span class="o">--&gt;</span><span class="n">CommonDylib</span><span class="o">--&gt;</span><span class="n">Build</span> <span class="n">Phases</span><span class="o">--&gt;</span><span class="n">Target</span> <span class="n">Dependencies</span>
</span></code></pre></td></tr></table></div></figure>


<p>将真正的动态库Dylib Target添加到其中。</p>

<ul>
<li>添加Run Script</li>
</ul>


<p>按以下路径为<code>CommonDylib</code>添加<code>Run Script</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">TARGETS</span><span class="o">--&gt;</span><span class="n">CommonDylib</span><span class="o">--&gt;</span><span class="n">Build</span> <span class="n">Phases</span><span class="o">--&gt;</span><span class="n">Run</span> <span class="n">Script</span>
</span></code></pre></td></tr></table></div></figure>


<p>添加的脚本为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp"># Sets the target folders and the final framework product.</span>
</span><span class='line'><span class="n">FMK_NAME</span><span class="o">=</span><span class="n">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># Install dir will be the final output to the framework.</span>
</span><span class='line'><span class="cp"># The following line create it in the root folder of the current project.</span>
</span><span class='line'><span class="n">INSTALL_DIR</span><span class="o">=</span><span class="n">$</span><span class="p">{</span><span class="n">SRCROOT</span><span class="p">}</span><span class="o">/</span><span class="n">Products</span><span class="o">/</span><span class="n">$</span><span class="p">{</span><span class="n">FMK_NAME</span><span class="p">}.</span><span class="n">framework</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># Working dir will be deleted after the framework creation.</span>
</span><span class='line'><span class="n">WRK_DIR</span><span class="o">=</span><span class="n">build</span>
</span><span class='line'><span class="n">DEVICE_DIR</span><span class="o">=</span><span class="n">$</span><span class="p">{</span><span class="n">WRK_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">Release</span><span class="o">-</span><span class="n">iphoneos</span><span class="o">/</span><span class="n">$</span><span class="p">{</span><span class="n">FMK_NAME</span><span class="p">}.</span><span class="n">framework</span>
</span><span class='line'><span class="n">SIMULATOR_DIR</span><span class="o">=</span><span class="n">$</span><span class="p">{</span><span class="n">WRK_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">Release</span><span class="o">-</span><span class="n">iphonesimulator</span><span class="o">/</span><span class="n">$</span><span class="p">{</span><span class="n">FMK_NAME</span><span class="p">}.</span><span class="n">framework</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># -configuration ${CONFIGURATION} </span>
</span><span class='line'><span class="cp"># Clean and Building both architectures.</span>
</span><span class='line'><span class="n">xcodebuild</span> <span class="o">-</span><span class="n">configuration</span> <span class="s">&quot;Release&quot;</span> <span class="o">-</span><span class="n">target</span> <span class="s">&quot;${FMK_NAME}&quot;</span> <span class="o">-</span><span class="n">sdk</span> <span class="n">iphoneos</span> <span class="n">clean</span> <span class="n">build</span>
</span><span class='line'><span class="n">xcodebuild</span> <span class="o">-</span><span class="n">configuration</span> <span class="s">&quot;Release&quot;</span> <span class="o">-</span><span class="n">target</span> <span class="s">&quot;${FMK_NAME}&quot;</span> <span class="o">-</span><span class="n">sdk</span> <span class="n">iphonesimulator</span> <span class="n">clean</span> <span class="n">build</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># Cleaning the oldest.</span>
</span><span class='line'><span class="k">if</span> <span class="p">[</span> <span class="o">-</span><span class="n">d</span> <span class="s">&quot;${INSTALL_DIR}&quot;</span> <span class="p">]</span>
</span><span class='line'><span class="n">then</span>
</span><span class='line'><span class="n">rm</span> <span class="o">-</span><span class="n">rf</span> <span class="s">&quot;${INSTALL_DIR}&quot;</span>
</span><span class='line'><span class="n">fi</span>
</span><span class='line'>
</span><span class='line'><span class="n">mkdir</span> <span class="o">-</span><span class="n">p</span> <span class="s">&quot;${INSTALL_DIR}&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cp</span> <span class="o">-</span><span class="n">R</span> <span class="s">&quot;${DEVICE_DIR}/&quot;</span> <span class="s">&quot;${INSTALL_DIR}/&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># Uses the Lipo Tool to merge both binary files (i386 + armv6/armv7) into one Universal final product.</span>
</span><span class='line'><span class="n">lipo</span> <span class="o">-</span><span class="n">create</span> <span class="s">&quot;${DEVICE_DIR}/${FMK_NAME}&quot;</span> <span class="s">&quot;${SIMULATOR_DIR}/${FMK_NAME}&quot;</span> <span class="o">-</span><span class="n">output</span> <span class="s">&quot;${INSTALL_DIR}/${FMK_NAME}&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">rm</span> <span class="o">-</span><span class="n">r</span> <span class="s">&quot;${WRK_DIR}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>添加以后的效果如图所示：</p>

<p><img src="http://wangzz.github.io/images/article4/commonlib_setting.png" alt="commonlib_setting" /></p>

<p>该脚本是我根据一篇文章中介绍的脚本改写的，感谢<a href="http://blog.sina.com.cn/s/blog_407fb5bc01013v6s.html">原文作者</a>。</p>

<p>脚本的主要功能是：</p>

<p>1.分别编译生成真机和模拟器使用的framework；
2.使用lipo命令将其合并成一个通用framework；
3.最后将生成的通用framework放置在工程根目录下新建的Products目录下。</p>

<p>如果一切顺利，对<code>CommonDylib</code> target执行run操作以后就能生成一个如图所示的通用framework文件了：</p>

<p><img src="http://wangzz.github.io/images/article4/products.png" alt="products" /></p>

<h2>使用动态库</h2>

<h4>添加动态库到工程文件</h4>

<p>经过以上步骤的努力，生成了最终需要的framework文件，为了演示动态库的使用，新建了一个名为<code>FrameworkDemo</code>的工程。通过以下方式将刚生成的framework添加到工程中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">Targets</span><span class="o">--&gt;</span><span class="n">Build</span> <span class="n">Phases</span><span class="o">--&gt;</span><span class="n">Link</span> <span class="n">Binary</span> <span class="n">With</span> <span class="n">Libraries</span>
</span></code></pre></td></tr></table></div></figure>


<p>同时设置将framework作为资源文件拷贝到Bundle中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">Targets</span><span class="o">--&gt;</span><span class="n">Build</span> <span class="n">Phases</span><span class="o">--&gt;</span><span class="n">Copy</span> <span class="n">Bundle</span> <span class="n">Resources</span>
</span></code></pre></td></tr></table></div></figure>


<p>如图所示：</p>

<p><img src="http://wangzz.github.io/images/article4/framework_demo_setting.png" alt="framework_demo_setting" /></p>

<p>仅仅这样做是不够的，还需要为动态库添加链接依赖。</p>

<h4>自动链接动态库</h4>

<p>添加完动态库后，如果希望动态库在软件启动时自动链接，可以通过以下方式设置动态库依赖路径：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">Targets</span><span class="o">--&gt;</span><span class="n">Build</span> <span class="n">Setting</span><span class="o">--&gt;</span><span class="n">Linking</span><span class="o">--&gt;</span><span class="n">Runpath</span> <span class="n">Search</span> <span class="n">Paths</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于向工程中添加动态库时，将动态库设置了Copy Bundle Resources，因此就可以将<code>Runpath Search Paths</code>路径依赖设置为main bundle，即沙盒中的FrameworkDemo.app目录，向<code>Runpath Search Paths</code>中添加下述内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="err">@</span><span class="n">executable_path</span><span class="o">/</span>
</span></code></pre></td></tr></table></div></figure>


<p>如图所示：</p>

<p><img src="http://wangzz.github.io/images/article4/run_search_path.png" alt="run_search_path" /></p>

<p>其中的<code>@executable_path/</code>表示可执行文件所在路径，即沙盒中的.app目录，注意不要漏掉最后的<code>/</code>。</p>

<p>如果你将动态库放到了沙盒中的其他目录，只需要添加对应路径的依赖就可以了。</p>

<h4>需要的时候链接动态库</h4>

<p>动态库的另一个重要特性就是<code>即插即用</code>性，我们可以选择在需要的时候再加载动态库。</p>

<ul>
<li>更改设置</li>
</ul>


<p>如果不希望在软件一启动就加载动态库，需要将</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">Targets</span><span class="o">--&gt;</span><span class="n">Build</span> <span class="n">Phases</span><span class="o">--&gt;</span><span class="n">Link</span> <span class="n">Binary</span> <span class="n">With</span> <span class="n">Libraries</span>
</span></code></pre></td></tr></table></div></figure>


<p>中<code>Dylib.framework</code>对应的Status由默认的<code>Required</code>改成<code>Optional</code>；或者更干脆的，将<code>Dylib.framework</code>从<code>Link Binary With Libraries</code>列表中删除即可。</p>

<ul>
<li>使用dlopen加载动态库</li>
</ul>


<p>以<code>Dylib.framework</code>为例，动态库中真正的可执行代码为<code>Dylib.framework/Dylib</code>文件，因此使用dlopen时如果仅仅指定加载动态库的路径为<code>Dylib.framework</code>是没法成功加载的。</p>

<p>示例代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">onDlopenLoadAtPathAction1:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">documentsPath</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@/Documents/Dylib.framework/Dylib&quot;</span><span class="p">,</span><span class="n">NSHomeDirectory</span><span class="p">()];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">dlopenLoadDylibWithPath:</span><span class="n">documentsPath</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">dlopenLoadDylibWithPath:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">path</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">libHandle</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">libHandle</span> <span class="o">=</span> <span class="n">dlopen</span><span class="p">([</span><span class="n">path</span> <span class="nl">cStringUsingEncoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">],</span> <span class="n">RTLD_NOW</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">libHandle</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">char</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="n">dlerror</span><span class="p">();</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;dlopen error: %s&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;dlopen load framework success.&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以dlopen方式使用动态库不知道是否能通过苹果审核。</p>

<ul>
<li>使用NSBundle加载动态库</li>
</ul>


<p>也可以使用NSBundle来加载动态库，实现代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">onBundleLoadAtPathAction1:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">documentsPath</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@/Documents/Dylib.framework&quot;</span><span class="p">,</span><span class="n">NSHomeDirectory</span><span class="p">()];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">bundleLoadDylibWithPath:</span><span class="n">documentsPath</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">bundleLoadDylibWithPath:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">path</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">_libPath</span> <span class="o">=</span> <span class="n">path</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSError</span> <span class="o">*</span><span class="n">err</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSBundle</span> <span class="o">*</span><span class="n">bundle</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSBundle</span> <span class="nl">bundleWithPath:</span><span class="n">path</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">bundle</span> <span class="nl">loadAndReturnError:</span><span class="o">&amp;</span><span class="n">err</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;bundle load framework success.&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;bundle load framework err:%@&quot;</span><span class="p">,</span><span class="n">err</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>使用动态库中代码</h4>

<p>通过上述任一一种方式加载的动态库后，就可以使用动态库中的代码文件了，以<code>Dylib.framework</code>中的<code>Person</code>类的使用为例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">onTriggerButtonAction:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Class</span> <span class="n">rootClass</span> <span class="o">=</span> <span class="n">NSClassFromString</span><span class="p">(</span><span class="s">@&quot;Person&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">rootClass</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">id</span> <span class="n">object</span> <span class="o">=</span> <span class="p">[[</span><span class="n">rootClass</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[(</span><span class="n">Person</span> <span class="o">*</span><span class="p">)</span><span class="n">object</span> <span class="n">run</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意，如果直接通过下属方式初始化<code>Person</code>类是不成功的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">onTriggerButtonAction:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Person</span> <span class="o">*</span><span class="n">object</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">object</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="p">[</span><span class="n">object</span> <span class="n">run</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>监测动态库的加载和移除</h2>

<p>我们可以通过下述方式，为动态库的加载和移除添加监听回调：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">load</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">_dyld_register_func_for_add_image</span><span class="p">(</span><span class="o">&amp;</span><span class="n">image_added</span><span class="p">);</span>
</span><span class='line'>  <span class="n">_dyld_register_func_for_remove_image</span><span class="p">(</span><span class="o">&amp;</span><span class="n">image_removed</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>github上有一个完整的<a href="https://github.com/ddeville/ImageLogger">示例代码</a>，</p>

<p>从这里看出，原来就算空白工程软件启动的时候也会加载多达一百二十多个动态库，如果这些都是静态库，那该有多可怕！！</p>

<h2>Demo</h2>

<p>本文使用的例子已经上传到<a href="https://github.com/wangzz/Demo/tree/master/FrameworkDemo">github</a>上，需要的朋友请自取。</p>

<p>另外，本文对某些东西可能有理解错误的地方，还请指出。</p>

<h2>参考文档：</h2>

<ul>
<li><p><a href="https://developer.apple.com/library/prerelease/ios/documentation/MacOSX/Conceptual/BPFrameworks/Frameworks.html#//apple_ref/doc/uid/10000183-SW1">Framework Programming Guide</a></p></li>
<li><p><a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/dyld.1.html">OS X Man Pages</a></p></li>
<li><p><a href="https://developer.apple.com/library/prerelease/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_6_0.html">New Features in Xcode 6 Beta</a></p></li>
<li><p><a href="https://github.com/ddeville/ImageLogger">ImageLogger</a></p></li>
<li><p><a href="http://realmacsoftware.com/blog/dynamic-linking?utm_campaign=iOS_Dev_Weekly_Issue_140&amp;utm_medium=email&amp;utm_source=iOS%2BDev%2BWeekly">Dynamic Linking</a></p></li>
<li><p><a href="http://en.wikipedia.org/wiki/Dynamic_loading#Mac_OS_X">Dynamic loading</a></p></li>
<li><p><a href="http://support.revealapp.com/kb/getting-started/integrating-reveal-with-your-ios-app#dynamic-library-integration">Integrating Reveal with your iOS app</a></p></li>
<li><p><a href="http://blog.sina.com.cn/s/blog_407fb5bc01013v6s.html">IOS Framework制作全攻略</a></p></li>
<li><p><a href="http://www.tanhao.me/pieces/1361.html">Build Settings中的变量@rpath,@loader_path,@executable_path</a></p></li>
<li><p><a href="http://www.cocoachina.com/newbie/basic/2012/0516/4255.html">深入浅出Cocoa之Framework</a></p></li>
<li><p><a href="http://blog.sina.com.cn/s/blog_a843a8850101rv9k.html">linux中静态库和动态库的区别和汇总</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS进程间通信之CFMessagePort]]></title>
    <link href="http://wangzz.github.io/blog/2014/06/04/iosjin-cheng-jian-tong-xin-zhi-cfmessageport/"/>
    <updated>2014-06-04T18:31:51+08:00</updated>
    <id>http://wangzz.github.io/blog/2014/06/04/iosjin-cheng-jian-tong-xin-zhi-cfmessageport</id>
    <content type="html"><![CDATA[<p>iOS系统是出了名的封闭，每个应用的活动范围被严格地限制在各自的沙盒中。尽管如此，iOS还是提供了若干进程间通信机制，CFMessagePort就是其中之一。</p>

<p>从类名可以看出，CFMessagePort属于<code>Core Foundation</code>层的东西，其实现部分是开源的，代码在可以在苹果的<a href="http://opensource.apple.com/source/CF/CF-855.14/CFMessagePort.c">开源代码库</a>中找到。</p>

<h2>使用方式</h2>

<h4>1、消息接收者</h4>

<p>CFMessagePort端口消息的接收者需要实现以下功能：</p>

<h6>1.1 注册监听</h6>

<p>消息接收者需要通过以下方式注册消息监听：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">startListenning</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">!=</span> <span class="n">mMsgPortListenner</span> <span class="o">&amp;&amp;</span> <span class="n">CFMessagePortIsValid</span><span class="p">(</span><span class="n">mMsgPortListenner</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">CFMessagePortInvalidate</span><span class="p">(</span><span class="n">mMsgPortListenner</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>    <span class="n">mMsgPortListenner</span> <span class="o">=</span> <span class="n">CFMessagePortCreateLocal</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span><span class="n">CFSTR</span><span class="p">(</span><span class="n">LOCAL_MACH_PORT_NAME</span><span class="p">),</span><span class="n">onRecvMessageCallBack</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CFRunLoopSourceRef</span> <span class="n">source</span> <span class="o">=</span> <span class="n">CFMessagePortCreateRunLoopSource</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span> <span class="n">mMsgPortListenner</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CFRunLoopAddSource</span><span class="p">(</span><span class="n">CFRunLoopGetCurrent</span><span class="p">(),</span> <span class="n">source</span><span class="p">,</span> <span class="n">kCFRunLoopCommonModes</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;start listenning&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <!-- more --></p>

<p>其中<code>LOCAL_MACH_PORT_NAME</code>的定义为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#define LOCAL_MACH_PORT_NAME    &quot;com.wangzz.demo&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>经过查看源码发现，CFMessagePort实际上是通过mach port实现的。Mach port是iOS系统提供的基于端口的输入源，可用于线程或进程间通讯。而Runloop支持的输入源类型中就包括基于端口的输入源，因此可以使用Runloop做为CFMessagePort端口源事件的监听者。</p>

<p>上述代码有几点需要说明：</p>

<ul>
<li><p>通过CFMessagePortCreateLocal可以创建一个本地CFMessagePortRef对象</p></li>
<li><p>CFMessagePort对象是靠一个字符串来唯一标识的，这一点非常重要，在这里字符串是由宏<code>LOCAL_MACH_PORT_NAME</code>定义的；</p></li>
<li><p>创建CFMessagePort对象的同时设置了端口源事件的回调函数onRecvMessageCallBack，用于处理端口源事件；</p></li>
<li><p>将创建的对象作为输入源添加到Runloop中，从而实现对端口源事件的监听，当Runloop收到对应的端口源事件时，会调用上一步中指定的回调芳芳；</p></li>
</ul>


<h6>1.2 实现回调方法</h6>

<p>回调函数为CFMessagePortCallBack类型，其定义部分为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">typedef</span> <span class="nf">CFDataRef</span> <span class="p">(</span><span class="o">*</span><span class="n">CFMessagePortCallBack</span><span class="p">)</span> <span class="p">(</span>
</span><span class='line'>   <span class="n">CFMessagePortRef</span> <span class="n">local</span><span class="p">,</span>
</span><span class='line'>   <span class="n">SInt32</span> <span class="n">msgid</span><span class="p">,</span>
</span><span class='line'>   <span class="n">CFDataRef</span> <span class="n">data</span><span class="p">,</span>
</span><span class='line'>   <span class="kt">void</span> <span class="o">*</span><span class="n">info</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>各个参数的含义为：</p>

<ul>
<li><p>CFMessagePortRef local</p>

<p>  当前接收消息的CFMessagePortRef对象。</p></li>
<li><p>SInt32 msgid</p>

<p>  这个字段非常有用，用于标识消息。如果通信双方进程约定号每个msgid对应的数据结构，即可实现较为复杂的通信。</p></li>
<li><p>CFDataRef data</p>

<p>  通信的真正数据部分。</p></li>
<li><p>void *info</p>

<p>  为使用CFMessagePortCreateLocal方法创建port端口时指定的CFMessagePortContext对象的info字段，通常为空。</p></li>
</ul>


<p>该回调方法可以返回一个CFDataRef类型的数据给port消息的发送者，以实现有效的双方通信，这一点也非常重要。</p>

<p>我的回调函数onRecvMessageCallBack的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">CFDataRef</span> <span class="nf">onRecvMessageCallBack</span><span class="p">(</span><span class="n">CFMessagePortRef</span> <span class="n">local</span><span class="p">,</span><span class="n">SInt32</span> <span class="n">msgid</span><span class="p">,</span><span class="n">CFDataRef</span> <span class="n">cfData</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="n">info</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;onRecvMessageCallBack is called&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">strData</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">cfData</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>          <span class="k">const</span> <span class="n">UInt8</span>  <span class="o">*</span> <span class="n">recvedMsg</span> <span class="o">=</span> <span class="n">CFDataGetBytePtr</span><span class="p">(</span><span class="n">cfData</span><span class="p">);</span>
</span><span class='line'>      <span class="n">strData</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithCString:</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">recvedMsg</span> <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         </span>
</span><span class='line'><span class="cm">         实现数据解析操作</span>
</span><span class='line'><span class="cm">         </span>
</span><span class='line'><span class="cm">         **/</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;receive message:%@&quot;</span><span class="p">,</span><span class="n">strData</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//为了测试，生成返回数据</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">returnString</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;i have receive:%@&quot;</span><span class="p">,</span><span class="n">strData</span><span class="p">];</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">cStr</span> <span class="o">=</span> <span class="p">[</span><span class="n">returnString</span> <span class="n">UTF8String</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSUInteger</span> <span class="n">ulen</span> <span class="o">=</span> <span class="p">[</span><span class="n">returnString</span> <span class="nl">lengthOfBytesUsingEncoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CFDataRef</span> <span class="n">sgReturn</span> <span class="o">=</span> <span class="n">CFDataCreate</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="p">(</span><span class="n">UInt8</span> <span class="o">*</span><span class="p">)</span><span class="n">cStr</span><span class="p">,</span> <span class="n">ulen</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">sgReturn</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>该方法实现的较为简单，解析约定的数据（测试代码中约定传送的是string）,为了测试，同时生成一个CFDataRef数据返回给port消息的发送者。</p>

<h6>1.3 取消端口监听</h6>

<p>可以通过如下方式取消对port端口的监听：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">endLisenning</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CFMessagePortInvalidate</span><span class="p">(</span><span class="n">mMsgPortListenner</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CFRelease</span><span class="p">(</span><span class="n">mMsgPortListenner</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>CFMessagePortInvalidate会停止port消息的发送和接收操作，而只有调用了CFRelease，CFMessagePortRef对象才真正的被释放掉。</p>

<h4>2、消息发送者</h4>

<p>发送部分代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">sendMessageToDameonWith:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">msgInfo</span> <span class="nf">msgID:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">msgid</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 生成Remote port</span>
</span><span class='line'>    <span class="n">CFMessagePortRef</span> <span class="n">bRemote</span> <span class="o">=</span> <span class="n">CFMessagePortCreateRemote</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span> <span class="n">CFSTR</span><span class="p">(</span><span class="n">MACH_PORT_REMOTE</span><span class="p">));</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">nil</span> <span class="o">==</span> <span class="n">bRemote</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;bRemote create failed&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 构建发送数据（string）</span>
</span><span class='line'>    <span class="n">NSString</span>    <span class="o">*</span><span class="n">msg</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">msgInfo</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;send msg is :%@&quot;</span><span class="p">,</span><span class="n">msg</span><span class="p">);</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">message</span> <span class="o">=</span> <span class="p">[</span><span class="n">msg</span> <span class="n">UTF8String</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CFDataRef</span> <span class="n">data</span><span class="p">,</span><span class="n">recvData</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">CFDataCreate</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="p">(</span><span class="n">UInt8</span> <span class="o">*</span><span class="p">)</span><span class="n">message</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">message</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 执行发送操作</span>
</span><span class='line'>    <span class="n">CFMessagePortSendRequest</span><span class="p">(</span><span class="n">bRemote</span><span class="p">,</span> <span class="n">msgid</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">100</span> <span class="p">,</span> <span class="n">kCFRunLoopDefaultMode</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">recvData</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">nil</span> <span class="o">==</span> <span class="n">recvData</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;recvData date is nil.&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">CFRelease</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>        <span class="n">CFMessagePortInvalidate</span><span class="p">(</span><span class="n">bRemote</span><span class="p">);</span>
</span><span class='line'>        <span class="n">CFRelease</span><span class="p">(</span><span class="n">bRemote</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 解析返回数据</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">UInt8</span>  <span class="o">*</span> <span class="n">recvedMsg</span> <span class="o">=</span> <span class="n">CFDataGetBytePtr</span><span class="p">(</span><span class="n">recvData</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">nil</span> <span class="o">==</span> <span class="n">recvedMsg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;receive date err.&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">CFRelease</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>        <span class="n">CFMessagePortInvalidate</span><span class="p">(</span><span class="n">bRemote</span><span class="p">);</span>
</span><span class='line'>        <span class="n">CFRelease</span><span class="p">(</span><span class="n">bRemote</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSString</span>    <span class="o">*</span><span class="n">strMsg</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithCString:</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">recvedMsg</span> <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">strMsg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CFRelease</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CFMessagePortInvalidate</span><span class="p">(</span><span class="n">bRemote</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CFRelease</span><span class="p">(</span><span class="n">bRemote</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CFRelease</span><span class="p">(</span><span class="n">recvData</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">strMsg</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>MACH_PORT_REMOTE</code>的定义为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#define MACH_PORT_REMOTE    &quot;com.wangzz.demo&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>发送消息时要相对简单，首先通过CFMessagePortCreateRemote生成一个Remote的CFMessagePortRef，这里需要注意的是CFMessagePortCreateRemote时传入的字符串唯一标识<code>MACH_PORT_REMOTE</code>必须和消息接收者创建local的CFMessagePortRef时使用的字符串唯一标识是同一个！</p>

<p>通过查看源码发现，CFMessagePortCreateRemote会根据<code>MACH_PORT_REMOTE</code>定义的字符串为唯一标识获取消息接收者通过CFMessagePortCreateLocal使用相同字符串创建的底层mach port端口，从而实现向消息接收者发送信息。</p>

<p>如果消息接收者还没有创建或者通过CFMessagePortCreateLocal创建local端口失败时，想要通过CFMessagePortCreateRemote去创建remote端口肯定是失败的。</p>

<h2>说明</h2>

<ul>
<li>很遗憾的是，在iOS7及以后系统中，CFMessagePort的通信机制不再可用。</li>
</ul>


<p>在使用CFMessagePortCreateLocal/CFMessagePortCreateRemote创建CFMessagePortRef对象时会失败，官方文档中是这么说的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">This</span> <span class="n">method</span> <span class="n">is</span> <span class="n">not</span> <span class="n">available</span> <span class="n">on</span> <span class="n">iOS</span> <span class="mi">7</span> <span class="n">and</span> <span class="n">later</span><span class="err">—</span><span class="n">it</span> <span class="n">will</span> <span class="k">return</span> <span class="nb">NULL</span> <span class="n">and</span> <span class="n">log</span> <span class="n">a</span> <span class="n">sandbox</span> <span class="n">violation</span> <span class="k">in</span> <span class="n">syslog</span><span class="p">.</span> <span class="n">See</span> <span class="n">Concurrency</span> <span class="n">Programming</span> <span class="n">Guide</span> <span class="k">for</span> <span class="n">possible</span> <span class="n">replacement</span> <span class="n">technologies</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>CFMessagePort只能用于本地进程通信。</p></li>
<li><p>CFMessagePort是基于mach port端口的通信方式，不但可以用于进程通信，也可以用于线程间通信，只是线程间通信有了GCD和Cocoa提供的原生方法，已经能很方便的实现了，没必要再使用CFMessagePort。</p></li>
<li><p>进程通信使用场景</p></li>
</ul>


<p>iOS系统多任务机制，使得进程间通信基本都只能用于越狱开发。常用的场景是前端有一个UI程序用于界面展示，后端有一个daemo精灵程序用于任务处理。</p>

<h2>demo工程</h2>

<p>特地做了了个demo工程，以便更好地演示CFMessagePort的使用，可以到<a href="http://download.csdn.net/detail/wzzvictory_tjsd/7446745">CSDN下载</a>。</p>

<p>为了模拟进程间通信场景，我将消息接收进程CFMessagePortReceive做成了能够后台播放音乐的程序，以便其切到后台后能继续存活。</p>

<p>由于CFMessagePort不再支持iOS7及以后系统，本demo实在iOS6系统上测试的。</p>

<p>demo使用方式：</p>

<ul>
<li><p>CFMessagePortReceive启动后，点击Start Listenning创建CFMessagePort接口并开始监听port消息，然后将CFMessagePortReceive切到后台；</p></li>
<li><p>启动CFMessagePortSend程序，在输入框中写入内容，点击发送按钮即可和CFMessagePortReceive通信。</p></li>
<li><p>MessagePort通信过程中会有日志输出，可以使用以下方式查看日志：</p>

<p>  1.真机</p>

<p>  选择：Xcode->Window->Organizer->Devices，然后选中窗口左侧当前设备的Console窗口查看。</p>

<p>  2.模拟器</p>

<p>  选择：模拟器->调试->打开系统日志，或者直接使用快捷键<code>⌘/</code>直接打开系统控制台查看日志。</p></li>
</ul>


<h2>参考文档</h2>

<ul>
<li><p><a href="http://opensource.apple.com/source/CF/CF-855.14/">CF-855.14</a></p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW1">Threading Programming Guide</a></p></li>
<li><p><a href="https://developer.apple.com/library/mac/documentation/corefoundation/Reference/CFMessagePortRef/Reference/reference.html#//apple_ref/doc/uid/20001437-CH203-DontLinkElementID_8">CFMessagePort Reference</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS模拟器Custom Location被重置解决方案]]></title>
    <link href="http://wangzz.github.io/blog/2014/05/25/iosmo-ni-qi-custom-locationbei-zhong-zhi-jie-jue-fang-an/"/>
    <updated>2014-05-25T17:29:18+08:00</updated>
    <id>http://wangzz.github.io/blog/2014/05/25/iosmo-ni-qi-custom-locationbei-zhong-zhi-jie-jue-fang-an</id>
    <content type="html"><![CDATA[<h2>问题说明</h2>

<p>在做地图类应用时，经常需要用到位置模拟功能。iOS模拟器提供了该功能，我们可以设置指定的经纬度，选中模拟器后，按照以下菜单层次进入即可设置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Debug --&gt; Location --&gt; Custom Location</span></code></pre></td></tr></table></div></figure>


<p>但是该功能存在的问题是设置完经纬度每次重新run程序，或者重启模拟器的时候都有可能使之前设置的Location状态从<code>Custom Location</code>变成<code>None</code>，导致设置的经纬度信息无效。</p>

<p>因此经常需要重新选择<code>Custom Location</code>，对于每天需要run程序n次的我们来说苦不堪言&hellip;</p>

<h2>解决方案</h2>

<p>好在Xcode的target设置项中提供了设置位置信息的方法，允许我们使用GPX文件来设置自定义位置信息，步骤如下：</p>

<!-- more -->


<ul>
<li>获取GPX文件</li>
</ul>


<p>GPX（GPS eXchange Format, GPS交换格式)是一个XML格式,为应用软件设计的通用GPS数据格式。它可以用来描述路点、轨迹、路程。（来自<a href="http://zh.wikipedia.org/wiki/GPX">维基百科</a>）</p>

<p>我们可以通过第三方网站：<a href="http://gpx-poi.com/">gpx-poi.com</a>来生成一个GPX文件，生成过程也很方便：</p>

<p>在网站左上角拖动地图到指定位置，鼠标单击后会出现一个红色标注，同时地图下方会显示出标注的经纬度数据；</p>

<p>点击地图下方的<code>Update</code>按钮就能将经纬度信息更新到界面右侧的位置信息描述表格中；</p>

<p>然后将界面拉到底部，填写GPX文件名称，选择操作系统型号；</p>

<p>点击<code>Create</code>按钮即可生成一个XML格式的GPX文件，再点击<code>Download</code>按钮即可将文件下载到本地。</p>

<p>生成的GPX文件大概是这样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
</span><span class='line'>&lt;gpxxmlns="http://www.topografix.com/GPX/1/1"xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd"version="1.1" creator="gpx-poi.com"&gt;
</span><span class='line'>  &lt;wpt lat=“41.988810" lon="116.474828"&gt;
</span><span class='line'>      &lt;time&gt;2014-05-25T07:27:53Z&lt;/time&gt;
</span><span class='line'>      &lt;name&gt;A&lt;/name&gt;
</span><span class='line'>      &lt;/wpt&gt;
</span><span class='line'>&lt;/gpx&gt;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>导入GPX文件</li>
</ul>


<p>在Xcode中选中指定target，按以下菜单层次进入：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Edite Scheme --&gt;  Options --&gt;  Default Location --&gt;  Add GPX File to Project</span></code></pre></td></tr></table></div></figure>


<p>（此时必须保证<code>Allow Location Simulation</code>选项是选中的，该设置项默认选中。）</p>

<p>如图所示：</p>

<p><img src="http://wangzz.github.io/images/article3/default_location.png" width="703" height="475"></p>

<p>即可将刚才生成并下载到本地的GPX文件添加到工程里。从此以后不管是重新run程序还是重启模拟器都可以在程序启动的时候定到位。</p>

<p>不过这种做法有个缺点，我在实际使用的时候发现设置完<code>Default Location</code>以后，真机的位置信息也会被更改成设置的位置！！！还请记得在软件发布时删除该设置项。</p>

<h2>2014年10月1日更新</h2>

<p>好消息，在最新版的<code>Xcode6.0.1</code>中，已经修复这个问题了，每次重新调试时<code>Custom Location</code>再也不会被更改了！</p>

<h2>参考文档</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/19719276/ios-simulator-reverts-location-setting">iOS Simulator Reverts Location Setting</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[加密你的SQLite]]></title>
    <link href="http://wangzz.github.io/blog/2014/05/19/jia-mi-ni-de-sqlite/"/>
    <updated>2014-05-19T10:19:42+08:00</updated>
    <id>http://wangzz.github.io/blog/2014/05/19/jia-mi-ni-de-sqlite</id>
    <content type="html"><![CDATA[<h2>关于SQLite</h2>

<p>SQLite是一个<code>轻量的</code>、<code>跨平台的</code>、<code>开源的</code>数据库引擎，它的在<code>读写效率</code>、<code>消耗总量</code>、<code>延迟时间</code>和<code>整体简单性上</code>具有的优越性，使其成为移动平台数据库的最佳解决方案（如iOS、Android）。</p>

<p>然而免费版的SQLite有一个致命缺点：不支持加密。这就导致存储在SQLite中的数据可以被任何人用任何文本编辑器查看到。比如国内某团购iOS客户端的DB缓存数据就一览无余：</p>

<p><img src="http://wangzz.github.io/images/article2/meituan_db_info.png" width="700" height="300"></p>

<!-- more -->


<h2>SQLite加密方式</h2>

<p>对数据库加密的思路有两种：</p>

<ul>
<li>将内容加密后再写入数据库</li>
</ul>


<p>这种方式使用简单，在入库/出库只需要将字段做对应的加解密操作即可，一定程度上解决了将数据赤裸裸暴露的问题。</p>

<p>不过这种方式并不是彻底的加密，因为数据库的表结构等信息还是能被查看到。另外写入数据库的内容加密后，搜索也是个问题。</p>

<ul>
<li>对数据库文件加密</li>
</ul>


<p>将整个数据库整个文件加密，这种方式基本上能解决数据库的信息安全问题。目前已有的SQLite加密基本都是通过这种方式实现的。</p>

<h2>SQLite加密工具</h2>

<p>目前网上查询到iOS平台可用的SQLite加密工具有以下几种：</p>

<ul>
<li><a href="http://www.sqlite.org/index.html">SQLite Encryption Extension (SEE)</a></li>
</ul>


<p>事实上SQLite有加解密接口，只是免费版本没有实现而已。而<code>SQLite Encryption Extension (SEE)</code>是SQLite的加密版本，提供以下加密方式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RC4
</span><span class='line'>AES-128 in OFB mode
</span><span class='line'>AES-128 in CCM mode
</span><span class='line'>AES-256 in OFB mode</span></code></pre></td></tr></table></div></figure>


<p>SQLite Encryption Extension (SEE)版本是收费的。</p>

<ul>
<li><a href="http://www.sqlite-encrypt.com/index.htm">SQLiteEncrypt</a></li>
</ul>


<p>使用AES加密，其原理是实现了开源免费版SQLite没有实现的加密相关接口。</p>

<p><code>SQLiteEncrypt</code>是收费的。</p>

<ul>
<li><a href="http://sqlite-crypt.com/index.htm">SQLiteCrypt</a></li>
</ul>


<p>使用256-bit AES加密，其原理和<a href="http://www.sqlite-encrypt.com/index.htm">SQLiteEncrypt</a>一样，都是实现了SQLite的加密相关接口。</p>

<p><code>SQLiteCrypt</code>也是收费的。</p>

<ul>
<li><a href="http://sqlcipher.net/">SQLCipher</a></li>
</ul>


<p>首先需要说明的是，<code>SQLCipher</code>是完全开源的，代码托管在<a href="https://github.com/sqlcipher/sqlcipher">github</a>上。</p>

<p><code>SQLCipher</code>使用256-bit AES加密，由于其基于免费版的SQLite，主要的加密接口和SQLite是相同的，但也增加了一些自己的接口，详情见<a href="http://sqlcipher.net/sqlcipher-api/">这里</a>。</p>

<p><code>SQLCipher</code>分为收费版本和免费版本，官网介绍的区别为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>easier to setup, saving many steps in project configuration
</span><span class='line'>pre-built with a modern version of OpenSSL, avoiding another external dependency
</span><span class='line'>much faster for each build cycle because the library doesn't need to be built from scratch on each compile (build time can be up to 95% faster with the static libraries)</span></code></pre></td></tr></table></div></figure>


<p>只是集成起来更简单，不用再添加<code>OpenSSL</code>依赖库，而且编译速度更快，从功能上来说没有任何区别。仅仅为了上述一点便利去花费几百美刀，对于我等苦逼RD来说太不值了，还好有一个免费版本。</p>

<p>鉴于上述SQLite加密工具中，只有<code>SQLCiper</code>有免费版本，下面将将着重介绍下<code>SQLCiper</code>。</p>

<h2>在项目中使用SQLCipher</h2>

<p>在项目中集成免费版的<code>SQLCipher</code>略显复杂，还好官网以图文的方式介绍的非常详细，集成过程请参考<a href="http://sqlcipher.net/ios-tutorial">官网教程</a>。</p>

<ul>
<li>使用SQLCipher初始化数据库</li>
</ul>


<p>下面这段代码来自官网，其作用是使用SQLCipher创建一个新的加密数据库，或者打开一个使用SQLCipher创建的数据库。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSString *databasePath = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0]
</span><span class='line'>                              stringByAppendingPathComponent: @"cipher.db"];
</span><span class='line'>    sqlite3 *db;
</span><span class='line'>    if (sqlite3_open([databasePath UTF8String], &db) == SQLITE_OK) {
</span><span class='line'>        const char* key = [@"BIGSecret" UTF8String];
</span><span class='line'>        sqlite3_key(db, key, strlen(key));
</span><span class='line'>        int result = sqlite3_exec(db, (const char*) "SELECT count(*) FROM sqlite_master;", NULL, NULL, NULL);
</span><span class='line'>        if (result == SQLITE_OK) {
</span><span class='line'>            NSLog(@"password is correct, or, database has been initialized");
</span><span class='line'>        } else {
</span><span class='line'>            NSLog(@"incorrect password! errCode:%d",result);
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        sqlite3_close(db);
</span><span class='line'>    }
</span><span class='line'>    </span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，在使用<code>sqlite3_open</code>打开或创建一个数据库，在对数据库做任何其它操作之前，都必须先使用<code>sqlite3_key</code>输入密码，否则会导致数据库操作失败，报出sqlite错误码<code>SQLITE_NOTADB</code>。</p>

<p>在<code>sqlite3_open</code>打开数据库成功，而且用<code>sqlite3_key</code>输入密码以后，就可以正常的对数据库进行增、删、改、查等操作了。</p>

<ul>
<li>使用SQLCipher加密已存在的数据库</li>
</ul>


<p>SQLCipher提供了<code>sqlcipher_export()</code>函数，该函数可以方便的对一个普通数据库导入到SQLCipher加密加密的数据库中，操作方式如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./sqlcipher plaintext.db 
</span><span class='line'>sqlite&gt; ATTACH DATABASE 'encrypted.db' AS encrypted KEY 'testkey'; 
</span><span class='line'>sqlite&gt; SELECT sqlcipher_export('encrypted'); 
</span><span class='line'>sqlite&gt; DETACH DATABASE encrypted; </span></code></pre></td></tr></table></div></figure>


<ul>
<li>解除使用SQLCipher加密的数据库密码</li>
</ul>


<p><code>sqlcipher_export()</code>函数同样可以将SQLCipher加密后的数据库内容导入到未加密的数据库中，从而实现解密，操作方式如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./sqlcipher encrypted.db 
</span><span class='line'>sqlite&gt; PRAGMA key = 'testkey'; 
</span><span class='line'>sqlite&gt; ATTACH DATABASE 'plaintext.db' AS plaintext KEY '';  -- empty key will disable encryption
</span><span class='line'>sqlite&gt; SELECT sqlcipher_export('plaintext'); 
</span><span class='line'>sqlite&gt; DETACH DATABASE plaintext; </span></code></pre></td></tr></table></div></figure>


<p>总体来说，SQLCipher是一个使用方便，灵活性高的数据库加密工具。</p>

<p>另外，我写了个<a href="http://download.csdn.net/detail/wzzvictory_tjsd/7379055">SQLCipherDemo</a>工程放到了<a href="http://download.csdn.net/detail/wzzvictory_tjsd/7379055">CSDN</a>上，有需要的同学请自行下载。</p>

<h2>参考文档</h2>

<ul>
<li><p><a href="http://www.hwaci.com/sw/sqlite/see.html">The SQLite Encryption Extension (SEE)</a></p></li>
<li><p><a href="http://www.sqlite-encrypt.com/index.htm">SQLiteEncrypt</a></p></li>
<li><p><a href="http://sqlite-crypt.com/index.htm">SQLiteCrypt</a></p></li>
<li><p><a href="http://stackoverflow.com/questions/5669905/sqlite-with-encryption-password-protection">SQLite with encryption/password protection</a></p></li>
<li><p><a href="http://sqlcipher.net/documentation/">SQLCipher</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode设置项之Architectures和Valid Architectures]]></title>
    <link href="http://wangzz.github.io/blog/2014/05/09/xcodeshe-zhi-xiang-zhi-architectureshe-valid-architectures/"/>
    <updated>2014-05-09T17:45:33+08:00</updated>
    <id>http://wangzz.github.io/blog/2014/05/09/xcodeshe-zhi-xiang-zhi-architectureshe-valid-architectures</id>
    <content type="html"><![CDATA[<h2>iPhone指令集</h2>

<p>本文所讲的内容都是围绕iPhone的CPU指令集(想了解ARM指令集的同学请点击<a href="http://en.wikipedia.org/wiki/ARM_architecture">这里</a>)，现在先说说不同型号的iPhone都使用的是什么指令集：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ARMv8/ARM64 = iPhone 5s, iPad Air, Retina iPad Mini
</span><span class='line'>ARMv7s = iPhone 5, iPhone 5c, iPad 4
</span><span class='line'>ARMv7  = iPhone 3GS, iPhone 4, iPhone 4S, iPod 3G/4G/5G, iPad, iPad 2, iPad 3, iPad Mini  
</span><span class='line'>ARMv6  = iPhone, iPhone 3G, iPod 1G/2G</span></code></pre></td></tr></table></div></figure>


<h2>设置你想支持的指令集</h2>

<p>Xcode中关于生成二进制包指令集相关的设置项有以下三个：</p>

<!-- more -->


<h4>Architectures</h4>

<p>官方文档说明：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Space-separated list of identifiers. Specifies the architectures (ABIs, processor models) to which the binary is targeted. When this build setting specifies more than one architecture, the generated binary may contain object code for each of the specified architectures.</span></code></pre></td></tr></table></div></figure>


<p>该编译选项指定了工程将被编译成支持哪些指令集，支持指令集是通过编译生成对应的二进制数据包实现的，如果支持的指令集数目有多个，就会编译出包含多个指令集代码的数据包，造成最终编译的包很大。</p>

<h4>Valid Architectures</h4>

<p>官方文档说明：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Space-separated list of identifiers. Specifies the architectures for which the binary may be built. During the build, this list is intersected with the value of ARCHS build setting; the resulting list specifies the architectures the binary can run on. If the resulting architecture list is empty, the target generates no binary.</span></code></pre></td></tr></table></div></figure>


<p>该编译项指定可能支持的指令集，<strong>该列表和Architectures列表的交集，将是Xcode最终生成二进制包所支持的指令集</strong>。</p>

<p>比如，你的<code>Valid Architectures</code>设置的支持arm指令集版本有：<code>armv7/armv7s/arm64</code>，对应的<code>Architectures</code>设置的支持arm指令集版本有：<code>armv7s</code>，这时Xcode只会生成一个<code>armv7s</code>指令集的二进制包。</p>

<h4>Build Active Architecture Only</h4>

<p>官方文档说明：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Boolean value. Specifies whether the product includes only object code for the native architecture.</span></code></pre></td></tr></table></div></figure>


<p>该编译项用于设置是否只编译当前使用的设备对应的arm指令集。</p>

<p>当该选项设置成YES时，你连上一个<code>armv7</code>指令集的设备，就算你的<code>Valid Architectures</code>和<code>Architectures</code>都设置成<code>armv7/armv7s/arm64</code>，还是依然只会生成一个<code>armv7</code>指令集的二进制包。</p>

<p>当然该选项起作用的前提是<strong>你的Xcode必须成功连接了调试设备</strong>。如果你没有任何活跃设备，即Xcode没有成功连接调试设备，就算该设置项设置成YES依然还会编译<code>Valid Architectures</code>和<code>Architectures</code>指定的二进制包。</p>

<p>通常情况下，该编译选项在Debug模式都设成YES，Release模式都设成NO。</p>

<h2>说明</h2>

<ul>
<li>指令集都是可以向下兼容的</li>
</ul>


<p>比如，你的设备是armv7s指令集，那么它也可以兼容运行比armv7s版本低的指令集：armv7、armv6</p>

<ul>
<li>xcode对armv6指令集的支持</li>
</ul>


<p>Xcode4.5起不再支持armv6，Xcode4.5的release notes中明确指出：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Changes
</span><span class='line'>General: iOS
</span><span class='line'>
</span><span class='line'>This version of Xcode does not generate armv6 binaries. 12282156
</span><span class='line'>The minimum deployment target is iOS 4.3. 12282166</span></code></pre></td></tr></table></div></figure>


<h2>如何选择支持的指令集</h2>

<p>如果你的软件对安装包大小非常敏感，你可以减少安装包中的指令集数据包，而且这能达到立竿见影的效果。</p>

<p>我们的项目之前支持的指令集是armv7/armv7s，后来改成只支持armv7后，比原来小了10MB左右。目前AppStore上的一些知名应用，比如<code>百度地图</code>、<code>腾讯地图</code>通过反汇编工具查看后，也都只支持armv7指令集。</p>

<p>根据向下兼容原则，armv7指令集的应用是可以正常在支持armv7s/arm64指令集的机器上运行的。</p>

<p>不过对于armv7s/arm64指令集设备来说，使用运行armv7应用是会有一定的性能损失，不过这种损失有多大缺乏权威统计数据，个人认为是不会影响用户体验的。</p>

<h2>参考文档</h2>

<ul>
<li><p><a href="http://en.wikipedia.org/wiki/ARM_architecture">ARM architecture</a></p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/DeveloperTools/Reference/XcodeBuildSettingRef/0-Introduction/introduction.html#//apple_ref/doc/uid/TP40003931-CH1-SW1">Xcode Build Setting Reference</a></p></li>
<li><p><a href="http://justsee.iteye.com/blog/2009954">xcode5 arm64</a></p></li>
<li><p><a href="https://developer.apple.com/library/mac/releasenotes/DeveloperTools/RN-Xcode/xc4_release_notes/xc4_release_notes.html#//apple_ref/doc/uid/TP40001051-CH3-SW174">Xcode 4.5 Release Notes</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义你的Octopress博客]]></title>
    <link href="http://wangzz.github.io/blog/2014/04/28/custom-your-octopress-blog/"/>
    <updated>2014-04-28T11:17:31+08:00</updated>
    <id>http://wangzz.github.io/blog/2014/04/28/custom-your-octopress-blog</id>
    <content type="html"><![CDATA[<h2>SEO</h2>

<ul>
<li>增加统计工具</li>
</ul>


<p>博客搭建好了以后，大家一定很想知道每天都有多少的访问量。现在有很多工具都可以帮助我们做这件事，比如<code>Google Analytics</code>、<code>百度统计</code>、<code>CNZZ</code> 等。</p>

<p>其中<code>Google Analytics</code>是Octopress自带的统计工具，使用方式也非常简单，只需要到<code>Google Analytics</code>申请一个<code>app id</code>，填写到<code>_config.yml</code>文件中的<code>google_analytics_tracking_id</code>后面即可。但<code>Google Analytics</code>存在翻墙的麻烦，而且<code>百度统计</code>功能也挺齐全，完全能满足我的需求，就选择了<code>百度统计</code>。</p>

<p>集成百度统计方式非常简单：</p>

<p>只需到<code>百度统计</code>官方网站申请一个账号，将获取的代码添加到<code>source/_includes/custom/footer.html</code>中，重新部署即可。</p>

<p> <!-- more --></p>

<ul>
<li>搜索优化</li>
</ul>


<p>为了让自己搭建的博客更容易被搜索引擎搜到，最好将网站地址提交给各大搜索引擎，下面有两个连接搜集了各个搜索引擎的网站提交入口：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://urlc.cn/tool/addurl.html
</span><span class='line'>http://tool.lusongsong.com/addurl.html</span></code></pre></td></tr></table></div></figure>


<p>我试了下，添加到<code>google</code>以后，搜索关键字的时候自己的博客确实排名靠前了。</p>

<p>光是将网址添加到搜索引擎还不够，你必须得为你的文章添加关键字，才能更好地被引擎搜到，在创建一篇新文章的时候，生成的makedown文件包含以下内容，以本文举例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>---
</span><span class='line'>
</span><span class='line'>layout: post
</span><span class='line'>title: "自定义你的Octopress博客"
</span><span class='line'>date: 2014-04-28 11:17:31 +0800
</span><span class='line'>comments: true
</span><span class='line'>categories: Octopress
</span><span class='line'>
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<p>实际上我们还可以为其添加以下几项，以本文举例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tags: [octopress, 博客自定义, seo]
</span><span class='line'>keywords: seo, octopress, analytics, 博客自定义
</span><span class='line'>description: 如何自定义Octopress博客</span></code></pre></td></tr></table></div></figure>


<p>这样更利于搜索引擎抓取到我们的博客。</p>

<p>事实上，如果我们不做上述设置，Octopress会默认将文章的前150个字作为文章的关键字，供搜索引擎抓取，但那并不一定准确。</p>

<p>Octopress实现该功能的代码在<code>source/_includes/head.html</code>文件中：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>  &lt;meta name="description" content="如何自定义Octopress博客"&gt;
</span><span class='line'>&lt;meta name="keywords" content="seo, octopress, analytics, 博客自定义"&gt;</span></code></pre></td></tr></table></div></figure>


<p>此外，还可以在<code>_config.yml</code>里添加默认的<code>description</code>和<code>keywords</code>，不过我没试过。</p>

<h2>界面相关</h2>

<ul>
<li>博客首页显示文章摘要</li>
</ul>


<p>默认情况下，博客首页文章列表中都会全部展示，要想让文章在首页中只显示一部分配置也非常简单：</p>

<p>首先在文章列表中你想展示的缩略部分增加标记：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> &lt;!-- more --&gt;
</span></code></pre></td></tr></table></div></figure>


<p>然后自定义<code>_config.yml</code>中的对应设置项：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> excerpt_link: "阅读更多 &rarr;"</span></code></pre></td></tr></table></div></figure>


<p>这样就有了我博客中现在的效果：
<img src="https://github.com/wangzz/wangzz.github.com/blob/master/images/336C83D8-ADEB-49A2-93D6-815A74509434.png?raw=true" alt="read more" /></p>

<ul>
<li>自定义侧边栏之增加category列表</li>
</ul>


<p>下面以增加侧边栏category列表为例。</p>

<p>在创建新文章时，我们会填写以下属性：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>---
</span><span class='line'>
</span><span class='line'>layout: post
</span><span class='line'>title: "自定义你的Octopress博客"
</span><span class='line'>date: 2014-04-28 11:17:31 +0800
</span><span class='line'>comments: true
</span><span class='line'>categories: Octopress
</span><span class='line'>tags: [octopress, 博客自定义, seo]
</span><span class='line'>keywords: seo, octopress, analytics, 博客自定义
</span><span class='line'>description: 如何自定义Octopress博客
</span><span class='line'>
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<p>其中的<code>categories</code>会为当前文章指定一个分类。我们可能有需要通过分类查找文章的需求，而侧边栏中默认只有最近提交列表。下面就介绍如何在侧边栏中显示文章分类列表。</p>

<p>首先，保存以下内容到<code>plugins/category_list_tag.rb</code>中（如果文件不存在就新创建一个）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> module Jekyll
</span><span class='line'>  class CategoryListTag &lt; Liquid::Tag
</span><span class='line'>    def render(context)
</span><span class='line'>      html = ""
</span><span class='line'>      categories = context.registers[:site].categories.keys
</span><span class='line'>      categories.sort.each do |category|
</span><span class='line'>        posts_in_category = context.registers[:site].categories[category].size
</span><span class='line'>        category_dir = context.registers[:site].config['category_dir']
</span><span class='line'>        category_url = File.join(category_dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase)
</span><span class='line'>        html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='http://wangzz.github.io/#{category_url}/'&gt;#{category} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n"
</span><span class='line'>      end
</span><span class='line'>      html
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>Liquid::Template.register_tag('category_list', Jekyll::CategoryListTag)
</span></code></pre></td></tr></table></div></figure>


<p>这个插件会向liquid注册一个名为<code>category_list</code>的tag，该tag就是以li的形式将站点所有的category组织起来。</p>

<p>然后再增加aside，复制以下代码到<code>source/_includes/asides/category_list.html</code>（如果没有就新建）中：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;section&gt;
</span><span class='line'> &lt;h1&gt;Categories&lt;/h1&gt;
</span><span class='line'> &lt;ul id="categories"&gt;
</span><span class='line'>  { category_list }
</span><span class='line'> &lt;/ul&gt;
</span><span class='line'>&lt;/section&gt;</span></code></pre></td></tr></table></div></figure>


<p>注意要将<code>{ category_list }</code>中<code>category_list</code>单词的左右两边分别加个<code>%</code>,即写成下图所示样式：
<img src="https://github.com/wangzz/wangzz.github.com/blob/master/images/D04878A8-B17E-4B76-A8FD-E4938C293B84.png?raw=true" alt="categorylist_pic" /></p>

<p>搞那么复杂是markdown排版问题。。。</p>

<p>最后更改_config.yml文件，让侧边栏链接到刚才新增加的<code>source/_includes/asides/category_list.html</code>文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>default_asides: [asides/recent_posts.html, asides/category_list.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html]</span></code></pre></td></tr></table></div></figure>


<p>完成以上步骤后，重新部署就能看到博客的右侧边栏增加了<code>category</code>列表了。</p>

<ul>
<li>自定义侧边栏之增加新浪微博</li>
</ul>


<p>在博客中增加新浪模块是一个很好的和渎职互动方式，增加方式如下：</p>

<p>首先要从<a href="http://app.weibo.com/tool/weiboshow">新浪微博秀</a>获取到自定义的微博秀代码，设定好微博秀样式后将代码复制下来。</p>

<p>然后在<code>source/_includes/custom/asides</code>目录下新建<code>weibo.html</code>文件，按照如下格式编辑该文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;section&gt;
</span><span class='line'>    &lt;h1&gt;新浪微博&lt;/h1&gt;
</span><span class='line'>    &lt;ul id="weibo"&gt;
</span><span class='line'>    &lt;li&gt;
</span><span class='line'>
</span><span class='line'>   -- 在此插入获得的微博秀代码 --
</span><span class='line'>
</span><span class='line'>      &lt;/li&gt;
</span><span class='line'>    &lt;/ul&gt;
</span><span class='line'>&lt;/section&gt;</span></code></pre></td></tr></table></div></figure>


<p>将刚才赋值下来的自定义微博秀代码粘贴到上述指定位置。</p>

<p>最后，和自定义category侧边栏一样，我们需要在<code>default_asides</code>中加入<code>custom/asides/weibo.html</code>。</p>

<p>重新部署后，微博秀就能正常展示啦！</p>

<ul>
<li>自定义Navigation</li>
</ul>


<p>默认的导航栏只有Blog、Archives两项，很难满足大家的要求。下面以增加about界面为例说明如何在导航栏上增加内容。</p>

<p>首先编辑文件<code>/source/_includes/custom/navigation.html</code>，仿照Blog和Archives的写法增加一行About：</p>

<p><img src="https://github.com/wangzz/wangzz.github.com/blob/master/images/1E66BCE6-EB83-42E8-AA5A-F0E66CD04A65.png?raw=true" alt="about" /></p>

<p>然后使用命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_page['about']</span></code></pre></td></tr></table></div></figure>


<p>创建一个页面，保存路径为<code>source\about\index.markdown</code></p>

<p>编辑index.markdown文件成自己想要的样式，然后重新部署，就能看到导航栏上新增了About项目。</p>

<ul>
<li>自定义Footer</li>
</ul>


<p>界面底部的声明部分同样可以自定义，修改文件：<code>source/_includes/custom/footer.html</code>成自己想要的格式即可。</p>

<ul>
<li>自定义网站主题</li>
</ul>


<p>目前有很多第三方主题，比如：<a href="http://opthemes.com/">http://opthemes.com/</a></p>

<p>该网站搜集了很多漂亮的主题，对应的主题里都有安装方式。</p>

<ul>
<li>新标签页打开网站中第三方链接</li>
</ul>


<p>Octopress博客中，默认是在当前界面中打开第三方链接，这导致网站浏览者跳到第三方链接后很难回来。</p>

<p>将以下代码加入<code>source/_includes/custom/head.html</code>文件中：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; &lt;script type="text/javascript"&gt;
</span><span class='line'>&gt; function addBlankTargetForLinks () {
</span><span class='line'>&gt;   $('a[href^="http"]').each(function(){
</span><span class='line'>&gt;       $(this).attr('target', '_blank');
</span><span class='line'>&gt;   });
</span><span class='line'>&gt; }
</span><span class='line'>&gt; 
</span><span class='line'>&gt; $(document).bind('DOMNodeInserted', function(event) {
</span><span class='line'>&gt;  addBlankTargetForLinks();
</span><span class='line'>&gt; });
</span><span class='line'>&gt; &lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<p>记得把左侧的<code>&gt;</code>符号都去掉。</p>

<p>不过本站的链接还是会在当前界面中打开。</p>

<h2>参考文章</h2>

<ul>
<li><p><a href="http://blog.csdn.net/lcliliil/article/details/13727927">SEO统计</a></p></li>
<li><p><a href="http://codemacro.com/2012/07/18/add-category-list-to-octopress/">增加category列表</a></p></li>
<li><p><a href="http://octopress.org/docs/theme/template/">Theming &amp; Customization</a></p></li>
<li><p><a href="http://asaf.github.io/blog/2013/07/08/blogging-with-octopress-add-about-page/">Add About Page</a></p></li>
<li><p><a href="http://www.blogjava.net/lishunli/archive/2013/01/20/394478.html">新标签页打开第三方链接</a></p></li>
<li><p><a href="http://blog.csdn.net/lcliliil/article/details/13725895">增加新浪微博秀</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[github优秀开源项目大全-iOS]]></title>
    <link href="http://wangzz.github.io/blog/2014/04/25/githubyou-xiu-xiang-mu-ios/"/>
    <updated>2014-04-25T17:45:33+08:00</updated>
    <id>http://wangzz.github.io/blog/2014/04/25/githubyou-xiu-xiang-mu-ios</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<ol>
<li><p>本文旨在搜集github上优秀的开源项目</p></li>
<li><p>本文搜集的项目都是用于iOS开发</p></li>
<li><p>本文会持续更新&hellip;</p></li>
</ol>


<h2>完整客户端</h2>

<ul>
<li><a href="https://github.com/dennisreimann/">ioctocat</a></li>
</ul>


<p>github的iOS客户端，目前开源代码是V1版本，V2版本在appstore上可以下载</p>

<ul>
<li><a href="https://github.com/chrisballinger/ChatSecure-iOS">ChatSecure-iOS</a></li>
</ul>


<p>使用XMPP协议的IM开源软件，很强大，在appstore上可以下载</p>

<!-- more -->


<ul>
<li><a href="https://github.com/gaosboy/iOSSF">SegmentFault</a></li>
</ul>


<p>SegmentFault的官方iOS客户端</p>

<ul>
<li><a href="http://git.oschina.net/oschina/iphone-app">OSChina-iOS</a></li>
</ul>


<p>开源中国社区oschina的官方iPhone客户端，appstore已上线。早期地址在<a href="https://github.com/gaosboy/iOSSF">github</a>上,后来迁移到OSChina自己的代码托管平台.</p>

<ul>
<li><a href="https://github.com/fggeraissate/FFCalendar">FFCalendar</a></li>
</ul>


<p>实现了日历的基本功能，目前只支持iPad版本</p>

<p><img src="https://raw.githubusercontent.com/fggeraissate/FFCalendar/master/FFCalendar/FFCalendars/Util/Images/YearlyCalendar.png" width="320" height="480"></p>


<ul>
<li><a href="https://github.com/WhiteHouse/wh-app-ios">wh-app-ios</a></li>
</ul>


<p>美国白宫（WhiteHouse）的官方app，听起来很高大上哈</p>

<ul>
<li><a href="https://github.com/ruby-china/ruby-china-for-ios">ruby-china-for-ios</a></li>
</ul>


<p>Ruby China的官方app</p>

<ul>
<li><a href="https://github.com/nothingmagical/cheddar-ios">cheddar-ios</a></li>
</ul>


<p>一款不错的日程管理软件，Appstore上能下载</p>

<p><img src="https://github.com/wangzz/wangzz.github.com/blob/master/images/cheddar-ios-screen-short.jpeg?raw=true" width="320" height="480"></p>


<ul>
<li><a href="https://github.com/jimpick/twitterfon">twitterfon</a></li>
</ul>


<p>第三方twitter客户端，不过作者上传后至今5年了都没更新过。。。</p>

<ul>
<li><a href="https://github.com/viewfinderco/viewfinder">viewfinder</a></li>
</ul>


<p>移动支付公司Square在其工程博客上宣布，基于Apache 2.0许可协议，开源了于去年12月初收购的照片管理和共享应用Viewfinder，包括Viewfinder服务器、Android和iOS应用在内的25万行代码已托管到GitHub上。
对此，Square工程师Peter Mattis在<a href="http://corner.squareup.com/2014/05/open-sourcing-viewfinder.html">工程博客</a>上表示，Square之所以考虑到将Viewfinder的完整代码公之于众，是希望能够与人方便，让开发者在应用开发过程中可以加以利用或作为参考。尽管Square团队并没有为Viewfinder提供技术支持，也没有进行Bug修复，但此举还是赢得了满堂喝彩一致点赞。</p>

<p>Viewfinder包含了许多非常有趣的代码，对于开发者来说，绝对是大大的Surprise，主要如下：</p>

<pre><code>. Viewfinder服务器提供了一个拥有各种Amazon DynamoDB索引选项的结构化数据库架构。
. 服务器还提供了数据库和协议层版本控制支持。
. 在本地元数据存储方面，Viewfinder客户端使用LevelDB，相比CoreData，更易于使用，也相当便捷。
. 内置可直接运行于移动设备上的全文本搜索引擎，支持联系人和图片搜索。
. 使用GYP生成Xcode项目文件和Android构建文件。
. 支持C++模板元编程，可使用C++11可变参数模板根据C++方法自动计算Java方法签名。
</code></pre>

<p>该段介绍出自<a href="http://www.pcbeta.com/viewnews-63336-1.html">这里</a>。</p>

<p>viewfinder使用GYP生成Xcode的工程文件，生成方式如下：</p>

<p>首先要安装GYP，执行以下步骤：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ svn checkout http://gyp.googlecode.com/svn/trunk/ gyp-read-only 
</span><span class='line'>$ cd gyp-read-only 
</span><span class='line'>$ ./setup.py build 
</span><span class='line'>$ sudo ./setup.py install </span></code></pre></td></tr></table></div></figure>


<p>安装成功以后，再进入到clone下来的viewfineder源码目录，执行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd viewfinder/clients/ios
</span><span class='line'>$ gyp --depth=. -DOS=ios -Iglobals.gypi ViewfinderGyp.gyp</span></code></pre></td></tr></table></div></figure>


<p>这样就能成功生成Xcode工程文件了，不过需要通过<code>ViewfinderGyp.xcodeproj</code>文件打开工程。</p>

<ul>
<li><a href="https://github.com/Xuzz/newsyc">HackerNews</a></li>
</ul>


<p><code>Hacker News</code>的iPhone客户端</p>

<p><img src="http://wangzz.github.io/images/article1/app_hack_news.png" width="320" height="480"></p>

<ul>
<li><a href="https://github.com/kesalin/AmericanEnglish">AmericanEnglish</a></li>
</ul>


<p>iOS资深开发者<a href="http://blog.csdn.net/kesalin">罗朝辉</a>做的一款应用，《美式英语》的iPhone版本</p>

<p><img src="http://wangzz.github.io/images/article1/app_american_english.png" width="320" height="480"></p>

<ul>
<li><a href="https://github.com/xincode9/FormosaWeibo">FormosaWeibo</a></li>
</ul>


<p>使用新浪微博开放平台做的微博客户端，做工略显粗糙，作者也有几个月没更新了。</p>

<ul>
<li><a href="https://github.com/ming1016/RSSRead">RSSRead</a></li>
</ul>


<p>AppStore<a href="https://itunes.apple.com/cn/app/yi-yue-rss-li-xian-xin-wen-yue-du/id850246364?mt=8">上线产品</a>，中文名称<code>已阅</code>。一个iOS设备上的RSS/Atom阅读器，刚成立的项目，还有很多有待完善的地方。</p>

<p><img src="http://wangzz.github.io/images/article1/app_rssread.jpeg" width="320" height="480"></p>

<h2>Xcode插件</h2>

<ul>
<li><a href="https://github.com/kattrali/cocoapods-xcode-plugin">cocoapods-xcode-plugin</a></li>
</ul>


<p>用于在Xcode中管理CocoaPods依赖库</p>

<p><img src="http://wangzz.github.io/images/article1/plugin_cocoapods_menu.png" width="560" height="390"></p>

<ul>
<li><a href="https://github.com/qfish/XAlign">XAlign</a></li>
</ul>


<p>方便实现代码对其功能，使代码风格统一</p>

<p><img src="http://wangzz.github.io/images/article1/plugin_align.gif" width="560" height="460"></p>

<ul>
<li><a href="https://github.com/fortinmike/XcodeBoost">XcodeBoost</a></li>
</ul>


<p>一个辅助代码编辑插件。支持高亮选中、批量选中方法和方法名、根据选中的方法批量生成方法声明、高亮正则搜索等功能。</p>

<ul>
<li><a href="https://github.com/johnno1962/injectionforxcode">Injection for Xcode</a></li>
</ul>


<p>一个神奇的Xcode 插件，能让应用在运行的时候做出的小的改变立马体现效果，而不需要重新编译。。。</p>

<ul>
<li><a href="https://github.com/supermarin/Alcatraz">Alcatraz</a></li>
</ul>


<p>以图形化界面管理Xcode插件的插件。</p>

<p><img src="http://wangzz.github.io/images/article1/plugin_alcatraz.png" width="560" height="650"></p>

<ul>
<li><a href="https://github.com/ksuther/KSImageNamed-Xcode">KSImageNamed-Xcode</a></li>
</ul>


<p>当输入<code>[NSImage imageNamed:</code> 或者<code>[UIImage imageNamed:</code>时，会自动补全工程中可用的图片名称，同时能提供选中图片的预览。</p>

<p><img src="http://wangzz.github.io/images/article1/plugin_image_named.gif" width="516" height="220"></p>

<ul>
<li><a href="https://github.com/trawor/XToDo">XToDo</a></li>
</ul>


<p>能以图形界面列表的形式列出代码中添加了<code>TODO</code>,<code>FIXME</code>,<code>???</code>,<code>!!!!</code>标识的项目，方便解决软件中备注的未解决问题。另外，能查找的还不只上述四种标识，用户可以自己添加想支持的标识。</p>

<p><img src="http://wangzz.github.io/images/article1/plugin_xtodo.png" width="516" height="320"></p>

<ul>
<li><a href="https://github.com/macoscope/CodePilot">CodePilot</a></li>
</ul>


<p>快速查找工程中的文件、代码等资源，和Xcode5自带的<code>Open Quickly</code>功能相似。</p>

<p><img src="http://wangzz.github.io/images/article1/plugin_codepilot.png" width="516" height="540"></p>

<ul>
<li><a href="https://github.com/onevcat/VVDocumenter-Xcode">VVDocumenter-Xcode</a></li>
</ul>


<p>提供了为代码增加注视的最快捷方式，是我使用频率最高的插件，<a href="http://onevcat.com/">猫神</a>出品。</p>

<p><img src="http://wangzz.github.io/images/article1/plugin_vvdocumenter.gif" width="516" height="300"></p>

<h2>工具</h2>

<ul>
<li><a href="https://github.com/johnno1962/Xtrace">Xtrace</a></li>
</ul>


<p>能详细打印出一个某个方法被调用的堆栈，方便调试时定位问题</p>

<p><img src="http://wangzz.github.io/images/article1/tool_xtrace.png" width="560" height="460"></p>

<ul>
<li><a href="https://github.com/realmacsoftware/RMConnecter">RMConnecter</a></li>
</ul>


<p>在上传AppStore时需要填写app的描述信息，此软件能很方便的填写这些信息。</p>

<p><img src="http://wangzz.github.io/images/article1/tool_rnconnecter.png" width="580" height="500"></p>

<ul>
<li><a href="https://github.com/facebook/xctool">xctool</a></li>
</ul>


<p>facebook出的自动编译工具，不像xcodebuild，它能够整洁的打印出日志</p>

<p><img src="http://wangzz.github.io/images/article1/tool_xctool.gif" width="584" height="414"></p>

<ul>
<li><a href="https://github.com/kstenerud/iOS-Universal-Framework">iOS-Universal-Framework</a></li>
</ul>


<p>用于生成兼容armv6/armv7/i386 <code>framework</code>的Xcode工程模版：</p>

<p><img src="http://wangzz.github.io/images/article1/tool_framework.png" width="584" height="414"></p>

<ul>
<li><a href="https://github.com/kharrison/UYLPasswordManager">UYLPasswordManager</a></li>
</ul>


<p>对访问iOS Keychain的封装库。</p>

<ul>
<li><a href="https://github.com/sqlcipher/sqlcipher">sqlcipher</a></li>
</ul>


<p>这是目前我已知的唯一一个支持对SQLite加密的免费开源库，对应的有收费版本。本开源库实现了对SQLite开源免费版本中未实现的加密接口，同时做了一定的扩展。使用的是256位AES加密方式。</p>

<p>强烈推荐！</p>

<ul>
<li><a href="https://github.com/mattt/Xcode-Snippets">Xcode-Snippets</a></li>
</ul>


<p><code>AFNetworking</code>作者、mattt大神开源的常用Xcode代码片段。</p>

<h2>开发框架</h2>

<ul>
<li><a href="https://github.com/facebook/pop">pop</a></li>
</ul>


<p>facebook那神奇的动画引擎，你懂得。。。</p>

<p><img src="https://github.com/facebook/pop/blob/master/Images/pop.gif?raw=true" alt="pop" /></p>

<ul>
<li><a href="https://github.com/facebook/KVOController">KVOController</a></li>
</ul>


<p>facebook出品，基于Cocoa的KVO开发，提供简单地使用方式，同时也是线程安全的。</p>

<ul>
<li><a href="https://github.com/steipete/Aspects">Aspects</a></li>
</ul>


<p>通过method swizzling技术，能够在一个类的现有方法执行之前或之后附加一个代码片段（以block方式），能极大的方便我们调试。</p>

<ul>
<li><a href="https://github.com/PSPDFKit/PSPDFKit-Demo">PSPDFKit</a></li>
</ul>


<p>十分强大的PDF开发框架，有异步加载、预览、编辑、加标注等很多功能</p>

<ul>
<li><a href="https://github.com/xhacker/TEAChart">TEAChart</a></li>
</ul>


<p>使用简单，功能强大的图表工具</p>

<p><img src="https://github.com/wangzz/wangzz.github.com/blob/master/images/TEAChart-screen-short.gif?raw=true" alt="TEAChart" /></p>

<ul>
<li><a href="https://github.com/kewenya/SearchCoreTest">SearchCoreTest</a></li>
</ul>


<p>一个联系人搜索库，支持的搜索方式包括：用户名汉字、拼音及模糊搜索，号码搜索，最重要的是支持T9搜索，做过通讯录类应用的同学都懂的。我在项目里用过，很赞。</p>

<ul>
<li><a href="https://github.com/robbiehanson/XMPPFramework">XMPPFramework</a></li>
</ul>


<p>应该是XMPP协议Objective-C实现的最好版本，小型开发者想做IM应用的好选择，使用起来也很方便。</p>

<ul>
<li><a href="https://github.com/jessesquires/JSQMessagesViewController">JSQMessagesViewController</a></li>
</ul>


<p>一个通用聊天界面框架，效果不错，感谢作者的开源。这个框架后来被国内某无耻程序员修改成<a href="https://github.com/xhzengAIB/MessageDisplayKit">MessageDisplayKit</a>，大有据为己有之势。</p>

<p><img src="http://wangzz.github.io/images/article1/framework_JSQMessagesViewController.png" width="320" height="480"></p>

<ul>
<li><a href="https://github.com/hailongz/vTeam">vTeam</a></li>
</ul>


<p>一个开发者积累多年的开发框架，值得看看。</p>

<ul>
<li><a href="https://github.com/hfossli/AGGeometryKit">AGGeometryKit</a></li>
</ul>


<p>几何图形框架，把AGGeometryKit和POP结合起来使用，可实现非常棒的动态和动画。</p>

<ul>
<li><a href="https://github.com/Intermark/IMQuickSearch">IMQuickSearch</a></li>
</ul>


<p>IMQuickSearch是一个快速搜索工具，可以过滤包含多种自定义NSObject类的NSArray。</p>

<p><img src="http://wangzz.github.io/images/article1/framework_IMQuickSearch.gif" width="320" height="480"></p>

<ul>
<li><a href="https://github.com/honcheng/iOSPlot">iOSPlot</a></li>
</ul>


<p>新加坡开发者<code>honcheng</code>实现的图标制作框架，支持折线图、饼状图等。</p>

<p><img src="http://wangzz.github.io/images/article1/framework_iOSPlot.png" width="480" height="320"></p>

<h2>自定义view</h2>

<ul>
<li><a href="https://github.com/yishuiliunian/DZTableView">DZTableView</a></li>
</ul>


<p>仿照UITableView机制自己实现的一个自定义tableview，带有详细的说明文档</p>

<ul>
<li><a href="https://github.com/andreamazz/AMWaveTransition">AMWaveTransition</a></li>
</ul>


<p>很炫的带有表格的视图控制器切换效果，点击每个栏目会有限带有波浪效果的信息展示，类似于Facebook Paper</p>

<p><img src="https://raw.githubusercontent.com/andreamazz/AMWaveTransition/master/screenshot.gif" alt="AMWaveTransition" /></p>

<ul>
<li><a href="https://github.com/facebook/Shimmer">Shimmer</a></li>
</ul>


<p>又是facebook出的，可以让view展示波光粼粼的效果</p>

<p><img src="https://github.com/facebook/Shimmer/blob/master/shimmer.gif?raw=true" alt="Shimmer" /></p>

<ul>
<li><a href="https://github.com/steipete/PSTCollectionView">PSTCollectionView</a></li>
</ul>


<p>仿照系统的UICollectionView的API实现的collection view，支持ARC和iOS4.3+系统，可用于替代只能从iOS6开始支持的UICollectionView</p>

<ul>
<li><a href="https://github.com/jaydee3/JDStatusBarNotification">JDStatusBarNotification</a></li>
</ul>


<p>各种形式在状态栏展示信息，包括提示、进度等，展示格式和动画方式也有好几种。下图只是以静态方式展示其效果，更多详情请点击链接查看。</p>

<p><img src="https://github.com/wangzz/wangzz.github.com/blob/master/images/article1/styles.png?raw=true" alt="JDStatusBarNotification" /></p>

<ul>
<li><a href="https://github.com/heroims/SphereView">SphereView</a></li>
</ul>


<p>一个球形3D标签，能够放大、缩小、拖动、点击、自动旋转。效果挺玄的，就是感觉有点卡，还有一定的优化空间。下图截了一个静态图片:</p>

<p><img src="https://github.com/wangzz/wangzz.github.com/blob/master/images/article1/SphereView.png?raw=true" alt="SphereView" /></p>

<ul>
<li><a href="https://github.com/romaonthego/RESideMenu">RESideMenu</a></li>
</ul>


<p>iOS7风格的侧滑菜单，支持左右双向侧滑：</p>

<p><img src="http://wangzz.github.io/images/article1/RESideMenu.gif" alt="RESideMenu" /></p>

<ul>
<li><a href="https://github.com/gcamp/GCDiscreetNotificationView">GCDiscreetNotificationView</a></li>
</ul>


<p>一种在view的顶部弹出并会自动消失的通知类view，是toast的一种变形。目前<a href="http://git.oschina.net/oschina/iphone-app">开源中国</a>的项目正在用该view。</p>

<ul>
<li><a href="https://github.com/cleexiang/CLProgressHUD">CLProgressHUD</a></li>
</ul>


<p>大麦网iOS客户端工程师开源的一个HUD view，</p>

<p><img src="http://wangzz.github.io/images/article1/view_clprogresshud.gif" width="320" height="480"></p>

<ul>
<li><a href="https://github.com/romaonthego/REMenu">REMenu</a></li>
</ul>


<p>自定义的下拉菜单</p>

<p><img src="http://wangzz.github.io/images/article1/view_remenu.gif" width="320" height="480"></p>

<ul>
<li><a href="https://github.com/5sw/SWParallaxScrollView">SWParallaxScrollView</a></li>
</ul>


<p>能够实现在多个图层上以不同速度滑动的自定义ScrollView，可用于做软件启动时的help界面：</p>

<p><img src="http://wangzz.github.io/images/article1/view_parallax_scrollview.gif" width="480" height="320"></p>

<ul>
<li><a href="https://github.com/tjeerdintveen/Vurig-Calendar">Vurig-Calendar</a></li>
</ul>


<p>自定义的日历，界面很简洁，月份切换时动画效果也不错。</p>

<p><img src="http://wangzz.github.io/images/article1/framework_Vurig-Calendar.png" width="320" height="480"></p>

<ul>
<li><a href="https://github.com/xiangwangfeng/M80AttributedLabel">M80AttributedLabel</a></li>
</ul>


<p>功能较齐全的attributed lable，支持attributed string和图片、链接、控件的混排。</p>

<ul>
<li><a href="https://github.com/Ciechan/BCMeshTransformView">BCMeshTransformView</a></li>
</ul>


<p>实现了相当炫的拉幕式的界面切换效果，其灵感来自CALayer的私有属性<code>meshTransform</code>以及和其对应的<code>CAMeshTransform</code>。</p>

<p><img src="http://wangzz.github.io/images/article1/view_BCMeshTransformView.jpg" width="320" height="480"></p>

<ul>
<li><a href="https://github.com/cyndibaby905/TwitterCover">TwitterCover</a></li>
</ul>


<p>新浪微博开发者仿照Twitter的iOS客户端中的效果实现的向下拉动滚动视图，视图顶端的图片会随着下拉而变大，并且带有模糊的效果。</p>

<p><img src="http://wangzz.github.io/images/article1/view_TwitterCover.gif" width="320" height="480"></p>

<ul>
<li><a href="https://github.com/tristanhimmelman/THContactPicker">THContactPicker</a></li>
</ul>


<p>模仿系统邮件应用实现的联系人选择界面。</p>

<p><img src="http://wangzz.github.io/images/article1/view_THContactPicker.gif" width="320" height="480"></p>

<ul>
<li><a href="https://github.com/kronik/DKCircleButton">DKCircleButton</a></li>
</ul>


<p>一个扁平化的，能带声波效果的按钮。</p>

<p><img src="http://wangzz.github.io/images/article1/view_DKCircleButton.gif" width="320" height="480"></p>

<ul>
<li><a href="https://github.com/honcheng/PaperFold-for-iOS">PaperFold-for-iOS</a></li>
</ul>


<p>新加坡开发者<code>honcheng</code>实现的折纸效果的界面切换，适合做电子书阅读类应用。</p>

<p><img src="http://wangzz.github.io/images/article1/view_PaperFold-for-iOS.png" width="320" height="480"></p>

<ul>
<li><a href="https://github.com/honcheng/RTLabel">RTLabel</a></li>
</ul>


<p>新加坡开发者<code>honcheng</code>多媒体显示view，支持html语法，应用非常广泛。</p>

<p><img src="http://wangzz.github.io/images/article1/view_RTLabel.png" width="320" height="480"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让你的Octopress博客在多台Mac上同时使用]]></title>
    <link href="http://wangzz.github.io/blog/2014/04/02/ru-he-pei-zhi-rang-ni-de-octopressbo-ke-zai-duo-tai-macshang-tong-shi-shi-yong/"/>
    <updated>2014-04-02T14:28:35+08:00</updated>
    <id>http://wangzz.github.io/blog/2014/04/02/ru-he-pei-zhi-rang-ni-de-octopressbo-ke-zai-duo-tai-macshang-tong-shi-shi-yong</id>
    <content type="html"><![CDATA[<p>前阵子在公司电脑上配置好了Octopress博客，但是想在家里的Mac上使用，开始以为简单的将仓库clone就可以了，不幸的是我想的太简单。后来在网上看到了前面列出的第一篇文章，终于解决问题。</p>

<h2>一、Octopress目录结构</h2>

<p>Octopress的仓库目录下有两个branch，<code>source</code>和<code>master</code>。</p>

<ol>
<li><p><code>source</code>分支下保存Octopress的源代码，我们需要用他们生成博客，该分支保存在Octopress本地仓库的根目录下；</p></li>
<li><p><code>master</code>分支下保存生成的博客内容，该分支在Octopress本地仓库的根目录下一个叫<code>_deploy</code>得文件夹中。该文件夹是以下划线开头的，会在执行<code>git push origin source</code>命令时被忽略，这也是为什么一个目录中能同时存在两个不同分支的文件夹的原因。</p></li>
</ol>


<!-- more -->


<h2>二、在本地重建Octopress仓库</h2>

<p>需要执行以下命令：</p>

<ol>
<li>clone <code>source</code>分支</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone -b source git@github.com:username/username.github.com.git octopress</span></code></pre></td></tr></table></div></figure>


<p>别忘了<code>username</code>替换成你自己github用户名。
另外还要注意的是，clone的地址不能是<code>http</code>而必须得是<code>ssh</code>的。</p>

<p>如果执行时提示以下错误：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Cloning into 'octopress'...
</span><span class='line'>The authenticity of host 'github.com (192.30.252.131)' can't be established.
</span><span class='line'>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
</span><span class='line'>Are you sure you want to continue connecting (yes/no)? yes
</span><span class='line'>Warning: Permanently added 'github.com,192.30.252.131' (RSA) to the list of known hosts.
</span><span class='line'>Permission denied (publickey).
</span><span class='line'>fatal: Could not read from remote repository.
</span><span class='line'>
</span><span class='line'>Please make sure you have the correct access rights
</span><span class='line'>and the repository exists.
</span></code></pre></td></tr></table></div></figure>


<p>说明你的电脑不被github信任，需要在你电脑上创建<code>ssh key</code>并添加到github中。</p>

<p>这是你需要执行2；
如果没出现上述错误，直接执行3。</p>

<p>2.创建并添加ssh key</p>

<p>2.1 创建ssh key</p>

<p>2.1.1 生成key</p>

<p>执行命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh-keygen -t rsa -C "your_email@example.com"</span></code></pre></td></tr></table></div></figure>


<p>会提示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Generating public/private rsa key pair.
</span><span class='line'>Enter file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]</span></code></pre></td></tr></table></div></figure>


<p>这时候按回车键(Enter)继续：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Enter passphrase (empty for no passphrase): [Type a passphrase]
</span><span class='line'># Enter same passphrase again: [Type passphrase again]</span></code></pre></td></tr></table></div></figure>


<p>会要求你输入一个密码，4位以上，要记住，后面有用。</p>

<p>接下来会提示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Your identification has been saved in /Users/you/.ssh/id_rsa.
</span><span class='line'># Your public key has been saved in /Users/you/.ssh/id_rsa.pub.
</span><span class='line'># The key fingerprint is:
</span><span class='line'># 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</span></code></pre></td></tr></table></div></figure>


<p>到这里就说明key已经创建成功了。</p>

<p>2.1.2 把生成的key添加到<code>ssh-agent</code>中
最后需要执行以下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh-add ~/.ssh/id_rsa</span></code></pre></td></tr></table></div></figure>


<p>2.2 把生成的key添加到github</p>

<p>2.2.1 copy key内容</p>

<p>先执行下面的命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pbcopy &lt; ~/.ssh/id_rsa.pub</span></code></pre></td></tr></table></div></figure>


<p>该命令将key中的内容copy到粘贴板中，以便后面使用。当然你也可以用自己的方式copy。</p>

<p>2.2.2 找到添加key的地方</p>

<p>先点击<a href="https://github.com/settings">Account Settings</a>：</p>

<p><img src="https://github-images.s3.amazonaws.com/help/settings/userbar-account-settings.png" alt="账户设置" /></p>

<p>进入设置界面后，点击界面左侧的<a href="https://github.com/settings/ssh">SSH KEYS</a>:</p>

<p><img src="https://github-images.s3.amazonaws.com/help/settings/settings-sidebar-ssh-keys.png" alt="ssh keys" /></p>

<p>点击<code>Add SSH key</code>按钮：</p>

<p><img src="https://github-images.s3.amazonaws.com/help/settings/ssh-add-ssh-key.png" alt="add ssh key" /></p>

<p>点击<code>Add key</code>按钮：</p>

<p><img src="https://github-images.s3.amazonaws.com/help/settings/ssh-add-key.png" alt="add key" /></p>

<p>在输入框内粘贴刚才copy的key，点击确定即可。</p>

<p>2.3 验证key可用性</p>

<p>通过ssh github验证key是否可用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -T git@github.com</span></code></pre></td></tr></table></div></figure>


<p>命令执行后会输出：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>The authenticity of host 'github.com (207.97.227.239)' can't be established.
</span><span class='line'>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
</span><span class='line'>Are you sure you want to continue connecting (yes/no)?</span></code></pre></td></tr></table></div></figure>


<p>输入<code>yes</code>如果打印以下内容，就说明OK了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hi username! You've successfully authenticated, but GitHub does not</span></code></pre></td></tr></table></div></figure>


<p> 3.clone master分支</p>

<p>下面需要将master分支clone到<code>_deploy</code>目录：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd octopress
</span><span class='line'>$ git clone git@github.com:username/username.github.com.git _deploy </span></code></pre></td></tr></table></div></figure>


<p> 4.配置环境</p>

<p>执行以下命令配置环境：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install bundler
</span><span class='line'>$ rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
</span><span class='line'>$ bundle install
</span><span class='line'>$ rake setup_github_pages </span></code></pre></td></tr></table></div></figure>


<p>执行最后一条命令时需要你输入github中博客仓库地址：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Enter the read/write url for your repository
</span><span class='line'>(For example, 'git@github.com:your_username/your_username.github.com)</span></code></pre></td></tr></table></div></figure>


<p>到此所有的工作都完成了，你就可以享受在两台电脑上使用Octopress了！</p>

<h2>三、Tips</h2>

<ol>
<li>及时提交本地修改</li>
</ol>


<p>在每处配置了Octopress的地方，做了任何修改都要提交，否则另一个地方做了修改，本地更新的时候肯定会冲突。</p>

<p>每次在本地做完修改以后，都要及时提交，分别执行以下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake generate
</span><span class='line'>$ rake deploy             # update the remote master branch</span></code></pre></td></tr></table></div></figure>


<p>第一条命令会使用本地的修改生成最新的blog网站，并且生成的blog会存放到<code>Octopress</code>根目录下的<code>public/</code>目录下；</p>

<p>第二条命令主要做了两件事：</p>

<p>*用<code>generate</code>命令生成在<code>public/</code>目录下的内容覆盖<code>_deploy/</code>目录下内容；</p>

<p>*将<code>_deploy/</code>目录下的修改<code>add</code> 、 <code>commit</code>到git，并<code>push</code>到git的<code>master</code>分支。</p>

<p>别以为这就结束了，你还得把source分支中做的修改提交的git仓库中，执行以下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add .
</span><span class='line'>$ git commit -am "Some comment here." 
</span><span class='line'>$ git push origin source  # update the remote source branch </span></code></pre></td></tr></table></div></figure>


<p>执行完这两步后，稍过一会就能看到自己blog中的更新啦！</p>

<p> 2.修改前先更新到最新版本</p>

<p>为了以防万一，在本地做任何修改前都要先做更新，可以执行以下命令分别更新<code>source</code>和<code>master</code>分支：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd octopress
</span><span class='line'>$ git pull origin source  # update the local source branch
</span><span class='line'>$ cd ./_deploy
</span><span class='line'>$ git pull origin master  # update the local master branch</span></code></pre></td></tr></table></div></figure>


<h2>四、参考文档</h2>

<p>本文参考了以下两篇文章：</p>

<ol>
<li><p><a href="http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/"><strong>Clone Your Octopress to Blog From Two Places</strong></a></p></li>
<li><p><a href="https://help.github.com/articles/generating-ssh-keys"><strong>Generating SSH Keys</strong></a></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开始写blog啦]]></title>
    <link href="http://wangzz.github.io/blog/2014/03/31/kai-shi-xie-blogla/"/>
    <updated>2014-03-31T20:19:44+08:00</updated>
    <id>http://wangzz.github.io/blog/2014/03/31/kai-shi-xie-blogla</id>
    <content type="html"><![CDATA[<p>这是我的第一篇日志，以后多多关注！</p>
]]></content>
  </entry>
  
</feed>
