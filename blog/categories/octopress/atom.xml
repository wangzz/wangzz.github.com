<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Octopress | 王中周的个人博客]]></title>
  <link href="http://wangzz.github.io/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://wangzz.github.io/"/>
  <updated>2014-05-09T19:30:13+08:00</updated>
  <id>http://wangzz.github.io/</id>
  <author>
    <name><![CDATA[王中周]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[自定义你的Octopress博客]]></title>
    <link href="http://wangzz.github.io/blog/2014/04/28/custom-your-octopress-blog/"/>
    <updated>2014-04-28T11:17:31+08:00</updated>
    <id>http://wangzz.github.io/blog/2014/04/28/custom-your-octopress-blog</id>
    <content type="html"><![CDATA[<h2>SEO</h2>

<ul>
<li>增加统计工具</li>
</ul>


<p>博客搭建好了以后，大家一定很想知道每天都有多少的访问量。现在有很多工具都可以帮助我们做这件事，比如<code>Google Analytics</code>、<code>百度统计</code>、<code>CNZZ</code> 等。</p>

<p>其中<code>Google Analytics</code>是Octopress自带的统计工具，使用方式也非常简单，只需要到<code>Google Analytics</code>申请一个<code>app id</code>，填写到<code>_config.yml</code>文件中的<code>google_analytics_tracking_id</code>后面即可。但<code>Google Analytics</code>存在翻墙的麻烦，而且<code>百度统计</code>功能也挺齐全，完全能满足我的需求，就选择了<code>百度统计</code>。</p>

<p>集成百度统计方式非常简单：</p>

<p>只需到<code>百度统计</code>官方网站申请一个账号，将获取的代码添加到<code>source/_includes/custom/footer.html</code>中，重新部署即可。</p>

<p> <!-- more --></p>

<ul>
<li>搜索优化</li>
</ul>


<p>为了让自己搭建的博客更容易被搜索引擎搜到，最好将网站地址提交给各大搜索引擎，下面有两个连接搜集了各个搜索引擎的网站提交入口：</p>

<p><code>
http://urlc.cn/tool/addurl.html
http://tool.lusongsong.com/addurl.html
</code></p>

<p>我试了下，添加到<code>google</code>以后，搜索关键字的时候自己的博客确实排名靠前了。</p>

<p>光是将网址添加到搜索引擎还不够，你必须得为你的文章添加关键字，才能更好地被引擎搜到，在创建一篇新文章的时候，生成的makedown文件包含以下内容，以本文举例：</p>

<p>```</p>

<hr />

<p>layout: post
title: &ldquo;自定义你的Octopress博客&rdquo;
date: 2014-04-28 11:17:31 +0800
comments: true
categories: Octopress</p>

<hr />

<p>```</p>

<p>实际上我们还可以为其添加以下几项，以本文举例：</p>

<p><code>
tags: [octopress, 博客自定义, seo]
keywords: seo, octopress, analytics, 博客自定义
description: 如何自定义Octopress博客
</code></p>

<p>这样更利于搜索引擎抓取到我们的博客。</p>

<p>事实上，如果我们不做上述设置，Octopress会默认将文章的前150个字作为文章的关键字，供搜索引擎抓取，但那并不一定准确。</p>

<p>Octopress实现该功能的代码在<code>source/_includes/head.html</code>文件中：</p>

<p><code>

  &lt;meta name="description" content="Category: Octopress"&gt;

</code></p>

<p>此外，还可以在<code>_config.yml</code>里添加默认的<code>description</code>和<code>keywords</code>，不过我没试过。</p>

<h2>界面相关</h2>

<ul>
<li>博客首页显示文章摘要</li>
</ul>


<p>默认情况下，博客首页文章列表中都会全部展示，要想让文章在首页中只显示一部分配置也非常简单：</p>

<p>首先在文章列表中你想展示的缩略部分增加标记：</p>

<p>```
 <!-- more --></p>

<p>```</p>

<p>然后自定义<code>_config.yml</code>中的对应设置项：</p>

<p><code>
 excerpt_link: "阅读更多 &amp;rarr;"
</code></p>

<p>这样就有了我博客中现在的效果：
<img src="https://github.com/wangzz/wangzz.github.com/blob/master/images/336C83D8-ADEB-49A2-93D6-815A74509434.png?raw=true" alt="read more" /></p>

<ul>
<li>自定义侧边栏之增加category列表</li>
</ul>


<p>下面以增加侧边栏category列表为例。</p>

<p>在创建新文章时，我们会填写以下属性：</p>

<p>```</p>

<hr />

<p>layout: post
title: &ldquo;自定义你的Octopress博客&rdquo;
date: 2014-04-28 11:17:31 +0800
comments: true
categories: Octopress
tags: [octopress, 博客自定义, seo]
keywords: seo, octopress, analytics, 博客自定义
description: 如何自定义Octopress博客</p>

<hr />

<p>```</p>

<p>其中的<code>categories</code>会为当前文章指定一个分类。我们可能有需要通过分类查找文章的需求，而侧边栏中默认只有最近提交列表。下面就介绍如何在侧边栏中显示文章分类列表。</p>

<p>首先，保存以下内容到<code>plugins/category_list_tag.rb</code>中（如果文件不存在就新创建一个）：</p>

<p>```
 module Jekyll
  class CategoryListTag &lt; Liquid::Tag</p>

<pre><code>def render(context)
  html = ""
  categories = context.registers[:site].categories.keys
  categories.sort.each do |category|
    posts_in_category = context.registers[:site].categories[category].size
    category_dir = context.registers[:site].config['category_dir']
    category_url = File.join(category_dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase)
    html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='http://wangzz.github.io/#{category_url}/'&gt;#{category} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n"
  end
  html
end
</code></pre>

<p>  end
end</p>

<p>Liquid::Template.register_tag(&lsquo;category_list&rsquo;, Jekyll::CategoryListTag)</p>

<p>```</p>

<p>这个插件会向liquid注册一个名为<code>category_list</code>的tag，该tag就是以li的形式将站点所有的category组织起来。</p>

<p>然后再增加aside，复制以下代码到<code>source/_includes/asides/category_list.html</code>（如果没有就新建）中：</p>

<p><code>
&lt;section&gt;
 &lt;h1&gt;Categories&lt;/h1&gt;
 &lt;ul id="categories"&gt;
  { category_list }
 &lt;/ul&gt;
&lt;/section&gt;
</code>
注意要将<code>{ category_list }</code>中<code>category_list</code>单词的左右两边分别加个<code>%</code>,即写成下图所示样式：
<img src="https://github.com/wangzz/wangzz.github.com/blob/master/images/D04878A8-B17E-4B76-A8FD-E4938C293B84.png?raw=true" alt="categorylist_pic" /></p>

<p>搞那么复杂是markdown排版问题。。。</p>

<p>最后更改_config.yml文件，让侧边栏链接到刚才新增加的<code>source/_includes/asides/category_list.html</code>文件：</p>

<p><code>
default_asides: [asides/recent_posts.html, asides/category_list.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html]
</code></p>

<p>完成以上步骤后，重新部署就能看到博客的右侧边栏增加了<code>category</code>列表了。</p>

<ul>
<li>自定义侧边栏之增加新浪微博</li>
</ul>


<p>在博客中增加新浪模块是一个很好的和渎职互动方式，增加方式如下：</p>

<p>首先要从<a href="http://app.weibo.com/tool/weiboshow">新浪微博秀</a>获取到自定义的微博秀代码，设定好微博秀样式后将代码复制下来。</p>

<p>然后在<code>source/_includes/custom/asides</code>目录下新建<code>weibo.html</code>文件，按照如下格式编辑该文件：</p>

<p>```
<section></p>

<pre><code>&lt;h1&gt;新浪微博&lt;/h1&gt;
&lt;ul id="weibo"&gt;
&lt;li&gt;
</code></pre>

<p>   &mdash; 在此插入获得的微博秀代码 &mdash;</p>

<pre><code>  &lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p></section>
```</p>

<p>将刚才赋值下来的自定义微博秀代码粘贴到上述指定位置。</p>

<p>最后，和自定义category侧边栏一样，我们需要在<code>default_asides</code>中加入<code>custom/asides/weibo.html</code>。</p>

<p>重新部署后，微博秀就能正常展示啦！</p>

<ul>
<li>自定义Navigation</li>
</ul>


<p>默认的导航栏只有Blog、Archives两项，很难满足大家的要求。下面以增加about界面为例说明如何在导航栏上增加内容。</p>

<p>首先编辑文件<code>/source/_includes/custom/navigation.html</code>，仿照Blog和Archives的写法增加一行About：</p>

<p><img src="https://github.com/wangzz/wangzz.github.com/blob/master/images/1E66BCE6-EB83-42E8-AA5A-F0E66CD04A65.png?raw=true" alt="about" /></p>

<p>然后使用命令：</p>

<p><code>
rake new_page['about']
</code></p>

<p>创建一个页面，保存路径为<code>source\about\index.markdown</code></p>

<p>编辑index.markdown文件成自己想要的样式，然后重新部署，就能看到导航栏上新增了About项目。</p>

<ul>
<li>自定义Footer</li>
</ul>


<p>界面底部的声明部分同样可以自定义，修改文件：<code>source/_includes/custom/footer.html</code>成自己想要的格式即可。</p>

<ul>
<li>自定义网站主题</li>
</ul>


<p>目前有很多第三方主题，比如：<a href="http://opthemes.com/">http://opthemes.com/</a></p>

<p>该网站搜集了很多漂亮的主题，对应的主题里都有安装方式。</p>

<ul>
<li>新标签页打开网站中第三方链接</li>
</ul>


<p>Octopress博客中，默认是在当前界面中打开第三方链接，这导致网站浏览者跳到第三方链接后很难回来。</p>

<p>将以下代码加入<code>source/_includes/custom/head.html</code>文件中：</p>

<p>```</p>

<blockquote><p><script type="text/javascript">
function addBlankTargetForLinks () {
  $(&lsquo;a[href^=&ldquo;http&rdquo;]&rsquo;).each(function(){</p>

<pre><code>  $(this).attr('target', '_blank');
</code></pre>

<p>  });
}</p>

<p>$(document).bind(&lsquo;DOMNodeInserted&rsquo;, function(event) {
 addBlankTargetForLinks();
});
</script>
<code>``
记得把左侧的</code>>`符号都去掉。</p></blockquote>

<p>不过本站的链接还是会在当前界面中打开。</p>

<h2>参考文章</h2>

<ul>
<li><p><a href="http://blog.csdn.net/lcliliil/article/details/13727927">SEO统计</a></p></li>
<li><p><a href="http://codemacro.com/2012/07/18/add-category-list-to-octopress/">增加category列表</a></p></li>
<li><p><a href="http://octopress.org/docs/theme/template/">Theming &amp; Customization</a></p></li>
<li><p><a href="http://asaf.github.io/blog/2013/07/08/blogging-with-octopress-add-about-page/">Add About Page</a></p></li>
<li><p><a href="http://www.blogjava.net/lishunli/archive/2013/01/20/394478.html">新标签页打开第三方链接</a></p></li>
<li><p><a href="http://blog.csdn.net/lcliliil/article/details/13725895">增加新浪微博秀</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让你的Octopress博客在多台Mac上同时使用]]></title>
    <link href="http://wangzz.github.io/blog/2014/04/02/ru-he-pei-zhi-rang-ni-de-octopressbo-ke-zai-duo-tai-macshang-tong-shi-shi-yong/"/>
    <updated>2014-04-02T14:28:35+08:00</updated>
    <id>http://wangzz.github.io/blog/2014/04/02/ru-he-pei-zhi-rang-ni-de-octopressbo-ke-zai-duo-tai-macshang-tong-shi-shi-yong</id>
    <content type="html"><![CDATA[<p>前阵子在公司电脑上配置好了Octopress博客，但是想在家里的Mac上使用，开始以为简单的将仓库clone就可以了，不幸的是我想的太简单。后来在网上看到了前面列出的第一篇文章，终于解决问题。</p>

<h2>一、Octopress目录结构</h2>

<p>Octopress的仓库目录下有两个branch，<code>source</code>和<code>master</code>。</p>

<ol>
<li><p><code>source</code>分支下保存Octopress的源代码，我们需要用他们生成博客，该分支保存在Octopress本地仓库的根目录下；</p></li>
<li><p><code>master</code>分支下保存生成的博客内容，该分支在Octopress本地仓库的根目录下一个叫<code>_deploy</code>得文件夹中。该文件夹是以下划线开头的，会在执行<code>git push origin source</code>命令时被忽略，这也是为什么一个目录中能同时存在两个不同分支的文件夹的原因。</p></li>
</ol>


<!-- more -->


<h2>二、在本地重建Octopress仓库</h2>

<p>需要执行以下命令：</p>

<ol>
<li>clone <code>source</code>分支</li>
</ol>


<p><code>
$ git clone -b source git@github.com:username/username.github.com.git octopress
</code>
别忘了<code>username</code>替换成你自己github用户名。
另外还要注意的是，clone的地址不能是<code>http</code>而必须得是<code>ssh</code>的。</p>

<p>如果执行时提示以下错误：</p>

<p>```
Cloning into &lsquo;octopress&rsquo;&hellip;
The authenticity of host &lsquo;github.com (192.30.252.131)&rsquo; can&rsquo;t be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &lsquo;github.com,192.30.252.131&rsquo; (RSA) to the list of known hosts.
Permission denied (publickey).
fatal: Could not read from remote repository.</p>

<p>Please make sure you have the correct access rights
and the repository exists.</p>

<p>```</p>

<p>说明你的电脑不被github信任，需要在你电脑上创建<code>ssh key</code>并添加到github中。</p>

<p>这是你需要执行2；
如果没出现上述错误，直接执行3。</p>

<p>2.创建并添加ssh key</p>

<p>2.1 创建ssh key</p>

<p>2.1.1 生成key</p>

<p>执行命令：</p>

<p><code>
$ ssh-keygen -t rsa -C "your_email@example.com"
</code></p>

<p>会提示：</p>

<p><code>
Generating public/private rsa key pair.
Enter file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]
</code></p>

<p>这时候按回车键(Enter)继续：</p>

<p>```
Enter passphrase (empty for no passphrase): [Type a passphrase]</p>

<h1>Enter same passphrase again: [Type passphrase again]</h1>

<p>```</p>

<p>会要求你输入一个密码，4位以上，要记住，后面有用。</p>

<p>接下来会提示：</p>

<p>```
Your identification has been saved in /Users/you/.ssh/id_rsa.</p>

<h1>Your public key has been saved in /Users/you/.ssh/id_rsa.pub.</h1>

<h1>The key fingerprint is:</h1>

<h1>01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db <a href="&#109;&#97;&#105;&#108;&#116;&#x6f;&#x3a;&#x79;&#111;&#117;&#114;&#95;&#x65;&#x6d;&#97;&#105;&#108;&#x40;&#x65;&#x78;&#x61;&#109;&#x70;&#x6c;&#101;&#46;&#99;&#111;&#109;">&#x79;&#111;&#x75;&#x72;&#95;&#x65;&#109;&#97;&#x69;&#x6c;&#64;&#x65;&#x78;&#97;&#109;&#112;&#108;&#x65;&#46;&#99;&#111;&#x6d;</a></h1>

<p>```</p>

<p>到这里就说明key已经创建成功了。</p>

<p>2.1.2 把生成的key添加到<code>ssh-agent</code>中
最后需要执行以下命令：</p>

<p><code>
$ ssh-add ~/.ssh/id_rsa
</code></p>

<p>2.2 把生成的key添加到github</p>

<p>2.2.1 copy key内容</p>

<p>先执行下面的命令：</p>

<p><code>
pbcopy &lt; ~/.ssh/id_rsa.pub
</code>
该命令将key中的内容copy到粘贴板中，以便后面使用。当然你也可以用自己的方式copy。</p>

<p>2.2.2 找到添加key的地方</p>

<p>先点击<a href="https://github.com/settings">Account Settings</a>：</p>

<p><img src="https://github-images.s3.amazonaws.com/help/settings/userbar-account-settings.png" alt="账户设置" /></p>

<p>进入设置界面后，点击界面左侧的<a href="https://github.com/settings/ssh">SSH KEYS</a>:</p>

<p><img src="https://github-images.s3.amazonaws.com/help/settings/settings-sidebar-ssh-keys.png" alt="ssh keys" /></p>

<p>点击<code>Add SSH key</code>按钮：</p>

<p><img src="https://github-images.s3.amazonaws.com/help/settings/ssh-add-ssh-key.png" alt="add ssh key" /></p>

<p>点击<code>Add key</code>按钮：</p>

<p><img src="https://github-images.s3.amazonaws.com/help/settings/ssh-add-key.png" alt="add key" /></p>

<p>在输入框内粘贴刚才copy的key，点击确定即可。</p>

<p>2.3 验证key可用性</p>

<p>通过ssh github验证key是否可用：</p>

<p><code>
$ ssh -T git@github.com
</code></p>

<p>命令执行后会输出：</p>

<p><code>
The authenticity of host 'github.com (207.97.227.239)' can't be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
Are you sure you want to continue connecting (yes/no)?
</code></p>

<p>输入<code>yes</code>如果打印以下内容，就说明OK了：</p>

<p><code>
Hi username! You've successfully authenticated, but GitHub does not
</code></p>

<p> 3.clone master分支</p>

<p>下面需要将master分支clone到<code>_deploy</code>目录：</p>

<p><code>
$ cd octopress
$ git clone git@github.com:username/username.github.com.git _deploy
</code></p>

<p> 4.配置环境</p>

<p>执行以下命令配置环境：</p>

<p><code>
$ gem install bundler
$ rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
$ bundle install
$ rake setup_github_pages
</code></p>

<p>执行最后一条命令时需要你输入github中博客仓库地址：</p>

<p><code>
Enter the read/write url for your repository
(For example, 'git@github.com:your_username/your_username.github.com)
</code>
到此所有的工作都完成了，你就可以享受在两台电脑上使用Octopress了！</p>

<h2>三、Tips</h2>

<ol>
<li>及时提交本地修改</li>
</ol>


<p>在每处配置了Octopress的地方，做了任何修改都要提交，否则另一个地方做了修改，本地更新的时候肯定会冲突。</p>

<p>每次在本地做完修改以后，都要及时提交，分别执行以下命令：</p>

<p><code>
$ rake generate
$ rake deploy             # update the remote master branch
</code></p>

<p>第一条命令会使用本地的修改生成最新的blog网站，并且生成的blog会存放到<code>Octopress</code>根目录下的<code>public/</code>目录下；</p>

<p>第二条命令主要做了两件事：</p>

<p>*用<code>generate</code>命令生成在<code>public/</code>目录下的内容覆盖<code>_deploy/</code>目录下内容；</p>

<p>*将<code>_deploy/</code>目录下的修改<code>add</code> 、 <code>commit</code>到git，并<code>push</code>到git的<code>master</code>分支。</p>

<p>别以为这就结束了，你还得把source分支中做的修改提交的git仓库中，执行以下命令：</p>

<p><code>
$ git add .
$ git commit -am "Some comment here."
$ git push origin source  # update the remote source branch
</code>
执行完这两步后，稍过一会就能看到自己blog中的更新啦！</p>

<p> 2.修改前先更新到最新版本</p>

<p>为了以防万一，在本地做任何修改前都要先做更新，可以执行以下命令分别更新<code>source</code>和<code>master</code>分支：</p>

<p><code>
$ cd octopress
$ git pull origin source  # update the local source branch
$ cd ./_deploy
$ git pull origin master  # update the local master branch
</code></p>

<h2>四、参考文档</h2>

<p>本文参考了以下两篇文章：</p>

<ol>
<li><p><a href="http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/"><strong>Clone Your Octopress to Blog From Two Places</strong></a></p></li>
<li><p><a href="https://help.github.com/articles/generating-ssh-keys"><strong>Generating SSH Keys</strong></a></p></li>
</ol>

]]></content>
  </entry>
  
</feed>
